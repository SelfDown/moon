// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameBackendEventExe = "backend_event_exe"

// BackendEventExe mapped from table <backend_event_exe>
type BackendEventExe struct {
	EventExeID     string     `gorm:"column:event_exe_id;primaryKey" json:"event_exe_id"`                 // ID
	EventExeCode   *string    `gorm:"column:event_exe_code" json:"event_exe_code"`                        // 业务代码
	Project        *string    `gorm:"column:project" json:"project"`                                      // 限定项目
	Params         *string    `gorm:"column:params" json:"params"`                                        // 请求参数，json串
	Status         *string    `gorm:"column:status" json:"status"`                                        // 状态 1、新增  2、正在执行 3、结束
	AddTime        *time.Time `gorm:"column:add_time;not null;default:CURRENT_TIMESTAMP" json:"add_time"` // 添加时间
	StartExeTime   time.Time  `gorm:"column:start_exe_time;not null" json:"start_exe_time"`               // 开始时间
	EndExeTime     time.Time  `gorm:"column:end_exe_time;not null" json:"end_exe_time"`                   // 结束时间
	ProxyURL       *string    `gorm:"column:proxy_url" json:"proxy_url"`                                  // 将待执行的数据以json数据post到代理地址
	Result         *string    `gorm:"column:result" json:"result"`
	IsAddQueue     *string    `gorm:"column:is_add_queue" json:"is_add_queue"` // 0、未添加到队列  1、已经添加
	Note           *string    `gorm:"column:note" json:"note"`
	LimitStartTime time.Time  `gorm:"column:limit_start_time;not null" json:"limit_start_time"` // 限定开始时间不早于
}

// TableName BackendEventExe's table name
func (*BackendEventExe) TableName() string {
	return TableNameBackendEventExe
}

func (*BackendEventExe) PrimaryKey() []string {
	return []string{"event_exe_id"}
}