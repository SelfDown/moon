// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameDbscriptReq = "dbscript_req"

// DbscriptReq mapped from table <dbscript_req>
type DbscriptReq struct {
	DbscriptEventID string     `gorm:"column:dbscript_event_id;not null" json:"dbscript_event_id"` // -1、逻辑删除、0、已申请 1、已审核 3、已归档 4、已实施
	DbscriptName    *string    `gorm:"column:dbscript_name" json:"dbscript_name"`                  // 脚本概述
	OpUser          *string    `gorm:"column:op_user" json:"op_user"`                              // 申请人
	OpTime          *time.Time `gorm:"column:op_time" json:"op_time"`
	TestUser        *string    `gorm:"column:test_user" json:"test_user"` // 测试负责人
	CheckUser       *string    `gorm:"column:check_user" json:"check_user"`
	CheckTime       *time.Time `gorm:"column:check_time" json:"check_time"`
	DbscriptVersion *string    `gorm:"column:dbscript_version" json:"dbscript_version"`   // 脚本版本
	PrepareExecTime *time.Time `gorm:"column:prepare_exec_time" json:"prepare_exec_time"` // 预发布时间
	/*
		申请状态
		0、已申请
		1、审核通过
		3、审核不通过
		2、已归档
	*/
	ReqStatu       *int32     `gorm:"column:req_statu" json:"req_statu"`
	ArchiveUser    *string    `gorm:"column:archive_user" json:"archive_user"` // 归档用户
	ArchiveTime    *time.Time `gorm:"column:archive_time" json:"archive_time"` // 归档时间
	RelIssueKey    *string    `gorm:"column:rel_issue_key" json:"rel_issue_key"`
	RelIssueTitle  *string    `gorm:"column:rel_issue_title" json:"rel_issue_title"`
	FlagDel        *string    `gorm:"column:flag_del" json:"flag_del"`
	Note           *string    `gorm:"column:note" json:"note"`
	RelSqlFilePath *string    `gorm:"column:rel_sql_file_path" json:"rel_sql_file_path"` // 关联的SQL文件的相对位置用于脚本与文件的关联
	IsCommonSql    *string    `gorm:"column:is_common_sql" json:"is_common_sql"`         // 是否属于产品级脚本归档 0 否 1 是
	RunProductUser *string    `gorm:"column:run_product_user" json:"run_product_user"`   // 脚本负责人,脚本执行人
	RunProductTime *time.Time `gorm:"column:run_product_time" json:"run_product_time"`
	DelUser        *string    `gorm:"column:del_user" json:"del_user"`
	DelTime        *time.Time `gorm:"column:del_time" json:"del_time"`
	IsRollbacked   *int32     `gorm:"column:is_rollbacked" json:"is_rollbacked"`
	RollbackSql    *string    `gorm:"column:rollback_sql" json:"rollback_sql"`
	RolbackTime    *time.Time `gorm:"column:rolback_time" json:"rolback_time"`
	RolbackUser    *string    `gorm:"column:rolback_user" json:"rolback_user"`
	ReqSql         *string    `gorm:"column:req_sql" json:"req_sql"`                    // 保存富文本框的文本
	ReqSqlHTML     string     `gorm:"column:req_sql_html;not null" json:"req_sql_html"` // 保存富文本框的html
	Ids            int32      `gorm:"column:ids;primaryKey;autoIncrement:true" json:"ids"`
	HisModule      *string    `gorm:"column:his_module" json:"his_module"`                                      // HIS模块分组,如:EMR\BMS\DMS\PDS
	ProTeamID      *string    `gorm:"column:pro_team_id" json:"pro_team_id"`                                    // 与sys_project_team.sys_project_team_id关联
	OnlineVersion  *string    `gorm:"column:online_version" json:"online_version"`                              // 线上真实应用版本号
	ImportUser     *string    `gorm:"column:import_user" json:"import_user"`                                    // 脚本从外界导入的时候操作用户
	CreateTime     *time.Time `gorm:"column:create_time;not null;default:CURRENT_TIMESTAMP" json:"create_time"` // 记录创建时间（数据库自动写入）
	ModifyTime     *time.Time `gorm:"column:modify_time;not null;default:CURRENT_TIMESTAMP" json:"modify_time"` // 记录修改时间（数据库自动写入）
	Comments       *string    `gorm:"column:comments" json:"comments"`                                          // 备注说明
	IsBacksql      *string    `gorm:"column:is_backsql" json:"is_backsql"`
}

// TableName DbscriptReq's table name
func (*DbscriptReq) TableName() string {
	return TableNameDbscriptReq
}

func (*DbscriptReq) PrimaryKey() []string {
	return []string{"ids"}
}