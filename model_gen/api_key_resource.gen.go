// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAPIKeyResource(db *gorm.DB, opts ...gen.DOOption) aPIKeyResource {
	_aPIKeyResource := aPIKeyResource{}

	_aPIKeyResource.aPIKeyResourceDo.UseDB(db, opts...)
	_aPIKeyResource.aPIKeyResourceDo.UseModel(&model.APIKeyResource{})

	tableName := _aPIKeyResource.aPIKeyResourceDo.TableName()
	_aPIKeyResource.ALL = field.NewAsterisk(tableName)
	_aPIKeyResource.ID = field.NewInt64(tableName, "id")
	_aPIKeyResource.ResourceID = field.NewString(tableName, "resource_id")
	_aPIKeyResource.ResourceTypeID = field.NewString(tableName, "resource_type_id")
	_aPIKeyResource.APIKeyID = field.NewInt32(tableName, "api_key_id")
	_aPIKeyResource.ResourceBlacklist = field.NewString(tableName, "resource_blacklist")
	_aPIKeyResource.OpUserid = field.NewString(tableName, "op_userid")
	_aPIKeyResource.CreateTime = field.NewTime(tableName, "create_time")
	_aPIKeyResource.ModifyTime = field.NewTime(tableName, "modify_time")
	_aPIKeyResource.Comments = field.NewString(tableName, "comments")

	_aPIKeyResource.fillFieldMap()

	return _aPIKeyResource
}

type aPIKeyResource struct {
	aPIKeyResourceDo

	ALL               field.Asterisk
	ID                field.Int64
	ResourceID        field.String
	ResourceTypeID    field.String // 资源类型 关联码表 sys_code_type=resource_type
	APIKeyID          field.Int32
	ResourceBlacklist field.String // whitelist为白名单 blacklist为黑名单，应该对应sys_code _type=resource_blacklist
	OpUserid          field.String // 操作用户id
	CreateTime        field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime        field.Time   // 记录修改时间（数据库自动写入）
	Comments          field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a aPIKeyResource) Table(newTableName string) *aPIKeyResource {
	a.aPIKeyResourceDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIKeyResource) As(alias string) *aPIKeyResource {
	a.aPIKeyResourceDo.DO = *(a.aPIKeyResourceDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIKeyResource) updateTableName(table string) *aPIKeyResource {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ResourceID = field.NewString(table, "resource_id")
	a.ResourceTypeID = field.NewString(table, "resource_type_id")
	a.APIKeyID = field.NewInt32(table, "api_key_id")
	a.ResourceBlacklist = field.NewString(table, "resource_blacklist")
	a.OpUserid = field.NewString(table, "op_userid")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *aPIKeyResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIKeyResource) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["resource_id"] = a.ResourceID
	a.fieldMap["resource_type_id"] = a.ResourceTypeID
	a.fieldMap["api_key_id"] = a.APIKeyID
	a.fieldMap["resource_blacklist"] = a.ResourceBlacklist
	a.fieldMap["op_userid"] = a.OpUserid
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a aPIKeyResource) clone(db *gorm.DB) aPIKeyResource {
	a.aPIKeyResourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIKeyResource) replaceDB(db *gorm.DB) aPIKeyResource {
	a.aPIKeyResourceDo.ReplaceDB(db)
	return a
}

type aPIKeyResourceDo struct{ gen.DO }

type IAPIKeyResourceDo interface {
	gen.SubQuery
	Debug() IAPIKeyResourceDo
	WithContext(ctx context.Context) IAPIKeyResourceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIKeyResourceDo
	WriteDB() IAPIKeyResourceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIKeyResourceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIKeyResourceDo
	Not(conds ...gen.Condition) IAPIKeyResourceDo
	Or(conds ...gen.Condition) IAPIKeyResourceDo
	Select(conds ...field.Expr) IAPIKeyResourceDo
	Where(conds ...gen.Condition) IAPIKeyResourceDo
	Order(conds ...field.Expr) IAPIKeyResourceDo
	Distinct(cols ...field.Expr) IAPIKeyResourceDo
	Omit(cols ...field.Expr) IAPIKeyResourceDo
	Join(table schema.Tabler, on ...field.Expr) IAPIKeyResourceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceDo
	Group(cols ...field.Expr) IAPIKeyResourceDo
	Having(conds ...gen.Condition) IAPIKeyResourceDo
	Limit(limit int) IAPIKeyResourceDo
	Offset(offset int) IAPIKeyResourceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyResourceDo
	Unscoped() IAPIKeyResourceDo
	Create(values ...*model.APIKeyResource) error
	CreateInBatches(values []*model.APIKeyResource, batchSize int) error
	Save(values ...*model.APIKeyResource) error
	First() (*model.APIKeyResource, error)
	Take() (*model.APIKeyResource, error)
	Last() (*model.APIKeyResource, error)
	Find() ([]*model.APIKeyResource, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIKeyResource, err error)
	FindInBatches(result *[]*model.APIKeyResource, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIKeyResource) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIKeyResourceDo
	Assign(attrs ...field.AssignExpr) IAPIKeyResourceDo
	Joins(fields ...field.RelationField) IAPIKeyResourceDo
	Preload(fields ...field.RelationField) IAPIKeyResourceDo
	FirstOrInit() (*model.APIKeyResource, error)
	FirstOrCreate() (*model.APIKeyResource, error)
	FindByPage(offset int, limit int) (result []*model.APIKeyResource, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIKeyResourceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIKeyResourceDo) Debug() IAPIKeyResourceDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIKeyResourceDo) WithContext(ctx context.Context) IAPIKeyResourceDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIKeyResourceDo) ReadDB() IAPIKeyResourceDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIKeyResourceDo) WriteDB() IAPIKeyResourceDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIKeyResourceDo) Session(config *gorm.Session) IAPIKeyResourceDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIKeyResourceDo) Clauses(conds ...clause.Expression) IAPIKeyResourceDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIKeyResourceDo) Returning(value interface{}, columns ...string) IAPIKeyResourceDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIKeyResourceDo) Not(conds ...gen.Condition) IAPIKeyResourceDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIKeyResourceDo) Or(conds ...gen.Condition) IAPIKeyResourceDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIKeyResourceDo) Select(conds ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIKeyResourceDo) Where(conds ...gen.Condition) IAPIKeyResourceDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIKeyResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAPIKeyResourceDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a aPIKeyResourceDo) Order(conds ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIKeyResourceDo) Distinct(cols ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIKeyResourceDo) Omit(cols ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIKeyResourceDo) Join(table schema.Tabler, on ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIKeyResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIKeyResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIKeyResourceDo) Group(cols ...field.Expr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIKeyResourceDo) Having(conds ...gen.Condition) IAPIKeyResourceDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIKeyResourceDo) Limit(limit int) IAPIKeyResourceDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIKeyResourceDo) Offset(offset int) IAPIKeyResourceDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIKeyResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyResourceDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIKeyResourceDo) Unscoped() IAPIKeyResourceDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIKeyResourceDo) Create(values ...*model.APIKeyResource) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIKeyResourceDo) CreateInBatches(values []*model.APIKeyResource, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIKeyResourceDo) Save(values ...*model.APIKeyResource) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIKeyResourceDo) First() (*model.APIKeyResource, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResource), nil
	}
}

func (a aPIKeyResourceDo) Take() (*model.APIKeyResource, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResource), nil
	}
}

func (a aPIKeyResourceDo) Last() (*model.APIKeyResource, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResource), nil
	}
}

func (a aPIKeyResourceDo) Find() ([]*model.APIKeyResource, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIKeyResource), err
}

func (a aPIKeyResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIKeyResource, err error) {
	buf := make([]*model.APIKeyResource, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIKeyResourceDo) FindInBatches(result *[]*model.APIKeyResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIKeyResourceDo) Attrs(attrs ...field.AssignExpr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIKeyResourceDo) Assign(attrs ...field.AssignExpr) IAPIKeyResourceDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIKeyResourceDo) Joins(fields ...field.RelationField) IAPIKeyResourceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIKeyResourceDo) Preload(fields ...field.RelationField) IAPIKeyResourceDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIKeyResourceDo) FirstOrInit() (*model.APIKeyResource, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResource), nil
	}
}

func (a aPIKeyResourceDo) FirstOrCreate() (*model.APIKeyResource, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResource), nil
	}
}

func (a aPIKeyResourceDo) FindByPage(offset int, limit int) (result []*model.APIKeyResource, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIKeyResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIKeyResourceDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIKeyResourceDo) Delete(models ...*model.APIKeyResource) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIKeyResourceDo) withDO(do gen.Dao) *aPIKeyResourceDo {
	a.DO = *do.(*gen.DO)
	return a
}
