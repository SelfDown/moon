// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAPIKeyResourcePrivilege(db *gorm.DB, opts ...gen.DOOption) aPIKeyResourcePrivilege {
	_aPIKeyResourcePrivilege := aPIKeyResourcePrivilege{}

	_aPIKeyResourcePrivilege.aPIKeyResourcePrivilegeDo.UseDB(db, opts...)
	_aPIKeyResourcePrivilege.aPIKeyResourcePrivilegeDo.UseModel(&model.APIKeyResourcePrivilege{})

	tableName := _aPIKeyResourcePrivilege.aPIKeyResourcePrivilegeDo.TableName()
	_aPIKeyResourcePrivilege.ALL = field.NewAsterisk(tableName)
	_aPIKeyResourcePrivilege.ID = field.NewInt32(tableName, "id")
	_aPIKeyResourcePrivilege.APIKeyResourceTypeID = field.NewInt32(tableName, "api_key_resource_type_id")
	_aPIKeyResourcePrivilege.RoleID = field.NewString(tableName, "role_id")
	_aPIKeyResourcePrivilege.PrivilegeField = field.NewString(tableName, "privilege_field")
	_aPIKeyResourcePrivilege.CreateTime = field.NewTime(tableName, "create_time")
	_aPIKeyResourcePrivilege.ModifyTime = field.NewTime(tableName, "modify_time")
	_aPIKeyResourcePrivilege.Comments = field.NewString(tableName, "comments")

	_aPIKeyResourcePrivilege.fillFieldMap()

	return _aPIKeyResourcePrivilege
}

type aPIKeyResourcePrivilege struct {
	aPIKeyResourcePrivilegeDo

	ALL                  field.Asterisk
	ID                   field.Int32
	APIKeyResourceTypeID field.Int32  // 对应api_key_resource _type 的id
	RoleID               field.String // 附属角色id
	PrivilegeField       field.String // 特权字段，用"|"分隔
	CreateTime           field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime           field.Time   // 记录修改时间（数据库自动写入）
	Comments             field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a aPIKeyResourcePrivilege) Table(newTableName string) *aPIKeyResourcePrivilege {
	a.aPIKeyResourcePrivilegeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIKeyResourcePrivilege) As(alias string) *aPIKeyResourcePrivilege {
	a.aPIKeyResourcePrivilegeDo.DO = *(a.aPIKeyResourcePrivilegeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIKeyResourcePrivilege) updateTableName(table string) *aPIKeyResourcePrivilege {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.APIKeyResourceTypeID = field.NewInt32(table, "api_key_resource_type_id")
	a.RoleID = field.NewString(table, "role_id")
	a.PrivilegeField = field.NewString(table, "privilege_field")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *aPIKeyResourcePrivilege) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIKeyResourcePrivilege) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["api_key_resource_type_id"] = a.APIKeyResourceTypeID
	a.fieldMap["role_id"] = a.RoleID
	a.fieldMap["privilege_field"] = a.PrivilegeField
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a aPIKeyResourcePrivilege) clone(db *gorm.DB) aPIKeyResourcePrivilege {
	a.aPIKeyResourcePrivilegeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIKeyResourcePrivilege) replaceDB(db *gorm.DB) aPIKeyResourcePrivilege {
	a.aPIKeyResourcePrivilegeDo.ReplaceDB(db)
	return a
}

type aPIKeyResourcePrivilegeDo struct{ gen.DO }

type IAPIKeyResourcePrivilegeDo interface {
	gen.SubQuery
	Debug() IAPIKeyResourcePrivilegeDo
	WithContext(ctx context.Context) IAPIKeyResourcePrivilegeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIKeyResourcePrivilegeDo
	WriteDB() IAPIKeyResourcePrivilegeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIKeyResourcePrivilegeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIKeyResourcePrivilegeDo
	Not(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo
	Or(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo
	Select(conds ...field.Expr) IAPIKeyResourcePrivilegeDo
	Where(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo
	Order(conds ...field.Expr) IAPIKeyResourcePrivilegeDo
	Distinct(cols ...field.Expr) IAPIKeyResourcePrivilegeDo
	Omit(cols ...field.Expr) IAPIKeyResourcePrivilegeDo
	Join(table schema.Tabler, on ...field.Expr) IAPIKeyResourcePrivilegeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourcePrivilegeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourcePrivilegeDo
	Group(cols ...field.Expr) IAPIKeyResourcePrivilegeDo
	Having(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo
	Limit(limit int) IAPIKeyResourcePrivilegeDo
	Offset(offset int) IAPIKeyResourcePrivilegeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyResourcePrivilegeDo
	Unscoped() IAPIKeyResourcePrivilegeDo
	Create(values ...*model.APIKeyResourcePrivilege) error
	CreateInBatches(values []*model.APIKeyResourcePrivilege, batchSize int) error
	Save(values ...*model.APIKeyResourcePrivilege) error
	First() (*model.APIKeyResourcePrivilege, error)
	Take() (*model.APIKeyResourcePrivilege, error)
	Last() (*model.APIKeyResourcePrivilege, error)
	Find() ([]*model.APIKeyResourcePrivilege, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIKeyResourcePrivilege, err error)
	FindInBatches(result *[]*model.APIKeyResourcePrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIKeyResourcePrivilege) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIKeyResourcePrivilegeDo
	Assign(attrs ...field.AssignExpr) IAPIKeyResourcePrivilegeDo
	Joins(fields ...field.RelationField) IAPIKeyResourcePrivilegeDo
	Preload(fields ...field.RelationField) IAPIKeyResourcePrivilegeDo
	FirstOrInit() (*model.APIKeyResourcePrivilege, error)
	FirstOrCreate() (*model.APIKeyResourcePrivilege, error)
	FindByPage(offset int, limit int) (result []*model.APIKeyResourcePrivilege, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIKeyResourcePrivilegeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIKeyResourcePrivilegeDo) Debug() IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIKeyResourcePrivilegeDo) WithContext(ctx context.Context) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIKeyResourcePrivilegeDo) ReadDB() IAPIKeyResourcePrivilegeDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIKeyResourcePrivilegeDo) WriteDB() IAPIKeyResourcePrivilegeDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIKeyResourcePrivilegeDo) Session(config *gorm.Session) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIKeyResourcePrivilegeDo) Clauses(conds ...clause.Expression) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Returning(value interface{}, columns ...string) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIKeyResourcePrivilegeDo) Not(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Or(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Select(conds ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Where(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAPIKeyResourcePrivilegeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a aPIKeyResourcePrivilegeDo) Order(conds ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Distinct(cols ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIKeyResourcePrivilegeDo) Omit(cols ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIKeyResourcePrivilegeDo) Join(table schema.Tabler, on ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIKeyResourcePrivilegeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIKeyResourcePrivilegeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIKeyResourcePrivilegeDo) Group(cols ...field.Expr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIKeyResourcePrivilegeDo) Having(conds ...gen.Condition) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIKeyResourcePrivilegeDo) Limit(limit int) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIKeyResourcePrivilegeDo) Offset(offset int) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIKeyResourcePrivilegeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIKeyResourcePrivilegeDo) Unscoped() IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIKeyResourcePrivilegeDo) Create(values ...*model.APIKeyResourcePrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIKeyResourcePrivilegeDo) CreateInBatches(values []*model.APIKeyResourcePrivilege, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIKeyResourcePrivilegeDo) Save(values ...*model.APIKeyResourcePrivilege) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIKeyResourcePrivilegeDo) First() (*model.APIKeyResourcePrivilege, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourcePrivilege), nil
	}
}

func (a aPIKeyResourcePrivilegeDo) Take() (*model.APIKeyResourcePrivilege, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourcePrivilege), nil
	}
}

func (a aPIKeyResourcePrivilegeDo) Last() (*model.APIKeyResourcePrivilege, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourcePrivilege), nil
	}
}

func (a aPIKeyResourcePrivilegeDo) Find() ([]*model.APIKeyResourcePrivilege, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIKeyResourcePrivilege), err
}

func (a aPIKeyResourcePrivilegeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIKeyResourcePrivilege, err error) {
	buf := make([]*model.APIKeyResourcePrivilege, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIKeyResourcePrivilegeDo) FindInBatches(result *[]*model.APIKeyResourcePrivilege, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIKeyResourcePrivilegeDo) Attrs(attrs ...field.AssignExpr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIKeyResourcePrivilegeDo) Assign(attrs ...field.AssignExpr) IAPIKeyResourcePrivilegeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIKeyResourcePrivilegeDo) Joins(fields ...field.RelationField) IAPIKeyResourcePrivilegeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIKeyResourcePrivilegeDo) Preload(fields ...field.RelationField) IAPIKeyResourcePrivilegeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIKeyResourcePrivilegeDo) FirstOrInit() (*model.APIKeyResourcePrivilege, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourcePrivilege), nil
	}
}

func (a aPIKeyResourcePrivilegeDo) FirstOrCreate() (*model.APIKeyResourcePrivilege, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourcePrivilege), nil
	}
}

func (a aPIKeyResourcePrivilegeDo) FindByPage(offset int, limit int) (result []*model.APIKeyResourcePrivilege, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIKeyResourcePrivilegeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIKeyResourcePrivilegeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIKeyResourcePrivilegeDo) Delete(models ...*model.APIKeyResourcePrivilege) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIKeyResourcePrivilegeDo) withDO(do gen.Dao) *aPIKeyResourcePrivilegeDo {
	a.DO = *do.(*gen.DO)
	return a
}
