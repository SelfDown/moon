// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAPIKeyResourceType(db *gorm.DB, opts ...gen.DOOption) aPIKeyResourceType {
	_aPIKeyResourceType := aPIKeyResourceType{}

	_aPIKeyResourceType.aPIKeyResourceTypeDo.UseDB(db, opts...)
	_aPIKeyResourceType.aPIKeyResourceTypeDo.UseModel(&model.APIKeyResourceType{})

	tableName := _aPIKeyResourceType.aPIKeyResourceTypeDo.TableName()
	_aPIKeyResourceType.ALL = field.NewAsterisk(tableName)
	_aPIKeyResourceType.ID = field.NewInt32(tableName, "id")
	_aPIKeyResourceType.ResourceType = field.NewString(tableName, "resource_type")
	_aPIKeyResourceType.ResourceDescribe = field.NewString(tableName, "resource_describe")
	_aPIKeyResourceType.ResourceTable = field.NewString(tableName, "resource_table")
	_aPIKeyResourceType.ResourcePrimaryKey = field.NewString(tableName, "resource_primary_key")
	_aPIKeyResourceType.CreateTime = field.NewTime(tableName, "create_time")
	_aPIKeyResourceType.ModifyTime = field.NewTime(tableName, "modify_time")
	_aPIKeyResourceType.Comments = field.NewString(tableName, "comments")

	_aPIKeyResourceType.fillFieldMap()

	return _aPIKeyResourceType
}

type aPIKeyResourceType struct {
	aPIKeyResourceTypeDo

	ALL                field.Asterisk
	ID                 field.Int32
	ResourceType       field.String // 资源类型，对应sys_code 的api_key 类型
	ResourceDescribe   field.String // 资源描述
	ResourceTable      field.String // 资源对应的表
	ResourcePrimaryKey field.String // 资源表对应的主键
	CreateTime         field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime         field.Time   // 记录修改时间（数据库自动写入）
	Comments           field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a aPIKeyResourceType) Table(newTableName string) *aPIKeyResourceType {
	a.aPIKeyResourceTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIKeyResourceType) As(alias string) *aPIKeyResourceType {
	a.aPIKeyResourceTypeDo.DO = *(a.aPIKeyResourceTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIKeyResourceType) updateTableName(table string) *aPIKeyResourceType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.ResourceType = field.NewString(table, "resource_type")
	a.ResourceDescribe = field.NewString(table, "resource_describe")
	a.ResourceTable = field.NewString(table, "resource_table")
	a.ResourcePrimaryKey = field.NewString(table, "resource_primary_key")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *aPIKeyResourceType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIKeyResourceType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["resource_type"] = a.ResourceType
	a.fieldMap["resource_describe"] = a.ResourceDescribe
	a.fieldMap["resource_table"] = a.ResourceTable
	a.fieldMap["resource_primary_key"] = a.ResourcePrimaryKey
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a aPIKeyResourceType) clone(db *gorm.DB) aPIKeyResourceType {
	a.aPIKeyResourceTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPIKeyResourceType) replaceDB(db *gorm.DB) aPIKeyResourceType {
	a.aPIKeyResourceTypeDo.ReplaceDB(db)
	return a
}

type aPIKeyResourceTypeDo struct{ gen.DO }

type IAPIKeyResourceTypeDo interface {
	gen.SubQuery
	Debug() IAPIKeyResourceTypeDo
	WithContext(ctx context.Context) IAPIKeyResourceTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIKeyResourceTypeDo
	WriteDB() IAPIKeyResourceTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIKeyResourceTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIKeyResourceTypeDo
	Not(conds ...gen.Condition) IAPIKeyResourceTypeDo
	Or(conds ...gen.Condition) IAPIKeyResourceTypeDo
	Select(conds ...field.Expr) IAPIKeyResourceTypeDo
	Where(conds ...gen.Condition) IAPIKeyResourceTypeDo
	Order(conds ...field.Expr) IAPIKeyResourceTypeDo
	Distinct(cols ...field.Expr) IAPIKeyResourceTypeDo
	Omit(cols ...field.Expr) IAPIKeyResourceTypeDo
	Join(table schema.Tabler, on ...field.Expr) IAPIKeyResourceTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceTypeDo
	Group(cols ...field.Expr) IAPIKeyResourceTypeDo
	Having(conds ...gen.Condition) IAPIKeyResourceTypeDo
	Limit(limit int) IAPIKeyResourceTypeDo
	Offset(offset int) IAPIKeyResourceTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyResourceTypeDo
	Unscoped() IAPIKeyResourceTypeDo
	Create(values ...*model.APIKeyResourceType) error
	CreateInBatches(values []*model.APIKeyResourceType, batchSize int) error
	Save(values ...*model.APIKeyResourceType) error
	First() (*model.APIKeyResourceType, error)
	Take() (*model.APIKeyResourceType, error)
	Last() (*model.APIKeyResourceType, error)
	Find() ([]*model.APIKeyResourceType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIKeyResourceType, err error)
	FindInBatches(result *[]*model.APIKeyResourceType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APIKeyResourceType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIKeyResourceTypeDo
	Assign(attrs ...field.AssignExpr) IAPIKeyResourceTypeDo
	Joins(fields ...field.RelationField) IAPIKeyResourceTypeDo
	Preload(fields ...field.RelationField) IAPIKeyResourceTypeDo
	FirstOrInit() (*model.APIKeyResourceType, error)
	FirstOrCreate() (*model.APIKeyResourceType, error)
	FindByPage(offset int, limit int) (result []*model.APIKeyResourceType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIKeyResourceTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIKeyResourceTypeDo) Debug() IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIKeyResourceTypeDo) WithContext(ctx context.Context) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIKeyResourceTypeDo) ReadDB() IAPIKeyResourceTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIKeyResourceTypeDo) WriteDB() IAPIKeyResourceTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIKeyResourceTypeDo) Session(config *gorm.Session) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIKeyResourceTypeDo) Clauses(conds ...clause.Expression) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIKeyResourceTypeDo) Returning(value interface{}, columns ...string) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIKeyResourceTypeDo) Not(conds ...gen.Condition) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIKeyResourceTypeDo) Or(conds ...gen.Condition) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIKeyResourceTypeDo) Select(conds ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIKeyResourceTypeDo) Where(conds ...gen.Condition) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIKeyResourceTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAPIKeyResourceTypeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a aPIKeyResourceTypeDo) Order(conds ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIKeyResourceTypeDo) Distinct(cols ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIKeyResourceTypeDo) Omit(cols ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIKeyResourceTypeDo) Join(table schema.Tabler, on ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIKeyResourceTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIKeyResourceTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIKeyResourceTypeDo) Group(cols ...field.Expr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIKeyResourceTypeDo) Having(conds ...gen.Condition) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIKeyResourceTypeDo) Limit(limit int) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIKeyResourceTypeDo) Offset(offset int) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIKeyResourceTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIKeyResourceTypeDo) Unscoped() IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIKeyResourceTypeDo) Create(values ...*model.APIKeyResourceType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIKeyResourceTypeDo) CreateInBatches(values []*model.APIKeyResourceType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIKeyResourceTypeDo) Save(values ...*model.APIKeyResourceType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIKeyResourceTypeDo) First() (*model.APIKeyResourceType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourceType), nil
	}
}

func (a aPIKeyResourceTypeDo) Take() (*model.APIKeyResourceType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourceType), nil
	}
}

func (a aPIKeyResourceTypeDo) Last() (*model.APIKeyResourceType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourceType), nil
	}
}

func (a aPIKeyResourceTypeDo) Find() ([]*model.APIKeyResourceType, error) {
	result, err := a.DO.Find()
	return result.([]*model.APIKeyResourceType), err
}

func (a aPIKeyResourceTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APIKeyResourceType, err error) {
	buf := make([]*model.APIKeyResourceType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIKeyResourceTypeDo) FindInBatches(result *[]*model.APIKeyResourceType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIKeyResourceTypeDo) Attrs(attrs ...field.AssignExpr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIKeyResourceTypeDo) Assign(attrs ...field.AssignExpr) IAPIKeyResourceTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIKeyResourceTypeDo) Joins(fields ...field.RelationField) IAPIKeyResourceTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIKeyResourceTypeDo) Preload(fields ...field.RelationField) IAPIKeyResourceTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIKeyResourceTypeDo) FirstOrInit() (*model.APIKeyResourceType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourceType), nil
	}
}

func (a aPIKeyResourceTypeDo) FirstOrCreate() (*model.APIKeyResourceType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APIKeyResourceType), nil
	}
}

func (a aPIKeyResourceTypeDo) FindByPage(offset int, limit int) (result []*model.APIKeyResourceType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIKeyResourceTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIKeyResourceTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIKeyResourceTypeDo) Delete(models ...*model.APIKeyResourceType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIKeyResourceTypeDo) withDO(do gen.Dao) *aPIKeyResourceTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
