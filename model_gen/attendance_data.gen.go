// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAttendanceData(db *gorm.DB, opts ...gen.DOOption) attendanceData {
	_attendanceData := attendanceData{}

	_attendanceData.attendanceDataDo.UseDB(db, opts...)
	_attendanceData.attendanceDataDo.UseModel(&model.AttendanceData{})

	tableName := _attendanceData.attendanceDataDo.TableName()
	_attendanceData.ALL = field.NewAsterisk(tableName)
	_attendanceData.AttendanceDataID = field.NewString(tableName, "attendance_data_id")
	_attendanceData.AttendanceDay = field.NewString(tableName, "attendance_day")
	_attendanceData.UserID = field.NewString(tableName, "user_id")
	_attendanceData.AttendanceType = field.NewString(tableName, "attendance_type")
	_attendanceData.AttendanceMorningType = field.NewString(tableName, "attendance_morning_type")
	_attendanceData.AttendanceMorningTime = field.NewString(tableName, "attendance_morning_time")
	_attendanceData.AttendanceMorningLocation = field.NewString(tableName, "attendance_morning_location")
	_attendanceData.AttendanceAfternoonType = field.NewString(tableName, "attendance_afternoon_type")
	_attendanceData.AttendanceAfternoonTime = field.NewString(tableName, "attendance_afternoon_time")
	_attendanceData.AttendanceAfternoonLocation = field.NewString(tableName, "attendance_afternoon_location")
	_attendanceData.DayErrorInfo = field.NewString(tableName, "day_error_info")
	_attendanceData.CreateTime = field.NewString(tableName, "create_time")

	_attendanceData.fillFieldMap()

	return _attendanceData
}

type attendanceData struct {
	attendanceDataDo

	ALL                         field.Asterisk
	AttendanceDataID            field.String
	AttendanceDay               field.String
	UserID                      field.String
	AttendanceType              field.String
	AttendanceMorningType       field.String
	AttendanceMorningTime       field.String
	AttendanceMorningLocation   field.String
	AttendanceAfternoonType     field.String
	AttendanceAfternoonTime     field.String
	AttendanceAfternoonLocation field.String
	DayErrorInfo                field.String
	CreateTime                  field.String

	fieldMap map[string]field.Expr
}

func (a attendanceData) Table(newTableName string) *attendanceData {
	a.attendanceDataDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attendanceData) As(alias string) *attendanceData {
	a.attendanceDataDo.DO = *(a.attendanceDataDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attendanceData) updateTableName(table string) *attendanceData {
	a.ALL = field.NewAsterisk(table)
	a.AttendanceDataID = field.NewString(table, "attendance_data_id")
	a.AttendanceDay = field.NewString(table, "attendance_day")
	a.UserID = field.NewString(table, "user_id")
	a.AttendanceType = field.NewString(table, "attendance_type")
	a.AttendanceMorningType = field.NewString(table, "attendance_morning_type")
	a.AttendanceMorningTime = field.NewString(table, "attendance_morning_time")
	a.AttendanceMorningLocation = field.NewString(table, "attendance_morning_location")
	a.AttendanceAfternoonType = field.NewString(table, "attendance_afternoon_type")
	a.AttendanceAfternoonTime = field.NewString(table, "attendance_afternoon_time")
	a.AttendanceAfternoonLocation = field.NewString(table, "attendance_afternoon_location")
	a.DayErrorInfo = field.NewString(table, "day_error_info")
	a.CreateTime = field.NewString(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *attendanceData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attendanceData) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["attendance_data_id"] = a.AttendanceDataID
	a.fieldMap["attendance_day"] = a.AttendanceDay
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["attendance_type"] = a.AttendanceType
	a.fieldMap["attendance_morning_type"] = a.AttendanceMorningType
	a.fieldMap["attendance_morning_time"] = a.AttendanceMorningTime
	a.fieldMap["attendance_morning_location"] = a.AttendanceMorningLocation
	a.fieldMap["attendance_afternoon_type"] = a.AttendanceAfternoonType
	a.fieldMap["attendance_afternoon_time"] = a.AttendanceAfternoonTime
	a.fieldMap["attendance_afternoon_location"] = a.AttendanceAfternoonLocation
	a.fieldMap["day_error_info"] = a.DayErrorInfo
	a.fieldMap["create_time"] = a.CreateTime
}

func (a attendanceData) clone(db *gorm.DB) attendanceData {
	a.attendanceDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attendanceData) replaceDB(db *gorm.DB) attendanceData {
	a.attendanceDataDo.ReplaceDB(db)
	return a
}

type attendanceDataDo struct{ gen.DO }

type IAttendanceDataDo interface {
	gen.SubQuery
	Debug() IAttendanceDataDo
	WithContext(ctx context.Context) IAttendanceDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttendanceDataDo
	WriteDB() IAttendanceDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttendanceDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttendanceDataDo
	Not(conds ...gen.Condition) IAttendanceDataDo
	Or(conds ...gen.Condition) IAttendanceDataDo
	Select(conds ...field.Expr) IAttendanceDataDo
	Where(conds ...gen.Condition) IAttendanceDataDo
	Order(conds ...field.Expr) IAttendanceDataDo
	Distinct(cols ...field.Expr) IAttendanceDataDo
	Omit(cols ...field.Expr) IAttendanceDataDo
	Join(table schema.Tabler, on ...field.Expr) IAttendanceDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceDataDo
	Group(cols ...field.Expr) IAttendanceDataDo
	Having(conds ...gen.Condition) IAttendanceDataDo
	Limit(limit int) IAttendanceDataDo
	Offset(offset int) IAttendanceDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceDataDo
	Unscoped() IAttendanceDataDo
	Create(values ...*model.AttendanceData) error
	CreateInBatches(values []*model.AttendanceData, batchSize int) error
	Save(values ...*model.AttendanceData) error
	First() (*model.AttendanceData, error)
	Take() (*model.AttendanceData, error)
	Last() (*model.AttendanceData, error)
	Find() ([]*model.AttendanceData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceData, err error)
	FindInBatches(result *[]*model.AttendanceData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AttendanceData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttendanceDataDo
	Assign(attrs ...field.AssignExpr) IAttendanceDataDo
	Joins(fields ...field.RelationField) IAttendanceDataDo
	Preload(fields ...field.RelationField) IAttendanceDataDo
	FirstOrInit() (*model.AttendanceData, error)
	FirstOrCreate() (*model.AttendanceData, error)
	FindByPage(offset int, limit int) (result []*model.AttendanceData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttendanceDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attendanceDataDo) Debug() IAttendanceDataDo {
	return a.withDO(a.DO.Debug())
}

func (a attendanceDataDo) WithContext(ctx context.Context) IAttendanceDataDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attendanceDataDo) ReadDB() IAttendanceDataDo {
	return a.Clauses(dbresolver.Read)
}

func (a attendanceDataDo) WriteDB() IAttendanceDataDo {
	return a.Clauses(dbresolver.Write)
}

func (a attendanceDataDo) Session(config *gorm.Session) IAttendanceDataDo {
	return a.withDO(a.DO.Session(config))
}

func (a attendanceDataDo) Clauses(conds ...clause.Expression) IAttendanceDataDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attendanceDataDo) Returning(value interface{}, columns ...string) IAttendanceDataDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attendanceDataDo) Not(conds ...gen.Condition) IAttendanceDataDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attendanceDataDo) Or(conds ...gen.Condition) IAttendanceDataDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attendanceDataDo) Select(conds ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attendanceDataDo) Where(conds ...gen.Condition) IAttendanceDataDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attendanceDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAttendanceDataDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a attendanceDataDo) Order(conds ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attendanceDataDo) Distinct(cols ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attendanceDataDo) Omit(cols ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attendanceDataDo) Join(table schema.Tabler, on ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attendanceDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attendanceDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attendanceDataDo) Group(cols ...field.Expr) IAttendanceDataDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attendanceDataDo) Having(conds ...gen.Condition) IAttendanceDataDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attendanceDataDo) Limit(limit int) IAttendanceDataDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attendanceDataDo) Offset(offset int) IAttendanceDataDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attendanceDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceDataDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attendanceDataDo) Unscoped() IAttendanceDataDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attendanceDataDo) Create(values ...*model.AttendanceData) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attendanceDataDo) CreateInBatches(values []*model.AttendanceData, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attendanceDataDo) Save(values ...*model.AttendanceData) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attendanceDataDo) First() (*model.AttendanceData, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceData), nil
	}
}

func (a attendanceDataDo) Take() (*model.AttendanceData, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceData), nil
	}
}

func (a attendanceDataDo) Last() (*model.AttendanceData, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceData), nil
	}
}

func (a attendanceDataDo) Find() ([]*model.AttendanceData, error) {
	result, err := a.DO.Find()
	return result.([]*model.AttendanceData), err
}

func (a attendanceDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceData, err error) {
	buf := make([]*model.AttendanceData, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attendanceDataDo) FindInBatches(result *[]*model.AttendanceData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attendanceDataDo) Attrs(attrs ...field.AssignExpr) IAttendanceDataDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attendanceDataDo) Assign(attrs ...field.AssignExpr) IAttendanceDataDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attendanceDataDo) Joins(fields ...field.RelationField) IAttendanceDataDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attendanceDataDo) Preload(fields ...field.RelationField) IAttendanceDataDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attendanceDataDo) FirstOrInit() (*model.AttendanceData, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceData), nil
	}
}

func (a attendanceDataDo) FirstOrCreate() (*model.AttendanceData, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceData), nil
	}
}

func (a attendanceDataDo) FindByPage(offset int, limit int) (result []*model.AttendanceData, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attendanceDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attendanceDataDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attendanceDataDo) Delete(models ...*model.AttendanceData) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attendanceDataDo) withDO(do gen.Dao) *attendanceDataDo {
	a.DO = *do.(*gen.DO)
	return a
}
