// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAttendanceRuleGroup(db *gorm.DB, opts ...gen.DOOption) attendanceRuleGroup {
	_attendanceRuleGroup := attendanceRuleGroup{}

	_attendanceRuleGroup.attendanceRuleGroupDo.UseDB(db, opts...)
	_attendanceRuleGroup.attendanceRuleGroupDo.UseModel(&model.AttendanceRuleGroup{})

	tableName := _attendanceRuleGroup.attendanceRuleGroupDo.TableName()
	_attendanceRuleGroup.ALL = field.NewAsterisk(tableName)
	_attendanceRuleGroup.RuleGroupID = field.NewString(tableName, "rule_group_id")
	_attendanceRuleGroup.Name = field.NewString(tableName, "name")
	_attendanceRuleGroup.Weight = field.NewInt32(tableName, "weight")
	_attendanceRuleGroup.Default = field.NewString(tableName, "default")

	_attendanceRuleGroup.fillFieldMap()

	return _attendanceRuleGroup
}

type attendanceRuleGroup struct {
	attendanceRuleGroupDo

	ALL         field.Asterisk
	RuleGroupID field.String
	Name        field.String
	Weight      field.Int32
	Default     field.String

	fieldMap map[string]field.Expr
}

func (a attendanceRuleGroup) Table(newTableName string) *attendanceRuleGroup {
	a.attendanceRuleGroupDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attendanceRuleGroup) As(alias string) *attendanceRuleGroup {
	a.attendanceRuleGroupDo.DO = *(a.attendanceRuleGroupDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attendanceRuleGroup) updateTableName(table string) *attendanceRuleGroup {
	a.ALL = field.NewAsterisk(table)
	a.RuleGroupID = field.NewString(table, "rule_group_id")
	a.Name = field.NewString(table, "name")
	a.Weight = field.NewInt32(table, "weight")
	a.Default = field.NewString(table, "default")

	a.fillFieldMap()

	return a
}

func (a *attendanceRuleGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attendanceRuleGroup) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["rule_group_id"] = a.RuleGroupID
	a.fieldMap["name"] = a.Name
	a.fieldMap["weight"] = a.Weight
	a.fieldMap["default"] = a.Default
}

func (a attendanceRuleGroup) clone(db *gorm.DB) attendanceRuleGroup {
	a.attendanceRuleGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attendanceRuleGroup) replaceDB(db *gorm.DB) attendanceRuleGroup {
	a.attendanceRuleGroupDo.ReplaceDB(db)
	return a
}

type attendanceRuleGroupDo struct{ gen.DO }

type IAttendanceRuleGroupDo interface {
	gen.SubQuery
	Debug() IAttendanceRuleGroupDo
	WithContext(ctx context.Context) IAttendanceRuleGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttendanceRuleGroupDo
	WriteDB() IAttendanceRuleGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttendanceRuleGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttendanceRuleGroupDo
	Not(conds ...gen.Condition) IAttendanceRuleGroupDo
	Or(conds ...gen.Condition) IAttendanceRuleGroupDo
	Select(conds ...field.Expr) IAttendanceRuleGroupDo
	Where(conds ...gen.Condition) IAttendanceRuleGroupDo
	Order(conds ...field.Expr) IAttendanceRuleGroupDo
	Distinct(cols ...field.Expr) IAttendanceRuleGroupDo
	Omit(cols ...field.Expr) IAttendanceRuleGroupDo
	Join(table schema.Tabler, on ...field.Expr) IAttendanceRuleGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceRuleGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceRuleGroupDo
	Group(cols ...field.Expr) IAttendanceRuleGroupDo
	Having(conds ...gen.Condition) IAttendanceRuleGroupDo
	Limit(limit int) IAttendanceRuleGroupDo
	Offset(offset int) IAttendanceRuleGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceRuleGroupDo
	Unscoped() IAttendanceRuleGroupDo
	Create(values ...*model.AttendanceRuleGroup) error
	CreateInBatches(values []*model.AttendanceRuleGroup, batchSize int) error
	Save(values ...*model.AttendanceRuleGroup) error
	First() (*model.AttendanceRuleGroup, error)
	Take() (*model.AttendanceRuleGroup, error)
	Last() (*model.AttendanceRuleGroup, error)
	Find() ([]*model.AttendanceRuleGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceRuleGroup, err error)
	FindInBatches(result *[]*model.AttendanceRuleGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AttendanceRuleGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttendanceRuleGroupDo
	Assign(attrs ...field.AssignExpr) IAttendanceRuleGroupDo
	Joins(fields ...field.RelationField) IAttendanceRuleGroupDo
	Preload(fields ...field.RelationField) IAttendanceRuleGroupDo
	FirstOrInit() (*model.AttendanceRuleGroup, error)
	FirstOrCreate() (*model.AttendanceRuleGroup, error)
	FindByPage(offset int, limit int) (result []*model.AttendanceRuleGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttendanceRuleGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attendanceRuleGroupDo) Debug() IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Debug())
}

func (a attendanceRuleGroupDo) WithContext(ctx context.Context) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attendanceRuleGroupDo) ReadDB() IAttendanceRuleGroupDo {
	return a.Clauses(dbresolver.Read)
}

func (a attendanceRuleGroupDo) WriteDB() IAttendanceRuleGroupDo {
	return a.Clauses(dbresolver.Write)
}

func (a attendanceRuleGroupDo) Session(config *gorm.Session) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Session(config))
}

func (a attendanceRuleGroupDo) Clauses(conds ...clause.Expression) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attendanceRuleGroupDo) Returning(value interface{}, columns ...string) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attendanceRuleGroupDo) Not(conds ...gen.Condition) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attendanceRuleGroupDo) Or(conds ...gen.Condition) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attendanceRuleGroupDo) Select(conds ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attendanceRuleGroupDo) Where(conds ...gen.Condition) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attendanceRuleGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAttendanceRuleGroupDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a attendanceRuleGroupDo) Order(conds ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attendanceRuleGroupDo) Distinct(cols ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attendanceRuleGroupDo) Omit(cols ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attendanceRuleGroupDo) Join(table schema.Tabler, on ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attendanceRuleGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attendanceRuleGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attendanceRuleGroupDo) Group(cols ...field.Expr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attendanceRuleGroupDo) Having(conds ...gen.Condition) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attendanceRuleGroupDo) Limit(limit int) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attendanceRuleGroupDo) Offset(offset int) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attendanceRuleGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attendanceRuleGroupDo) Unscoped() IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attendanceRuleGroupDo) Create(values ...*model.AttendanceRuleGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attendanceRuleGroupDo) CreateInBatches(values []*model.AttendanceRuleGroup, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attendanceRuleGroupDo) Save(values ...*model.AttendanceRuleGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attendanceRuleGroupDo) First() (*model.AttendanceRuleGroup, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceRuleGroup), nil
	}
}

func (a attendanceRuleGroupDo) Take() (*model.AttendanceRuleGroup, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceRuleGroup), nil
	}
}

func (a attendanceRuleGroupDo) Last() (*model.AttendanceRuleGroup, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceRuleGroup), nil
	}
}

func (a attendanceRuleGroupDo) Find() ([]*model.AttendanceRuleGroup, error) {
	result, err := a.DO.Find()
	return result.([]*model.AttendanceRuleGroup), err
}

func (a attendanceRuleGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceRuleGroup, err error) {
	buf := make([]*model.AttendanceRuleGroup, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attendanceRuleGroupDo) FindInBatches(result *[]*model.AttendanceRuleGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attendanceRuleGroupDo) Attrs(attrs ...field.AssignExpr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attendanceRuleGroupDo) Assign(attrs ...field.AssignExpr) IAttendanceRuleGroupDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attendanceRuleGroupDo) Joins(fields ...field.RelationField) IAttendanceRuleGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attendanceRuleGroupDo) Preload(fields ...field.RelationField) IAttendanceRuleGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attendanceRuleGroupDo) FirstOrInit() (*model.AttendanceRuleGroup, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceRuleGroup), nil
	}
}

func (a attendanceRuleGroupDo) FirstOrCreate() (*model.AttendanceRuleGroup, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceRuleGroup), nil
	}
}

func (a attendanceRuleGroupDo) FindByPage(offset int, limit int) (result []*model.AttendanceRuleGroup, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attendanceRuleGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attendanceRuleGroupDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attendanceRuleGroupDo) Delete(models ...*model.AttendanceRuleGroup) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attendanceRuleGroupDo) withDO(do gen.Dao) *attendanceRuleGroupDo {
	a.DO = *do.(*gen.DO)
	return a
}
