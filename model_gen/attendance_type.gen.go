// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAttendanceType(db *gorm.DB, opts ...gen.DOOption) attendanceType {
	_attendanceType := attendanceType{}

	_attendanceType.attendanceTypeDo.UseDB(db, opts...)
	_attendanceType.attendanceTypeDo.UseModel(&model.AttendanceType{})

	tableName := _attendanceType.attendanceTypeDo.TableName()
	_attendanceType.ALL = field.NewAsterisk(tableName)
	_attendanceType.AttendanceType = field.NewString(tableName, "attendance_type")
	_attendanceType.Name = field.NewString(tableName, "name")
	_attendanceType.ShortName = field.NewString(tableName, "short_name")

	_attendanceType.fillFieldMap()

	return _attendanceType
}

type attendanceType struct {
	attendanceTypeDo

	ALL            field.Asterisk
	AttendanceType field.String
	Name           field.String
	ShortName      field.String

	fieldMap map[string]field.Expr
}

func (a attendanceType) Table(newTableName string) *attendanceType {
	a.attendanceTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attendanceType) As(alias string) *attendanceType {
	a.attendanceTypeDo.DO = *(a.attendanceTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attendanceType) updateTableName(table string) *attendanceType {
	a.ALL = field.NewAsterisk(table)
	a.AttendanceType = field.NewString(table, "attendance_type")
	a.Name = field.NewString(table, "name")
	a.ShortName = field.NewString(table, "short_name")

	a.fillFieldMap()

	return a
}

func (a *attendanceType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attendanceType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["attendance_type"] = a.AttendanceType
	a.fieldMap["name"] = a.Name
	a.fieldMap["short_name"] = a.ShortName
}

func (a attendanceType) clone(db *gorm.DB) attendanceType {
	a.attendanceTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attendanceType) replaceDB(db *gorm.DB) attendanceType {
	a.attendanceTypeDo.ReplaceDB(db)
	return a
}

type attendanceTypeDo struct{ gen.DO }

type IAttendanceTypeDo interface {
	gen.SubQuery
	Debug() IAttendanceTypeDo
	WithContext(ctx context.Context) IAttendanceTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttendanceTypeDo
	WriteDB() IAttendanceTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttendanceTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttendanceTypeDo
	Not(conds ...gen.Condition) IAttendanceTypeDo
	Or(conds ...gen.Condition) IAttendanceTypeDo
	Select(conds ...field.Expr) IAttendanceTypeDo
	Where(conds ...gen.Condition) IAttendanceTypeDo
	Order(conds ...field.Expr) IAttendanceTypeDo
	Distinct(cols ...field.Expr) IAttendanceTypeDo
	Omit(cols ...field.Expr) IAttendanceTypeDo
	Join(table schema.Tabler, on ...field.Expr) IAttendanceTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceTypeDo
	Group(cols ...field.Expr) IAttendanceTypeDo
	Having(conds ...gen.Condition) IAttendanceTypeDo
	Limit(limit int) IAttendanceTypeDo
	Offset(offset int) IAttendanceTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceTypeDo
	Unscoped() IAttendanceTypeDo
	Create(values ...*model.AttendanceType) error
	CreateInBatches(values []*model.AttendanceType, batchSize int) error
	Save(values ...*model.AttendanceType) error
	First() (*model.AttendanceType, error)
	Take() (*model.AttendanceType, error)
	Last() (*model.AttendanceType, error)
	Find() ([]*model.AttendanceType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceType, err error)
	FindInBatches(result *[]*model.AttendanceType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AttendanceType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttendanceTypeDo
	Assign(attrs ...field.AssignExpr) IAttendanceTypeDo
	Joins(fields ...field.RelationField) IAttendanceTypeDo
	Preload(fields ...field.RelationField) IAttendanceTypeDo
	FirstOrInit() (*model.AttendanceType, error)
	FirstOrCreate() (*model.AttendanceType, error)
	FindByPage(offset int, limit int) (result []*model.AttendanceType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttendanceTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attendanceTypeDo) Debug() IAttendanceTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a attendanceTypeDo) WithContext(ctx context.Context) IAttendanceTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attendanceTypeDo) ReadDB() IAttendanceTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a attendanceTypeDo) WriteDB() IAttendanceTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a attendanceTypeDo) Session(config *gorm.Session) IAttendanceTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a attendanceTypeDo) Clauses(conds ...clause.Expression) IAttendanceTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attendanceTypeDo) Returning(value interface{}, columns ...string) IAttendanceTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attendanceTypeDo) Not(conds ...gen.Condition) IAttendanceTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attendanceTypeDo) Or(conds ...gen.Condition) IAttendanceTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attendanceTypeDo) Select(conds ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attendanceTypeDo) Where(conds ...gen.Condition) IAttendanceTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attendanceTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAttendanceTypeDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a attendanceTypeDo) Order(conds ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attendanceTypeDo) Distinct(cols ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attendanceTypeDo) Omit(cols ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attendanceTypeDo) Join(table schema.Tabler, on ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attendanceTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attendanceTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attendanceTypeDo) Group(cols ...field.Expr) IAttendanceTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attendanceTypeDo) Having(conds ...gen.Condition) IAttendanceTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attendanceTypeDo) Limit(limit int) IAttendanceTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attendanceTypeDo) Offset(offset int) IAttendanceTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attendanceTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attendanceTypeDo) Unscoped() IAttendanceTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attendanceTypeDo) Create(values ...*model.AttendanceType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attendanceTypeDo) CreateInBatches(values []*model.AttendanceType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attendanceTypeDo) Save(values ...*model.AttendanceType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attendanceTypeDo) First() (*model.AttendanceType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceType), nil
	}
}

func (a attendanceTypeDo) Take() (*model.AttendanceType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceType), nil
	}
}

func (a attendanceTypeDo) Last() (*model.AttendanceType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceType), nil
	}
}

func (a attendanceTypeDo) Find() ([]*model.AttendanceType, error) {
	result, err := a.DO.Find()
	return result.([]*model.AttendanceType), err
}

func (a attendanceTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttendanceType, err error) {
	buf := make([]*model.AttendanceType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attendanceTypeDo) FindInBatches(result *[]*model.AttendanceType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attendanceTypeDo) Attrs(attrs ...field.AssignExpr) IAttendanceTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attendanceTypeDo) Assign(attrs ...field.AssignExpr) IAttendanceTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attendanceTypeDo) Joins(fields ...field.RelationField) IAttendanceTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attendanceTypeDo) Preload(fields ...field.RelationField) IAttendanceTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attendanceTypeDo) FirstOrInit() (*model.AttendanceType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceType), nil
	}
}

func (a attendanceTypeDo) FirstOrCreate() (*model.AttendanceType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttendanceType), nil
	}
}

func (a attendanceTypeDo) FindByPage(offset int, limit int) (result []*model.AttendanceType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attendanceTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attendanceTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attendanceTypeDo) Delete(models ...*model.AttendanceType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attendanceTypeDo) withDO(do gen.Dao) *attendanceTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
