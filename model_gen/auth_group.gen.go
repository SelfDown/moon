// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAuthGroup(db *gorm.DB, opts ...gen.DOOption) authGroup {
	_authGroup := authGroup{}

	_authGroup.authGroupDo.UseDB(db, opts...)
	_authGroup.authGroupDo.UseModel(&model.AuthGroup{})

	tableName := _authGroup.authGroupDo.TableName()
	_authGroup.ALL = field.NewAsterisk(tableName)
	_authGroup.ID = field.NewInt32(tableName, "id")
	_authGroup.Name = field.NewString(tableName, "name")
	_authGroup.CreateTime = field.NewTime(tableName, "create_time")
	_authGroup.ModifyTime = field.NewTime(tableName, "modify_time")
	_authGroup.Comments = field.NewString(tableName, "comments")

	_authGroup.fillFieldMap()

	return _authGroup
}

type authGroup struct {
	authGroupDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录创建时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a authGroup) Table(newTableName string) *authGroup {
	a.authGroupDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authGroup) As(alias string) *authGroup {
	a.authGroupDo.DO = *(a.authGroupDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authGroup) updateTableName(table string) *authGroup {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *authGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authGroup) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a authGroup) clone(db *gorm.DB) authGroup {
	a.authGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authGroup) replaceDB(db *gorm.DB) authGroup {
	a.authGroupDo.ReplaceDB(db)
	return a
}

type authGroupDo struct{ gen.DO }

type IAuthGroupDo interface {
	gen.SubQuery
	Debug() IAuthGroupDo
	WithContext(ctx context.Context) IAuthGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthGroupDo
	WriteDB() IAuthGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthGroupDo
	Not(conds ...gen.Condition) IAuthGroupDo
	Or(conds ...gen.Condition) IAuthGroupDo
	Select(conds ...field.Expr) IAuthGroupDo
	Where(conds ...gen.Condition) IAuthGroupDo
	Order(conds ...field.Expr) IAuthGroupDo
	Distinct(cols ...field.Expr) IAuthGroupDo
	Omit(cols ...field.Expr) IAuthGroupDo
	Join(table schema.Tabler, on ...field.Expr) IAuthGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthGroupDo
	Group(cols ...field.Expr) IAuthGroupDo
	Having(conds ...gen.Condition) IAuthGroupDo
	Limit(limit int) IAuthGroupDo
	Offset(offset int) IAuthGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthGroupDo
	Unscoped() IAuthGroupDo
	Create(values ...*model.AuthGroup) error
	CreateInBatches(values []*model.AuthGroup, batchSize int) error
	Save(values ...*model.AuthGroup) error
	First() (*model.AuthGroup, error)
	Take() (*model.AuthGroup, error)
	Last() (*model.AuthGroup, error)
	Find() ([]*model.AuthGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthGroup, err error)
	FindInBatches(result *[]*model.AuthGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthGroupDo
	Assign(attrs ...field.AssignExpr) IAuthGroupDo
	Joins(fields ...field.RelationField) IAuthGroupDo
	Preload(fields ...field.RelationField) IAuthGroupDo
	FirstOrInit() (*model.AuthGroup, error)
	FirstOrCreate() (*model.AuthGroup, error)
	FindByPage(offset int, limit int) (result []*model.AuthGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authGroupDo) Debug() IAuthGroupDo {
	return a.withDO(a.DO.Debug())
}

func (a authGroupDo) WithContext(ctx context.Context) IAuthGroupDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authGroupDo) ReadDB() IAuthGroupDo {
	return a.Clauses(dbresolver.Read)
}

func (a authGroupDo) WriteDB() IAuthGroupDo {
	return a.Clauses(dbresolver.Write)
}

func (a authGroupDo) Session(config *gorm.Session) IAuthGroupDo {
	return a.withDO(a.DO.Session(config))
}

func (a authGroupDo) Clauses(conds ...clause.Expression) IAuthGroupDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authGroupDo) Returning(value interface{}, columns ...string) IAuthGroupDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authGroupDo) Not(conds ...gen.Condition) IAuthGroupDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authGroupDo) Or(conds ...gen.Condition) IAuthGroupDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authGroupDo) Select(conds ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authGroupDo) Where(conds ...gen.Condition) IAuthGroupDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthGroupDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authGroupDo) Order(conds ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authGroupDo) Distinct(cols ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authGroupDo) Omit(cols ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authGroupDo) Join(table schema.Tabler, on ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authGroupDo) Group(cols ...field.Expr) IAuthGroupDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authGroupDo) Having(conds ...gen.Condition) IAuthGroupDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authGroupDo) Limit(limit int) IAuthGroupDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authGroupDo) Offset(offset int) IAuthGroupDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthGroupDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authGroupDo) Unscoped() IAuthGroupDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authGroupDo) Create(values ...*model.AuthGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authGroupDo) CreateInBatches(values []*model.AuthGroup, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authGroupDo) Save(values ...*model.AuthGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authGroupDo) First() (*model.AuthGroup, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroup), nil
	}
}

func (a authGroupDo) Take() (*model.AuthGroup, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroup), nil
	}
}

func (a authGroupDo) Last() (*model.AuthGroup, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroup), nil
	}
}

func (a authGroupDo) Find() ([]*model.AuthGroup, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthGroup), err
}

func (a authGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthGroup, err error) {
	buf := make([]*model.AuthGroup, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authGroupDo) FindInBatches(result *[]*model.AuthGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authGroupDo) Attrs(attrs ...field.AssignExpr) IAuthGroupDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authGroupDo) Assign(attrs ...field.AssignExpr) IAuthGroupDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authGroupDo) Joins(fields ...field.RelationField) IAuthGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authGroupDo) Preload(fields ...field.RelationField) IAuthGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authGroupDo) FirstOrInit() (*model.AuthGroup, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroup), nil
	}
}

func (a authGroupDo) FirstOrCreate() (*model.AuthGroup, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroup), nil
	}
}

func (a authGroupDo) FindByPage(offset int, limit int) (result []*model.AuthGroup, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authGroupDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authGroupDo) Delete(models ...*model.AuthGroup) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authGroupDo) withDO(do gen.Dao) *authGroupDo {
	a.DO = *do.(*gen.DO)
	return a
}
