// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAuthGroupPermissions(db *gorm.DB, opts ...gen.DOOption) authGroupPermissions {
	_authGroupPermissions := authGroupPermissions{}

	_authGroupPermissions.authGroupPermissionsDo.UseDB(db, opts...)
	_authGroupPermissions.authGroupPermissionsDo.UseModel(&model.AuthGroupPermissions{})

	tableName := _authGroupPermissions.authGroupPermissionsDo.TableName()
	_authGroupPermissions.ALL = field.NewAsterisk(tableName)
	_authGroupPermissions.ID = field.NewInt32(tableName, "id")
	_authGroupPermissions.GroupID = field.NewInt32(tableName, "group_id")
	_authGroupPermissions.PermissionID = field.NewInt32(tableName, "permission_id")
	_authGroupPermissions.CreateTime = field.NewTime(tableName, "create_time")
	_authGroupPermissions.ModifyTime = field.NewTime(tableName, "modify_time")
	_authGroupPermissions.Comments = field.NewString(tableName, "comments")

	_authGroupPermissions.fillFieldMap()

	return _authGroupPermissions
}

type authGroupPermissions struct {
	authGroupPermissionsDo

	ALL          field.Asterisk
	ID           field.Int32
	GroupID      field.Int32
	PermissionID field.Int32
	CreateTime   field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time   // 记录创建时间（数据库自动写入）
	Comments     field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a authGroupPermissions) Table(newTableName string) *authGroupPermissions {
	a.authGroupPermissionsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authGroupPermissions) As(alias string) *authGroupPermissions {
	a.authGroupPermissionsDo.DO = *(a.authGroupPermissionsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authGroupPermissions) updateTableName(table string) *authGroupPermissions {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.GroupID = field.NewInt32(table, "group_id")
	a.PermissionID = field.NewInt32(table, "permission_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *authGroupPermissions) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authGroupPermissions) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["permission_id"] = a.PermissionID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a authGroupPermissions) clone(db *gorm.DB) authGroupPermissions {
	a.authGroupPermissionsDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authGroupPermissions) replaceDB(db *gorm.DB) authGroupPermissions {
	a.authGroupPermissionsDo.ReplaceDB(db)
	return a
}

type authGroupPermissionsDo struct{ gen.DO }

type IAuthGroupPermissionsDo interface {
	gen.SubQuery
	Debug() IAuthGroupPermissionsDo
	WithContext(ctx context.Context) IAuthGroupPermissionsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthGroupPermissionsDo
	WriteDB() IAuthGroupPermissionsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthGroupPermissionsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthGroupPermissionsDo
	Not(conds ...gen.Condition) IAuthGroupPermissionsDo
	Or(conds ...gen.Condition) IAuthGroupPermissionsDo
	Select(conds ...field.Expr) IAuthGroupPermissionsDo
	Where(conds ...gen.Condition) IAuthGroupPermissionsDo
	Order(conds ...field.Expr) IAuthGroupPermissionsDo
	Distinct(cols ...field.Expr) IAuthGroupPermissionsDo
	Omit(cols ...field.Expr) IAuthGroupPermissionsDo
	Join(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionsDo
	Group(cols ...field.Expr) IAuthGroupPermissionsDo
	Having(conds ...gen.Condition) IAuthGroupPermissionsDo
	Limit(limit int) IAuthGroupPermissionsDo
	Offset(offset int) IAuthGroupPermissionsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthGroupPermissionsDo
	Unscoped() IAuthGroupPermissionsDo
	Create(values ...*model.AuthGroupPermissions) error
	CreateInBatches(values []*model.AuthGroupPermissions, batchSize int) error
	Save(values ...*model.AuthGroupPermissions) error
	First() (*model.AuthGroupPermissions, error)
	Take() (*model.AuthGroupPermissions, error)
	Last() (*model.AuthGroupPermissions, error)
	Find() ([]*model.AuthGroupPermissions, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthGroupPermissions, err error)
	FindInBatches(result *[]*model.AuthGroupPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthGroupPermissions) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthGroupPermissionsDo
	Assign(attrs ...field.AssignExpr) IAuthGroupPermissionsDo
	Joins(fields ...field.RelationField) IAuthGroupPermissionsDo
	Preload(fields ...field.RelationField) IAuthGroupPermissionsDo
	FirstOrInit() (*model.AuthGroupPermissions, error)
	FirstOrCreate() (*model.AuthGroupPermissions, error)
	FindByPage(offset int, limit int) (result []*model.AuthGroupPermissions, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthGroupPermissionsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authGroupPermissionsDo) Debug() IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Debug())
}

func (a authGroupPermissionsDo) WithContext(ctx context.Context) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authGroupPermissionsDo) ReadDB() IAuthGroupPermissionsDo {
	return a.Clauses(dbresolver.Read)
}

func (a authGroupPermissionsDo) WriteDB() IAuthGroupPermissionsDo {
	return a.Clauses(dbresolver.Write)
}

func (a authGroupPermissionsDo) Session(config *gorm.Session) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Session(config))
}

func (a authGroupPermissionsDo) Clauses(conds ...clause.Expression) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authGroupPermissionsDo) Returning(value interface{}, columns ...string) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authGroupPermissionsDo) Not(conds ...gen.Condition) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authGroupPermissionsDo) Or(conds ...gen.Condition) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authGroupPermissionsDo) Select(conds ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authGroupPermissionsDo) Where(conds ...gen.Condition) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authGroupPermissionsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthGroupPermissionsDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authGroupPermissionsDo) Order(conds ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authGroupPermissionsDo) Distinct(cols ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authGroupPermissionsDo) Omit(cols ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authGroupPermissionsDo) Join(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authGroupPermissionsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authGroupPermissionsDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authGroupPermissionsDo) Group(cols ...field.Expr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authGroupPermissionsDo) Having(conds ...gen.Condition) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authGroupPermissionsDo) Limit(limit int) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authGroupPermissionsDo) Offset(offset int) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authGroupPermissionsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authGroupPermissionsDo) Unscoped() IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authGroupPermissionsDo) Create(values ...*model.AuthGroupPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authGroupPermissionsDo) CreateInBatches(values []*model.AuthGroupPermissions, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authGroupPermissionsDo) Save(values ...*model.AuthGroupPermissions) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authGroupPermissionsDo) First() (*model.AuthGroupPermissions, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermissions), nil
	}
}

func (a authGroupPermissionsDo) Take() (*model.AuthGroupPermissions, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermissions), nil
	}
}

func (a authGroupPermissionsDo) Last() (*model.AuthGroupPermissions, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermissions), nil
	}
}

func (a authGroupPermissionsDo) Find() ([]*model.AuthGroupPermissions, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthGroupPermissions), err
}

func (a authGroupPermissionsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthGroupPermissions, err error) {
	buf := make([]*model.AuthGroupPermissions, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authGroupPermissionsDo) FindInBatches(result *[]*model.AuthGroupPermissions, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authGroupPermissionsDo) Attrs(attrs ...field.AssignExpr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authGroupPermissionsDo) Assign(attrs ...field.AssignExpr) IAuthGroupPermissionsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authGroupPermissionsDo) Joins(fields ...field.RelationField) IAuthGroupPermissionsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authGroupPermissionsDo) Preload(fields ...field.RelationField) IAuthGroupPermissionsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authGroupPermissionsDo) FirstOrInit() (*model.AuthGroupPermissions, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermissions), nil
	}
}

func (a authGroupPermissionsDo) FirstOrCreate() (*model.AuthGroupPermissions, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthGroupPermissions), nil
	}
}

func (a authGroupPermissionsDo) FindByPage(offset int, limit int) (result []*model.AuthGroupPermissions, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authGroupPermissionsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authGroupPermissionsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authGroupPermissionsDo) Delete(models ...*model.AuthGroupPermissions) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authGroupPermissionsDo) withDO(do gen.Dao) *authGroupPermissionsDo {
	a.DO = *do.(*gen.DO)
	return a
}
