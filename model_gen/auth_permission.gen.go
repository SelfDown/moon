// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAuthPermission(db *gorm.DB, opts ...gen.DOOption) authPermission {
	_authPermission := authPermission{}

	_authPermission.authPermissionDo.UseDB(db, opts...)
	_authPermission.authPermissionDo.UseModel(&model.AuthPermission{})

	tableName := _authPermission.authPermissionDo.TableName()
	_authPermission.ALL = field.NewAsterisk(tableName)
	_authPermission.ID = field.NewInt32(tableName, "id")
	_authPermission.Name = field.NewString(tableName, "name")
	_authPermission.ContentTypeID = field.NewInt32(tableName, "content_type_id")
	_authPermission.Codename = field.NewString(tableName, "codename")
	_authPermission.CreateTime = field.NewTime(tableName, "create_time")
	_authPermission.ModifyTime = field.NewTime(tableName, "modify_time")
	_authPermission.Comments = field.NewString(tableName, "comments")

	_authPermission.fillFieldMap()

	return _authPermission
}

type authPermission struct {
	authPermissionDo

	ALL           field.Asterisk
	ID            field.Int32
	Name          field.String
	ContentTypeID field.Int32
	Codename      field.String
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录创建时间（数据库自动写入）
	Comments      field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a authPermission) Table(newTableName string) *authPermission {
	a.authPermissionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authPermission) As(alias string) *authPermission {
	a.authPermissionDo.DO = *(a.authPermissionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authPermission) updateTableName(table string) *authPermission {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.ContentTypeID = field.NewInt32(table, "content_type_id")
	a.Codename = field.NewString(table, "codename")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *authPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authPermission) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["content_type_id"] = a.ContentTypeID
	a.fieldMap["codename"] = a.Codename
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a authPermission) clone(db *gorm.DB) authPermission {
	a.authPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authPermission) replaceDB(db *gorm.DB) authPermission {
	a.authPermissionDo.ReplaceDB(db)
	return a
}

type authPermissionDo struct{ gen.DO }

type IAuthPermissionDo interface {
	gen.SubQuery
	Debug() IAuthPermissionDo
	WithContext(ctx context.Context) IAuthPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthPermissionDo
	WriteDB() IAuthPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthPermissionDo
	Not(conds ...gen.Condition) IAuthPermissionDo
	Or(conds ...gen.Condition) IAuthPermissionDo
	Select(conds ...field.Expr) IAuthPermissionDo
	Where(conds ...gen.Condition) IAuthPermissionDo
	Order(conds ...field.Expr) IAuthPermissionDo
	Distinct(cols ...field.Expr) IAuthPermissionDo
	Omit(cols ...field.Expr) IAuthPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IAuthPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthPermissionDo
	Group(cols ...field.Expr) IAuthPermissionDo
	Having(conds ...gen.Condition) IAuthPermissionDo
	Limit(limit int) IAuthPermissionDo
	Offset(offset int) IAuthPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthPermissionDo
	Unscoped() IAuthPermissionDo
	Create(values ...*model.AuthPermission) error
	CreateInBatches(values []*model.AuthPermission, batchSize int) error
	Save(values ...*model.AuthPermission) error
	First() (*model.AuthPermission, error)
	Take() (*model.AuthPermission, error)
	Last() (*model.AuthPermission, error)
	Find() ([]*model.AuthPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthPermission, err error)
	FindInBatches(result *[]*model.AuthPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthPermissionDo
	Assign(attrs ...field.AssignExpr) IAuthPermissionDo
	Joins(fields ...field.RelationField) IAuthPermissionDo
	Preload(fields ...field.RelationField) IAuthPermissionDo
	FirstOrInit() (*model.AuthPermission, error)
	FirstOrCreate() (*model.AuthPermission, error)
	FindByPage(offset int, limit int) (result []*model.AuthPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authPermissionDo) Debug() IAuthPermissionDo {
	return a.withDO(a.DO.Debug())
}

func (a authPermissionDo) WithContext(ctx context.Context) IAuthPermissionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authPermissionDo) ReadDB() IAuthPermissionDo {
	return a.Clauses(dbresolver.Read)
}

func (a authPermissionDo) WriteDB() IAuthPermissionDo {
	return a.Clauses(dbresolver.Write)
}

func (a authPermissionDo) Session(config *gorm.Session) IAuthPermissionDo {
	return a.withDO(a.DO.Session(config))
}

func (a authPermissionDo) Clauses(conds ...clause.Expression) IAuthPermissionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authPermissionDo) Returning(value interface{}, columns ...string) IAuthPermissionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authPermissionDo) Not(conds ...gen.Condition) IAuthPermissionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authPermissionDo) Or(conds ...gen.Condition) IAuthPermissionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authPermissionDo) Select(conds ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authPermissionDo) Where(conds ...gen.Condition) IAuthPermissionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authPermissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthPermissionDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authPermissionDo) Order(conds ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authPermissionDo) Distinct(cols ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authPermissionDo) Omit(cols ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authPermissionDo) Join(table schema.Tabler, on ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authPermissionDo) Group(cols ...field.Expr) IAuthPermissionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authPermissionDo) Having(conds ...gen.Condition) IAuthPermissionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authPermissionDo) Limit(limit int) IAuthPermissionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authPermissionDo) Offset(offset int) IAuthPermissionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthPermissionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authPermissionDo) Unscoped() IAuthPermissionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authPermissionDo) Create(values ...*model.AuthPermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authPermissionDo) CreateInBatches(values []*model.AuthPermission, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authPermissionDo) Save(values ...*model.AuthPermission) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authPermissionDo) First() (*model.AuthPermission, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthPermission), nil
	}
}

func (a authPermissionDo) Take() (*model.AuthPermission, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthPermission), nil
	}
}

func (a authPermissionDo) Last() (*model.AuthPermission, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthPermission), nil
	}
}

func (a authPermissionDo) Find() ([]*model.AuthPermission, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthPermission), err
}

func (a authPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthPermission, err error) {
	buf := make([]*model.AuthPermission, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authPermissionDo) FindInBatches(result *[]*model.AuthPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authPermissionDo) Attrs(attrs ...field.AssignExpr) IAuthPermissionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authPermissionDo) Assign(attrs ...field.AssignExpr) IAuthPermissionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authPermissionDo) Joins(fields ...field.RelationField) IAuthPermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authPermissionDo) Preload(fields ...field.RelationField) IAuthPermissionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authPermissionDo) FirstOrInit() (*model.AuthPermission, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthPermission), nil
	}
}

func (a authPermissionDo) FirstOrCreate() (*model.AuthPermission, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthPermission), nil
	}
}

func (a authPermissionDo) FindByPage(offset int, limit int) (result []*model.AuthPermission, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authPermissionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authPermissionDo) Delete(models ...*model.AuthPermission) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authPermissionDo) withDO(do gen.Dao) *authPermissionDo {
	a.DO = *do.(*gen.DO)
	return a
}
