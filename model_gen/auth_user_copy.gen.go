// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAuthUserCopy(db *gorm.DB, opts ...gen.DOOption) authUserCopy {
	_authUserCopy := authUserCopy{}

	_authUserCopy.authUserCopyDo.UseDB(db, opts...)
	_authUserCopy.authUserCopyDo.UseModel(&model.AuthUserCopy{})

	tableName := _authUserCopy.authUserCopyDo.TableName()
	_authUserCopy.ALL = field.NewAsterisk(tableName)
	_authUserCopy.ID = field.NewInt32(tableName, "id")
	_authUserCopy.Password = field.NewString(tableName, "password")
	_authUserCopy.LastLogin = field.NewTime(tableName, "last_login")
	_authUserCopy.IsSuperuser = field.NewBool(tableName, "is_superuser")
	_authUserCopy.Email = field.NewString(tableName, "email")
	_authUserCopy.IsStaff = field.NewBool(tableName, "is_staff")
	_authUserCopy.IsActive = field.NewBool(tableName, "is_active")
	_authUserCopy.DateJoined = field.NewTime(tableName, "date_joined")
	_authUserCopy.UserTypeID = field.NewInt32(tableName, "user_type_id")
	_authUserCopy.CreateTime = field.NewTime(tableName, "create_time")
	_authUserCopy.ModifyTime = field.NewTime(tableName, "modify_time")
	_authUserCopy.Comments = field.NewString(tableName, "comments")

	_authUserCopy.fillFieldMap()

	return _authUserCopy
}

type authUserCopy struct {
	authUserCopyDo

	ALL         field.Asterisk
	ID          field.Int32
	Password    field.String
	LastLogin   field.Time
	IsSuperuser field.Bool
	Email       field.String
	IsStaff     field.Bool
	IsActive    field.Bool
	DateJoined  field.Time
	UserTypeID  field.Int32
	CreateTime  field.Time
	ModifyTime  field.Time
	Comments    field.String

	fieldMap map[string]field.Expr
}

func (a authUserCopy) Table(newTableName string) *authUserCopy {
	a.authUserCopyDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authUserCopy) As(alias string) *authUserCopy {
	a.authUserCopyDo.DO = *(a.authUserCopyDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authUserCopy) updateTableName(table string) *authUserCopy {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Password = field.NewString(table, "password")
	a.LastLogin = field.NewTime(table, "last_login")
	a.IsSuperuser = field.NewBool(table, "is_superuser")
	a.Email = field.NewString(table, "email")
	a.IsStaff = field.NewBool(table, "is_staff")
	a.IsActive = field.NewBool(table, "is_active")
	a.DateJoined = field.NewTime(table, "date_joined")
	a.UserTypeID = field.NewInt32(table, "user_type_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *authUserCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authUserCopy) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["password"] = a.Password
	a.fieldMap["last_login"] = a.LastLogin
	a.fieldMap["is_superuser"] = a.IsSuperuser
	a.fieldMap["email"] = a.Email
	a.fieldMap["is_staff"] = a.IsStaff
	a.fieldMap["is_active"] = a.IsActive
	a.fieldMap["date_joined"] = a.DateJoined
	a.fieldMap["user_type_id"] = a.UserTypeID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a authUserCopy) clone(db *gorm.DB) authUserCopy {
	a.authUserCopyDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authUserCopy) replaceDB(db *gorm.DB) authUserCopy {
	a.authUserCopyDo.ReplaceDB(db)
	return a
}

type authUserCopyDo struct{ gen.DO }

type IAuthUserCopyDo interface {
	gen.SubQuery
	Debug() IAuthUserCopyDo
	WithContext(ctx context.Context) IAuthUserCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthUserCopyDo
	WriteDB() IAuthUserCopyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthUserCopyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthUserCopyDo
	Not(conds ...gen.Condition) IAuthUserCopyDo
	Or(conds ...gen.Condition) IAuthUserCopyDo
	Select(conds ...field.Expr) IAuthUserCopyDo
	Where(conds ...gen.Condition) IAuthUserCopyDo
	Order(conds ...field.Expr) IAuthUserCopyDo
	Distinct(cols ...field.Expr) IAuthUserCopyDo
	Omit(cols ...field.Expr) IAuthUserCopyDo
	Join(table schema.Tabler, on ...field.Expr) IAuthUserCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthUserCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthUserCopyDo
	Group(cols ...field.Expr) IAuthUserCopyDo
	Having(conds ...gen.Condition) IAuthUserCopyDo
	Limit(limit int) IAuthUserCopyDo
	Offset(offset int) IAuthUserCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthUserCopyDo
	Unscoped() IAuthUserCopyDo
	Create(values ...*model.AuthUserCopy) error
	CreateInBatches(values []*model.AuthUserCopy, batchSize int) error
	Save(values ...*model.AuthUserCopy) error
	First() (*model.AuthUserCopy, error)
	Take() (*model.AuthUserCopy, error)
	Last() (*model.AuthUserCopy, error)
	Find() ([]*model.AuthUserCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUserCopy, err error)
	FindInBatches(result *[]*model.AuthUserCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AuthUserCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthUserCopyDo
	Assign(attrs ...field.AssignExpr) IAuthUserCopyDo
	Joins(fields ...field.RelationField) IAuthUserCopyDo
	Preload(fields ...field.RelationField) IAuthUserCopyDo
	FirstOrInit() (*model.AuthUserCopy, error)
	FirstOrCreate() (*model.AuthUserCopy, error)
	FindByPage(offset int, limit int) (result []*model.AuthUserCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthUserCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authUserCopyDo) Debug() IAuthUserCopyDo {
	return a.withDO(a.DO.Debug())
}

func (a authUserCopyDo) WithContext(ctx context.Context) IAuthUserCopyDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authUserCopyDo) ReadDB() IAuthUserCopyDo {
	return a.Clauses(dbresolver.Read)
}

func (a authUserCopyDo) WriteDB() IAuthUserCopyDo {
	return a.Clauses(dbresolver.Write)
}

func (a authUserCopyDo) Session(config *gorm.Session) IAuthUserCopyDo {
	return a.withDO(a.DO.Session(config))
}

func (a authUserCopyDo) Clauses(conds ...clause.Expression) IAuthUserCopyDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authUserCopyDo) Returning(value interface{}, columns ...string) IAuthUserCopyDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authUserCopyDo) Not(conds ...gen.Condition) IAuthUserCopyDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authUserCopyDo) Or(conds ...gen.Condition) IAuthUserCopyDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authUserCopyDo) Select(conds ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authUserCopyDo) Where(conds ...gen.Condition) IAuthUserCopyDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authUserCopyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthUserCopyDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authUserCopyDo) Order(conds ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authUserCopyDo) Distinct(cols ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authUserCopyDo) Omit(cols ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authUserCopyDo) Join(table schema.Tabler, on ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authUserCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authUserCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authUserCopyDo) Group(cols ...field.Expr) IAuthUserCopyDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authUserCopyDo) Having(conds ...gen.Condition) IAuthUserCopyDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authUserCopyDo) Limit(limit int) IAuthUserCopyDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authUserCopyDo) Offset(offset int) IAuthUserCopyDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authUserCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthUserCopyDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authUserCopyDo) Unscoped() IAuthUserCopyDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authUserCopyDo) Create(values ...*model.AuthUserCopy) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authUserCopyDo) CreateInBatches(values []*model.AuthUserCopy, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authUserCopyDo) Save(values ...*model.AuthUserCopy) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authUserCopyDo) First() (*model.AuthUserCopy, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserCopy), nil
	}
}

func (a authUserCopyDo) Take() (*model.AuthUserCopy, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserCopy), nil
	}
}

func (a authUserCopyDo) Last() (*model.AuthUserCopy, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserCopy), nil
	}
}

func (a authUserCopyDo) Find() ([]*model.AuthUserCopy, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthUserCopy), err
}

func (a authUserCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUserCopy, err error) {
	buf := make([]*model.AuthUserCopy, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authUserCopyDo) FindInBatches(result *[]*model.AuthUserCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authUserCopyDo) Attrs(attrs ...field.AssignExpr) IAuthUserCopyDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authUserCopyDo) Assign(attrs ...field.AssignExpr) IAuthUserCopyDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authUserCopyDo) Joins(fields ...field.RelationField) IAuthUserCopyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authUserCopyDo) Preload(fields ...field.RelationField) IAuthUserCopyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authUserCopyDo) FirstOrInit() (*model.AuthUserCopy, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserCopy), nil
	}
}

func (a authUserCopyDo) FirstOrCreate() (*model.AuthUserCopy, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUserCopy), nil
	}
}

func (a authUserCopyDo) FindByPage(offset int, limit int) (result []*model.AuthUserCopy, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authUserCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authUserCopyDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authUserCopyDo) Delete(models ...*model.AuthUserCopy) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authUserCopyDo) withDO(do gen.Dao) *authUserCopyDo {
	a.DO = *do.(*gen.DO)
	return a
}
