// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAutoCheckEvent(db *gorm.DB, opts ...gen.DOOption) autoCheckEvent {
	_autoCheckEvent := autoCheckEvent{}

	_autoCheckEvent.autoCheckEventDo.UseDB(db, opts...)
	_autoCheckEvent.autoCheckEventDo.UseModel(&model.AutoCheckEvent{})

	tableName := _autoCheckEvent.autoCheckEventDo.TableName()
	_autoCheckEvent.ALL = field.NewAsterisk(tableName)
	_autoCheckEvent.ScanID = field.NewInt32(tableName, "scan_id")
	_autoCheckEvent.EventID = field.NewString(tableName, "event_id")
	_autoCheckEvent.UserID = field.NewString(tableName, "user_id")
	_autoCheckEvent.OpTime = field.NewTime(tableName, "op_time")
	_autoCheckEvent.CheckStatus = field.NewString(tableName, "check_status")
	_autoCheckEvent.ThreadNum = field.NewString(tableName, "thread_num")
	_autoCheckEvent.Note = field.NewString(tableName, "note")
	_autoCheckEvent.ServerEnvID = field.NewString(tableName, "server_env_id")
	_autoCheckEvent.CreateTime = field.NewTime(tableName, "create_time")
	_autoCheckEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_autoCheckEvent.Comments = field.NewString(tableName, "comments")

	_autoCheckEvent.fillFieldMap()

	return _autoCheckEvent
}

type autoCheckEvent struct {
	autoCheckEventDo

	ALL         field.Asterisk
	ScanID      field.Int32
	EventID     field.String
	UserID      field.String
	OpTime      field.Time
	CheckStatus field.String // 检查状态：100-正在巡检、200、巡检完、300、用户手动中断巡检  400 巡检异常中断
	ThreadNum   field.String // 巡检线程号,用于终止线程
	Note        field.String // 巡检备注说明
	ServerEnvID field.String
	CreateTime  field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime  field.Time   // 记录修改时间（数据库自动写入）
	Comments    field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a autoCheckEvent) Table(newTableName string) *autoCheckEvent {
	a.autoCheckEventDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoCheckEvent) As(alias string) *autoCheckEvent {
	a.autoCheckEventDo.DO = *(a.autoCheckEventDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoCheckEvent) updateTableName(table string) *autoCheckEvent {
	a.ALL = field.NewAsterisk(table)
	a.ScanID = field.NewInt32(table, "scan_id")
	a.EventID = field.NewString(table, "event_id")
	a.UserID = field.NewString(table, "user_id")
	a.OpTime = field.NewTime(table, "op_time")
	a.CheckStatus = field.NewString(table, "check_status")
	a.ThreadNum = field.NewString(table, "thread_num")
	a.Note = field.NewString(table, "note")
	a.ServerEnvID = field.NewString(table, "server_env_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *autoCheckEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoCheckEvent) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["scan_id"] = a.ScanID
	a.fieldMap["event_id"] = a.EventID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["op_time"] = a.OpTime
	a.fieldMap["check_status"] = a.CheckStatus
	a.fieldMap["thread_num"] = a.ThreadNum
	a.fieldMap["note"] = a.Note
	a.fieldMap["server_env_id"] = a.ServerEnvID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a autoCheckEvent) clone(db *gorm.DB) autoCheckEvent {
	a.autoCheckEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoCheckEvent) replaceDB(db *gorm.DB) autoCheckEvent {
	a.autoCheckEventDo.ReplaceDB(db)
	return a
}

type autoCheckEventDo struct{ gen.DO }

type IAutoCheckEventDo interface {
	gen.SubQuery
	Debug() IAutoCheckEventDo
	WithContext(ctx context.Context) IAutoCheckEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoCheckEventDo
	WriteDB() IAutoCheckEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoCheckEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoCheckEventDo
	Not(conds ...gen.Condition) IAutoCheckEventDo
	Or(conds ...gen.Condition) IAutoCheckEventDo
	Select(conds ...field.Expr) IAutoCheckEventDo
	Where(conds ...gen.Condition) IAutoCheckEventDo
	Order(conds ...field.Expr) IAutoCheckEventDo
	Distinct(cols ...field.Expr) IAutoCheckEventDo
	Omit(cols ...field.Expr) IAutoCheckEventDo
	Join(table schema.Tabler, on ...field.Expr) IAutoCheckEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckEventDo
	Group(cols ...field.Expr) IAutoCheckEventDo
	Having(conds ...gen.Condition) IAutoCheckEventDo
	Limit(limit int) IAutoCheckEventDo
	Offset(offset int) IAutoCheckEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckEventDo
	Unscoped() IAutoCheckEventDo
	Create(values ...*model.AutoCheckEvent) error
	CreateInBatches(values []*model.AutoCheckEvent, batchSize int) error
	Save(values ...*model.AutoCheckEvent) error
	First() (*model.AutoCheckEvent, error)
	Take() (*model.AutoCheckEvent, error)
	Last() (*model.AutoCheckEvent, error)
	Find() ([]*model.AutoCheckEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckEvent, err error)
	FindInBatches(result *[]*model.AutoCheckEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoCheckEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoCheckEventDo
	Assign(attrs ...field.AssignExpr) IAutoCheckEventDo
	Joins(fields ...field.RelationField) IAutoCheckEventDo
	Preload(fields ...field.RelationField) IAutoCheckEventDo
	FirstOrInit() (*model.AutoCheckEvent, error)
	FirstOrCreate() (*model.AutoCheckEvent, error)
	FindByPage(offset int, limit int) (result []*model.AutoCheckEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoCheckEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoCheckEventDo) Debug() IAutoCheckEventDo {
	return a.withDO(a.DO.Debug())
}

func (a autoCheckEventDo) WithContext(ctx context.Context) IAutoCheckEventDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoCheckEventDo) ReadDB() IAutoCheckEventDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoCheckEventDo) WriteDB() IAutoCheckEventDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoCheckEventDo) Session(config *gorm.Session) IAutoCheckEventDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoCheckEventDo) Clauses(conds ...clause.Expression) IAutoCheckEventDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoCheckEventDo) Returning(value interface{}, columns ...string) IAutoCheckEventDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoCheckEventDo) Not(conds ...gen.Condition) IAutoCheckEventDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoCheckEventDo) Or(conds ...gen.Condition) IAutoCheckEventDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoCheckEventDo) Select(conds ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoCheckEventDo) Where(conds ...gen.Condition) IAutoCheckEventDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoCheckEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoCheckEventDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoCheckEventDo) Order(conds ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoCheckEventDo) Distinct(cols ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoCheckEventDo) Omit(cols ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoCheckEventDo) Join(table schema.Tabler, on ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoCheckEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoCheckEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoCheckEventDo) Group(cols ...field.Expr) IAutoCheckEventDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoCheckEventDo) Having(conds ...gen.Condition) IAutoCheckEventDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoCheckEventDo) Limit(limit int) IAutoCheckEventDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoCheckEventDo) Offset(offset int) IAutoCheckEventDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoCheckEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckEventDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoCheckEventDo) Unscoped() IAutoCheckEventDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoCheckEventDo) Create(values ...*model.AutoCheckEvent) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoCheckEventDo) CreateInBatches(values []*model.AutoCheckEvent, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoCheckEventDo) Save(values ...*model.AutoCheckEvent) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoCheckEventDo) First() (*model.AutoCheckEvent, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckEvent), nil
	}
}

func (a autoCheckEventDo) Take() (*model.AutoCheckEvent, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckEvent), nil
	}
}

func (a autoCheckEventDo) Last() (*model.AutoCheckEvent, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckEvent), nil
	}
}

func (a autoCheckEventDo) Find() ([]*model.AutoCheckEvent, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoCheckEvent), err
}

func (a autoCheckEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckEvent, err error) {
	buf := make([]*model.AutoCheckEvent, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoCheckEventDo) FindInBatches(result *[]*model.AutoCheckEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoCheckEventDo) Attrs(attrs ...field.AssignExpr) IAutoCheckEventDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoCheckEventDo) Assign(attrs ...field.AssignExpr) IAutoCheckEventDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoCheckEventDo) Joins(fields ...field.RelationField) IAutoCheckEventDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoCheckEventDo) Preload(fields ...field.RelationField) IAutoCheckEventDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoCheckEventDo) FirstOrInit() (*model.AutoCheckEvent, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckEvent), nil
	}
}

func (a autoCheckEventDo) FirstOrCreate() (*model.AutoCheckEvent, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckEvent), nil
	}
}

func (a autoCheckEventDo) FindByPage(offset int, limit int) (result []*model.AutoCheckEvent, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoCheckEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoCheckEventDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoCheckEventDo) Delete(models ...*model.AutoCheckEvent) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoCheckEventDo) withDO(do gen.Dao) *autoCheckEventDo {
	a.DO = *do.(*gen.DO)
	return a
}
