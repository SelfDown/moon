// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAutoCheckHostInfo(db *gorm.DB, opts ...gen.DOOption) autoCheckHostInfo {
	_autoCheckHostInfo := autoCheckHostInfo{}

	_autoCheckHostInfo.autoCheckHostInfoDo.UseDB(db, opts...)
	_autoCheckHostInfo.autoCheckHostInfoDo.UseModel(&model.AutoCheckHostInfo{})

	tableName := _autoCheckHostInfo.autoCheckHostInfoDo.TableName()
	_autoCheckHostInfo.ALL = field.NewAsterisk(tableName)
	_autoCheckHostInfo.ID = field.NewInt32(tableName, "id")
	_autoCheckHostInfo.ServerID = field.NewString(tableName, "server_id")
	_autoCheckHostInfo.CheckItemsID = field.NewString(tableName, "check_items_id")
	_autoCheckHostInfo.CreateTime = field.NewTime(tableName, "create_time")
	_autoCheckHostInfo.ModifyTime = field.NewTime(tableName, "modify_time")
	_autoCheckHostInfo.Comments = field.NewString(tableName, "comments")

	_autoCheckHostInfo.fillFieldMap()

	return _autoCheckHostInfo
}

type autoCheckHostInfo struct {
	autoCheckHostInfoDo

	ALL          field.Asterisk
	ID           field.Int32
	ServerID     field.String // 主机id
	CheckItemsID field.String // 巡检项目集合,auto_check_items中的items_id是一对多的关系
	CreateTime   field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time   // 记录修改时间（数据库自动写入）
	Comments     field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a autoCheckHostInfo) Table(newTableName string) *autoCheckHostInfo {
	a.autoCheckHostInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoCheckHostInfo) As(alias string) *autoCheckHostInfo {
	a.autoCheckHostInfoDo.DO = *(a.autoCheckHostInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoCheckHostInfo) updateTableName(table string) *autoCheckHostInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.ServerID = field.NewString(table, "server_id")
	a.CheckItemsID = field.NewString(table, "check_items_id")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *autoCheckHostInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoCheckHostInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["server_id"] = a.ServerID
	a.fieldMap["check_items_id"] = a.CheckItemsID
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a autoCheckHostInfo) clone(db *gorm.DB) autoCheckHostInfo {
	a.autoCheckHostInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoCheckHostInfo) replaceDB(db *gorm.DB) autoCheckHostInfo {
	a.autoCheckHostInfoDo.ReplaceDB(db)
	return a
}

type autoCheckHostInfoDo struct{ gen.DO }

type IAutoCheckHostInfoDo interface {
	gen.SubQuery
	Debug() IAutoCheckHostInfoDo
	WithContext(ctx context.Context) IAutoCheckHostInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoCheckHostInfoDo
	WriteDB() IAutoCheckHostInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoCheckHostInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoCheckHostInfoDo
	Not(conds ...gen.Condition) IAutoCheckHostInfoDo
	Or(conds ...gen.Condition) IAutoCheckHostInfoDo
	Select(conds ...field.Expr) IAutoCheckHostInfoDo
	Where(conds ...gen.Condition) IAutoCheckHostInfoDo
	Order(conds ...field.Expr) IAutoCheckHostInfoDo
	Distinct(cols ...field.Expr) IAutoCheckHostInfoDo
	Omit(cols ...field.Expr) IAutoCheckHostInfoDo
	Join(table schema.Tabler, on ...field.Expr) IAutoCheckHostInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckHostInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckHostInfoDo
	Group(cols ...field.Expr) IAutoCheckHostInfoDo
	Having(conds ...gen.Condition) IAutoCheckHostInfoDo
	Limit(limit int) IAutoCheckHostInfoDo
	Offset(offset int) IAutoCheckHostInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckHostInfoDo
	Unscoped() IAutoCheckHostInfoDo
	Create(values ...*model.AutoCheckHostInfo) error
	CreateInBatches(values []*model.AutoCheckHostInfo, batchSize int) error
	Save(values ...*model.AutoCheckHostInfo) error
	First() (*model.AutoCheckHostInfo, error)
	Take() (*model.AutoCheckHostInfo, error)
	Last() (*model.AutoCheckHostInfo, error)
	Find() ([]*model.AutoCheckHostInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckHostInfo, err error)
	FindInBatches(result *[]*model.AutoCheckHostInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoCheckHostInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoCheckHostInfoDo
	Assign(attrs ...field.AssignExpr) IAutoCheckHostInfoDo
	Joins(fields ...field.RelationField) IAutoCheckHostInfoDo
	Preload(fields ...field.RelationField) IAutoCheckHostInfoDo
	FirstOrInit() (*model.AutoCheckHostInfo, error)
	FirstOrCreate() (*model.AutoCheckHostInfo, error)
	FindByPage(offset int, limit int) (result []*model.AutoCheckHostInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoCheckHostInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoCheckHostInfoDo) Debug() IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a autoCheckHostInfoDo) WithContext(ctx context.Context) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoCheckHostInfoDo) ReadDB() IAutoCheckHostInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoCheckHostInfoDo) WriteDB() IAutoCheckHostInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoCheckHostInfoDo) Session(config *gorm.Session) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoCheckHostInfoDo) Clauses(conds ...clause.Expression) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoCheckHostInfoDo) Returning(value interface{}, columns ...string) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoCheckHostInfoDo) Not(conds ...gen.Condition) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoCheckHostInfoDo) Or(conds ...gen.Condition) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoCheckHostInfoDo) Select(conds ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoCheckHostInfoDo) Where(conds ...gen.Condition) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoCheckHostInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoCheckHostInfoDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoCheckHostInfoDo) Order(conds ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoCheckHostInfoDo) Distinct(cols ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoCheckHostInfoDo) Omit(cols ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoCheckHostInfoDo) Join(table schema.Tabler, on ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoCheckHostInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoCheckHostInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoCheckHostInfoDo) Group(cols ...field.Expr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoCheckHostInfoDo) Having(conds ...gen.Condition) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoCheckHostInfoDo) Limit(limit int) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoCheckHostInfoDo) Offset(offset int) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoCheckHostInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoCheckHostInfoDo) Unscoped() IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoCheckHostInfoDo) Create(values ...*model.AutoCheckHostInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoCheckHostInfoDo) CreateInBatches(values []*model.AutoCheckHostInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoCheckHostInfoDo) Save(values ...*model.AutoCheckHostInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoCheckHostInfoDo) First() (*model.AutoCheckHostInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckHostInfo), nil
	}
}

func (a autoCheckHostInfoDo) Take() (*model.AutoCheckHostInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckHostInfo), nil
	}
}

func (a autoCheckHostInfoDo) Last() (*model.AutoCheckHostInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckHostInfo), nil
	}
}

func (a autoCheckHostInfoDo) Find() ([]*model.AutoCheckHostInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoCheckHostInfo), err
}

func (a autoCheckHostInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckHostInfo, err error) {
	buf := make([]*model.AutoCheckHostInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoCheckHostInfoDo) FindInBatches(result *[]*model.AutoCheckHostInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoCheckHostInfoDo) Attrs(attrs ...field.AssignExpr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoCheckHostInfoDo) Assign(attrs ...field.AssignExpr) IAutoCheckHostInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoCheckHostInfoDo) Joins(fields ...field.RelationField) IAutoCheckHostInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoCheckHostInfoDo) Preload(fields ...field.RelationField) IAutoCheckHostInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoCheckHostInfoDo) FirstOrInit() (*model.AutoCheckHostInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckHostInfo), nil
	}
}

func (a autoCheckHostInfoDo) FirstOrCreate() (*model.AutoCheckHostInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckHostInfo), nil
	}
}

func (a autoCheckHostInfoDo) FindByPage(offset int, limit int) (result []*model.AutoCheckHostInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoCheckHostInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoCheckHostInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoCheckHostInfoDo) Delete(models ...*model.AutoCheckHostInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoCheckHostInfoDo) withDO(do gen.Dao) *autoCheckHostInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
