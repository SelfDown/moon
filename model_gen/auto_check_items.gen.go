// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAutoCheckItems(db *gorm.DB, opts ...gen.DOOption) autoCheckItems {
	_autoCheckItems := autoCheckItems{}

	_autoCheckItems.autoCheckItemsDo.UseDB(db, opts...)
	_autoCheckItems.autoCheckItemsDo.UseModel(&model.AutoCheckItems{})

	tableName := _autoCheckItems.autoCheckItemsDo.TableName()
	_autoCheckItems.ALL = field.NewAsterisk(tableName)
	_autoCheckItems.ItemsID = field.NewString(tableName, "items_id")
	_autoCheckItems.ItemsName = field.NewString(tableName, "items_name")
	_autoCheckItems.ItemsComments = field.NewString(tableName, "items_comments")
	_autoCheckItems.CreateTime = field.NewTime(tableName, "create_time")
	_autoCheckItems.ModifyTime = field.NewTime(tableName, "modify_time")
	_autoCheckItems.Comments = field.NewString(tableName, "comments")

	_autoCheckItems.fillFieldMap()

	return _autoCheckItems
}

type autoCheckItems struct {
	autoCheckItemsDo

	ALL           field.Asterisk
	ItemsID       field.String // 监控分类的id，主键
	ItemsName     field.String // 监控分类的名称
	ItemsComments field.String
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a autoCheckItems) Table(newTableName string) *autoCheckItems {
	a.autoCheckItemsDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoCheckItems) As(alias string) *autoCheckItems {
	a.autoCheckItemsDo.DO = *(a.autoCheckItemsDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoCheckItems) updateTableName(table string) *autoCheckItems {
	a.ALL = field.NewAsterisk(table)
	a.ItemsID = field.NewString(table, "items_id")
	a.ItemsName = field.NewString(table, "items_name")
	a.ItemsComments = field.NewString(table, "items_comments")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *autoCheckItems) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoCheckItems) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["items_id"] = a.ItemsID
	a.fieldMap["items_name"] = a.ItemsName
	a.fieldMap["items_comments"] = a.ItemsComments
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a autoCheckItems) clone(db *gorm.DB) autoCheckItems {
	a.autoCheckItemsDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoCheckItems) replaceDB(db *gorm.DB) autoCheckItems {
	a.autoCheckItemsDo.ReplaceDB(db)
	return a
}

type autoCheckItemsDo struct{ gen.DO }

type IAutoCheckItemsDo interface {
	gen.SubQuery
	Debug() IAutoCheckItemsDo
	WithContext(ctx context.Context) IAutoCheckItemsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoCheckItemsDo
	WriteDB() IAutoCheckItemsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoCheckItemsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoCheckItemsDo
	Not(conds ...gen.Condition) IAutoCheckItemsDo
	Or(conds ...gen.Condition) IAutoCheckItemsDo
	Select(conds ...field.Expr) IAutoCheckItemsDo
	Where(conds ...gen.Condition) IAutoCheckItemsDo
	Order(conds ...field.Expr) IAutoCheckItemsDo
	Distinct(cols ...field.Expr) IAutoCheckItemsDo
	Omit(cols ...field.Expr) IAutoCheckItemsDo
	Join(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDo
	Group(cols ...field.Expr) IAutoCheckItemsDo
	Having(conds ...gen.Condition) IAutoCheckItemsDo
	Limit(limit int) IAutoCheckItemsDo
	Offset(offset int) IAutoCheckItemsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckItemsDo
	Unscoped() IAutoCheckItemsDo
	Create(values ...*model.AutoCheckItems) error
	CreateInBatches(values []*model.AutoCheckItems, batchSize int) error
	Save(values ...*model.AutoCheckItems) error
	First() (*model.AutoCheckItems, error)
	Take() (*model.AutoCheckItems, error)
	Last() (*model.AutoCheckItems, error)
	Find() ([]*model.AutoCheckItems, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckItems, err error)
	FindInBatches(result *[]*model.AutoCheckItems, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoCheckItems) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoCheckItemsDo
	Assign(attrs ...field.AssignExpr) IAutoCheckItemsDo
	Joins(fields ...field.RelationField) IAutoCheckItemsDo
	Preload(fields ...field.RelationField) IAutoCheckItemsDo
	FirstOrInit() (*model.AutoCheckItems, error)
	FirstOrCreate() (*model.AutoCheckItems, error)
	FindByPage(offset int, limit int) (result []*model.AutoCheckItems, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoCheckItemsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoCheckItemsDo) Debug() IAutoCheckItemsDo {
	return a.withDO(a.DO.Debug())
}

func (a autoCheckItemsDo) WithContext(ctx context.Context) IAutoCheckItemsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoCheckItemsDo) ReadDB() IAutoCheckItemsDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoCheckItemsDo) WriteDB() IAutoCheckItemsDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoCheckItemsDo) Session(config *gorm.Session) IAutoCheckItemsDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoCheckItemsDo) Clauses(conds ...clause.Expression) IAutoCheckItemsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoCheckItemsDo) Returning(value interface{}, columns ...string) IAutoCheckItemsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoCheckItemsDo) Not(conds ...gen.Condition) IAutoCheckItemsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoCheckItemsDo) Or(conds ...gen.Condition) IAutoCheckItemsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoCheckItemsDo) Select(conds ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoCheckItemsDo) Where(conds ...gen.Condition) IAutoCheckItemsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoCheckItemsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoCheckItemsDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoCheckItemsDo) Order(conds ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoCheckItemsDo) Distinct(cols ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoCheckItemsDo) Omit(cols ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoCheckItemsDo) Join(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoCheckItemsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoCheckItemsDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoCheckItemsDo) Group(cols ...field.Expr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoCheckItemsDo) Having(conds ...gen.Condition) IAutoCheckItemsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoCheckItemsDo) Limit(limit int) IAutoCheckItemsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoCheckItemsDo) Offset(offset int) IAutoCheckItemsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoCheckItemsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckItemsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoCheckItemsDo) Unscoped() IAutoCheckItemsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoCheckItemsDo) Create(values ...*model.AutoCheckItems) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoCheckItemsDo) CreateInBatches(values []*model.AutoCheckItems, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoCheckItemsDo) Save(values ...*model.AutoCheckItems) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoCheckItemsDo) First() (*model.AutoCheckItems, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItems), nil
	}
}

func (a autoCheckItemsDo) Take() (*model.AutoCheckItems, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItems), nil
	}
}

func (a autoCheckItemsDo) Last() (*model.AutoCheckItems, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItems), nil
	}
}

func (a autoCheckItemsDo) Find() ([]*model.AutoCheckItems, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoCheckItems), err
}

func (a autoCheckItemsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckItems, err error) {
	buf := make([]*model.AutoCheckItems, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoCheckItemsDo) FindInBatches(result *[]*model.AutoCheckItems, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoCheckItemsDo) Attrs(attrs ...field.AssignExpr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoCheckItemsDo) Assign(attrs ...field.AssignExpr) IAutoCheckItemsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoCheckItemsDo) Joins(fields ...field.RelationField) IAutoCheckItemsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoCheckItemsDo) Preload(fields ...field.RelationField) IAutoCheckItemsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoCheckItemsDo) FirstOrInit() (*model.AutoCheckItems, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItems), nil
	}
}

func (a autoCheckItemsDo) FirstOrCreate() (*model.AutoCheckItems, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItems), nil
	}
}

func (a autoCheckItemsDo) FindByPage(offset int, limit int) (result []*model.AutoCheckItems, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoCheckItemsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoCheckItemsDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoCheckItemsDo) Delete(models ...*model.AutoCheckItems) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoCheckItemsDo) withDO(do gen.Dao) *autoCheckItemsDo {
	a.DO = *do.(*gen.DO)
	return a
}
