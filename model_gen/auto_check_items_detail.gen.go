// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAutoCheckItemsDetail(db *gorm.DB, opts ...gen.DOOption) autoCheckItemsDetail {
	_autoCheckItemsDetail := autoCheckItemsDetail{}

	_autoCheckItemsDetail.autoCheckItemsDetailDo.UseDB(db, opts...)
	_autoCheckItemsDetail.autoCheckItemsDetailDo.UseModel(&model.AutoCheckItemsDetail{})

	tableName := _autoCheckItemsDetail.autoCheckItemsDetailDo.TableName()
	_autoCheckItemsDetail.ALL = field.NewAsterisk(tableName)
	_autoCheckItemsDetail.ItemsDetailID = field.NewString(tableName, "items_detail_id")
	_autoCheckItemsDetail.ItemsID = field.NewString(tableName, "items_id")
	_autoCheckItemsDetail.ItemsDetailName = field.NewString(tableName, "items_detail_name")
	_autoCheckItemsDetail.ItemDesc = field.NewString(tableName, "item_desc")
	_autoCheckItemsDetail.ItemOperator = field.NewString(tableName, "item_operator")
	_autoCheckItemsDetail.ItemsUnit = field.NewString(tableName, "items_unit")
	_autoCheckItemsDetail.ItemsDetailDeadline = field.NewString(tableName, "items_detail_deadline")
	_autoCheckItemsDetail.ItemSolution = field.NewString(tableName, "item_solution")
	_autoCheckItemsDetail.ModuleName = field.NewString(tableName, "module_name")
	_autoCheckItemsDetail.ModuleArgs = field.NewString(tableName, "module_args")
	_autoCheckItemsDetail.FlagDel = field.NewString(tableName, "flag_del")
	_autoCheckItemsDetail.RootLevel = field.NewString(tableName, "root_level")
	_autoCheckItemsDetail.CreateTime = field.NewTime(tableName, "create_time")
	_autoCheckItemsDetail.ModifyTime = field.NewTime(tableName, "modify_time")
	_autoCheckItemsDetail.Comments = field.NewString(tableName, "comments")

	_autoCheckItemsDetail.fillFieldMap()

	return _autoCheckItemsDetail
}

type autoCheckItemsDetail struct {
	autoCheckItemsDetailDo

	ALL                 field.Asterisk
	ItemsDetailID       field.String // 监控项目id
	ItemsID             field.String // 监控类别id
	ItemsDetailName     field.String // 检查项目名称
	ItemDesc            field.String // 检查项目描述
	ItemOperator        field.String // 检查标记运算符 = < > >= <=
	ItemsUnit           field.String // 指标单位
	ItemsDetailDeadline field.String // 检查项目阈值
	ItemSolution        field.String // 项目问题解决方案
	ModuleName          field.String // command|ping|script
	ModuleArgs          field.String // 需要执行的命令或脚本
	FlagDel             field.String // 1 删除
	RootLevel           field.String // 1 需要root权限 0 -只需要普通用户权限
	CreateTime          field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime          field.Time   // 记录修改时间（数据库自动写入）
	Comments            field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a autoCheckItemsDetail) Table(newTableName string) *autoCheckItemsDetail {
	a.autoCheckItemsDetailDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoCheckItemsDetail) As(alias string) *autoCheckItemsDetail {
	a.autoCheckItemsDetailDo.DO = *(a.autoCheckItemsDetailDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoCheckItemsDetail) updateTableName(table string) *autoCheckItemsDetail {
	a.ALL = field.NewAsterisk(table)
	a.ItemsDetailID = field.NewString(table, "items_detail_id")
	a.ItemsID = field.NewString(table, "items_id")
	a.ItemsDetailName = field.NewString(table, "items_detail_name")
	a.ItemDesc = field.NewString(table, "item_desc")
	a.ItemOperator = field.NewString(table, "item_operator")
	a.ItemsUnit = field.NewString(table, "items_unit")
	a.ItemsDetailDeadline = field.NewString(table, "items_detail_deadline")
	a.ItemSolution = field.NewString(table, "item_solution")
	a.ModuleName = field.NewString(table, "module_name")
	a.ModuleArgs = field.NewString(table, "module_args")
	a.FlagDel = field.NewString(table, "flag_del")
	a.RootLevel = field.NewString(table, "root_level")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *autoCheckItemsDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoCheckItemsDetail) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["items_detail_id"] = a.ItemsDetailID
	a.fieldMap["items_id"] = a.ItemsID
	a.fieldMap["items_detail_name"] = a.ItemsDetailName
	a.fieldMap["item_desc"] = a.ItemDesc
	a.fieldMap["item_operator"] = a.ItemOperator
	a.fieldMap["items_unit"] = a.ItemsUnit
	a.fieldMap["items_detail_deadline"] = a.ItemsDetailDeadline
	a.fieldMap["item_solution"] = a.ItemSolution
	a.fieldMap["module_name"] = a.ModuleName
	a.fieldMap["module_args"] = a.ModuleArgs
	a.fieldMap["flag_del"] = a.FlagDel
	a.fieldMap["root_level"] = a.RootLevel
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a autoCheckItemsDetail) clone(db *gorm.DB) autoCheckItemsDetail {
	a.autoCheckItemsDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoCheckItemsDetail) replaceDB(db *gorm.DB) autoCheckItemsDetail {
	a.autoCheckItemsDetailDo.ReplaceDB(db)
	return a
}

type autoCheckItemsDetailDo struct{ gen.DO }

type IAutoCheckItemsDetailDo interface {
	gen.SubQuery
	Debug() IAutoCheckItemsDetailDo
	WithContext(ctx context.Context) IAutoCheckItemsDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoCheckItemsDetailDo
	WriteDB() IAutoCheckItemsDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoCheckItemsDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoCheckItemsDetailDo
	Not(conds ...gen.Condition) IAutoCheckItemsDetailDo
	Or(conds ...gen.Condition) IAutoCheckItemsDetailDo
	Select(conds ...field.Expr) IAutoCheckItemsDetailDo
	Where(conds ...gen.Condition) IAutoCheckItemsDetailDo
	Order(conds ...field.Expr) IAutoCheckItemsDetailDo
	Distinct(cols ...field.Expr) IAutoCheckItemsDetailDo
	Omit(cols ...field.Expr) IAutoCheckItemsDetailDo
	Join(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDetailDo
	Group(cols ...field.Expr) IAutoCheckItemsDetailDo
	Having(conds ...gen.Condition) IAutoCheckItemsDetailDo
	Limit(limit int) IAutoCheckItemsDetailDo
	Offset(offset int) IAutoCheckItemsDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckItemsDetailDo
	Unscoped() IAutoCheckItemsDetailDo
	Create(values ...*model.AutoCheckItemsDetail) error
	CreateInBatches(values []*model.AutoCheckItemsDetail, batchSize int) error
	Save(values ...*model.AutoCheckItemsDetail) error
	First() (*model.AutoCheckItemsDetail, error)
	Take() (*model.AutoCheckItemsDetail, error)
	Last() (*model.AutoCheckItemsDetail, error)
	Find() ([]*model.AutoCheckItemsDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckItemsDetail, err error)
	FindInBatches(result *[]*model.AutoCheckItemsDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoCheckItemsDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoCheckItemsDetailDo
	Assign(attrs ...field.AssignExpr) IAutoCheckItemsDetailDo
	Joins(fields ...field.RelationField) IAutoCheckItemsDetailDo
	Preload(fields ...field.RelationField) IAutoCheckItemsDetailDo
	FirstOrInit() (*model.AutoCheckItemsDetail, error)
	FirstOrCreate() (*model.AutoCheckItemsDetail, error)
	FindByPage(offset int, limit int) (result []*model.AutoCheckItemsDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoCheckItemsDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoCheckItemsDetailDo) Debug() IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Debug())
}

func (a autoCheckItemsDetailDo) WithContext(ctx context.Context) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoCheckItemsDetailDo) ReadDB() IAutoCheckItemsDetailDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoCheckItemsDetailDo) WriteDB() IAutoCheckItemsDetailDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoCheckItemsDetailDo) Session(config *gorm.Session) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoCheckItemsDetailDo) Clauses(conds ...clause.Expression) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoCheckItemsDetailDo) Returning(value interface{}, columns ...string) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoCheckItemsDetailDo) Not(conds ...gen.Condition) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoCheckItemsDetailDo) Or(conds ...gen.Condition) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoCheckItemsDetailDo) Select(conds ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoCheckItemsDetailDo) Where(conds ...gen.Condition) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoCheckItemsDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoCheckItemsDetailDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoCheckItemsDetailDo) Order(conds ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoCheckItemsDetailDo) Distinct(cols ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoCheckItemsDetailDo) Omit(cols ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoCheckItemsDetailDo) Join(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoCheckItemsDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoCheckItemsDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoCheckItemsDetailDo) Group(cols ...field.Expr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoCheckItemsDetailDo) Having(conds ...gen.Condition) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoCheckItemsDetailDo) Limit(limit int) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoCheckItemsDetailDo) Offset(offset int) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoCheckItemsDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoCheckItemsDetailDo) Unscoped() IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoCheckItemsDetailDo) Create(values ...*model.AutoCheckItemsDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoCheckItemsDetailDo) CreateInBatches(values []*model.AutoCheckItemsDetail, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoCheckItemsDetailDo) Save(values ...*model.AutoCheckItemsDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoCheckItemsDetailDo) First() (*model.AutoCheckItemsDetail, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItemsDetail), nil
	}
}

func (a autoCheckItemsDetailDo) Take() (*model.AutoCheckItemsDetail, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItemsDetail), nil
	}
}

func (a autoCheckItemsDetailDo) Last() (*model.AutoCheckItemsDetail, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItemsDetail), nil
	}
}

func (a autoCheckItemsDetailDo) Find() ([]*model.AutoCheckItemsDetail, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoCheckItemsDetail), err
}

func (a autoCheckItemsDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckItemsDetail, err error) {
	buf := make([]*model.AutoCheckItemsDetail, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoCheckItemsDetailDo) FindInBatches(result *[]*model.AutoCheckItemsDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoCheckItemsDetailDo) Attrs(attrs ...field.AssignExpr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoCheckItemsDetailDo) Assign(attrs ...field.AssignExpr) IAutoCheckItemsDetailDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoCheckItemsDetailDo) Joins(fields ...field.RelationField) IAutoCheckItemsDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoCheckItemsDetailDo) Preload(fields ...field.RelationField) IAutoCheckItemsDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoCheckItemsDetailDo) FirstOrInit() (*model.AutoCheckItemsDetail, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItemsDetail), nil
	}
}

func (a autoCheckItemsDetailDo) FirstOrCreate() (*model.AutoCheckItemsDetail, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckItemsDetail), nil
	}
}

func (a autoCheckItemsDetailDo) FindByPage(offset int, limit int) (result []*model.AutoCheckItemsDetail, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoCheckItemsDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoCheckItemsDetailDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoCheckItemsDetailDo) Delete(models ...*model.AutoCheckItemsDetail) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoCheckItemsDetailDo) withDO(do gen.Dao) *autoCheckItemsDetailDo {
	a.DO = *do.(*gen.DO)
	return a
}
