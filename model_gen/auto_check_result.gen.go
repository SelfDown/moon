// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAutoCheckResult(db *gorm.DB, opts ...gen.DOOption) autoCheckResult {
	_autoCheckResult := autoCheckResult{}

	_autoCheckResult.autoCheckResultDo.UseDB(db, opts...)
	_autoCheckResult.autoCheckResultDo.UseModel(&model.AutoCheckResult{})

	tableName := _autoCheckResult.autoCheckResultDo.TableName()
	_autoCheckResult.ALL = field.NewAsterisk(tableName)
	_autoCheckResult.EventID = field.NewString(tableName, "event_id")
	_autoCheckResult.ServerIP = field.NewString(tableName, "server_ip")
	_autoCheckResult.ItemsID = field.NewString(tableName, "items_id")
	_autoCheckResult.ItemsDetailID = field.NewString(tableName, "items_detail_id")
	_autoCheckResult.ItemsResult = field.NewString(tableName, "items_result")
	_autoCheckResult.CheckDate = field.NewTime(tableName, "check_date")
	_autoCheckResult.ServerEnvID = field.NewString(tableName, "server_env_id")
	_autoCheckResult.Warn = field.NewString(tableName, "warn")
	_autoCheckResult.CreateTime = field.NewTime(tableName, "create_time")
	_autoCheckResult.ModifyTime = field.NewTime(tableName, "modify_time")
	_autoCheckResult.Comments = field.NewString(tableName, "comments")

	_autoCheckResult.fillFieldMap()

	return _autoCheckResult
}

type autoCheckResult struct {
	autoCheckResultDo

	ALL           field.Asterisk
	EventID       field.String
	ServerIP      field.String // 主机id
	ItemsID       field.String
	ItemsDetailID field.String
	ItemsResult   field.String
	CheckDate     field.Time
	ServerEnvID   field.String
	Warn          field.String // 0 - 正常 1 异常
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (a autoCheckResult) Table(newTableName string) *autoCheckResult {
	a.autoCheckResultDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoCheckResult) As(alias string) *autoCheckResult {
	a.autoCheckResultDo.DO = *(a.autoCheckResultDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoCheckResult) updateTableName(table string) *autoCheckResult {
	a.ALL = field.NewAsterisk(table)
	a.EventID = field.NewString(table, "event_id")
	a.ServerIP = field.NewString(table, "server_ip")
	a.ItemsID = field.NewString(table, "items_id")
	a.ItemsDetailID = field.NewString(table, "items_detail_id")
	a.ItemsResult = field.NewString(table, "items_result")
	a.CheckDate = field.NewTime(table, "check_date")
	a.ServerEnvID = field.NewString(table, "server_env_id")
	a.Warn = field.NewString(table, "warn")
	a.CreateTime = field.NewTime(table, "create_time")
	a.ModifyTime = field.NewTime(table, "modify_time")
	a.Comments = field.NewString(table, "comments")

	a.fillFieldMap()

	return a
}

func (a *autoCheckResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoCheckResult) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["event_id"] = a.EventID
	a.fieldMap["server_ip"] = a.ServerIP
	a.fieldMap["items_id"] = a.ItemsID
	a.fieldMap["items_detail_id"] = a.ItemsDetailID
	a.fieldMap["items_result"] = a.ItemsResult
	a.fieldMap["check_date"] = a.CheckDate
	a.fieldMap["server_env_id"] = a.ServerEnvID
	a.fieldMap["warn"] = a.Warn
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["modify_time"] = a.ModifyTime
	a.fieldMap["comments"] = a.Comments
}

func (a autoCheckResult) clone(db *gorm.DB) autoCheckResult {
	a.autoCheckResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoCheckResult) replaceDB(db *gorm.DB) autoCheckResult {
	a.autoCheckResultDo.ReplaceDB(db)
	return a
}

type autoCheckResultDo struct{ gen.DO }

type IAutoCheckResultDo interface {
	gen.SubQuery
	Debug() IAutoCheckResultDo
	WithContext(ctx context.Context) IAutoCheckResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoCheckResultDo
	WriteDB() IAutoCheckResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoCheckResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoCheckResultDo
	Not(conds ...gen.Condition) IAutoCheckResultDo
	Or(conds ...gen.Condition) IAutoCheckResultDo
	Select(conds ...field.Expr) IAutoCheckResultDo
	Where(conds ...gen.Condition) IAutoCheckResultDo
	Order(conds ...field.Expr) IAutoCheckResultDo
	Distinct(cols ...field.Expr) IAutoCheckResultDo
	Omit(cols ...field.Expr) IAutoCheckResultDo
	Join(table schema.Tabler, on ...field.Expr) IAutoCheckResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckResultDo
	Group(cols ...field.Expr) IAutoCheckResultDo
	Having(conds ...gen.Condition) IAutoCheckResultDo
	Limit(limit int) IAutoCheckResultDo
	Offset(offset int) IAutoCheckResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckResultDo
	Unscoped() IAutoCheckResultDo
	Create(values ...*model.AutoCheckResult) error
	CreateInBatches(values []*model.AutoCheckResult, batchSize int) error
	Save(values ...*model.AutoCheckResult) error
	First() (*model.AutoCheckResult, error)
	Take() (*model.AutoCheckResult, error)
	Last() (*model.AutoCheckResult, error)
	Find() ([]*model.AutoCheckResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckResult, err error)
	FindInBatches(result *[]*model.AutoCheckResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoCheckResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoCheckResultDo
	Assign(attrs ...field.AssignExpr) IAutoCheckResultDo
	Joins(fields ...field.RelationField) IAutoCheckResultDo
	Preload(fields ...field.RelationField) IAutoCheckResultDo
	FirstOrInit() (*model.AutoCheckResult, error)
	FirstOrCreate() (*model.AutoCheckResult, error)
	FindByPage(offset int, limit int) (result []*model.AutoCheckResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoCheckResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoCheckResultDo) Debug() IAutoCheckResultDo {
	return a.withDO(a.DO.Debug())
}

func (a autoCheckResultDo) WithContext(ctx context.Context) IAutoCheckResultDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoCheckResultDo) ReadDB() IAutoCheckResultDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoCheckResultDo) WriteDB() IAutoCheckResultDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoCheckResultDo) Session(config *gorm.Session) IAutoCheckResultDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoCheckResultDo) Clauses(conds ...clause.Expression) IAutoCheckResultDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoCheckResultDo) Returning(value interface{}, columns ...string) IAutoCheckResultDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoCheckResultDo) Not(conds ...gen.Condition) IAutoCheckResultDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoCheckResultDo) Or(conds ...gen.Condition) IAutoCheckResultDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoCheckResultDo) Select(conds ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoCheckResultDo) Where(conds ...gen.Condition) IAutoCheckResultDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoCheckResultDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoCheckResultDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoCheckResultDo) Order(conds ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoCheckResultDo) Distinct(cols ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoCheckResultDo) Omit(cols ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoCheckResultDo) Join(table schema.Tabler, on ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoCheckResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoCheckResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoCheckResultDo) Group(cols ...field.Expr) IAutoCheckResultDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoCheckResultDo) Having(conds ...gen.Condition) IAutoCheckResultDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoCheckResultDo) Limit(limit int) IAutoCheckResultDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoCheckResultDo) Offset(offset int) IAutoCheckResultDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoCheckResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoCheckResultDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoCheckResultDo) Unscoped() IAutoCheckResultDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoCheckResultDo) Create(values ...*model.AutoCheckResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoCheckResultDo) CreateInBatches(values []*model.AutoCheckResult, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoCheckResultDo) Save(values ...*model.AutoCheckResult) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoCheckResultDo) First() (*model.AutoCheckResult, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckResult), nil
	}
}

func (a autoCheckResultDo) Take() (*model.AutoCheckResult, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckResult), nil
	}
}

func (a autoCheckResultDo) Last() (*model.AutoCheckResult, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckResult), nil
	}
}

func (a autoCheckResultDo) Find() ([]*model.AutoCheckResult, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoCheckResult), err
}

func (a autoCheckResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoCheckResult, err error) {
	buf := make([]*model.AutoCheckResult, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoCheckResultDo) FindInBatches(result *[]*model.AutoCheckResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoCheckResultDo) Attrs(attrs ...field.AssignExpr) IAutoCheckResultDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoCheckResultDo) Assign(attrs ...field.AssignExpr) IAutoCheckResultDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoCheckResultDo) Joins(fields ...field.RelationField) IAutoCheckResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoCheckResultDo) Preload(fields ...field.RelationField) IAutoCheckResultDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoCheckResultDo) FirstOrInit() (*model.AutoCheckResult, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckResult), nil
	}
}

func (a autoCheckResultDo) FirstOrCreate() (*model.AutoCheckResult, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoCheckResult), nil
	}
}

func (a autoCheckResultDo) FindByPage(offset int, limit int) (result []*model.AutoCheckResult, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoCheckResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoCheckResultDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoCheckResultDo) Delete(models ...*model.AutoCheckResult) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoCheckResultDo) withDO(do gen.Dao) *autoCheckResultDo {
	a.DO = *do.(*gen.DO)
	return a
}
