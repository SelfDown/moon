// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newAutoTestRecord(db *gorm.DB, opts ...gen.DOOption) autoTestRecord {
	_autoTestRecord := autoTestRecord{}

	_autoTestRecord.autoTestRecordDo.UseDB(db, opts...)
	_autoTestRecord.autoTestRecordDo.UseModel(&model.AutoTestRecord{})

	tableName := _autoTestRecord.autoTestRecordDo.TableName()
	_autoTestRecord.ALL = field.NewAsterisk(tableName)
	_autoTestRecord.AutoTestRecordID = field.NewString(tableName, "auto_test_record_id")
	_autoTestRecord.ReqID = field.NewString(tableName, "req_id")
	_autoTestRecord.ServerEnvID = field.NewString(tableName, "server_env_id")
	_autoTestRecord.TestResultID = field.NewString(tableName, "test_result_id")
	_autoTestRecord.TestResultContent = field.NewString(tableName, "test_result_content")
	_autoTestRecord.TestResultStatus = field.NewString(tableName, "test_result_status")
	_autoTestRecord.CreateTime = field.NewString(tableName, "create_time")
	_autoTestRecord.CreateUser = field.NewString(tableName, "create_user")

	_autoTestRecord.fillFieldMap()

	return _autoTestRecord
}

type autoTestRecord struct {
	autoTestRecordDo

	ALL               field.Asterisk
	AutoTestRecordID  field.String
	ReqID             field.String
	ServerEnvID       field.String
	TestResultID      field.String
	TestResultContent field.String
	TestResultStatus  field.String
	CreateTime        field.String
	CreateUser        field.String

	fieldMap map[string]field.Expr
}

func (a autoTestRecord) Table(newTableName string) *autoTestRecord {
	a.autoTestRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoTestRecord) As(alias string) *autoTestRecord {
	a.autoTestRecordDo.DO = *(a.autoTestRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoTestRecord) updateTableName(table string) *autoTestRecord {
	a.ALL = field.NewAsterisk(table)
	a.AutoTestRecordID = field.NewString(table, "auto_test_record_id")
	a.ReqID = field.NewString(table, "req_id")
	a.ServerEnvID = field.NewString(table, "server_env_id")
	a.TestResultID = field.NewString(table, "test_result_id")
	a.TestResultContent = field.NewString(table, "test_result_content")
	a.TestResultStatus = field.NewString(table, "test_result_status")
	a.CreateTime = field.NewString(table, "create_time")
	a.CreateUser = field.NewString(table, "create_user")

	a.fillFieldMap()

	return a
}

func (a *autoTestRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoTestRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["auto_test_record_id"] = a.AutoTestRecordID
	a.fieldMap["req_id"] = a.ReqID
	a.fieldMap["server_env_id"] = a.ServerEnvID
	a.fieldMap["test_result_id"] = a.TestResultID
	a.fieldMap["test_result_content"] = a.TestResultContent
	a.fieldMap["test_result_status"] = a.TestResultStatus
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["create_user"] = a.CreateUser
}

func (a autoTestRecord) clone(db *gorm.DB) autoTestRecord {
	a.autoTestRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoTestRecord) replaceDB(db *gorm.DB) autoTestRecord {
	a.autoTestRecordDo.ReplaceDB(db)
	return a
}

type autoTestRecordDo struct{ gen.DO }

type IAutoTestRecordDo interface {
	gen.SubQuery
	Debug() IAutoTestRecordDo
	WithContext(ctx context.Context) IAutoTestRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAutoTestRecordDo
	WriteDB() IAutoTestRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAutoTestRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAutoTestRecordDo
	Not(conds ...gen.Condition) IAutoTestRecordDo
	Or(conds ...gen.Condition) IAutoTestRecordDo
	Select(conds ...field.Expr) IAutoTestRecordDo
	Where(conds ...gen.Condition) IAutoTestRecordDo
	Order(conds ...field.Expr) IAutoTestRecordDo
	Distinct(cols ...field.Expr) IAutoTestRecordDo
	Omit(cols ...field.Expr) IAutoTestRecordDo
	Join(table schema.Tabler, on ...field.Expr) IAutoTestRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAutoTestRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAutoTestRecordDo
	Group(cols ...field.Expr) IAutoTestRecordDo
	Having(conds ...gen.Condition) IAutoTestRecordDo
	Limit(limit int) IAutoTestRecordDo
	Offset(offset int) IAutoTestRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoTestRecordDo
	Unscoped() IAutoTestRecordDo
	Create(values ...*model.AutoTestRecord) error
	CreateInBatches(values []*model.AutoTestRecord, batchSize int) error
	Save(values ...*model.AutoTestRecord) error
	First() (*model.AutoTestRecord, error)
	Take() (*model.AutoTestRecord, error)
	Last() (*model.AutoTestRecord, error)
	Find() ([]*model.AutoTestRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoTestRecord, err error)
	FindInBatches(result *[]*model.AutoTestRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AutoTestRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAutoTestRecordDo
	Assign(attrs ...field.AssignExpr) IAutoTestRecordDo
	Joins(fields ...field.RelationField) IAutoTestRecordDo
	Preload(fields ...field.RelationField) IAutoTestRecordDo
	FirstOrInit() (*model.AutoTestRecord, error)
	FirstOrCreate() (*model.AutoTestRecord, error)
	FindByPage(offset int, limit int) (result []*model.AutoTestRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAutoTestRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a autoTestRecordDo) Debug() IAutoTestRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a autoTestRecordDo) WithContext(ctx context.Context) IAutoTestRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoTestRecordDo) ReadDB() IAutoTestRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoTestRecordDo) WriteDB() IAutoTestRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoTestRecordDo) Session(config *gorm.Session) IAutoTestRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoTestRecordDo) Clauses(conds ...clause.Expression) IAutoTestRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoTestRecordDo) Returning(value interface{}, columns ...string) IAutoTestRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoTestRecordDo) Not(conds ...gen.Condition) IAutoTestRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoTestRecordDo) Or(conds ...gen.Condition) IAutoTestRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoTestRecordDo) Select(conds ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoTestRecordDo) Where(conds ...gen.Condition) IAutoTestRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoTestRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAutoTestRecordDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a autoTestRecordDo) Order(conds ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoTestRecordDo) Distinct(cols ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoTestRecordDo) Omit(cols ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoTestRecordDo) Join(table schema.Tabler, on ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoTestRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoTestRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoTestRecordDo) Group(cols ...field.Expr) IAutoTestRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoTestRecordDo) Having(conds ...gen.Condition) IAutoTestRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoTestRecordDo) Limit(limit int) IAutoTestRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoTestRecordDo) Offset(offset int) IAutoTestRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoTestRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAutoTestRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoTestRecordDo) Unscoped() IAutoTestRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoTestRecordDo) Create(values ...*model.AutoTestRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoTestRecordDo) CreateInBatches(values []*model.AutoTestRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoTestRecordDo) Save(values ...*model.AutoTestRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoTestRecordDo) First() (*model.AutoTestRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoTestRecord), nil
	}
}

func (a autoTestRecordDo) Take() (*model.AutoTestRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoTestRecord), nil
	}
}

func (a autoTestRecordDo) Last() (*model.AutoTestRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoTestRecord), nil
	}
}

func (a autoTestRecordDo) Find() ([]*model.AutoTestRecord, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoTestRecord), err
}

func (a autoTestRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoTestRecord, err error) {
	buf := make([]*model.AutoTestRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoTestRecordDo) FindInBatches(result *[]*model.AutoTestRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoTestRecordDo) Attrs(attrs ...field.AssignExpr) IAutoTestRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoTestRecordDo) Assign(attrs ...field.AssignExpr) IAutoTestRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoTestRecordDo) Joins(fields ...field.RelationField) IAutoTestRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoTestRecordDo) Preload(fields ...field.RelationField) IAutoTestRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoTestRecordDo) FirstOrInit() (*model.AutoTestRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoTestRecord), nil
	}
}

func (a autoTestRecordDo) FirstOrCreate() (*model.AutoTestRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoTestRecord), nil
	}
}

func (a autoTestRecordDo) FindByPage(offset int, limit int) (result []*model.AutoTestRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoTestRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoTestRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoTestRecordDo) Delete(models ...*model.AutoTestRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoTestRecordDo) withDO(do gen.Dao) *autoTestRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}
