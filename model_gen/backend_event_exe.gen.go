// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newBackendEventExe(db *gorm.DB, opts ...gen.DOOption) backendEventExe {
	_backendEventExe := backendEventExe{}

	_backendEventExe.backendEventExeDo.UseDB(db, opts...)
	_backendEventExe.backendEventExeDo.UseModel(&model.BackendEventExe{})

	tableName := _backendEventExe.backendEventExeDo.TableName()
	_backendEventExe.ALL = field.NewAsterisk(tableName)
	_backendEventExe.EventExeID = field.NewString(tableName, "event_exe_id")
	_backendEventExe.EventExeCode = field.NewString(tableName, "event_exe_code")
	_backendEventExe.Project = field.NewString(tableName, "project")
	_backendEventExe.Params = field.NewString(tableName, "params")
	_backendEventExe.Status = field.NewString(tableName, "status")
	_backendEventExe.AddTime = field.NewTime(tableName, "add_time")
	_backendEventExe.StartExeTime = field.NewTime(tableName, "start_exe_time")
	_backendEventExe.EndExeTime = field.NewTime(tableName, "end_exe_time")
	_backendEventExe.ProxyURL = field.NewString(tableName, "proxy_url")
	_backendEventExe.Result = field.NewString(tableName, "result")
	_backendEventExe.IsAddQueue = field.NewString(tableName, "is_add_queue")
	_backendEventExe.Note = field.NewString(tableName, "note")
	_backendEventExe.LimitStartTime = field.NewTime(tableName, "limit_start_time")

	_backendEventExe.fillFieldMap()

	return _backendEventExe
}

type backendEventExe struct {
	backendEventExeDo

	ALL            field.Asterisk
	EventExeID     field.String // ID
	EventExeCode   field.String // 业务代码
	Project        field.String // 限定项目
	Params         field.String // 请求参数，json串
	Status         field.String // 状态 1、新增  2、正在执行 3、结束
	AddTime        field.Time   // 添加时间
	StartExeTime   field.Time   // 开始时间
	EndExeTime     field.Time   // 结束时间
	ProxyURL       field.String // 将待执行的数据以json数据post到代理地址
	Result         field.String
	IsAddQueue     field.String // 0、未添加到队列  1、已经添加
	Note           field.String
	LimitStartTime field.Time // 限定开始时间不早于

	fieldMap map[string]field.Expr
}

func (b backendEventExe) Table(newTableName string) *backendEventExe {
	b.backendEventExeDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b backendEventExe) As(alias string) *backendEventExe {
	b.backendEventExeDo.DO = *(b.backendEventExeDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *backendEventExe) updateTableName(table string) *backendEventExe {
	b.ALL = field.NewAsterisk(table)
	b.EventExeID = field.NewString(table, "event_exe_id")
	b.EventExeCode = field.NewString(table, "event_exe_code")
	b.Project = field.NewString(table, "project")
	b.Params = field.NewString(table, "params")
	b.Status = field.NewString(table, "status")
	b.AddTime = field.NewTime(table, "add_time")
	b.StartExeTime = field.NewTime(table, "start_exe_time")
	b.EndExeTime = field.NewTime(table, "end_exe_time")
	b.ProxyURL = field.NewString(table, "proxy_url")
	b.Result = field.NewString(table, "result")
	b.IsAddQueue = field.NewString(table, "is_add_queue")
	b.Note = field.NewString(table, "note")
	b.LimitStartTime = field.NewTime(table, "limit_start_time")

	b.fillFieldMap()

	return b
}

func (b *backendEventExe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *backendEventExe) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["event_exe_id"] = b.EventExeID
	b.fieldMap["event_exe_code"] = b.EventExeCode
	b.fieldMap["project"] = b.Project
	b.fieldMap["params"] = b.Params
	b.fieldMap["status"] = b.Status
	b.fieldMap["add_time"] = b.AddTime
	b.fieldMap["start_exe_time"] = b.StartExeTime
	b.fieldMap["end_exe_time"] = b.EndExeTime
	b.fieldMap["proxy_url"] = b.ProxyURL
	b.fieldMap["result"] = b.Result
	b.fieldMap["is_add_queue"] = b.IsAddQueue
	b.fieldMap["note"] = b.Note
	b.fieldMap["limit_start_time"] = b.LimitStartTime
}

func (b backendEventExe) clone(db *gorm.DB) backendEventExe {
	b.backendEventExeDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b backendEventExe) replaceDB(db *gorm.DB) backendEventExe {
	b.backendEventExeDo.ReplaceDB(db)
	return b
}

type backendEventExeDo struct{ gen.DO }

type IBackendEventExeDo interface {
	gen.SubQuery
	Debug() IBackendEventExeDo
	WithContext(ctx context.Context) IBackendEventExeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBackendEventExeDo
	WriteDB() IBackendEventExeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBackendEventExeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBackendEventExeDo
	Not(conds ...gen.Condition) IBackendEventExeDo
	Or(conds ...gen.Condition) IBackendEventExeDo
	Select(conds ...field.Expr) IBackendEventExeDo
	Where(conds ...gen.Condition) IBackendEventExeDo
	Order(conds ...field.Expr) IBackendEventExeDo
	Distinct(cols ...field.Expr) IBackendEventExeDo
	Omit(cols ...field.Expr) IBackendEventExeDo
	Join(table schema.Tabler, on ...field.Expr) IBackendEventExeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBackendEventExeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBackendEventExeDo
	Group(cols ...field.Expr) IBackendEventExeDo
	Having(conds ...gen.Condition) IBackendEventExeDo
	Limit(limit int) IBackendEventExeDo
	Offset(offset int) IBackendEventExeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBackendEventExeDo
	Unscoped() IBackendEventExeDo
	Create(values ...*model.BackendEventExe) error
	CreateInBatches(values []*model.BackendEventExe, batchSize int) error
	Save(values ...*model.BackendEventExe) error
	First() (*model.BackendEventExe, error)
	Take() (*model.BackendEventExe, error)
	Last() (*model.BackendEventExe, error)
	Find() ([]*model.BackendEventExe, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BackendEventExe, err error)
	FindInBatches(result *[]*model.BackendEventExe, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BackendEventExe) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBackendEventExeDo
	Assign(attrs ...field.AssignExpr) IBackendEventExeDo
	Joins(fields ...field.RelationField) IBackendEventExeDo
	Preload(fields ...field.RelationField) IBackendEventExeDo
	FirstOrInit() (*model.BackendEventExe, error)
	FirstOrCreate() (*model.BackendEventExe, error)
	FindByPage(offset int, limit int) (result []*model.BackendEventExe, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBackendEventExeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b backendEventExeDo) Debug() IBackendEventExeDo {
	return b.withDO(b.DO.Debug())
}

func (b backendEventExeDo) WithContext(ctx context.Context) IBackendEventExeDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b backendEventExeDo) ReadDB() IBackendEventExeDo {
	return b.Clauses(dbresolver.Read)
}

func (b backendEventExeDo) WriteDB() IBackendEventExeDo {
	return b.Clauses(dbresolver.Write)
}

func (b backendEventExeDo) Session(config *gorm.Session) IBackendEventExeDo {
	return b.withDO(b.DO.Session(config))
}

func (b backendEventExeDo) Clauses(conds ...clause.Expression) IBackendEventExeDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b backendEventExeDo) Returning(value interface{}, columns ...string) IBackendEventExeDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b backendEventExeDo) Not(conds ...gen.Condition) IBackendEventExeDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b backendEventExeDo) Or(conds ...gen.Condition) IBackendEventExeDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b backendEventExeDo) Select(conds ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b backendEventExeDo) Where(conds ...gen.Condition) IBackendEventExeDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b backendEventExeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBackendEventExeDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b backendEventExeDo) Order(conds ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b backendEventExeDo) Distinct(cols ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b backendEventExeDo) Omit(cols ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b backendEventExeDo) Join(table schema.Tabler, on ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b backendEventExeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b backendEventExeDo) RightJoin(table schema.Tabler, on ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b backendEventExeDo) Group(cols ...field.Expr) IBackendEventExeDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b backendEventExeDo) Having(conds ...gen.Condition) IBackendEventExeDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b backendEventExeDo) Limit(limit int) IBackendEventExeDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b backendEventExeDo) Offset(offset int) IBackendEventExeDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b backendEventExeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBackendEventExeDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b backendEventExeDo) Unscoped() IBackendEventExeDo {
	return b.withDO(b.DO.Unscoped())
}

func (b backendEventExeDo) Create(values ...*model.BackendEventExe) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b backendEventExeDo) CreateInBatches(values []*model.BackendEventExe, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b backendEventExeDo) Save(values ...*model.BackendEventExe) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b backendEventExeDo) First() (*model.BackendEventExe, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BackendEventExe), nil
	}
}

func (b backendEventExeDo) Take() (*model.BackendEventExe, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BackendEventExe), nil
	}
}

func (b backendEventExeDo) Last() (*model.BackendEventExe, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BackendEventExe), nil
	}
}

func (b backendEventExeDo) Find() ([]*model.BackendEventExe, error) {
	result, err := b.DO.Find()
	return result.([]*model.BackendEventExe), err
}

func (b backendEventExeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BackendEventExe, err error) {
	buf := make([]*model.BackendEventExe, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b backendEventExeDo) FindInBatches(result *[]*model.BackendEventExe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b backendEventExeDo) Attrs(attrs ...field.AssignExpr) IBackendEventExeDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b backendEventExeDo) Assign(attrs ...field.AssignExpr) IBackendEventExeDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b backendEventExeDo) Joins(fields ...field.RelationField) IBackendEventExeDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b backendEventExeDo) Preload(fields ...field.RelationField) IBackendEventExeDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b backendEventExeDo) FirstOrInit() (*model.BackendEventExe, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BackendEventExe), nil
	}
}

func (b backendEventExeDo) FirstOrCreate() (*model.BackendEventExe, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BackendEventExe), nil
	}
}

func (b backendEventExeDo) FindByPage(offset int, limit int) (result []*model.BackendEventExe, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b backendEventExeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b backendEventExeDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b backendEventExeDo) Delete(models ...*model.BackendEventExe) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *backendEventExeDo) withDO(do gen.Dao) *backendEventExeDo {
	b.DO = *do.(*gen.DO)
	return b
}
