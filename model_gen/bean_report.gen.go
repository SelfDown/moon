// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newBeanReport(db *gorm.DB, opts ...gen.DOOption) beanReport {
	_beanReport := beanReport{}

	_beanReport.beanReportDo.UseDB(db, opts...)
	_beanReport.beanReportDo.UseModel(&model.BeanReport{})

	tableName := _beanReport.beanReportDo.TableName()
	_beanReport.ALL = field.NewAsterisk(tableName)
	_beanReport.BeanReportID = field.NewString(tableName, "bean_report_id")
	_beanReport.Name = field.NewString(tableName, "name")
	_beanReport.Yw = field.NewString(tableName, "yw")
	_beanReport.StartTime = field.NewString(tableName, "start_time")
	_beanReport.EndTime = field.NewString(tableName, "end_time")
	_beanReport.CreateTime = field.NewString(tableName, "create_time")
	_beanReport.ModifyTime = field.NewString(tableName, "modify_time")
	_beanReport.CreateUser = field.NewString(tableName, "create_user")

	_beanReport.fillFieldMap()

	return _beanReport
}

type beanReport struct {
	beanReportDo

	ALL          field.Asterisk
	BeanReportID field.String
	Name         field.String // 标题
	Yw           field.String // 按照年和周生成一个版本
	StartTime    field.String
	EndTime      field.String
	CreateTime   field.String
	ModifyTime   field.String
	CreateUser   field.String

	fieldMap map[string]field.Expr
}

func (b beanReport) Table(newTableName string) *beanReport {
	b.beanReportDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b beanReport) As(alias string) *beanReport {
	b.beanReportDo.DO = *(b.beanReportDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *beanReport) updateTableName(table string) *beanReport {
	b.ALL = field.NewAsterisk(table)
	b.BeanReportID = field.NewString(table, "bean_report_id")
	b.Name = field.NewString(table, "name")
	b.Yw = field.NewString(table, "yw")
	b.StartTime = field.NewString(table, "start_time")
	b.EndTime = field.NewString(table, "end_time")
	b.CreateTime = field.NewString(table, "create_time")
	b.ModifyTime = field.NewString(table, "modify_time")
	b.CreateUser = field.NewString(table, "create_user")

	b.fillFieldMap()

	return b
}

func (b *beanReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *beanReport) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["bean_report_id"] = b.BeanReportID
	b.fieldMap["name"] = b.Name
	b.fieldMap["yw"] = b.Yw
	b.fieldMap["start_time"] = b.StartTime
	b.fieldMap["end_time"] = b.EndTime
	b.fieldMap["create_time"] = b.CreateTime
	b.fieldMap["modify_time"] = b.ModifyTime
	b.fieldMap["create_user"] = b.CreateUser
}

func (b beanReport) clone(db *gorm.DB) beanReport {
	b.beanReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b beanReport) replaceDB(db *gorm.DB) beanReport {
	b.beanReportDo.ReplaceDB(db)
	return b
}

type beanReportDo struct{ gen.DO }

type IBeanReportDo interface {
	gen.SubQuery
	Debug() IBeanReportDo
	WithContext(ctx context.Context) IBeanReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBeanReportDo
	WriteDB() IBeanReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBeanReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBeanReportDo
	Not(conds ...gen.Condition) IBeanReportDo
	Or(conds ...gen.Condition) IBeanReportDo
	Select(conds ...field.Expr) IBeanReportDo
	Where(conds ...gen.Condition) IBeanReportDo
	Order(conds ...field.Expr) IBeanReportDo
	Distinct(cols ...field.Expr) IBeanReportDo
	Omit(cols ...field.Expr) IBeanReportDo
	Join(table schema.Tabler, on ...field.Expr) IBeanReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBeanReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBeanReportDo
	Group(cols ...field.Expr) IBeanReportDo
	Having(conds ...gen.Condition) IBeanReportDo
	Limit(limit int) IBeanReportDo
	Offset(offset int) IBeanReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBeanReportDo
	Unscoped() IBeanReportDo
	Create(values ...*model.BeanReport) error
	CreateInBatches(values []*model.BeanReport, batchSize int) error
	Save(values ...*model.BeanReport) error
	First() (*model.BeanReport, error)
	Take() (*model.BeanReport, error)
	Last() (*model.BeanReport, error)
	Find() ([]*model.BeanReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BeanReport, err error)
	FindInBatches(result *[]*model.BeanReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BeanReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBeanReportDo
	Assign(attrs ...field.AssignExpr) IBeanReportDo
	Joins(fields ...field.RelationField) IBeanReportDo
	Preload(fields ...field.RelationField) IBeanReportDo
	FirstOrInit() (*model.BeanReport, error)
	FirstOrCreate() (*model.BeanReport, error)
	FindByPage(offset int, limit int) (result []*model.BeanReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBeanReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b beanReportDo) Debug() IBeanReportDo {
	return b.withDO(b.DO.Debug())
}

func (b beanReportDo) WithContext(ctx context.Context) IBeanReportDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b beanReportDo) ReadDB() IBeanReportDo {
	return b.Clauses(dbresolver.Read)
}

func (b beanReportDo) WriteDB() IBeanReportDo {
	return b.Clauses(dbresolver.Write)
}

func (b beanReportDo) Session(config *gorm.Session) IBeanReportDo {
	return b.withDO(b.DO.Session(config))
}

func (b beanReportDo) Clauses(conds ...clause.Expression) IBeanReportDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b beanReportDo) Returning(value interface{}, columns ...string) IBeanReportDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b beanReportDo) Not(conds ...gen.Condition) IBeanReportDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b beanReportDo) Or(conds ...gen.Condition) IBeanReportDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b beanReportDo) Select(conds ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b beanReportDo) Where(conds ...gen.Condition) IBeanReportDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b beanReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBeanReportDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b beanReportDo) Order(conds ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b beanReportDo) Distinct(cols ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b beanReportDo) Omit(cols ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b beanReportDo) Join(table schema.Tabler, on ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b beanReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b beanReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b beanReportDo) Group(cols ...field.Expr) IBeanReportDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b beanReportDo) Having(conds ...gen.Condition) IBeanReportDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b beanReportDo) Limit(limit int) IBeanReportDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b beanReportDo) Offset(offset int) IBeanReportDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b beanReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBeanReportDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b beanReportDo) Unscoped() IBeanReportDo {
	return b.withDO(b.DO.Unscoped())
}

func (b beanReportDo) Create(values ...*model.BeanReport) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b beanReportDo) CreateInBatches(values []*model.BeanReport, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b beanReportDo) Save(values ...*model.BeanReport) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b beanReportDo) First() (*model.BeanReport, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BeanReport), nil
	}
}

func (b beanReportDo) Take() (*model.BeanReport, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BeanReport), nil
	}
}

func (b beanReportDo) Last() (*model.BeanReport, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BeanReport), nil
	}
}

func (b beanReportDo) Find() ([]*model.BeanReport, error) {
	result, err := b.DO.Find()
	return result.([]*model.BeanReport), err
}

func (b beanReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BeanReport, err error) {
	buf := make([]*model.BeanReport, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b beanReportDo) FindInBatches(result *[]*model.BeanReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b beanReportDo) Attrs(attrs ...field.AssignExpr) IBeanReportDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b beanReportDo) Assign(attrs ...field.AssignExpr) IBeanReportDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b beanReportDo) Joins(fields ...field.RelationField) IBeanReportDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b beanReportDo) Preload(fields ...field.RelationField) IBeanReportDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b beanReportDo) FirstOrInit() (*model.BeanReport, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BeanReport), nil
	}
}

func (b beanReportDo) FirstOrCreate() (*model.BeanReport, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BeanReport), nil
	}
}

func (b beanReportDo) FindByPage(offset int, limit int) (result []*model.BeanReport, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b beanReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b beanReportDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b beanReportDo) Delete(models ...*model.BeanReport) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *beanReportDo) withDO(do gen.Dao) *beanReportDo {
	b.DO = *do.(*gen.DO)
	return b
}
