// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newBuildFlow(db *gorm.DB, opts ...gen.DOOption) buildFlow {
	_buildFlow := buildFlow{}

	_buildFlow.buildFlowDo.UseDB(db, opts...)
	_buildFlow.buildFlowDo.UseModel(&model.BuildFlow{})

	tableName := _buildFlow.buildFlowDo.TableName()
	_buildFlow.ALL = field.NewAsterisk(tableName)
	_buildFlow.BuildFlowID = field.NewString(tableName, "build_flow_id")
	_buildFlow.WarGroupid = field.NewString(tableName, "war_groupid")
	_buildFlow.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_buildFlow.JenkinsName = field.NewString(tableName, "jenkins_name")
	_buildFlow.GitlabID = field.NewString(tableName, "gitlab_id")
	_buildFlow.GitlabURL = field.NewString(tableName, "gitlab_url")
	_buildFlow.CreateUser = field.NewString(tableName, "create_user")
	_buildFlow.CreateTime = field.NewString(tableName, "create_time")
	_buildFlow.IsFrontend = field.NewString(tableName, "is_frontend")
	_buildFlow.ProjectCode = field.NewString(tableName, "project_code")

	_buildFlow.fillFieldMap()

	return _buildFlow
}

type buildFlow struct {
	buildFlowDo

	ALL           field.Asterisk
	BuildFlowID   field.String
	WarGroupid    field.String
	WarArtifactid field.String
	JenkinsName   field.String
	GitlabID      field.String
	GitlabURL     field.String
	CreateUser    field.String
	CreateTime    field.String
	IsFrontend    field.String
	ProjectCode   field.String

	fieldMap map[string]field.Expr
}

func (b buildFlow) Table(newTableName string) *buildFlow {
	b.buildFlowDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b buildFlow) As(alias string) *buildFlow {
	b.buildFlowDo.DO = *(b.buildFlowDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *buildFlow) updateTableName(table string) *buildFlow {
	b.ALL = field.NewAsterisk(table)
	b.BuildFlowID = field.NewString(table, "build_flow_id")
	b.WarGroupid = field.NewString(table, "war_groupid")
	b.WarArtifactid = field.NewString(table, "war_artifactid")
	b.JenkinsName = field.NewString(table, "jenkins_name")
	b.GitlabID = field.NewString(table, "gitlab_id")
	b.GitlabURL = field.NewString(table, "gitlab_url")
	b.CreateUser = field.NewString(table, "create_user")
	b.CreateTime = field.NewString(table, "create_time")
	b.IsFrontend = field.NewString(table, "is_frontend")
	b.ProjectCode = field.NewString(table, "project_code")

	b.fillFieldMap()

	return b
}

func (b *buildFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *buildFlow) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 10)
	b.fieldMap["build_flow_id"] = b.BuildFlowID
	b.fieldMap["war_groupid"] = b.WarGroupid
	b.fieldMap["war_artifactid"] = b.WarArtifactid
	b.fieldMap["jenkins_name"] = b.JenkinsName
	b.fieldMap["gitlab_id"] = b.GitlabID
	b.fieldMap["gitlab_url"] = b.GitlabURL
	b.fieldMap["create_user"] = b.CreateUser
	b.fieldMap["create_time"] = b.CreateTime
	b.fieldMap["is_frontend"] = b.IsFrontend
	b.fieldMap["project_code"] = b.ProjectCode
}

func (b buildFlow) clone(db *gorm.DB) buildFlow {
	b.buildFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b buildFlow) replaceDB(db *gorm.DB) buildFlow {
	b.buildFlowDo.ReplaceDB(db)
	return b
}

type buildFlowDo struct{ gen.DO }

type IBuildFlowDo interface {
	gen.SubQuery
	Debug() IBuildFlowDo
	WithContext(ctx context.Context) IBuildFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBuildFlowDo
	WriteDB() IBuildFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBuildFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBuildFlowDo
	Not(conds ...gen.Condition) IBuildFlowDo
	Or(conds ...gen.Condition) IBuildFlowDo
	Select(conds ...field.Expr) IBuildFlowDo
	Where(conds ...gen.Condition) IBuildFlowDo
	Order(conds ...field.Expr) IBuildFlowDo
	Distinct(cols ...field.Expr) IBuildFlowDo
	Omit(cols ...field.Expr) IBuildFlowDo
	Join(table schema.Tabler, on ...field.Expr) IBuildFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBuildFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBuildFlowDo
	Group(cols ...field.Expr) IBuildFlowDo
	Having(conds ...gen.Condition) IBuildFlowDo
	Limit(limit int) IBuildFlowDo
	Offset(offset int) IBuildFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildFlowDo
	Unscoped() IBuildFlowDo
	Create(values ...*model.BuildFlow) error
	CreateInBatches(values []*model.BuildFlow, batchSize int) error
	Save(values ...*model.BuildFlow) error
	First() (*model.BuildFlow, error)
	Take() (*model.BuildFlow, error)
	Last() (*model.BuildFlow, error)
	Find() ([]*model.BuildFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildFlow, err error)
	FindInBatches(result *[]*model.BuildFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BuildFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBuildFlowDo
	Assign(attrs ...field.AssignExpr) IBuildFlowDo
	Joins(fields ...field.RelationField) IBuildFlowDo
	Preload(fields ...field.RelationField) IBuildFlowDo
	FirstOrInit() (*model.BuildFlow, error)
	FirstOrCreate() (*model.BuildFlow, error)
	FindByPage(offset int, limit int) (result []*model.BuildFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBuildFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buildFlowDo) Debug() IBuildFlowDo {
	return b.withDO(b.DO.Debug())
}

func (b buildFlowDo) WithContext(ctx context.Context) IBuildFlowDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buildFlowDo) ReadDB() IBuildFlowDo {
	return b.Clauses(dbresolver.Read)
}

func (b buildFlowDo) WriteDB() IBuildFlowDo {
	return b.Clauses(dbresolver.Write)
}

func (b buildFlowDo) Session(config *gorm.Session) IBuildFlowDo {
	return b.withDO(b.DO.Session(config))
}

func (b buildFlowDo) Clauses(conds ...clause.Expression) IBuildFlowDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buildFlowDo) Returning(value interface{}, columns ...string) IBuildFlowDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buildFlowDo) Not(conds ...gen.Condition) IBuildFlowDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buildFlowDo) Or(conds ...gen.Condition) IBuildFlowDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buildFlowDo) Select(conds ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buildFlowDo) Where(conds ...gen.Condition) IBuildFlowDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buildFlowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBuildFlowDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b buildFlowDo) Order(conds ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buildFlowDo) Distinct(cols ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buildFlowDo) Omit(cols ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buildFlowDo) Join(table schema.Tabler, on ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buildFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buildFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buildFlowDo) Group(cols ...field.Expr) IBuildFlowDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buildFlowDo) Having(conds ...gen.Condition) IBuildFlowDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buildFlowDo) Limit(limit int) IBuildFlowDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buildFlowDo) Offset(offset int) IBuildFlowDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buildFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildFlowDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buildFlowDo) Unscoped() IBuildFlowDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buildFlowDo) Create(values ...*model.BuildFlow) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buildFlowDo) CreateInBatches(values []*model.BuildFlow, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buildFlowDo) Save(values ...*model.BuildFlow) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buildFlowDo) First() (*model.BuildFlow, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildFlow), nil
	}
}

func (b buildFlowDo) Take() (*model.BuildFlow, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildFlow), nil
	}
}

func (b buildFlowDo) Last() (*model.BuildFlow, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildFlow), nil
	}
}

func (b buildFlowDo) Find() ([]*model.BuildFlow, error) {
	result, err := b.DO.Find()
	return result.([]*model.BuildFlow), err
}

func (b buildFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildFlow, err error) {
	buf := make([]*model.BuildFlow, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buildFlowDo) FindInBatches(result *[]*model.BuildFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buildFlowDo) Attrs(attrs ...field.AssignExpr) IBuildFlowDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buildFlowDo) Assign(attrs ...field.AssignExpr) IBuildFlowDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buildFlowDo) Joins(fields ...field.RelationField) IBuildFlowDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buildFlowDo) Preload(fields ...field.RelationField) IBuildFlowDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buildFlowDo) FirstOrInit() (*model.BuildFlow, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildFlow), nil
	}
}

func (b buildFlowDo) FirstOrCreate() (*model.BuildFlow, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildFlow), nil
	}
}

func (b buildFlowDo) FindByPage(offset int, limit int) (result []*model.BuildFlow, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buildFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buildFlowDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buildFlowDo) Delete(models ...*model.BuildFlow) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buildFlowDo) withDO(do gen.Dao) *buildFlowDo {
	b.DO = *do.(*gen.DO)
	return b
}
