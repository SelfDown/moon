// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newBuildGroup(db *gorm.DB, opts ...gen.DOOption) buildGroup {
	_buildGroup := buildGroup{}

	_buildGroup.buildGroupDo.UseDB(db, opts...)
	_buildGroup.buildGroupDo.UseModel(&model.BuildGroup{})

	tableName := _buildGroup.buildGroupDo.TableName()
	_buildGroup.ALL = field.NewAsterisk(tableName)
	_buildGroup.BuildGroupID = field.NewString(tableName, "build_group_id")
	_buildGroup.FromPublishID = field.NewString(tableName, "from_publish_id")
	_buildGroup.CreateUser = field.NewString(tableName, "create_user")
	_buildGroup.CreateTime = field.NewString(tableName, "create_time")

	_buildGroup.fillFieldMap()

	return _buildGroup
}

type buildGroup struct {
	buildGroupDo

	ALL           field.Asterisk
	BuildGroupID  field.String
	FromPublishID field.String // 来源发布计划
	CreateUser    field.String
	CreateTime    field.String

	fieldMap map[string]field.Expr
}

func (b buildGroup) Table(newTableName string) *buildGroup {
	b.buildGroupDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b buildGroup) As(alias string) *buildGroup {
	b.buildGroupDo.DO = *(b.buildGroupDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *buildGroup) updateTableName(table string) *buildGroup {
	b.ALL = field.NewAsterisk(table)
	b.BuildGroupID = field.NewString(table, "build_group_id")
	b.FromPublishID = field.NewString(table, "from_publish_id")
	b.CreateUser = field.NewString(table, "create_user")
	b.CreateTime = field.NewString(table, "create_time")

	b.fillFieldMap()

	return b
}

func (b *buildGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *buildGroup) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["build_group_id"] = b.BuildGroupID
	b.fieldMap["from_publish_id"] = b.FromPublishID
	b.fieldMap["create_user"] = b.CreateUser
	b.fieldMap["create_time"] = b.CreateTime
}

func (b buildGroup) clone(db *gorm.DB) buildGroup {
	b.buildGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b buildGroup) replaceDB(db *gorm.DB) buildGroup {
	b.buildGroupDo.ReplaceDB(db)
	return b
}

type buildGroupDo struct{ gen.DO }

type IBuildGroupDo interface {
	gen.SubQuery
	Debug() IBuildGroupDo
	WithContext(ctx context.Context) IBuildGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBuildGroupDo
	WriteDB() IBuildGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBuildGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBuildGroupDo
	Not(conds ...gen.Condition) IBuildGroupDo
	Or(conds ...gen.Condition) IBuildGroupDo
	Select(conds ...field.Expr) IBuildGroupDo
	Where(conds ...gen.Condition) IBuildGroupDo
	Order(conds ...field.Expr) IBuildGroupDo
	Distinct(cols ...field.Expr) IBuildGroupDo
	Omit(cols ...field.Expr) IBuildGroupDo
	Join(table schema.Tabler, on ...field.Expr) IBuildGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDo
	Group(cols ...field.Expr) IBuildGroupDo
	Having(conds ...gen.Condition) IBuildGroupDo
	Limit(limit int) IBuildGroupDo
	Offset(offset int) IBuildGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildGroupDo
	Unscoped() IBuildGroupDo
	Create(values ...*model.BuildGroup) error
	CreateInBatches(values []*model.BuildGroup, batchSize int) error
	Save(values ...*model.BuildGroup) error
	First() (*model.BuildGroup, error)
	Take() (*model.BuildGroup, error)
	Last() (*model.BuildGroup, error)
	Find() ([]*model.BuildGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildGroup, err error)
	FindInBatches(result *[]*model.BuildGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BuildGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBuildGroupDo
	Assign(attrs ...field.AssignExpr) IBuildGroupDo
	Joins(fields ...field.RelationField) IBuildGroupDo
	Preload(fields ...field.RelationField) IBuildGroupDo
	FirstOrInit() (*model.BuildGroup, error)
	FirstOrCreate() (*model.BuildGroup, error)
	FindByPage(offset int, limit int) (result []*model.BuildGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBuildGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buildGroupDo) Debug() IBuildGroupDo {
	return b.withDO(b.DO.Debug())
}

func (b buildGroupDo) WithContext(ctx context.Context) IBuildGroupDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buildGroupDo) ReadDB() IBuildGroupDo {
	return b.Clauses(dbresolver.Read)
}

func (b buildGroupDo) WriteDB() IBuildGroupDo {
	return b.Clauses(dbresolver.Write)
}

func (b buildGroupDo) Session(config *gorm.Session) IBuildGroupDo {
	return b.withDO(b.DO.Session(config))
}

func (b buildGroupDo) Clauses(conds ...clause.Expression) IBuildGroupDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buildGroupDo) Returning(value interface{}, columns ...string) IBuildGroupDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buildGroupDo) Not(conds ...gen.Condition) IBuildGroupDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buildGroupDo) Or(conds ...gen.Condition) IBuildGroupDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buildGroupDo) Select(conds ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buildGroupDo) Where(conds ...gen.Condition) IBuildGroupDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buildGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBuildGroupDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b buildGroupDo) Order(conds ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buildGroupDo) Distinct(cols ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buildGroupDo) Omit(cols ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buildGroupDo) Join(table schema.Tabler, on ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buildGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buildGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buildGroupDo) Group(cols ...field.Expr) IBuildGroupDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buildGroupDo) Having(conds ...gen.Condition) IBuildGroupDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buildGroupDo) Limit(limit int) IBuildGroupDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buildGroupDo) Offset(offset int) IBuildGroupDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buildGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildGroupDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buildGroupDo) Unscoped() IBuildGroupDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buildGroupDo) Create(values ...*model.BuildGroup) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buildGroupDo) CreateInBatches(values []*model.BuildGroup, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buildGroupDo) Save(values ...*model.BuildGroup) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buildGroupDo) First() (*model.BuildGroup, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroup), nil
	}
}

func (b buildGroupDo) Take() (*model.BuildGroup, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroup), nil
	}
}

func (b buildGroupDo) Last() (*model.BuildGroup, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroup), nil
	}
}

func (b buildGroupDo) Find() ([]*model.BuildGroup, error) {
	result, err := b.DO.Find()
	return result.([]*model.BuildGroup), err
}

func (b buildGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildGroup, err error) {
	buf := make([]*model.BuildGroup, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buildGroupDo) FindInBatches(result *[]*model.BuildGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buildGroupDo) Attrs(attrs ...field.AssignExpr) IBuildGroupDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buildGroupDo) Assign(attrs ...field.AssignExpr) IBuildGroupDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buildGroupDo) Joins(fields ...field.RelationField) IBuildGroupDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buildGroupDo) Preload(fields ...field.RelationField) IBuildGroupDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buildGroupDo) FirstOrInit() (*model.BuildGroup, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroup), nil
	}
}

func (b buildGroupDo) FirstOrCreate() (*model.BuildGroup, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroup), nil
	}
}

func (b buildGroupDo) FindByPage(offset int, limit int) (result []*model.BuildGroup, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buildGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buildGroupDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buildGroupDo) Delete(models ...*model.BuildGroup) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buildGroupDo) withDO(do gen.Dao) *buildGroupDo {
	b.DO = *do.(*gen.DO)
	return b
}
