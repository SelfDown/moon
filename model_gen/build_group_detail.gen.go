// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newBuildGroupDetail(db *gorm.DB, opts ...gen.DOOption) buildGroupDetail {
	_buildGroupDetail := buildGroupDetail{}

	_buildGroupDetail.buildGroupDetailDo.UseDB(db, opts...)
	_buildGroupDetail.buildGroupDetailDo.UseModel(&model.BuildGroupDetail{})

	tableName := _buildGroupDetail.buildGroupDetailDo.TableName()
	_buildGroupDetail.ALL = field.NewAsterisk(tableName)
	_buildGroupDetail.BuildGroupDetailID = field.NewString(tableName, "build_group_detail_id")
	_buildGroupDetail.BuildGroupID = field.NewString(tableName, "build_group_id")
	_buildGroupDetail.WarGroupid = field.NewString(tableName, "war_groupid")
	_buildGroupDetail.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_buildGroupDetail.GitlabURL = field.NewString(tableName, "gitlab_url")
	_buildGroupDetail.Version = field.NewString(tableName, "version")
	_buildGroupDetail.Branch = field.NewString(tableName, "branch")
	_buildGroupDetail.SubBranch = field.NewString(tableName, "sub_branch")
	_buildGroupDetail.SnapshotVersion = field.NewString(tableName, "snapshot_version")
	_buildGroupDetail.JenkinsName = field.NewString(tableName, "jenkins_name")
	_buildGroupDetail.JenkinsResultID = field.NewString(tableName, "jenkins_result_id")
	_buildGroupDetail.JenkinsTaskID = field.NewString(tableName, "jenkins_task_id")
	_buildGroupDetail.JenkinsStatus = field.NewString(tableName, "jenkins_status")
	_buildGroupDetail.JenkinsResult = field.NewString(tableName, "jenkins_result")
	_buildGroupDetail.IsFrontend = field.NewString(tableName, "is_frontend")
	_buildGroupDetail.CreateTime = field.NewString(tableName, "create_time")
	_buildGroupDetail.FinishTime = field.NewString(tableName, "finish_time")
	_buildGroupDetail.ErrorCount = field.NewInt32(tableName, "error_count")
	_buildGroupDetail.ProjectCode = field.NewString(tableName, "project_code")

	_buildGroupDetail.fillFieldMap()

	return _buildGroupDetail
}

type buildGroupDetail struct {
	buildGroupDetailDo

	ALL                field.Asterisk
	BuildGroupDetailID field.String
	BuildGroupID       field.String // 构建批次
	WarGroupid         field.String // 制品分组
	WarArtifactid      field.String // 制品坐标
	GitlabURL          field.String // gitlib 的http地址
	Version            field.String // 打包版本
	Branch             field.String // 主分支
	SubBranch          field.String // 子分支
	SnapshotVersion    field.String // 快照版本
	JenkinsName        field.String // jenkins 任务名称
	JenkinsResultID    field.String // 等待队列ID
	JenkinsTaskID      field.String // 任务ID
	JenkinsStatus      field.String // jenkins 状态
	JenkinsResult      field.String // jenkins_result
	IsFrontend         field.String // 1 前端，2后端
	CreateTime         field.String
	FinishTime         field.String
	ErrorCount         field.Int32
	ProjectCode        field.String

	fieldMap map[string]field.Expr
}

func (b buildGroupDetail) Table(newTableName string) *buildGroupDetail {
	b.buildGroupDetailDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b buildGroupDetail) As(alias string) *buildGroupDetail {
	b.buildGroupDetailDo.DO = *(b.buildGroupDetailDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *buildGroupDetail) updateTableName(table string) *buildGroupDetail {
	b.ALL = field.NewAsterisk(table)
	b.BuildGroupDetailID = field.NewString(table, "build_group_detail_id")
	b.BuildGroupID = field.NewString(table, "build_group_id")
	b.WarGroupid = field.NewString(table, "war_groupid")
	b.WarArtifactid = field.NewString(table, "war_artifactid")
	b.GitlabURL = field.NewString(table, "gitlab_url")
	b.Version = field.NewString(table, "version")
	b.Branch = field.NewString(table, "branch")
	b.SubBranch = field.NewString(table, "sub_branch")
	b.SnapshotVersion = field.NewString(table, "snapshot_version")
	b.JenkinsName = field.NewString(table, "jenkins_name")
	b.JenkinsResultID = field.NewString(table, "jenkins_result_id")
	b.JenkinsTaskID = field.NewString(table, "jenkins_task_id")
	b.JenkinsStatus = field.NewString(table, "jenkins_status")
	b.JenkinsResult = field.NewString(table, "jenkins_result")
	b.IsFrontend = field.NewString(table, "is_frontend")
	b.CreateTime = field.NewString(table, "create_time")
	b.FinishTime = field.NewString(table, "finish_time")
	b.ErrorCount = field.NewInt32(table, "error_count")
	b.ProjectCode = field.NewString(table, "project_code")

	b.fillFieldMap()

	return b
}

func (b *buildGroupDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *buildGroupDetail) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 19)
	b.fieldMap["build_group_detail_id"] = b.BuildGroupDetailID
	b.fieldMap["build_group_id"] = b.BuildGroupID
	b.fieldMap["war_groupid"] = b.WarGroupid
	b.fieldMap["war_artifactid"] = b.WarArtifactid
	b.fieldMap["gitlab_url"] = b.GitlabURL
	b.fieldMap["version"] = b.Version
	b.fieldMap["branch"] = b.Branch
	b.fieldMap["sub_branch"] = b.SubBranch
	b.fieldMap["snapshot_version"] = b.SnapshotVersion
	b.fieldMap["jenkins_name"] = b.JenkinsName
	b.fieldMap["jenkins_result_id"] = b.JenkinsResultID
	b.fieldMap["jenkins_task_id"] = b.JenkinsTaskID
	b.fieldMap["jenkins_status"] = b.JenkinsStatus
	b.fieldMap["jenkins_result"] = b.JenkinsResult
	b.fieldMap["is_frontend"] = b.IsFrontend
	b.fieldMap["create_time"] = b.CreateTime
	b.fieldMap["finish_time"] = b.FinishTime
	b.fieldMap["error_count"] = b.ErrorCount
	b.fieldMap["project_code"] = b.ProjectCode
}

func (b buildGroupDetail) clone(db *gorm.DB) buildGroupDetail {
	b.buildGroupDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b buildGroupDetail) replaceDB(db *gorm.DB) buildGroupDetail {
	b.buildGroupDetailDo.ReplaceDB(db)
	return b
}

type buildGroupDetailDo struct{ gen.DO }

type IBuildGroupDetailDo interface {
	gen.SubQuery
	Debug() IBuildGroupDetailDo
	WithContext(ctx context.Context) IBuildGroupDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBuildGroupDetailDo
	WriteDB() IBuildGroupDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBuildGroupDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBuildGroupDetailDo
	Not(conds ...gen.Condition) IBuildGroupDetailDo
	Or(conds ...gen.Condition) IBuildGroupDetailDo
	Select(conds ...field.Expr) IBuildGroupDetailDo
	Where(conds ...gen.Condition) IBuildGroupDetailDo
	Order(conds ...field.Expr) IBuildGroupDetailDo
	Distinct(cols ...field.Expr) IBuildGroupDetailDo
	Omit(cols ...field.Expr) IBuildGroupDetailDo
	Join(table schema.Tabler, on ...field.Expr) IBuildGroupDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDetailDo
	Group(cols ...field.Expr) IBuildGroupDetailDo
	Having(conds ...gen.Condition) IBuildGroupDetailDo
	Limit(limit int) IBuildGroupDetailDo
	Offset(offset int) IBuildGroupDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildGroupDetailDo
	Unscoped() IBuildGroupDetailDo
	Create(values ...*model.BuildGroupDetail) error
	CreateInBatches(values []*model.BuildGroupDetail, batchSize int) error
	Save(values ...*model.BuildGroupDetail) error
	First() (*model.BuildGroupDetail, error)
	Take() (*model.BuildGroupDetail, error)
	Last() (*model.BuildGroupDetail, error)
	Find() ([]*model.BuildGroupDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildGroupDetail, err error)
	FindInBatches(result *[]*model.BuildGroupDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BuildGroupDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBuildGroupDetailDo
	Assign(attrs ...field.AssignExpr) IBuildGroupDetailDo
	Joins(fields ...field.RelationField) IBuildGroupDetailDo
	Preload(fields ...field.RelationField) IBuildGroupDetailDo
	FirstOrInit() (*model.BuildGroupDetail, error)
	FirstOrCreate() (*model.BuildGroupDetail, error)
	FindByPage(offset int, limit int) (result []*model.BuildGroupDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBuildGroupDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buildGroupDetailDo) Debug() IBuildGroupDetailDo {
	return b.withDO(b.DO.Debug())
}

func (b buildGroupDetailDo) WithContext(ctx context.Context) IBuildGroupDetailDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buildGroupDetailDo) ReadDB() IBuildGroupDetailDo {
	return b.Clauses(dbresolver.Read)
}

func (b buildGroupDetailDo) WriteDB() IBuildGroupDetailDo {
	return b.Clauses(dbresolver.Write)
}

func (b buildGroupDetailDo) Session(config *gorm.Session) IBuildGroupDetailDo {
	return b.withDO(b.DO.Session(config))
}

func (b buildGroupDetailDo) Clauses(conds ...clause.Expression) IBuildGroupDetailDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buildGroupDetailDo) Returning(value interface{}, columns ...string) IBuildGroupDetailDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buildGroupDetailDo) Not(conds ...gen.Condition) IBuildGroupDetailDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buildGroupDetailDo) Or(conds ...gen.Condition) IBuildGroupDetailDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buildGroupDetailDo) Select(conds ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buildGroupDetailDo) Where(conds ...gen.Condition) IBuildGroupDetailDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buildGroupDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBuildGroupDetailDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b buildGroupDetailDo) Order(conds ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buildGroupDetailDo) Distinct(cols ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buildGroupDetailDo) Omit(cols ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buildGroupDetailDo) Join(table schema.Tabler, on ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buildGroupDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buildGroupDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buildGroupDetailDo) Group(cols ...field.Expr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buildGroupDetailDo) Having(conds ...gen.Condition) IBuildGroupDetailDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buildGroupDetailDo) Limit(limit int) IBuildGroupDetailDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buildGroupDetailDo) Offset(offset int) IBuildGroupDetailDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buildGroupDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBuildGroupDetailDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buildGroupDetailDo) Unscoped() IBuildGroupDetailDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buildGroupDetailDo) Create(values ...*model.BuildGroupDetail) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buildGroupDetailDo) CreateInBatches(values []*model.BuildGroupDetail, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buildGroupDetailDo) Save(values ...*model.BuildGroupDetail) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buildGroupDetailDo) First() (*model.BuildGroupDetail, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroupDetail), nil
	}
}

func (b buildGroupDetailDo) Take() (*model.BuildGroupDetail, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroupDetail), nil
	}
}

func (b buildGroupDetailDo) Last() (*model.BuildGroupDetail, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroupDetail), nil
	}
}

func (b buildGroupDetailDo) Find() ([]*model.BuildGroupDetail, error) {
	result, err := b.DO.Find()
	return result.([]*model.BuildGroupDetail), err
}

func (b buildGroupDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BuildGroupDetail, err error) {
	buf := make([]*model.BuildGroupDetail, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buildGroupDetailDo) FindInBatches(result *[]*model.BuildGroupDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buildGroupDetailDo) Attrs(attrs ...field.AssignExpr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buildGroupDetailDo) Assign(attrs ...field.AssignExpr) IBuildGroupDetailDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buildGroupDetailDo) Joins(fields ...field.RelationField) IBuildGroupDetailDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buildGroupDetailDo) Preload(fields ...field.RelationField) IBuildGroupDetailDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buildGroupDetailDo) FirstOrInit() (*model.BuildGroupDetail, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroupDetail), nil
	}
}

func (b buildGroupDetailDo) FirstOrCreate() (*model.BuildGroupDetail, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BuildGroupDetail), nil
	}
}

func (b buildGroupDetailDo) FindByPage(offset int, limit int) (result []*model.BuildGroupDetail, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buildGroupDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buildGroupDetailDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buildGroupDetailDo) Delete(models ...*model.BuildGroupDetail) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buildGroupDetailDo) withDO(do gen.Dao) *buildGroupDetailDo {
	b.DO = *do.(*gen.DO)
	return b
}
