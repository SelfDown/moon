// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newCheckInData(db *gorm.DB, opts ...gen.DOOption) checkInData {
	_checkInData := checkInData{}

	_checkInData.checkInDataDo.UseDB(db, opts...)
	_checkInData.checkInDataDo.UseModel(&model.CheckInData{})

	tableName := _checkInData.checkInDataDo.TableName()
	_checkInData.ALL = field.NewAsterisk(tableName)
	_checkInData.CheckInID = field.NewInt64(tableName, "check_in_id")
	_checkInData.CheckinTime = field.NewInt64(tableName, "checkin_time")
	_checkInData.CheckinType = field.NewString(tableName, "checkin_type")
	_checkInData.Deviceid = field.NewString(tableName, "deviceid")
	_checkInData.ExceptionType = field.NewString(tableName, "exception_type")
	_checkInData.Groupid = field.NewInt64(tableName, "groupid")
	_checkInData.Groupname = field.NewString(tableName, "groupname")
	_checkInData.Lat = field.NewInt64(tableName, "lat")
	_checkInData.Lng = field.NewInt64(tableName, "lng")
	_checkInData.LocationDetail = field.NewString(tableName, "location_detail")
	_checkInData.LocationTitle = field.NewString(tableName, "location_title")
	_checkInData.Notes = field.NewString(tableName, "notes")
	_checkInData.SchCheckinTime = field.NewInt64(tableName, "sch_checkin_time")
	_checkInData.TimelineID = field.NewInt64(tableName, "timeline_id")
	_checkInData.Userid = field.NewString(tableName, "userid")
	_checkInData.Wifimac = field.NewString(tableName, "wifimac")
	_checkInData.Wifiname = field.NewString(tableName, "wifiname")
	_checkInData.CreateTime = field.NewString(tableName, "create_time")

	_checkInData.fillFieldMap()

	return _checkInData
}

type checkInData struct {
	checkInDataDo

	ALL            field.Asterisk
	CheckInID      field.Int64
	CheckinTime    field.Int64
	CheckinType    field.String
	Deviceid       field.String
	ExceptionType  field.String
	Groupid        field.Int64
	Groupname      field.String
	Lat            field.Int64
	Lng            field.Int64
	LocationDetail field.String
	LocationTitle  field.String
	Notes          field.String
	SchCheckinTime field.Int64
	TimelineID     field.Int64
	Userid         field.String
	Wifimac        field.String
	Wifiname       field.String
	CreateTime     field.String

	fieldMap map[string]field.Expr
}

func (c checkInData) Table(newTableName string) *checkInData {
	c.checkInDataDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkInData) As(alias string) *checkInData {
	c.checkInDataDo.DO = *(c.checkInDataDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkInData) updateTableName(table string) *checkInData {
	c.ALL = field.NewAsterisk(table)
	c.CheckInID = field.NewInt64(table, "check_in_id")
	c.CheckinTime = field.NewInt64(table, "checkin_time")
	c.CheckinType = field.NewString(table, "checkin_type")
	c.Deviceid = field.NewString(table, "deviceid")
	c.ExceptionType = field.NewString(table, "exception_type")
	c.Groupid = field.NewInt64(table, "groupid")
	c.Groupname = field.NewString(table, "groupname")
	c.Lat = field.NewInt64(table, "lat")
	c.Lng = field.NewInt64(table, "lng")
	c.LocationDetail = field.NewString(table, "location_detail")
	c.LocationTitle = field.NewString(table, "location_title")
	c.Notes = field.NewString(table, "notes")
	c.SchCheckinTime = field.NewInt64(table, "sch_checkin_time")
	c.TimelineID = field.NewInt64(table, "timeline_id")
	c.Userid = field.NewString(table, "userid")
	c.Wifimac = field.NewString(table, "wifimac")
	c.Wifiname = field.NewString(table, "wifiname")
	c.CreateTime = field.NewString(table, "create_time")

	c.fillFieldMap()

	return c
}

func (c *checkInData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkInData) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 18)
	c.fieldMap["check_in_id"] = c.CheckInID
	c.fieldMap["checkin_time"] = c.CheckinTime
	c.fieldMap["checkin_type"] = c.CheckinType
	c.fieldMap["deviceid"] = c.Deviceid
	c.fieldMap["exception_type"] = c.ExceptionType
	c.fieldMap["groupid"] = c.Groupid
	c.fieldMap["groupname"] = c.Groupname
	c.fieldMap["lat"] = c.Lat
	c.fieldMap["lng"] = c.Lng
	c.fieldMap["location_detail"] = c.LocationDetail
	c.fieldMap["location_title"] = c.LocationTitle
	c.fieldMap["notes"] = c.Notes
	c.fieldMap["sch_checkin_time"] = c.SchCheckinTime
	c.fieldMap["timeline_id"] = c.TimelineID
	c.fieldMap["userid"] = c.Userid
	c.fieldMap["wifimac"] = c.Wifimac
	c.fieldMap["wifiname"] = c.Wifiname
	c.fieldMap["create_time"] = c.CreateTime
}

func (c checkInData) clone(db *gorm.DB) checkInData {
	c.checkInDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkInData) replaceDB(db *gorm.DB) checkInData {
	c.checkInDataDo.ReplaceDB(db)
	return c
}

type checkInDataDo struct{ gen.DO }

type ICheckInDataDo interface {
	gen.SubQuery
	Debug() ICheckInDataDo
	WithContext(ctx context.Context) ICheckInDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckInDataDo
	WriteDB() ICheckInDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckInDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckInDataDo
	Not(conds ...gen.Condition) ICheckInDataDo
	Or(conds ...gen.Condition) ICheckInDataDo
	Select(conds ...field.Expr) ICheckInDataDo
	Where(conds ...gen.Condition) ICheckInDataDo
	Order(conds ...field.Expr) ICheckInDataDo
	Distinct(cols ...field.Expr) ICheckInDataDo
	Omit(cols ...field.Expr) ICheckInDataDo
	Join(table schema.Tabler, on ...field.Expr) ICheckInDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo
	Group(cols ...field.Expr) ICheckInDataDo
	Having(conds ...gen.Condition) ICheckInDataDo
	Limit(limit int) ICheckInDataDo
	Offset(offset int) ICheckInDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInDataDo
	Unscoped() ICheckInDataDo
	Create(values ...*model.CheckInData) error
	CreateInBatches(values []*model.CheckInData, batchSize int) error
	Save(values ...*model.CheckInData) error
	First() (*model.CheckInData, error)
	Take() (*model.CheckInData, error)
	Last() (*model.CheckInData, error)
	Find() ([]*model.CheckInData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckInData, err error)
	FindInBatches(result *[]*model.CheckInData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CheckInData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckInDataDo
	Assign(attrs ...field.AssignExpr) ICheckInDataDo
	Joins(fields ...field.RelationField) ICheckInDataDo
	Preload(fields ...field.RelationField) ICheckInDataDo
	FirstOrInit() (*model.CheckInData, error)
	FirstOrCreate() (*model.CheckInData, error)
	FindByPage(offset int, limit int) (result []*model.CheckInData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckInDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkInDataDo) Debug() ICheckInDataDo {
	return c.withDO(c.DO.Debug())
}

func (c checkInDataDo) WithContext(ctx context.Context) ICheckInDataDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkInDataDo) ReadDB() ICheckInDataDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkInDataDo) WriteDB() ICheckInDataDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkInDataDo) Session(config *gorm.Session) ICheckInDataDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkInDataDo) Clauses(conds ...clause.Expression) ICheckInDataDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkInDataDo) Returning(value interface{}, columns ...string) ICheckInDataDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkInDataDo) Not(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkInDataDo) Or(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkInDataDo) Select(conds ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkInDataDo) Where(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkInDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICheckInDataDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c checkInDataDo) Order(conds ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkInDataDo) Distinct(cols ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkInDataDo) Omit(cols ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkInDataDo) Join(table schema.Tabler, on ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkInDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkInDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkInDataDo) Group(cols ...field.Expr) ICheckInDataDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkInDataDo) Having(conds ...gen.Condition) ICheckInDataDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkInDataDo) Limit(limit int) ICheckInDataDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkInDataDo) Offset(offset int) ICheckInDataDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkInDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckInDataDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkInDataDo) Unscoped() ICheckInDataDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkInDataDo) Create(values ...*model.CheckInData) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkInDataDo) CreateInBatches(values []*model.CheckInData, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkInDataDo) Save(values ...*model.CheckInData) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkInDataDo) First() (*model.CheckInData, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckInData), nil
	}
}

func (c checkInDataDo) Take() (*model.CheckInData, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckInData), nil
	}
}

func (c checkInDataDo) Last() (*model.CheckInData, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckInData), nil
	}
}

func (c checkInDataDo) Find() ([]*model.CheckInData, error) {
	result, err := c.DO.Find()
	return result.([]*model.CheckInData), err
}

func (c checkInDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CheckInData, err error) {
	buf := make([]*model.CheckInData, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkInDataDo) FindInBatches(result *[]*model.CheckInData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkInDataDo) Attrs(attrs ...field.AssignExpr) ICheckInDataDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkInDataDo) Assign(attrs ...field.AssignExpr) ICheckInDataDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkInDataDo) Joins(fields ...field.RelationField) ICheckInDataDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkInDataDo) Preload(fields ...field.RelationField) ICheckInDataDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkInDataDo) FirstOrInit() (*model.CheckInData, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckInData), nil
	}
}

func (c checkInDataDo) FirstOrCreate() (*model.CheckInData, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CheckInData), nil
	}
}

func (c checkInDataDo) FindByPage(offset int, limit int) (result []*model.CheckInData, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkInDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkInDataDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkInDataDo) Delete(models ...*model.CheckInData) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkInDataDo) withDO(do gen.Dao) *checkInDataDo {
	c.DO = *do.(*gen.DO)
	return c
}
