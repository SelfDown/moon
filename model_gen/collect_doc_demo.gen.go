// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newCollectDocDemo(db *gorm.DB, opts ...gen.DOOption) collectDocDemo {
	_collectDocDemo := collectDocDemo{}

	_collectDocDemo.collectDocDemoDo.UseDB(db, opts...)
	_collectDocDemo.collectDocDemoDo.UseModel(&model.CollectDocDemo{})

	tableName := _collectDocDemo.collectDocDemoDo.TableName()
	_collectDocDemo.ALL = field.NewAsterisk(tableName)
	_collectDocDemo.DocDemoID = field.NewString(tableName, "doc_demo_id")
	_collectDocDemo.CollectDocID = field.NewString(tableName, "collect_doc_id")
	_collectDocDemo.Name = field.NewString(tableName, "name")
	_collectDocDemo.Code = field.NewString(tableName, "code")
	_collectDocDemo.OrderIndex = field.NewInt32(tableName, "order_index")
	_collectDocDemo.CodeResult = field.NewString(tableName, "code_result")

	_collectDocDemo.fillFieldMap()

	return _collectDocDemo
}

type collectDocDemo struct {
	collectDocDemoDo

	ALL          field.Asterisk
	DocDemoID    field.String
	CollectDocID field.String
	Name         field.String
	Code         field.String
	OrderIndex   field.Int32
	CodeResult   field.String

	fieldMap map[string]field.Expr
}

func (c collectDocDemo) Table(newTableName string) *collectDocDemo {
	c.collectDocDemoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectDocDemo) As(alias string) *collectDocDemo {
	c.collectDocDemoDo.DO = *(c.collectDocDemoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectDocDemo) updateTableName(table string) *collectDocDemo {
	c.ALL = field.NewAsterisk(table)
	c.DocDemoID = field.NewString(table, "doc_demo_id")
	c.CollectDocID = field.NewString(table, "collect_doc_id")
	c.Name = field.NewString(table, "name")
	c.Code = field.NewString(table, "code")
	c.OrderIndex = field.NewInt32(table, "order_index")
	c.CodeResult = field.NewString(table, "code_result")

	c.fillFieldMap()

	return c
}

func (c *collectDocDemo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectDocDemo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["doc_demo_id"] = c.DocDemoID
	c.fieldMap["collect_doc_id"] = c.CollectDocID
	c.fieldMap["name"] = c.Name
	c.fieldMap["code"] = c.Code
	c.fieldMap["order_index"] = c.OrderIndex
	c.fieldMap["code_result"] = c.CodeResult
}

func (c collectDocDemo) clone(db *gorm.DB) collectDocDemo {
	c.collectDocDemoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectDocDemo) replaceDB(db *gorm.DB) collectDocDemo {
	c.collectDocDemoDo.ReplaceDB(db)
	return c
}

type collectDocDemoDo struct{ gen.DO }

type ICollectDocDemoDo interface {
	gen.SubQuery
	Debug() ICollectDocDemoDo
	WithContext(ctx context.Context) ICollectDocDemoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollectDocDemoDo
	WriteDB() ICollectDocDemoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollectDocDemoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollectDocDemoDo
	Not(conds ...gen.Condition) ICollectDocDemoDo
	Or(conds ...gen.Condition) ICollectDocDemoDo
	Select(conds ...field.Expr) ICollectDocDemoDo
	Where(conds ...gen.Condition) ICollectDocDemoDo
	Order(conds ...field.Expr) ICollectDocDemoDo
	Distinct(cols ...field.Expr) ICollectDocDemoDo
	Omit(cols ...field.Expr) ICollectDocDemoDo
	Join(table schema.Tabler, on ...field.Expr) ICollectDocDemoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollectDocDemoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollectDocDemoDo
	Group(cols ...field.Expr) ICollectDocDemoDo
	Having(conds ...gen.Condition) ICollectDocDemoDo
	Limit(limit int) ICollectDocDemoDo
	Offset(offset int) ICollectDocDemoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectDocDemoDo
	Unscoped() ICollectDocDemoDo
	Create(values ...*model.CollectDocDemo) error
	CreateInBatches(values []*model.CollectDocDemo, batchSize int) error
	Save(values ...*model.CollectDocDemo) error
	First() (*model.CollectDocDemo, error)
	Take() (*model.CollectDocDemo, error)
	Last() (*model.CollectDocDemo, error)
	Find() ([]*model.CollectDocDemo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectDocDemo, err error)
	FindInBatches(result *[]*model.CollectDocDemo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CollectDocDemo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollectDocDemoDo
	Assign(attrs ...field.AssignExpr) ICollectDocDemoDo
	Joins(fields ...field.RelationField) ICollectDocDemoDo
	Preload(fields ...field.RelationField) ICollectDocDemoDo
	FirstOrInit() (*model.CollectDocDemo, error)
	FirstOrCreate() (*model.CollectDocDemo, error)
	FindByPage(offset int, limit int) (result []*model.CollectDocDemo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollectDocDemoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collectDocDemoDo) Debug() ICollectDocDemoDo {
	return c.withDO(c.DO.Debug())
}

func (c collectDocDemoDo) WithContext(ctx context.Context) ICollectDocDemoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectDocDemoDo) ReadDB() ICollectDocDemoDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectDocDemoDo) WriteDB() ICollectDocDemoDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectDocDemoDo) Session(config *gorm.Session) ICollectDocDemoDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectDocDemoDo) Clauses(conds ...clause.Expression) ICollectDocDemoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectDocDemoDo) Returning(value interface{}, columns ...string) ICollectDocDemoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectDocDemoDo) Not(conds ...gen.Condition) ICollectDocDemoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectDocDemoDo) Or(conds ...gen.Condition) ICollectDocDemoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectDocDemoDo) Select(conds ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectDocDemoDo) Where(conds ...gen.Condition) ICollectDocDemoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectDocDemoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICollectDocDemoDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c collectDocDemoDo) Order(conds ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectDocDemoDo) Distinct(cols ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectDocDemoDo) Omit(cols ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectDocDemoDo) Join(table schema.Tabler, on ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectDocDemoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectDocDemoDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectDocDemoDo) Group(cols ...field.Expr) ICollectDocDemoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectDocDemoDo) Having(conds ...gen.Condition) ICollectDocDemoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectDocDemoDo) Limit(limit int) ICollectDocDemoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectDocDemoDo) Offset(offset int) ICollectDocDemoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectDocDemoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectDocDemoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectDocDemoDo) Unscoped() ICollectDocDemoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectDocDemoDo) Create(values ...*model.CollectDocDemo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectDocDemoDo) CreateInBatches(values []*model.CollectDocDemo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectDocDemoDo) Save(values ...*model.CollectDocDemo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectDocDemoDo) First() (*model.CollectDocDemo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocDemo), nil
	}
}

func (c collectDocDemoDo) Take() (*model.CollectDocDemo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocDemo), nil
	}
}

func (c collectDocDemoDo) Last() (*model.CollectDocDemo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocDemo), nil
	}
}

func (c collectDocDemoDo) Find() ([]*model.CollectDocDemo, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectDocDemo), err
}

func (c collectDocDemoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectDocDemo, err error) {
	buf := make([]*model.CollectDocDemo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectDocDemoDo) FindInBatches(result *[]*model.CollectDocDemo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectDocDemoDo) Attrs(attrs ...field.AssignExpr) ICollectDocDemoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectDocDemoDo) Assign(attrs ...field.AssignExpr) ICollectDocDemoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectDocDemoDo) Joins(fields ...field.RelationField) ICollectDocDemoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectDocDemoDo) Preload(fields ...field.RelationField) ICollectDocDemoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectDocDemoDo) FirstOrInit() (*model.CollectDocDemo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocDemo), nil
	}
}

func (c collectDocDemoDo) FirstOrCreate() (*model.CollectDocDemo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocDemo), nil
	}
}

func (c collectDocDemoDo) FindByPage(offset int, limit int) (result []*model.CollectDocDemo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectDocDemoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectDocDemoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectDocDemoDo) Delete(models ...*model.CollectDocDemo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectDocDemoDo) withDO(do gen.Dao) *collectDocDemoDo {
	c.DO = *do.(*gen.DO)
	return c
}
