// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newCollectDocImportant(db *gorm.DB, opts ...gen.DOOption) collectDocImportant {
	_collectDocImportant := collectDocImportant{}

	_collectDocImportant.collectDocImportantDo.UseDB(db, opts...)
	_collectDocImportant.collectDocImportantDo.UseModel(&model.CollectDocImportant{})

	tableName := _collectDocImportant.collectDocImportantDo.TableName()
	_collectDocImportant.ALL = field.NewAsterisk(tableName)
	_collectDocImportant.DocImportantID = field.NewString(tableName, "doc_important_id")
	_collectDocImportant.CollectDocID = field.NewString(tableName, "collect_doc_id")
	_collectDocImportant.Name = field.NewString(tableName, "name")
	_collectDocImportant.OrderIndex = field.NewString(tableName, "order_index")

	_collectDocImportant.fillFieldMap()

	return _collectDocImportant
}

type collectDocImportant struct {
	collectDocImportantDo

	ALL            field.Asterisk
	DocImportantID field.String
	CollectDocID   field.String
	Name           field.String
	OrderIndex     field.String

	fieldMap map[string]field.Expr
}

func (c collectDocImportant) Table(newTableName string) *collectDocImportant {
	c.collectDocImportantDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectDocImportant) As(alias string) *collectDocImportant {
	c.collectDocImportantDo.DO = *(c.collectDocImportantDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectDocImportant) updateTableName(table string) *collectDocImportant {
	c.ALL = field.NewAsterisk(table)
	c.DocImportantID = field.NewString(table, "doc_important_id")
	c.CollectDocID = field.NewString(table, "collect_doc_id")
	c.Name = field.NewString(table, "name")
	c.OrderIndex = field.NewString(table, "order_index")

	c.fillFieldMap()

	return c
}

func (c *collectDocImportant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectDocImportant) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["doc_important_id"] = c.DocImportantID
	c.fieldMap["collect_doc_id"] = c.CollectDocID
	c.fieldMap["name"] = c.Name
	c.fieldMap["order_index"] = c.OrderIndex
}

func (c collectDocImportant) clone(db *gorm.DB) collectDocImportant {
	c.collectDocImportantDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectDocImportant) replaceDB(db *gorm.DB) collectDocImportant {
	c.collectDocImportantDo.ReplaceDB(db)
	return c
}

type collectDocImportantDo struct{ gen.DO }

type ICollectDocImportantDo interface {
	gen.SubQuery
	Debug() ICollectDocImportantDo
	WithContext(ctx context.Context) ICollectDocImportantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollectDocImportantDo
	WriteDB() ICollectDocImportantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollectDocImportantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollectDocImportantDo
	Not(conds ...gen.Condition) ICollectDocImportantDo
	Or(conds ...gen.Condition) ICollectDocImportantDo
	Select(conds ...field.Expr) ICollectDocImportantDo
	Where(conds ...gen.Condition) ICollectDocImportantDo
	Order(conds ...field.Expr) ICollectDocImportantDo
	Distinct(cols ...field.Expr) ICollectDocImportantDo
	Omit(cols ...field.Expr) ICollectDocImportantDo
	Join(table schema.Tabler, on ...field.Expr) ICollectDocImportantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollectDocImportantDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollectDocImportantDo
	Group(cols ...field.Expr) ICollectDocImportantDo
	Having(conds ...gen.Condition) ICollectDocImportantDo
	Limit(limit int) ICollectDocImportantDo
	Offset(offset int) ICollectDocImportantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectDocImportantDo
	Unscoped() ICollectDocImportantDo
	Create(values ...*model.CollectDocImportant) error
	CreateInBatches(values []*model.CollectDocImportant, batchSize int) error
	Save(values ...*model.CollectDocImportant) error
	First() (*model.CollectDocImportant, error)
	Take() (*model.CollectDocImportant, error)
	Last() (*model.CollectDocImportant, error)
	Find() ([]*model.CollectDocImportant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectDocImportant, err error)
	FindInBatches(result *[]*model.CollectDocImportant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CollectDocImportant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollectDocImportantDo
	Assign(attrs ...field.AssignExpr) ICollectDocImportantDo
	Joins(fields ...field.RelationField) ICollectDocImportantDo
	Preload(fields ...field.RelationField) ICollectDocImportantDo
	FirstOrInit() (*model.CollectDocImportant, error)
	FirstOrCreate() (*model.CollectDocImportant, error)
	FindByPage(offset int, limit int) (result []*model.CollectDocImportant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollectDocImportantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collectDocImportantDo) Debug() ICollectDocImportantDo {
	return c.withDO(c.DO.Debug())
}

func (c collectDocImportantDo) WithContext(ctx context.Context) ICollectDocImportantDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectDocImportantDo) ReadDB() ICollectDocImportantDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectDocImportantDo) WriteDB() ICollectDocImportantDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectDocImportantDo) Session(config *gorm.Session) ICollectDocImportantDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectDocImportantDo) Clauses(conds ...clause.Expression) ICollectDocImportantDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectDocImportantDo) Returning(value interface{}, columns ...string) ICollectDocImportantDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectDocImportantDo) Not(conds ...gen.Condition) ICollectDocImportantDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectDocImportantDo) Or(conds ...gen.Condition) ICollectDocImportantDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectDocImportantDo) Select(conds ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectDocImportantDo) Where(conds ...gen.Condition) ICollectDocImportantDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectDocImportantDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICollectDocImportantDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c collectDocImportantDo) Order(conds ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectDocImportantDo) Distinct(cols ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectDocImportantDo) Omit(cols ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectDocImportantDo) Join(table schema.Tabler, on ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectDocImportantDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectDocImportantDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectDocImportantDo) Group(cols ...field.Expr) ICollectDocImportantDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectDocImportantDo) Having(conds ...gen.Condition) ICollectDocImportantDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectDocImportantDo) Limit(limit int) ICollectDocImportantDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectDocImportantDo) Offset(offset int) ICollectDocImportantDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectDocImportantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectDocImportantDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectDocImportantDo) Unscoped() ICollectDocImportantDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectDocImportantDo) Create(values ...*model.CollectDocImportant) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectDocImportantDo) CreateInBatches(values []*model.CollectDocImportant, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectDocImportantDo) Save(values ...*model.CollectDocImportant) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectDocImportantDo) First() (*model.CollectDocImportant, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocImportant), nil
	}
}

func (c collectDocImportantDo) Take() (*model.CollectDocImportant, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocImportant), nil
	}
}

func (c collectDocImportantDo) Last() (*model.CollectDocImportant, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocImportant), nil
	}
}

func (c collectDocImportantDo) Find() ([]*model.CollectDocImportant, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectDocImportant), err
}

func (c collectDocImportantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectDocImportant, err error) {
	buf := make([]*model.CollectDocImportant, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectDocImportantDo) FindInBatches(result *[]*model.CollectDocImportant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectDocImportantDo) Attrs(attrs ...field.AssignExpr) ICollectDocImportantDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectDocImportantDo) Assign(attrs ...field.AssignExpr) ICollectDocImportantDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectDocImportantDo) Joins(fields ...field.RelationField) ICollectDocImportantDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectDocImportantDo) Preload(fields ...field.RelationField) ICollectDocImportantDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectDocImportantDo) FirstOrInit() (*model.CollectDocImportant, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocImportant), nil
	}
}

func (c collectDocImportantDo) FirstOrCreate() (*model.CollectDocImportant, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocImportant), nil
	}
}

func (c collectDocImportantDo) FindByPage(offset int, limit int) (result []*model.CollectDocImportant, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectDocImportantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectDocImportantDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectDocImportantDo) Delete(models ...*model.CollectDocImportant) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectDocImportantDo) withDO(do gen.Dao) *collectDocImportantDo {
	c.DO = *do.(*gen.DO)
	return c
}
