// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newCollectDocResult(db *gorm.DB, opts ...gen.DOOption) collectDocResult {
	_collectDocResult := collectDocResult{}

	_collectDocResult.collectDocResultDo.UseDB(db, opts...)
	_collectDocResult.collectDocResultDo.UseModel(&model.CollectDocResult{})

	tableName := _collectDocResult.collectDocResultDo.TableName()
	_collectDocResult.ALL = field.NewAsterisk(tableName)
	_collectDocResult.DocResultID = field.NewString(tableName, "doc_result_id")
	_collectDocResult.CollectDocID = field.NewString(tableName, "collect_doc_id")
	_collectDocResult.Name = field.NewString(tableName, "name")
	_collectDocResult.Desc = field.NewString(tableName, "desc")
	_collectDocResult.Type = field.NewString(tableName, "type")
	_collectDocResult.Must = field.NewString(tableName, "must")
	_collectDocResult.OrderIndex = field.NewInt32(tableName, "order_index")

	_collectDocResult.fillFieldMap()

	return _collectDocResult
}

type collectDocResult struct {
	collectDocResultDo

	ALL          field.Asterisk
	DocResultID  field.String
	CollectDocID field.String
	Name         field.String
	Desc         field.String
	Type         field.String
	Must         field.String
	OrderIndex   field.Int32

	fieldMap map[string]field.Expr
}

func (c collectDocResult) Table(newTableName string) *collectDocResult {
	c.collectDocResultDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c collectDocResult) As(alias string) *collectDocResult {
	c.collectDocResultDo.DO = *(c.collectDocResultDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *collectDocResult) updateTableName(table string) *collectDocResult {
	c.ALL = field.NewAsterisk(table)
	c.DocResultID = field.NewString(table, "doc_result_id")
	c.CollectDocID = field.NewString(table, "collect_doc_id")
	c.Name = field.NewString(table, "name")
	c.Desc = field.NewString(table, "desc")
	c.Type = field.NewString(table, "type")
	c.Must = field.NewString(table, "must")
	c.OrderIndex = field.NewInt32(table, "order_index")

	c.fillFieldMap()

	return c
}

func (c *collectDocResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *collectDocResult) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["doc_result_id"] = c.DocResultID
	c.fieldMap["collect_doc_id"] = c.CollectDocID
	c.fieldMap["name"] = c.Name
	c.fieldMap["desc"] = c.Desc
	c.fieldMap["type"] = c.Type
	c.fieldMap["must"] = c.Must
	c.fieldMap["order_index"] = c.OrderIndex
}

func (c collectDocResult) clone(db *gorm.DB) collectDocResult {
	c.collectDocResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c collectDocResult) replaceDB(db *gorm.DB) collectDocResult {
	c.collectDocResultDo.ReplaceDB(db)
	return c
}

type collectDocResultDo struct{ gen.DO }

type ICollectDocResultDo interface {
	gen.SubQuery
	Debug() ICollectDocResultDo
	WithContext(ctx context.Context) ICollectDocResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICollectDocResultDo
	WriteDB() ICollectDocResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICollectDocResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICollectDocResultDo
	Not(conds ...gen.Condition) ICollectDocResultDo
	Or(conds ...gen.Condition) ICollectDocResultDo
	Select(conds ...field.Expr) ICollectDocResultDo
	Where(conds ...gen.Condition) ICollectDocResultDo
	Order(conds ...field.Expr) ICollectDocResultDo
	Distinct(cols ...field.Expr) ICollectDocResultDo
	Omit(cols ...field.Expr) ICollectDocResultDo
	Join(table schema.Tabler, on ...field.Expr) ICollectDocResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICollectDocResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICollectDocResultDo
	Group(cols ...field.Expr) ICollectDocResultDo
	Having(conds ...gen.Condition) ICollectDocResultDo
	Limit(limit int) ICollectDocResultDo
	Offset(offset int) ICollectDocResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectDocResultDo
	Unscoped() ICollectDocResultDo
	Create(values ...*model.CollectDocResult) error
	CreateInBatches(values []*model.CollectDocResult, batchSize int) error
	Save(values ...*model.CollectDocResult) error
	First() (*model.CollectDocResult, error)
	Take() (*model.CollectDocResult, error)
	Last() (*model.CollectDocResult, error)
	Find() ([]*model.CollectDocResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectDocResult, err error)
	FindInBatches(result *[]*model.CollectDocResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CollectDocResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICollectDocResultDo
	Assign(attrs ...field.AssignExpr) ICollectDocResultDo
	Joins(fields ...field.RelationField) ICollectDocResultDo
	Preload(fields ...field.RelationField) ICollectDocResultDo
	FirstOrInit() (*model.CollectDocResult, error)
	FirstOrCreate() (*model.CollectDocResult, error)
	FindByPage(offset int, limit int) (result []*model.CollectDocResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICollectDocResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c collectDocResultDo) Debug() ICollectDocResultDo {
	return c.withDO(c.DO.Debug())
}

func (c collectDocResultDo) WithContext(ctx context.Context) ICollectDocResultDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c collectDocResultDo) ReadDB() ICollectDocResultDo {
	return c.Clauses(dbresolver.Read)
}

func (c collectDocResultDo) WriteDB() ICollectDocResultDo {
	return c.Clauses(dbresolver.Write)
}

func (c collectDocResultDo) Session(config *gorm.Session) ICollectDocResultDo {
	return c.withDO(c.DO.Session(config))
}

func (c collectDocResultDo) Clauses(conds ...clause.Expression) ICollectDocResultDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c collectDocResultDo) Returning(value interface{}, columns ...string) ICollectDocResultDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c collectDocResultDo) Not(conds ...gen.Condition) ICollectDocResultDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c collectDocResultDo) Or(conds ...gen.Condition) ICollectDocResultDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c collectDocResultDo) Select(conds ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c collectDocResultDo) Where(conds ...gen.Condition) ICollectDocResultDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c collectDocResultDo) Order(conds ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c collectDocResultDo) Distinct(cols ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c collectDocResultDo) Omit(cols ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c collectDocResultDo) Join(table schema.Tabler, on ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c collectDocResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c collectDocResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c collectDocResultDo) Group(cols ...field.Expr) ICollectDocResultDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c collectDocResultDo) Having(conds ...gen.Condition) ICollectDocResultDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c collectDocResultDo) Limit(limit int) ICollectDocResultDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c collectDocResultDo) Offset(offset int) ICollectDocResultDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c collectDocResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICollectDocResultDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c collectDocResultDo) Unscoped() ICollectDocResultDo {
	return c.withDO(c.DO.Unscoped())
}

func (c collectDocResultDo) Create(values ...*model.CollectDocResult) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c collectDocResultDo) CreateInBatches(values []*model.CollectDocResult, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c collectDocResultDo) Save(values ...*model.CollectDocResult) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c collectDocResultDo) First() (*model.CollectDocResult, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocResult), nil
	}
}

func (c collectDocResultDo) Take() (*model.CollectDocResult, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocResult), nil
	}
}

func (c collectDocResultDo) Last() (*model.CollectDocResult, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocResult), nil
	}
}

func (c collectDocResultDo) Find() ([]*model.CollectDocResult, error) {
	result, err := c.DO.Find()
	return result.([]*model.CollectDocResult), err
}

func (c collectDocResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CollectDocResult, err error) {
	buf := make([]*model.CollectDocResult, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c collectDocResultDo) FindInBatches(result *[]*model.CollectDocResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c collectDocResultDo) Attrs(attrs ...field.AssignExpr) ICollectDocResultDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c collectDocResultDo) Assign(attrs ...field.AssignExpr) ICollectDocResultDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c collectDocResultDo) Joins(fields ...field.RelationField) ICollectDocResultDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c collectDocResultDo) Preload(fields ...field.RelationField) ICollectDocResultDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c collectDocResultDo) FirstOrInit() (*model.CollectDocResult, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocResult), nil
	}
}

func (c collectDocResultDo) FirstOrCreate() (*model.CollectDocResult, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CollectDocResult), nil
	}
}

func (c collectDocResultDo) FindByPage(offset int, limit int) (result []*model.CollectDocResult, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c collectDocResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c collectDocResultDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c collectDocResultDo) Delete(models ...*model.CollectDocResult) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *collectDocResultDo) withDO(do gen.Dao) *collectDocResultDo {
	c.DO = *do.(*gen.DO)
	return c
}
