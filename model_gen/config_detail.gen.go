// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newConfigDetail(db *gorm.DB, opts ...gen.DOOption) configDetail {
	_configDetail := configDetail{}

	_configDetail.configDetailDo.UseDB(db, opts...)
	_configDetail.configDetailDo.UseModel(&model.ConfigDetail{})

	tableName := _configDetail.configDetailDo.TableName()
	_configDetail.ALL = field.NewAsterisk(tableName)
	_configDetail.ConfigDetailID = field.NewString(tableName, "config_detail_id")
	_configDetail.GroupID = field.NewString(tableName, "group_id")
	_configDetail.Name = field.NewString(tableName, "name")
	_configDetail.Value = field.NewString(tableName, "value")

	_configDetail.fillFieldMap()

	return _configDetail
}

type configDetail struct {
	configDetailDo

	ALL            field.Asterisk
	ConfigDetailID field.String
	GroupID        field.String
	Name           field.String
	Value          field.String

	fieldMap map[string]field.Expr
}

func (c configDetail) Table(newTableName string) *configDetail {
	c.configDetailDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configDetail) As(alias string) *configDetail {
	c.configDetailDo.DO = *(c.configDetailDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configDetail) updateTableName(table string) *configDetail {
	c.ALL = field.NewAsterisk(table)
	c.ConfigDetailID = field.NewString(table, "config_detail_id")
	c.GroupID = field.NewString(table, "group_id")
	c.Name = field.NewString(table, "name")
	c.Value = field.NewString(table, "value")

	c.fillFieldMap()

	return c
}

func (c *configDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configDetail) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["config_detail_id"] = c.ConfigDetailID
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["name"] = c.Name
	c.fieldMap["value"] = c.Value
}

func (c configDetail) clone(db *gorm.DB) configDetail {
	c.configDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configDetail) replaceDB(db *gorm.DB) configDetail {
	c.configDetailDo.ReplaceDB(db)
	return c
}

type configDetailDo struct{ gen.DO }

type IConfigDetailDo interface {
	gen.SubQuery
	Debug() IConfigDetailDo
	WithContext(ctx context.Context) IConfigDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigDetailDo
	WriteDB() IConfigDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigDetailDo
	Not(conds ...gen.Condition) IConfigDetailDo
	Or(conds ...gen.Condition) IConfigDetailDo
	Select(conds ...field.Expr) IConfigDetailDo
	Where(conds ...gen.Condition) IConfigDetailDo
	Order(conds ...field.Expr) IConfigDetailDo
	Distinct(cols ...field.Expr) IConfigDetailDo
	Omit(cols ...field.Expr) IConfigDetailDo
	Join(table schema.Tabler, on ...field.Expr) IConfigDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigDetailDo
	Group(cols ...field.Expr) IConfigDetailDo
	Having(conds ...gen.Condition) IConfigDetailDo
	Limit(limit int) IConfigDetailDo
	Offset(offset int) IConfigDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigDetailDo
	Unscoped() IConfigDetailDo
	Create(values ...*model.ConfigDetail) error
	CreateInBatches(values []*model.ConfigDetail, batchSize int) error
	Save(values ...*model.ConfigDetail) error
	First() (*model.ConfigDetail, error)
	Take() (*model.ConfigDetail, error)
	Last() (*model.ConfigDetail, error)
	Find() ([]*model.ConfigDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigDetail, err error)
	FindInBatches(result *[]*model.ConfigDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ConfigDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigDetailDo
	Assign(attrs ...field.AssignExpr) IConfigDetailDo
	Joins(fields ...field.RelationField) IConfigDetailDo
	Preload(fields ...field.RelationField) IConfigDetailDo
	FirstOrInit() (*model.ConfigDetail, error)
	FirstOrCreate() (*model.ConfigDetail, error)
	FindByPage(offset int, limit int) (result []*model.ConfigDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configDetailDo) Debug() IConfigDetailDo {
	return c.withDO(c.DO.Debug())
}

func (c configDetailDo) WithContext(ctx context.Context) IConfigDetailDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configDetailDo) ReadDB() IConfigDetailDo {
	return c.Clauses(dbresolver.Read)
}

func (c configDetailDo) WriteDB() IConfigDetailDo {
	return c.Clauses(dbresolver.Write)
}

func (c configDetailDo) Session(config *gorm.Session) IConfigDetailDo {
	return c.withDO(c.DO.Session(config))
}

func (c configDetailDo) Clauses(conds ...clause.Expression) IConfigDetailDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configDetailDo) Returning(value interface{}, columns ...string) IConfigDetailDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configDetailDo) Not(conds ...gen.Condition) IConfigDetailDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configDetailDo) Or(conds ...gen.Condition) IConfigDetailDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configDetailDo) Select(conds ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configDetailDo) Where(conds ...gen.Condition) IConfigDetailDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IConfigDetailDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c configDetailDo) Order(conds ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configDetailDo) Distinct(cols ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configDetailDo) Omit(cols ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configDetailDo) Join(table schema.Tabler, on ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configDetailDo) Group(cols ...field.Expr) IConfigDetailDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configDetailDo) Having(conds ...gen.Condition) IConfigDetailDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configDetailDo) Limit(limit int) IConfigDetailDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configDetailDo) Offset(offset int) IConfigDetailDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigDetailDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configDetailDo) Unscoped() IConfigDetailDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configDetailDo) Create(values ...*model.ConfigDetail) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configDetailDo) CreateInBatches(values []*model.ConfigDetail, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configDetailDo) Save(values ...*model.ConfigDetail) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configDetailDo) First() (*model.ConfigDetail, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetail), nil
	}
}

func (c configDetailDo) Take() (*model.ConfigDetail, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetail), nil
	}
}

func (c configDetailDo) Last() (*model.ConfigDetail, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetail), nil
	}
}

func (c configDetailDo) Find() ([]*model.ConfigDetail, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConfigDetail), err
}

func (c configDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigDetail, err error) {
	buf := make([]*model.ConfigDetail, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configDetailDo) FindInBatches(result *[]*model.ConfigDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configDetailDo) Attrs(attrs ...field.AssignExpr) IConfigDetailDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configDetailDo) Assign(attrs ...field.AssignExpr) IConfigDetailDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configDetailDo) Joins(fields ...field.RelationField) IConfigDetailDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configDetailDo) Preload(fields ...field.RelationField) IConfigDetailDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configDetailDo) FirstOrInit() (*model.ConfigDetail, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetail), nil
	}
}

func (c configDetailDo) FirstOrCreate() (*model.ConfigDetail, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigDetail), nil
	}
}

func (c configDetailDo) FindByPage(offset int, limit int) (result []*model.ConfigDetail, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configDetailDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configDetailDo) Delete(models ...*model.ConfigDetail) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configDetailDo) withDO(do gen.Dao) *configDetailDo {
	c.DO = *do.(*gen.DO)
	return c
}
