// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newConfigGroup(db *gorm.DB, opts ...gen.DOOption) configGroup {
	_configGroup := configGroup{}

	_configGroup.configGroupDo.UseDB(db, opts...)
	_configGroup.configGroupDo.UseModel(&model.ConfigGroup{})

	tableName := _configGroup.configGroupDo.TableName()
	_configGroup.ALL = field.NewAsterisk(tableName)
	_configGroup.GroupID = field.NewString(tableName, "group_id")
	_configGroup.Name = field.NewString(tableName, "name")
	_configGroup.Description = field.NewString(tableName, "description")
	_configGroup.CreateUser = field.NewString(tableName, "create_user")
	_configGroup.CreateTime = field.NewString(tableName, "create_time")

	_configGroup.fillFieldMap()

	return _configGroup
}

type configGroup struct {
	configGroupDo

	ALL         field.Asterisk
	GroupID     field.String
	Name        field.String
	Description field.String
	CreateUser  field.String
	CreateTime  field.String

	fieldMap map[string]field.Expr
}

func (c configGroup) Table(newTableName string) *configGroup {
	c.configGroupDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configGroup) As(alias string) *configGroup {
	c.configGroupDo.DO = *(c.configGroupDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configGroup) updateTableName(table string) *configGroup {
	c.ALL = field.NewAsterisk(table)
	c.GroupID = field.NewString(table, "group_id")
	c.Name = field.NewString(table, "name")
	c.Description = field.NewString(table, "description")
	c.CreateUser = field.NewString(table, "create_user")
	c.CreateTime = field.NewString(table, "create_time")

	c.fillFieldMap()

	return c
}

func (c *configGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configGroup) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["name"] = c.Name
	c.fieldMap["description"] = c.Description
	c.fieldMap["create_user"] = c.CreateUser
	c.fieldMap["create_time"] = c.CreateTime
}

func (c configGroup) clone(db *gorm.DB) configGroup {
	c.configGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configGroup) replaceDB(db *gorm.DB) configGroup {
	c.configGroupDo.ReplaceDB(db)
	return c
}

type configGroupDo struct{ gen.DO }

type IConfigGroupDo interface {
	gen.SubQuery
	Debug() IConfigGroupDo
	WithContext(ctx context.Context) IConfigGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigGroupDo
	WriteDB() IConfigGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigGroupDo
	Not(conds ...gen.Condition) IConfigGroupDo
	Or(conds ...gen.Condition) IConfigGroupDo
	Select(conds ...field.Expr) IConfigGroupDo
	Where(conds ...gen.Condition) IConfigGroupDo
	Order(conds ...field.Expr) IConfigGroupDo
	Distinct(cols ...field.Expr) IConfigGroupDo
	Omit(cols ...field.Expr) IConfigGroupDo
	Join(table schema.Tabler, on ...field.Expr) IConfigGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigGroupDo
	Group(cols ...field.Expr) IConfigGroupDo
	Having(conds ...gen.Condition) IConfigGroupDo
	Limit(limit int) IConfigGroupDo
	Offset(offset int) IConfigGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigGroupDo
	Unscoped() IConfigGroupDo
	Create(values ...*model.ConfigGroup) error
	CreateInBatches(values []*model.ConfigGroup, batchSize int) error
	Save(values ...*model.ConfigGroup) error
	First() (*model.ConfigGroup, error)
	Take() (*model.ConfigGroup, error)
	Last() (*model.ConfigGroup, error)
	Find() ([]*model.ConfigGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigGroup, err error)
	FindInBatches(result *[]*model.ConfigGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ConfigGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigGroupDo
	Assign(attrs ...field.AssignExpr) IConfigGroupDo
	Joins(fields ...field.RelationField) IConfigGroupDo
	Preload(fields ...field.RelationField) IConfigGroupDo
	FirstOrInit() (*model.ConfigGroup, error)
	FirstOrCreate() (*model.ConfigGroup, error)
	FindByPage(offset int, limit int) (result []*model.ConfigGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configGroupDo) Debug() IConfigGroupDo {
	return c.withDO(c.DO.Debug())
}

func (c configGroupDo) WithContext(ctx context.Context) IConfigGroupDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configGroupDo) ReadDB() IConfigGroupDo {
	return c.Clauses(dbresolver.Read)
}

func (c configGroupDo) WriteDB() IConfigGroupDo {
	return c.Clauses(dbresolver.Write)
}

func (c configGroupDo) Session(config *gorm.Session) IConfigGroupDo {
	return c.withDO(c.DO.Session(config))
}

func (c configGroupDo) Clauses(conds ...clause.Expression) IConfigGroupDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configGroupDo) Returning(value interface{}, columns ...string) IConfigGroupDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configGroupDo) Not(conds ...gen.Condition) IConfigGroupDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configGroupDo) Or(conds ...gen.Condition) IConfigGroupDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configGroupDo) Select(conds ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configGroupDo) Where(conds ...gen.Condition) IConfigGroupDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configGroupDo) Order(conds ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configGroupDo) Distinct(cols ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configGroupDo) Omit(cols ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configGroupDo) Join(table schema.Tabler, on ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configGroupDo) Group(cols ...field.Expr) IConfigGroupDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configGroupDo) Having(conds ...gen.Condition) IConfigGroupDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configGroupDo) Limit(limit int) IConfigGroupDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configGroupDo) Offset(offset int) IConfigGroupDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigGroupDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configGroupDo) Unscoped() IConfigGroupDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configGroupDo) Create(values ...*model.ConfigGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configGroupDo) CreateInBatches(values []*model.ConfigGroup, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configGroupDo) Save(values ...*model.ConfigGroup) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configGroupDo) First() (*model.ConfigGroup, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigGroup), nil
	}
}

func (c configGroupDo) Take() (*model.ConfigGroup, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigGroup), nil
	}
}

func (c configGroupDo) Last() (*model.ConfigGroup, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigGroup), nil
	}
}

func (c configGroupDo) Find() ([]*model.ConfigGroup, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConfigGroup), err
}

func (c configGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConfigGroup, err error) {
	buf := make([]*model.ConfigGroup, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configGroupDo) FindInBatches(result *[]*model.ConfigGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configGroupDo) Attrs(attrs ...field.AssignExpr) IConfigGroupDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configGroupDo) Assign(attrs ...field.AssignExpr) IConfigGroupDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configGroupDo) Joins(fields ...field.RelationField) IConfigGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configGroupDo) Preload(fields ...field.RelationField) IConfigGroupDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configGroupDo) FirstOrInit() (*model.ConfigGroup, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigGroup), nil
	}
}

func (c configGroupDo) FirstOrCreate() (*model.ConfigGroup, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConfigGroup), nil
	}
}

func (c configGroupDo) FindByPage(offset int, limit int) (result []*model.ConfigGroup, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configGroupDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configGroupDo) Delete(models ...*model.ConfigGroup) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configGroupDo) withDO(do gen.Dao) *configGroupDo {
	c.DO = *do.(*gen.DO)
	return c
}
