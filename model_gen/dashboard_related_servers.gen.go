// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDashboardRelatedServers(db *gorm.DB, opts ...gen.DOOption) dashboardRelatedServers {
	_dashboardRelatedServers := dashboardRelatedServers{}

	_dashboardRelatedServers.dashboardRelatedServersDo.UseDB(db, opts...)
	_dashboardRelatedServers.dashboardRelatedServersDo.UseModel(&model.DashboardRelatedServers{})

	tableName := _dashboardRelatedServers.dashboardRelatedServersDo.TableName()
	_dashboardRelatedServers.ALL = field.NewAsterisk(tableName)
	_dashboardRelatedServers.DashboardRelatedServersID = field.NewString(tableName, "dashboard_related_servers_id")
	_dashboardRelatedServers.DashboardID = field.NewString(tableName, "dashboard_id")
	_dashboardRelatedServers.ServerID = field.NewString(tableName, "server_id")

	_dashboardRelatedServers.fillFieldMap()

	return _dashboardRelatedServers
}

type dashboardRelatedServers struct {
	dashboardRelatedServersDo

	ALL                       field.Asterisk
	DashboardRelatedServersID field.String
	DashboardID               field.String
	ServerID                  field.String

	fieldMap map[string]field.Expr
}

func (d dashboardRelatedServers) Table(newTableName string) *dashboardRelatedServers {
	d.dashboardRelatedServersDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dashboardRelatedServers) As(alias string) *dashboardRelatedServers {
	d.dashboardRelatedServersDo.DO = *(d.dashboardRelatedServersDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dashboardRelatedServers) updateTableName(table string) *dashboardRelatedServers {
	d.ALL = field.NewAsterisk(table)
	d.DashboardRelatedServersID = field.NewString(table, "dashboard_related_servers_id")
	d.DashboardID = field.NewString(table, "dashboard_id")
	d.ServerID = field.NewString(table, "server_id")

	d.fillFieldMap()

	return d
}

func (d *dashboardRelatedServers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dashboardRelatedServers) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["dashboard_related_servers_id"] = d.DashboardRelatedServersID
	d.fieldMap["dashboard_id"] = d.DashboardID
	d.fieldMap["server_id"] = d.ServerID
}

func (d dashboardRelatedServers) clone(db *gorm.DB) dashboardRelatedServers {
	d.dashboardRelatedServersDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dashboardRelatedServers) replaceDB(db *gorm.DB) dashboardRelatedServers {
	d.dashboardRelatedServersDo.ReplaceDB(db)
	return d
}

type dashboardRelatedServersDo struct{ gen.DO }

type IDashboardRelatedServersDo interface {
	gen.SubQuery
	Debug() IDashboardRelatedServersDo
	WithContext(ctx context.Context) IDashboardRelatedServersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDashboardRelatedServersDo
	WriteDB() IDashboardRelatedServersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDashboardRelatedServersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDashboardRelatedServersDo
	Not(conds ...gen.Condition) IDashboardRelatedServersDo
	Or(conds ...gen.Condition) IDashboardRelatedServersDo
	Select(conds ...field.Expr) IDashboardRelatedServersDo
	Where(conds ...gen.Condition) IDashboardRelatedServersDo
	Order(conds ...field.Expr) IDashboardRelatedServersDo
	Distinct(cols ...field.Expr) IDashboardRelatedServersDo
	Omit(cols ...field.Expr) IDashboardRelatedServersDo
	Join(table schema.Tabler, on ...field.Expr) IDashboardRelatedServersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDashboardRelatedServersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDashboardRelatedServersDo
	Group(cols ...field.Expr) IDashboardRelatedServersDo
	Having(conds ...gen.Condition) IDashboardRelatedServersDo
	Limit(limit int) IDashboardRelatedServersDo
	Offset(offset int) IDashboardRelatedServersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDashboardRelatedServersDo
	Unscoped() IDashboardRelatedServersDo
	Create(values ...*model.DashboardRelatedServers) error
	CreateInBatches(values []*model.DashboardRelatedServers, batchSize int) error
	Save(values ...*model.DashboardRelatedServers) error
	First() (*model.DashboardRelatedServers, error)
	Take() (*model.DashboardRelatedServers, error)
	Last() (*model.DashboardRelatedServers, error)
	Find() ([]*model.DashboardRelatedServers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DashboardRelatedServers, err error)
	FindInBatches(result *[]*model.DashboardRelatedServers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DashboardRelatedServers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDashboardRelatedServersDo
	Assign(attrs ...field.AssignExpr) IDashboardRelatedServersDo
	Joins(fields ...field.RelationField) IDashboardRelatedServersDo
	Preload(fields ...field.RelationField) IDashboardRelatedServersDo
	FirstOrInit() (*model.DashboardRelatedServers, error)
	FirstOrCreate() (*model.DashboardRelatedServers, error)
	FindByPage(offset int, limit int) (result []*model.DashboardRelatedServers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDashboardRelatedServersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dashboardRelatedServersDo) Debug() IDashboardRelatedServersDo {
	return d.withDO(d.DO.Debug())
}

func (d dashboardRelatedServersDo) WithContext(ctx context.Context) IDashboardRelatedServersDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dashboardRelatedServersDo) ReadDB() IDashboardRelatedServersDo {
	return d.Clauses(dbresolver.Read)
}

func (d dashboardRelatedServersDo) WriteDB() IDashboardRelatedServersDo {
	return d.Clauses(dbresolver.Write)
}

func (d dashboardRelatedServersDo) Session(config *gorm.Session) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Session(config))
}

func (d dashboardRelatedServersDo) Clauses(conds ...clause.Expression) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dashboardRelatedServersDo) Returning(value interface{}, columns ...string) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dashboardRelatedServersDo) Not(conds ...gen.Condition) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dashboardRelatedServersDo) Or(conds ...gen.Condition) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dashboardRelatedServersDo) Select(conds ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dashboardRelatedServersDo) Where(conds ...gen.Condition) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dashboardRelatedServersDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDashboardRelatedServersDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dashboardRelatedServersDo) Order(conds ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dashboardRelatedServersDo) Distinct(cols ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dashboardRelatedServersDo) Omit(cols ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dashboardRelatedServersDo) Join(table schema.Tabler, on ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dashboardRelatedServersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dashboardRelatedServersDo) RightJoin(table schema.Tabler, on ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dashboardRelatedServersDo) Group(cols ...field.Expr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dashboardRelatedServersDo) Having(conds ...gen.Condition) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dashboardRelatedServersDo) Limit(limit int) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dashboardRelatedServersDo) Offset(offset int) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dashboardRelatedServersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dashboardRelatedServersDo) Unscoped() IDashboardRelatedServersDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dashboardRelatedServersDo) Create(values ...*model.DashboardRelatedServers) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dashboardRelatedServersDo) CreateInBatches(values []*model.DashboardRelatedServers, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dashboardRelatedServersDo) Save(values ...*model.DashboardRelatedServers) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dashboardRelatedServersDo) First() (*model.DashboardRelatedServers, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardRelatedServers), nil
	}
}

func (d dashboardRelatedServersDo) Take() (*model.DashboardRelatedServers, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardRelatedServers), nil
	}
}

func (d dashboardRelatedServersDo) Last() (*model.DashboardRelatedServers, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardRelatedServers), nil
	}
}

func (d dashboardRelatedServersDo) Find() ([]*model.DashboardRelatedServers, error) {
	result, err := d.DO.Find()
	return result.([]*model.DashboardRelatedServers), err
}

func (d dashboardRelatedServersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DashboardRelatedServers, err error) {
	buf := make([]*model.DashboardRelatedServers, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dashboardRelatedServersDo) FindInBatches(result *[]*model.DashboardRelatedServers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dashboardRelatedServersDo) Attrs(attrs ...field.AssignExpr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dashboardRelatedServersDo) Assign(attrs ...field.AssignExpr) IDashboardRelatedServersDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dashboardRelatedServersDo) Joins(fields ...field.RelationField) IDashboardRelatedServersDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dashboardRelatedServersDo) Preload(fields ...field.RelationField) IDashboardRelatedServersDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dashboardRelatedServersDo) FirstOrInit() (*model.DashboardRelatedServers, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardRelatedServers), nil
	}
}

func (d dashboardRelatedServersDo) FirstOrCreate() (*model.DashboardRelatedServers, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DashboardRelatedServers), nil
	}
}

func (d dashboardRelatedServersDo) FindByPage(offset int, limit int) (result []*model.DashboardRelatedServers, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dashboardRelatedServersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dashboardRelatedServersDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dashboardRelatedServersDo) Delete(models ...*model.DashboardRelatedServers) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dashboardRelatedServersDo) withDO(do gen.Dao) *dashboardRelatedServersDo {
	d.DO = *do.(*gen.DO)
	return d
}
