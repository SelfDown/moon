// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbaApk(db *gorm.DB, opts ...gen.DOOption) dbaApk {
	_dbaApk := dbaApk{}

	_dbaApk.dbaApkDo.UseDB(db, opts...)
	_dbaApk.dbaApkDo.UseModel(&model.DbaApk{})

	tableName := _dbaApk.dbaApkDo.TableName()
	_dbaApk.ALL = field.NewAsterisk(tableName)
	_dbaApk.ID = field.NewString(tableName, "id")
	_dbaApk.Version = field.NewString(tableName, "version")
	_dbaApk.CreateTime = field.NewString(tableName, "create_time")
	_dbaApk.File = field.NewBytes(tableName, "file")
	_dbaApk.Content = field.NewString(tableName, "content")

	_dbaApk.fillFieldMap()

	return _dbaApk
}

type dbaApk struct {
	dbaApkDo

	ALL        field.Asterisk
	ID         field.String
	Version    field.String
	CreateTime field.String
	File       field.Bytes
	Content    field.String

	fieldMap map[string]field.Expr
}

func (d dbaApk) Table(newTableName string) *dbaApk {
	d.dbaApkDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbaApk) As(alias string) *dbaApk {
	d.dbaApkDo.DO = *(d.dbaApkDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbaApk) updateTableName(table string) *dbaApk {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Version = field.NewString(table, "version")
	d.CreateTime = field.NewString(table, "create_time")
	d.File = field.NewBytes(table, "file")
	d.Content = field.NewString(table, "content")

	d.fillFieldMap()

	return d
}

func (d *dbaApk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbaApk) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["version"] = d.Version
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["file"] = d.File
	d.fieldMap["content"] = d.Content
}

func (d dbaApk) clone(db *gorm.DB) dbaApk {
	d.dbaApkDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbaApk) replaceDB(db *gorm.DB) dbaApk {
	d.dbaApkDo.ReplaceDB(db)
	return d
}

type dbaApkDo struct{ gen.DO }

type IDbaApkDo interface {
	gen.SubQuery
	Debug() IDbaApkDo
	WithContext(ctx context.Context) IDbaApkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbaApkDo
	WriteDB() IDbaApkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbaApkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbaApkDo
	Not(conds ...gen.Condition) IDbaApkDo
	Or(conds ...gen.Condition) IDbaApkDo
	Select(conds ...field.Expr) IDbaApkDo
	Where(conds ...gen.Condition) IDbaApkDo
	Order(conds ...field.Expr) IDbaApkDo
	Distinct(cols ...field.Expr) IDbaApkDo
	Omit(cols ...field.Expr) IDbaApkDo
	Join(table schema.Tabler, on ...field.Expr) IDbaApkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbaApkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbaApkDo
	Group(cols ...field.Expr) IDbaApkDo
	Having(conds ...gen.Condition) IDbaApkDo
	Limit(limit int) IDbaApkDo
	Offset(offset int) IDbaApkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbaApkDo
	Unscoped() IDbaApkDo
	Create(values ...*model.DbaApk) error
	CreateInBatches(values []*model.DbaApk, batchSize int) error
	Save(values ...*model.DbaApk) error
	First() (*model.DbaApk, error)
	Take() (*model.DbaApk, error)
	Last() (*model.DbaApk, error)
	Find() ([]*model.DbaApk, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbaApk, err error)
	FindInBatches(result *[]*model.DbaApk, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbaApk) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbaApkDo
	Assign(attrs ...field.AssignExpr) IDbaApkDo
	Joins(fields ...field.RelationField) IDbaApkDo
	Preload(fields ...field.RelationField) IDbaApkDo
	FirstOrInit() (*model.DbaApk, error)
	FirstOrCreate() (*model.DbaApk, error)
	FindByPage(offset int, limit int) (result []*model.DbaApk, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbaApkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbaApkDo) Debug() IDbaApkDo {
	return d.withDO(d.DO.Debug())
}

func (d dbaApkDo) WithContext(ctx context.Context) IDbaApkDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbaApkDo) ReadDB() IDbaApkDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbaApkDo) WriteDB() IDbaApkDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbaApkDo) Session(config *gorm.Session) IDbaApkDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbaApkDo) Clauses(conds ...clause.Expression) IDbaApkDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbaApkDo) Returning(value interface{}, columns ...string) IDbaApkDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbaApkDo) Not(conds ...gen.Condition) IDbaApkDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbaApkDo) Or(conds ...gen.Condition) IDbaApkDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbaApkDo) Select(conds ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbaApkDo) Where(conds ...gen.Condition) IDbaApkDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbaApkDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbaApkDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbaApkDo) Order(conds ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbaApkDo) Distinct(cols ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbaApkDo) Omit(cols ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbaApkDo) Join(table schema.Tabler, on ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbaApkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbaApkDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbaApkDo) Group(cols ...field.Expr) IDbaApkDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbaApkDo) Having(conds ...gen.Condition) IDbaApkDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbaApkDo) Limit(limit int) IDbaApkDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbaApkDo) Offset(offset int) IDbaApkDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbaApkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbaApkDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbaApkDo) Unscoped() IDbaApkDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbaApkDo) Create(values ...*model.DbaApk) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbaApkDo) CreateInBatches(values []*model.DbaApk, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbaApkDo) Save(values ...*model.DbaApk) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbaApkDo) First() (*model.DbaApk, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbaApk), nil
	}
}

func (d dbaApkDo) Take() (*model.DbaApk, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbaApk), nil
	}
}

func (d dbaApkDo) Last() (*model.DbaApk, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbaApk), nil
	}
}

func (d dbaApkDo) Find() ([]*model.DbaApk, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbaApk), err
}

func (d dbaApkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbaApk, err error) {
	buf := make([]*model.DbaApk, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbaApkDo) FindInBatches(result *[]*model.DbaApk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbaApkDo) Attrs(attrs ...field.AssignExpr) IDbaApkDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbaApkDo) Assign(attrs ...field.AssignExpr) IDbaApkDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbaApkDo) Joins(fields ...field.RelationField) IDbaApkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbaApkDo) Preload(fields ...field.RelationField) IDbaApkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbaApkDo) FirstOrInit() (*model.DbaApk, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbaApk), nil
	}
}

func (d dbaApkDo) FirstOrCreate() (*model.DbaApk, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbaApk), nil
	}
}

func (d dbaApkDo) FindByPage(offset int, limit int) (result []*model.DbaApk, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbaApkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbaApkDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbaApkDo) Delete(models ...*model.DbaApk) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbaApkDo) withDO(do gen.Dao) *dbaApkDo {
	d.DO = *do.(*gen.DO)
	return d
}
