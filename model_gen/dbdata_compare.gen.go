// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataCompare(db *gorm.DB, opts ...gen.DOOption) dbdataCompare {
	_dbdataCompare := dbdataCompare{}

	_dbdataCompare.dbdataCompareDo.UseDB(db, opts...)
	_dbdataCompare.dbdataCompareDo.UseModel(&model.DbdataCompare{})

	tableName := _dbdataCompare.dbdataCompareDo.TableName()
	_dbdataCompare.ALL = field.NewAsterisk(tableName)
	_dbdataCompare.DbdataCompareID = field.NewString(tableName, "dbdata_compare_id")
	_dbdataCompare.SoftUserID = field.NewString(tableName, "soft_user_id")
	_dbdataCompare.UsersContent = field.NewString(tableName, "users_content")
	_dbdataCompare.TablesContent = field.NewString(tableName, "tables_content")
	_dbdataCompare.CreateTime = field.NewString(tableName, "create_time")
	_dbdataCompare.FinishTime = field.NewString(tableName, "finish_time")
	_dbdataCompare.CreateUser = field.NewString(tableName, "create_user")
	_dbdataCompare.PdmPath = field.NewString(tableName, "pdm_path")
	_dbdataCompare.GitProjectID = field.NewString(tableName, "git_project_id")
	_dbdataCompare.Branch = field.NewString(tableName, "branch")

	_dbdataCompare.fillFieldMap()

	return _dbdataCompare
}

type dbdataCompare struct {
	dbdataCompareDo

	ALL             field.Asterisk
	DbdataCompareID field.String
	SoftUserID      field.String
	UsersContent    field.String
	TablesContent   field.String
	CreateTime      field.String
	FinishTime      field.String
	CreateUser      field.String
	PdmPath         field.String
	GitProjectID    field.String
	Branch          field.String

	fieldMap map[string]field.Expr
}

func (d dbdataCompare) Table(newTableName string) *dbdataCompare {
	d.dbdataCompareDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataCompare) As(alias string) *dbdataCompare {
	d.dbdataCompareDo.DO = *(d.dbdataCompareDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataCompare) updateTableName(table string) *dbdataCompare {
	d.ALL = field.NewAsterisk(table)
	d.DbdataCompareID = field.NewString(table, "dbdata_compare_id")
	d.SoftUserID = field.NewString(table, "soft_user_id")
	d.UsersContent = field.NewString(table, "users_content")
	d.TablesContent = field.NewString(table, "tables_content")
	d.CreateTime = field.NewString(table, "create_time")
	d.FinishTime = field.NewString(table, "finish_time")
	d.CreateUser = field.NewString(table, "create_user")
	d.PdmPath = field.NewString(table, "pdm_path")
	d.GitProjectID = field.NewString(table, "git_project_id")
	d.Branch = field.NewString(table, "branch")

	d.fillFieldMap()

	return d
}

func (d *dbdataCompare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataCompare) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["dbdata_compare_id"] = d.DbdataCompareID
	d.fieldMap["soft_user_id"] = d.SoftUserID
	d.fieldMap["users_content"] = d.UsersContent
	d.fieldMap["tables_content"] = d.TablesContent
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["finish_time"] = d.FinishTime
	d.fieldMap["create_user"] = d.CreateUser
	d.fieldMap["pdm_path"] = d.PdmPath
	d.fieldMap["git_project_id"] = d.GitProjectID
	d.fieldMap["branch"] = d.Branch
}

func (d dbdataCompare) clone(db *gorm.DB) dbdataCompare {
	d.dbdataCompareDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataCompare) replaceDB(db *gorm.DB) dbdataCompare {
	d.dbdataCompareDo.ReplaceDB(db)
	return d
}

type dbdataCompareDo struct{ gen.DO }

type IDbdataCompareDo interface {
	gen.SubQuery
	Debug() IDbdataCompareDo
	WithContext(ctx context.Context) IDbdataCompareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataCompareDo
	WriteDB() IDbdataCompareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataCompareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataCompareDo
	Not(conds ...gen.Condition) IDbdataCompareDo
	Or(conds ...gen.Condition) IDbdataCompareDo
	Select(conds ...field.Expr) IDbdataCompareDo
	Where(conds ...gen.Condition) IDbdataCompareDo
	Order(conds ...field.Expr) IDbdataCompareDo
	Distinct(cols ...field.Expr) IDbdataCompareDo
	Omit(cols ...field.Expr) IDbdataCompareDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataCompareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareDo
	Group(cols ...field.Expr) IDbdataCompareDo
	Having(conds ...gen.Condition) IDbdataCompareDo
	Limit(limit int) IDbdataCompareDo
	Offset(offset int) IDbdataCompareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataCompareDo
	Unscoped() IDbdataCompareDo
	Create(values ...*model.DbdataCompare) error
	CreateInBatches(values []*model.DbdataCompare, batchSize int) error
	Save(values ...*model.DbdataCompare) error
	First() (*model.DbdataCompare, error)
	Take() (*model.DbdataCompare, error)
	Last() (*model.DbdataCompare, error)
	Find() ([]*model.DbdataCompare, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataCompare, err error)
	FindInBatches(result *[]*model.DbdataCompare, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataCompare) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataCompareDo
	Assign(attrs ...field.AssignExpr) IDbdataCompareDo
	Joins(fields ...field.RelationField) IDbdataCompareDo
	Preload(fields ...field.RelationField) IDbdataCompareDo
	FirstOrInit() (*model.DbdataCompare, error)
	FirstOrCreate() (*model.DbdataCompare, error)
	FindByPage(offset int, limit int) (result []*model.DbdataCompare, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataCompareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataCompareDo) Debug() IDbdataCompareDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataCompareDo) WithContext(ctx context.Context) IDbdataCompareDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataCompareDo) ReadDB() IDbdataCompareDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataCompareDo) WriteDB() IDbdataCompareDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataCompareDo) Session(config *gorm.Session) IDbdataCompareDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataCompareDo) Clauses(conds ...clause.Expression) IDbdataCompareDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataCompareDo) Returning(value interface{}, columns ...string) IDbdataCompareDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataCompareDo) Not(conds ...gen.Condition) IDbdataCompareDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataCompareDo) Or(conds ...gen.Condition) IDbdataCompareDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataCompareDo) Select(conds ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataCompareDo) Where(conds ...gen.Condition) IDbdataCompareDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataCompareDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataCompareDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataCompareDo) Order(conds ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataCompareDo) Distinct(cols ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataCompareDo) Omit(cols ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataCompareDo) Join(table schema.Tabler, on ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataCompareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataCompareDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataCompareDo) Group(cols ...field.Expr) IDbdataCompareDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataCompareDo) Having(conds ...gen.Condition) IDbdataCompareDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataCompareDo) Limit(limit int) IDbdataCompareDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataCompareDo) Offset(offset int) IDbdataCompareDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataCompareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataCompareDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataCompareDo) Unscoped() IDbdataCompareDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataCompareDo) Create(values ...*model.DbdataCompare) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataCompareDo) CreateInBatches(values []*model.DbdataCompare, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataCompareDo) Save(values ...*model.DbdataCompare) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataCompareDo) First() (*model.DbdataCompare, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompare), nil
	}
}

func (d dbdataCompareDo) Take() (*model.DbdataCompare, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompare), nil
	}
}

func (d dbdataCompareDo) Last() (*model.DbdataCompare, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompare), nil
	}
}

func (d dbdataCompareDo) Find() ([]*model.DbdataCompare, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataCompare), err
}

func (d dbdataCompareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataCompare, err error) {
	buf := make([]*model.DbdataCompare, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataCompareDo) FindInBatches(result *[]*model.DbdataCompare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataCompareDo) Attrs(attrs ...field.AssignExpr) IDbdataCompareDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataCompareDo) Assign(attrs ...field.AssignExpr) IDbdataCompareDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataCompareDo) Joins(fields ...field.RelationField) IDbdataCompareDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataCompareDo) Preload(fields ...field.RelationField) IDbdataCompareDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataCompareDo) FirstOrInit() (*model.DbdataCompare, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompare), nil
	}
}

func (d dbdataCompareDo) FirstOrCreate() (*model.DbdataCompare, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompare), nil
	}
}

func (d dbdataCompareDo) FindByPage(offset int, limit int) (result []*model.DbdataCompare, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataCompareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataCompareDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataCompareDo) Delete(models ...*model.DbdataCompare) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataCompareDo) withDO(do gen.Dao) *dbdataCompareDo {
	d.DO = *do.(*gen.DO)
	return d
}
