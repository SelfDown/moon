// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataCompareChangeList(db *gorm.DB, opts ...gen.DOOption) dbdataCompareChangeList {
	_dbdataCompareChangeList := dbdataCompareChangeList{}

	_dbdataCompareChangeList.dbdataCompareChangeListDo.UseDB(db, opts...)
	_dbdataCompareChangeList.dbdataCompareChangeListDo.UseModel(&model.DbdataCompareChangeList{})

	tableName := _dbdataCompareChangeList.dbdataCompareChangeListDo.TableName()
	_dbdataCompareChangeList.ALL = field.NewAsterisk(tableName)
	_dbdataCompareChangeList.DbdataCompareChangeListID = field.NewString(tableName, "dbdata_compare_change_list_id")
	_dbdataCompareChangeList.DbdataCompareID = field.NewString(tableName, "dbdata_compare_id")
	_dbdataCompareChangeList.DataType = field.NewString(tableName, "data_type")
	_dbdataCompareChangeList.DataLength = field.NewString(tableName, "data_length")
	_dbdataCompareChangeList.Field = field.NewString(tableName, "field")
	_dbdataCompareChangeList.TableName_ = field.NewString(tableName, "table_name")
	_dbdataCompareChangeList.Owner = field.NewString(tableName, "owner")
	_dbdataCompareChangeList.Name = field.NewString(tableName, "name")
	_dbdataCompareChangeList.ColumnName = field.NewString(tableName, "column_name")
	_dbdataCompareChangeList.Operation = field.NewString(tableName, "operation")
	_dbdataCompareChangeList.Before = field.NewString(tableName, "before")
	_dbdataCompareChangeList.After = field.NewString(tableName, "after")
	_dbdataCompareChangeList.CreateUser = field.NewString(tableName, "create_user")

	_dbdataCompareChangeList.fillFieldMap()

	return _dbdataCompareChangeList
}

type dbdataCompareChangeList struct {
	dbdataCompareChangeListDo

	ALL                       field.Asterisk
	DbdataCompareChangeListID field.String
	DbdataCompareID           field.String
	DataType                  field.String
	DataLength                field.String
	Field                     field.String
	TableName_                field.String
	Owner                     field.String
	Name                      field.String
	ColumnName                field.String
	Operation                 field.String
	Before                    field.String
	After                     field.String
	CreateUser                field.String

	fieldMap map[string]field.Expr
}

func (d dbdataCompareChangeList) Table(newTableName string) *dbdataCompareChangeList {
	d.dbdataCompareChangeListDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataCompareChangeList) As(alias string) *dbdataCompareChangeList {
	d.dbdataCompareChangeListDo.DO = *(d.dbdataCompareChangeListDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataCompareChangeList) updateTableName(table string) *dbdataCompareChangeList {
	d.ALL = field.NewAsterisk(table)
	d.DbdataCompareChangeListID = field.NewString(table, "dbdata_compare_change_list_id")
	d.DbdataCompareID = field.NewString(table, "dbdata_compare_id")
	d.DataType = field.NewString(table, "data_type")
	d.DataLength = field.NewString(table, "data_length")
	d.Field = field.NewString(table, "field")
	d.TableName_ = field.NewString(table, "table_name")
	d.Owner = field.NewString(table, "owner")
	d.Name = field.NewString(table, "name")
	d.ColumnName = field.NewString(table, "column_name")
	d.Operation = field.NewString(table, "operation")
	d.Before = field.NewString(table, "before")
	d.After = field.NewString(table, "after")
	d.CreateUser = field.NewString(table, "create_user")

	d.fillFieldMap()

	return d
}

func (d *dbdataCompareChangeList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataCompareChangeList) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["dbdata_compare_change_list_id"] = d.DbdataCompareChangeListID
	d.fieldMap["dbdata_compare_id"] = d.DbdataCompareID
	d.fieldMap["data_type"] = d.DataType
	d.fieldMap["data_length"] = d.DataLength
	d.fieldMap["field"] = d.Field
	d.fieldMap["table_name"] = d.TableName_
	d.fieldMap["owner"] = d.Owner
	d.fieldMap["name"] = d.Name
	d.fieldMap["column_name"] = d.ColumnName
	d.fieldMap["operation"] = d.Operation
	d.fieldMap["before"] = d.Before
	d.fieldMap["after"] = d.After
	d.fieldMap["create_user"] = d.CreateUser
}

func (d dbdataCompareChangeList) clone(db *gorm.DB) dbdataCompareChangeList {
	d.dbdataCompareChangeListDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataCompareChangeList) replaceDB(db *gorm.DB) dbdataCompareChangeList {
	d.dbdataCompareChangeListDo.ReplaceDB(db)
	return d
}

type dbdataCompareChangeListDo struct{ gen.DO }

type IDbdataCompareChangeListDo interface {
	gen.SubQuery
	Debug() IDbdataCompareChangeListDo
	WithContext(ctx context.Context) IDbdataCompareChangeListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataCompareChangeListDo
	WriteDB() IDbdataCompareChangeListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataCompareChangeListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataCompareChangeListDo
	Not(conds ...gen.Condition) IDbdataCompareChangeListDo
	Or(conds ...gen.Condition) IDbdataCompareChangeListDo
	Select(conds ...field.Expr) IDbdataCompareChangeListDo
	Where(conds ...gen.Condition) IDbdataCompareChangeListDo
	Order(conds ...field.Expr) IDbdataCompareChangeListDo
	Distinct(cols ...field.Expr) IDbdataCompareChangeListDo
	Omit(cols ...field.Expr) IDbdataCompareChangeListDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataCompareChangeListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareChangeListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareChangeListDo
	Group(cols ...field.Expr) IDbdataCompareChangeListDo
	Having(conds ...gen.Condition) IDbdataCompareChangeListDo
	Limit(limit int) IDbdataCompareChangeListDo
	Offset(offset int) IDbdataCompareChangeListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataCompareChangeListDo
	Unscoped() IDbdataCompareChangeListDo
	Create(values ...*model.DbdataCompareChangeList) error
	CreateInBatches(values []*model.DbdataCompareChangeList, batchSize int) error
	Save(values ...*model.DbdataCompareChangeList) error
	First() (*model.DbdataCompareChangeList, error)
	Take() (*model.DbdataCompareChangeList, error)
	Last() (*model.DbdataCompareChangeList, error)
	Find() ([]*model.DbdataCompareChangeList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataCompareChangeList, err error)
	FindInBatches(result *[]*model.DbdataCompareChangeList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataCompareChangeList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataCompareChangeListDo
	Assign(attrs ...field.AssignExpr) IDbdataCompareChangeListDo
	Joins(fields ...field.RelationField) IDbdataCompareChangeListDo
	Preload(fields ...field.RelationField) IDbdataCompareChangeListDo
	FirstOrInit() (*model.DbdataCompareChangeList, error)
	FirstOrCreate() (*model.DbdataCompareChangeList, error)
	FindByPage(offset int, limit int) (result []*model.DbdataCompareChangeList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataCompareChangeListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataCompareChangeListDo) Debug() IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataCompareChangeListDo) WithContext(ctx context.Context) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataCompareChangeListDo) ReadDB() IDbdataCompareChangeListDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataCompareChangeListDo) WriteDB() IDbdataCompareChangeListDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataCompareChangeListDo) Session(config *gorm.Session) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataCompareChangeListDo) Clauses(conds ...clause.Expression) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataCompareChangeListDo) Returning(value interface{}, columns ...string) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataCompareChangeListDo) Not(conds ...gen.Condition) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataCompareChangeListDo) Or(conds ...gen.Condition) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataCompareChangeListDo) Select(conds ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataCompareChangeListDo) Where(conds ...gen.Condition) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataCompareChangeListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataCompareChangeListDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataCompareChangeListDo) Order(conds ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataCompareChangeListDo) Distinct(cols ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataCompareChangeListDo) Omit(cols ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataCompareChangeListDo) Join(table schema.Tabler, on ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataCompareChangeListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataCompareChangeListDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataCompareChangeListDo) Group(cols ...field.Expr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataCompareChangeListDo) Having(conds ...gen.Condition) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataCompareChangeListDo) Limit(limit int) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataCompareChangeListDo) Offset(offset int) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataCompareChangeListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataCompareChangeListDo) Unscoped() IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataCompareChangeListDo) Create(values ...*model.DbdataCompareChangeList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataCompareChangeListDo) CreateInBatches(values []*model.DbdataCompareChangeList, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataCompareChangeListDo) Save(values ...*model.DbdataCompareChangeList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataCompareChangeListDo) First() (*model.DbdataCompareChangeList, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompareChangeList), nil
	}
}

func (d dbdataCompareChangeListDo) Take() (*model.DbdataCompareChangeList, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompareChangeList), nil
	}
}

func (d dbdataCompareChangeListDo) Last() (*model.DbdataCompareChangeList, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompareChangeList), nil
	}
}

func (d dbdataCompareChangeListDo) Find() ([]*model.DbdataCompareChangeList, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataCompareChangeList), err
}

func (d dbdataCompareChangeListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataCompareChangeList, err error) {
	buf := make([]*model.DbdataCompareChangeList, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataCompareChangeListDo) FindInBatches(result *[]*model.DbdataCompareChangeList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataCompareChangeListDo) Attrs(attrs ...field.AssignExpr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataCompareChangeListDo) Assign(attrs ...field.AssignExpr) IDbdataCompareChangeListDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataCompareChangeListDo) Joins(fields ...field.RelationField) IDbdataCompareChangeListDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataCompareChangeListDo) Preload(fields ...field.RelationField) IDbdataCompareChangeListDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataCompareChangeListDo) FirstOrInit() (*model.DbdataCompareChangeList, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompareChangeList), nil
	}
}

func (d dbdataCompareChangeListDo) FirstOrCreate() (*model.DbdataCompareChangeList, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataCompareChangeList), nil
	}
}

func (d dbdataCompareChangeListDo) FindByPage(offset int, limit int) (result []*model.DbdataCompareChangeList, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataCompareChangeListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataCompareChangeListDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataCompareChangeListDo) Delete(models ...*model.DbdataCompareChangeList) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataCompareChangeListDo) withDO(do gen.Dao) *dbdataCompareChangeListDo {
	d.DO = *do.(*gen.DO)
	return d
}
