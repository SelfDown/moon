// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataExportStatus(db *gorm.DB, opts ...gen.DOOption) dbdataExportStatus {
	_dbdataExportStatus := dbdataExportStatus{}

	_dbdataExportStatus.dbdataExportStatusDo.UseDB(db, opts...)
	_dbdataExportStatus.dbdataExportStatusDo.UseModel(&model.DbdataExportStatus{})

	tableName := _dbdataExportStatus.dbdataExportStatusDo.TableName()
	_dbdataExportStatus.ALL = field.NewAsterisk(tableName)
	_dbdataExportStatus.StatusCode = field.NewString(tableName, "status_code")
	_dbdataExportStatus.Name = field.NewString(tableName, "name")
	_dbdataExportStatus.Idx = field.NewInt32(tableName, "idx")
	_dbdataExportStatus.IsSuccess = field.NewInt32(tableName, "is_success")
	_dbdataExportStatus.Weight = field.NewInt32(tableName, "weight")

	_dbdataExportStatus.fillFieldMap()

	return _dbdataExportStatus
}

type dbdataExportStatus struct {
	dbdataExportStatusDo

	ALL        field.Asterisk
	StatusCode field.String
	Name       field.String
	Idx        field.Int32 // 流程节点程碑
	IsSuccess  field.Int32 // 1 正向流程,0失败流程
	Weight     field.Int32 // 权重

	fieldMap map[string]field.Expr
}

func (d dbdataExportStatus) Table(newTableName string) *dbdataExportStatus {
	d.dbdataExportStatusDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataExportStatus) As(alias string) *dbdataExportStatus {
	d.dbdataExportStatusDo.DO = *(d.dbdataExportStatusDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataExportStatus) updateTableName(table string) *dbdataExportStatus {
	d.ALL = field.NewAsterisk(table)
	d.StatusCode = field.NewString(table, "status_code")
	d.Name = field.NewString(table, "name")
	d.Idx = field.NewInt32(table, "idx")
	d.IsSuccess = field.NewInt32(table, "is_success")
	d.Weight = field.NewInt32(table, "weight")

	d.fillFieldMap()

	return d
}

func (d *dbdataExportStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataExportStatus) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["status_code"] = d.StatusCode
	d.fieldMap["name"] = d.Name
	d.fieldMap["idx"] = d.Idx
	d.fieldMap["is_success"] = d.IsSuccess
	d.fieldMap["weight"] = d.Weight
}

func (d dbdataExportStatus) clone(db *gorm.DB) dbdataExportStatus {
	d.dbdataExportStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataExportStatus) replaceDB(db *gorm.DB) dbdataExportStatus {
	d.dbdataExportStatusDo.ReplaceDB(db)
	return d
}

type dbdataExportStatusDo struct{ gen.DO }

type IDbdataExportStatusDo interface {
	gen.SubQuery
	Debug() IDbdataExportStatusDo
	WithContext(ctx context.Context) IDbdataExportStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataExportStatusDo
	WriteDB() IDbdataExportStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataExportStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataExportStatusDo
	Not(conds ...gen.Condition) IDbdataExportStatusDo
	Or(conds ...gen.Condition) IDbdataExportStatusDo
	Select(conds ...field.Expr) IDbdataExportStatusDo
	Where(conds ...gen.Condition) IDbdataExportStatusDo
	Order(conds ...field.Expr) IDbdataExportStatusDo
	Distinct(cols ...field.Expr) IDbdataExportStatusDo
	Omit(cols ...field.Expr) IDbdataExportStatusDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataExportStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataExportStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataExportStatusDo
	Group(cols ...field.Expr) IDbdataExportStatusDo
	Having(conds ...gen.Condition) IDbdataExportStatusDo
	Limit(limit int) IDbdataExportStatusDo
	Offset(offset int) IDbdataExportStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataExportStatusDo
	Unscoped() IDbdataExportStatusDo
	Create(values ...*model.DbdataExportStatus) error
	CreateInBatches(values []*model.DbdataExportStatus, batchSize int) error
	Save(values ...*model.DbdataExportStatus) error
	First() (*model.DbdataExportStatus, error)
	Take() (*model.DbdataExportStatus, error)
	Last() (*model.DbdataExportStatus, error)
	Find() ([]*model.DbdataExportStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataExportStatus, err error)
	FindInBatches(result *[]*model.DbdataExportStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataExportStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataExportStatusDo
	Assign(attrs ...field.AssignExpr) IDbdataExportStatusDo
	Joins(fields ...field.RelationField) IDbdataExportStatusDo
	Preload(fields ...field.RelationField) IDbdataExportStatusDo
	FirstOrInit() (*model.DbdataExportStatus, error)
	FirstOrCreate() (*model.DbdataExportStatus, error)
	FindByPage(offset int, limit int) (result []*model.DbdataExportStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataExportStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataExportStatusDo) Debug() IDbdataExportStatusDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataExportStatusDo) WithContext(ctx context.Context) IDbdataExportStatusDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataExportStatusDo) ReadDB() IDbdataExportStatusDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataExportStatusDo) WriteDB() IDbdataExportStatusDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataExportStatusDo) Session(config *gorm.Session) IDbdataExportStatusDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataExportStatusDo) Clauses(conds ...clause.Expression) IDbdataExportStatusDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataExportStatusDo) Returning(value interface{}, columns ...string) IDbdataExportStatusDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataExportStatusDo) Not(conds ...gen.Condition) IDbdataExportStatusDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataExportStatusDo) Or(conds ...gen.Condition) IDbdataExportStatusDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataExportStatusDo) Select(conds ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataExportStatusDo) Where(conds ...gen.Condition) IDbdataExportStatusDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataExportStatusDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataExportStatusDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataExportStatusDo) Order(conds ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataExportStatusDo) Distinct(cols ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataExportStatusDo) Omit(cols ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataExportStatusDo) Join(table schema.Tabler, on ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataExportStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataExportStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataExportStatusDo) Group(cols ...field.Expr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataExportStatusDo) Having(conds ...gen.Condition) IDbdataExportStatusDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataExportStatusDo) Limit(limit int) IDbdataExportStatusDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataExportStatusDo) Offset(offset int) IDbdataExportStatusDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataExportStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataExportStatusDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataExportStatusDo) Unscoped() IDbdataExportStatusDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataExportStatusDo) Create(values ...*model.DbdataExportStatus) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataExportStatusDo) CreateInBatches(values []*model.DbdataExportStatus, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataExportStatusDo) Save(values ...*model.DbdataExportStatus) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataExportStatusDo) First() (*model.DbdataExportStatus, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportStatus), nil
	}
}

func (d dbdataExportStatusDo) Take() (*model.DbdataExportStatus, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportStatus), nil
	}
}

func (d dbdataExportStatusDo) Last() (*model.DbdataExportStatus, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportStatus), nil
	}
}

func (d dbdataExportStatusDo) Find() ([]*model.DbdataExportStatus, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataExportStatus), err
}

func (d dbdataExportStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataExportStatus, err error) {
	buf := make([]*model.DbdataExportStatus, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataExportStatusDo) FindInBatches(result *[]*model.DbdataExportStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataExportStatusDo) Attrs(attrs ...field.AssignExpr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataExportStatusDo) Assign(attrs ...field.AssignExpr) IDbdataExportStatusDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataExportStatusDo) Joins(fields ...field.RelationField) IDbdataExportStatusDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataExportStatusDo) Preload(fields ...field.RelationField) IDbdataExportStatusDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataExportStatusDo) FirstOrInit() (*model.DbdataExportStatus, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportStatus), nil
	}
}

func (d dbdataExportStatusDo) FirstOrCreate() (*model.DbdataExportStatus, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportStatus), nil
	}
}

func (d dbdataExportStatusDo) FindByPage(offset int, limit int) (result []*model.DbdataExportStatus, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataExportStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataExportStatusDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataExportStatusDo) Delete(models ...*model.DbdataExportStatus) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataExportStatusDo) withDO(do gen.Dao) *dbdataExportStatusDo {
	d.DO = *do.(*gen.DO)
	return d
}
