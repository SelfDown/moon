// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataExportUsers(db *gorm.DB, opts ...gen.DOOption) dbdataExportUsers {
	_dbdataExportUsers := dbdataExportUsers{}

	_dbdataExportUsers.dbdataExportUsersDo.UseDB(db, opts...)
	_dbdataExportUsers.dbdataExportUsersDo.UseModel(&model.DbdataExportUsers{})

	tableName := _dbdataExportUsers.dbdataExportUsersDo.TableName()
	_dbdataExportUsers.ALL = field.NewAsterisk(tableName)
	_dbdataExportUsers.DbdataExportUsersID = field.NewString(tableName, "dbdata_export_users_id")
	_dbdataExportUsers.DbdataExportID = field.NewString(tableName, "dbdata_export_id")
	_dbdataExportUsers.DbUser = field.NewString(tableName, "db_user")

	_dbdataExportUsers.fillFieldMap()

	return _dbdataExportUsers
}

type dbdataExportUsers struct {
	dbdataExportUsersDo

	ALL                 field.Asterisk
	DbdataExportUsersID field.String
	DbdataExportID      field.String
	DbUser              field.String

	fieldMap map[string]field.Expr
}

func (d dbdataExportUsers) Table(newTableName string) *dbdataExportUsers {
	d.dbdataExportUsersDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataExportUsers) As(alias string) *dbdataExportUsers {
	d.dbdataExportUsersDo.DO = *(d.dbdataExportUsersDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataExportUsers) updateTableName(table string) *dbdataExportUsers {
	d.ALL = field.NewAsterisk(table)
	d.DbdataExportUsersID = field.NewString(table, "dbdata_export_users_id")
	d.DbdataExportID = field.NewString(table, "dbdata_export_id")
	d.DbUser = field.NewString(table, "db_user")

	d.fillFieldMap()

	return d
}

func (d *dbdataExportUsers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataExportUsers) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["dbdata_export_users_id"] = d.DbdataExportUsersID
	d.fieldMap["dbdata_export_id"] = d.DbdataExportID
	d.fieldMap["db_user"] = d.DbUser
}

func (d dbdataExportUsers) clone(db *gorm.DB) dbdataExportUsers {
	d.dbdataExportUsersDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataExportUsers) replaceDB(db *gorm.DB) dbdataExportUsers {
	d.dbdataExportUsersDo.ReplaceDB(db)
	return d
}

type dbdataExportUsersDo struct{ gen.DO }

type IDbdataExportUsersDo interface {
	gen.SubQuery
	Debug() IDbdataExportUsersDo
	WithContext(ctx context.Context) IDbdataExportUsersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataExportUsersDo
	WriteDB() IDbdataExportUsersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataExportUsersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataExportUsersDo
	Not(conds ...gen.Condition) IDbdataExportUsersDo
	Or(conds ...gen.Condition) IDbdataExportUsersDo
	Select(conds ...field.Expr) IDbdataExportUsersDo
	Where(conds ...gen.Condition) IDbdataExportUsersDo
	Order(conds ...field.Expr) IDbdataExportUsersDo
	Distinct(cols ...field.Expr) IDbdataExportUsersDo
	Omit(cols ...field.Expr) IDbdataExportUsersDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataExportUsersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataExportUsersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataExportUsersDo
	Group(cols ...field.Expr) IDbdataExportUsersDo
	Having(conds ...gen.Condition) IDbdataExportUsersDo
	Limit(limit int) IDbdataExportUsersDo
	Offset(offset int) IDbdataExportUsersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataExportUsersDo
	Unscoped() IDbdataExportUsersDo
	Create(values ...*model.DbdataExportUsers) error
	CreateInBatches(values []*model.DbdataExportUsers, batchSize int) error
	Save(values ...*model.DbdataExportUsers) error
	First() (*model.DbdataExportUsers, error)
	Take() (*model.DbdataExportUsers, error)
	Last() (*model.DbdataExportUsers, error)
	Find() ([]*model.DbdataExportUsers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataExportUsers, err error)
	FindInBatches(result *[]*model.DbdataExportUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataExportUsers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataExportUsersDo
	Assign(attrs ...field.AssignExpr) IDbdataExportUsersDo
	Joins(fields ...field.RelationField) IDbdataExportUsersDo
	Preload(fields ...field.RelationField) IDbdataExportUsersDo
	FirstOrInit() (*model.DbdataExportUsers, error)
	FirstOrCreate() (*model.DbdataExportUsers, error)
	FindByPage(offset int, limit int) (result []*model.DbdataExportUsers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataExportUsersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataExportUsersDo) Debug() IDbdataExportUsersDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataExportUsersDo) WithContext(ctx context.Context) IDbdataExportUsersDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataExportUsersDo) ReadDB() IDbdataExportUsersDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataExportUsersDo) WriteDB() IDbdataExportUsersDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataExportUsersDo) Session(config *gorm.Session) IDbdataExportUsersDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataExportUsersDo) Clauses(conds ...clause.Expression) IDbdataExportUsersDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataExportUsersDo) Returning(value interface{}, columns ...string) IDbdataExportUsersDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataExportUsersDo) Not(conds ...gen.Condition) IDbdataExportUsersDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataExportUsersDo) Or(conds ...gen.Condition) IDbdataExportUsersDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataExportUsersDo) Select(conds ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataExportUsersDo) Where(conds ...gen.Condition) IDbdataExportUsersDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataExportUsersDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataExportUsersDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataExportUsersDo) Order(conds ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataExportUsersDo) Distinct(cols ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataExportUsersDo) Omit(cols ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataExportUsersDo) Join(table schema.Tabler, on ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataExportUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataExportUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataExportUsersDo) Group(cols ...field.Expr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataExportUsersDo) Having(conds ...gen.Condition) IDbdataExportUsersDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataExportUsersDo) Limit(limit int) IDbdataExportUsersDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataExportUsersDo) Offset(offset int) IDbdataExportUsersDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataExportUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataExportUsersDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataExportUsersDo) Unscoped() IDbdataExportUsersDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataExportUsersDo) Create(values ...*model.DbdataExportUsers) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataExportUsersDo) CreateInBatches(values []*model.DbdataExportUsers, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataExportUsersDo) Save(values ...*model.DbdataExportUsers) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataExportUsersDo) First() (*model.DbdataExportUsers, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportUsers), nil
	}
}

func (d dbdataExportUsersDo) Take() (*model.DbdataExportUsers, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportUsers), nil
	}
}

func (d dbdataExportUsersDo) Last() (*model.DbdataExportUsers, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportUsers), nil
	}
}

func (d dbdataExportUsersDo) Find() ([]*model.DbdataExportUsers, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataExportUsers), err
}

func (d dbdataExportUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataExportUsers, err error) {
	buf := make([]*model.DbdataExportUsers, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataExportUsersDo) FindInBatches(result *[]*model.DbdataExportUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataExportUsersDo) Attrs(attrs ...field.AssignExpr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataExportUsersDo) Assign(attrs ...field.AssignExpr) IDbdataExportUsersDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataExportUsersDo) Joins(fields ...field.RelationField) IDbdataExportUsersDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataExportUsersDo) Preload(fields ...field.RelationField) IDbdataExportUsersDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataExportUsersDo) FirstOrInit() (*model.DbdataExportUsers, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportUsers), nil
	}
}

func (d dbdataExportUsersDo) FirstOrCreate() (*model.DbdataExportUsers, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataExportUsers), nil
	}
}

func (d dbdataExportUsersDo) FindByPage(offset int, limit int) (result []*model.DbdataExportUsers, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataExportUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataExportUsersDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataExportUsersDo) Delete(models ...*model.DbdataExportUsers) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataExportUsersDo) withDO(do gen.Dao) *dbdataExportUsersDo {
	d.DO = *do.(*gen.DO)
	return d
}
