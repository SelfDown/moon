// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataImport(db *gorm.DB, opts ...gen.DOOption) dbdataImport {
	_dbdataImport := dbdataImport{}

	_dbdataImport.dbdataImportDo.UseDB(db, opts...)
	_dbdataImport.dbdataImportDo.UseModel(&model.DbdataImport{})

	tableName := _dbdataImport.dbdataImportDo.TableName()
	_dbdataImport.ALL = field.NewAsterisk(tableName)
	_dbdataImport.DbdataImportID = field.NewString(tableName, "dbdata_import_id")
	_dbdataImport.Title = field.NewString(tableName, "title")
	_dbdataImport.SftpDumpPath = field.NewString(tableName, "sftp_dump_path")
	_dbdataImport.DbdataExportID = field.NewString(tableName, "dbdata_export_id")
	_dbdataImport.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_dbdataImport.SoftUserID = field.NewString(tableName, "soft_user_id")
	_dbdataImport.AddTime = field.NewString(tableName, "add_time")
	_dbdataImport.OpUser = field.NewString(tableName, "op_user")
	_dbdataImport.Note = field.NewString(tableName, "note")
	_dbdataImport.UploadFileName = field.NewString(tableName, "upload_file_name")
	_dbdataImport.UploadFilePath = field.NewString(tableName, "upload_file_path")
	_dbdataImport.ImportWay = field.NewString(tableName, "import_way")
	_dbdataImport.UserMetadata = field.NewString(tableName, "user_metadata")
	_dbdataImport.DirectoryPath = field.NewString(tableName, "directory_path")
	_dbdataImport.DirectoryName = field.NewString(tableName, "directory_name")
	_dbdataImport.OpPercent = field.NewString(tableName, "op_percent")
	_dbdataImport.CanEditor = field.NewString(tableName, "can_editor")
	_dbdataImport.StransactionIdx = field.NewString(tableName, "stransaction_idx")
	_dbdataImport.ExpOraVersion = field.NewString(tableName, "exp_ora_version")
	_dbdataImport.AllMetaDumpFilename = field.NewString(tableName, "all_meta_dump_filename")
	_dbdataImport.Sid = field.NewString(tableName, "sid")
	_dbdataImport.AllMetaLogFilename = field.NewString(tableName, "all_meta_log_filename")
	_dbdataImport.IsDelete = field.NewString(tableName, "is_delete")

	_dbdataImport.fillFieldMap()

	return _dbdataImport
}

type dbdataImport struct {
	dbdataImportDo

	ALL                 field.Asterisk
	DbdataImportID      field.String
	Title               field.String
	SftpDumpPath        field.String
	DbdataExportID      field.String
	InstallSoftID       field.String
	SoftUserID          field.String
	AddTime             field.String
	OpUser              field.String
	Note                field.String
	UploadFileName      field.String
	UploadFilePath      field.String
	ImportWay           field.String // 导出方式
	UserMetadata        field.String // 用户表空间导出方式
	DirectoryPath       field.String
	DirectoryName       field.String
	OpPercent           field.String
	CanEditor           field.String
	StransactionIdx     field.String
	ExpOraVersion       field.String
	AllMetaDumpFilename field.String
	Sid                 field.String
	AllMetaLogFilename  field.String
	IsDelete            field.String

	fieldMap map[string]field.Expr
}

func (d dbdataImport) Table(newTableName string) *dbdataImport {
	d.dbdataImportDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataImport) As(alias string) *dbdataImport {
	d.dbdataImportDo.DO = *(d.dbdataImportDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataImport) updateTableName(table string) *dbdataImport {
	d.ALL = field.NewAsterisk(table)
	d.DbdataImportID = field.NewString(table, "dbdata_import_id")
	d.Title = field.NewString(table, "title")
	d.SftpDumpPath = field.NewString(table, "sftp_dump_path")
	d.DbdataExportID = field.NewString(table, "dbdata_export_id")
	d.InstallSoftID = field.NewString(table, "install_soft_id")
	d.SoftUserID = field.NewString(table, "soft_user_id")
	d.AddTime = field.NewString(table, "add_time")
	d.OpUser = field.NewString(table, "op_user")
	d.Note = field.NewString(table, "note")
	d.UploadFileName = field.NewString(table, "upload_file_name")
	d.UploadFilePath = field.NewString(table, "upload_file_path")
	d.ImportWay = field.NewString(table, "import_way")
	d.UserMetadata = field.NewString(table, "user_metadata")
	d.DirectoryPath = field.NewString(table, "directory_path")
	d.DirectoryName = field.NewString(table, "directory_name")
	d.OpPercent = field.NewString(table, "op_percent")
	d.CanEditor = field.NewString(table, "can_editor")
	d.StransactionIdx = field.NewString(table, "stransaction_idx")
	d.ExpOraVersion = field.NewString(table, "exp_ora_version")
	d.AllMetaDumpFilename = field.NewString(table, "all_meta_dump_filename")
	d.Sid = field.NewString(table, "sid")
	d.AllMetaLogFilename = field.NewString(table, "all_meta_log_filename")
	d.IsDelete = field.NewString(table, "is_delete")

	d.fillFieldMap()

	return d
}

func (d *dbdataImport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataImport) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 23)
	d.fieldMap["dbdata_import_id"] = d.DbdataImportID
	d.fieldMap["title"] = d.Title
	d.fieldMap["sftp_dump_path"] = d.SftpDumpPath
	d.fieldMap["dbdata_export_id"] = d.DbdataExportID
	d.fieldMap["install_soft_id"] = d.InstallSoftID
	d.fieldMap["soft_user_id"] = d.SoftUserID
	d.fieldMap["add_time"] = d.AddTime
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["note"] = d.Note
	d.fieldMap["upload_file_name"] = d.UploadFileName
	d.fieldMap["upload_file_path"] = d.UploadFilePath
	d.fieldMap["import_way"] = d.ImportWay
	d.fieldMap["user_metadata"] = d.UserMetadata
	d.fieldMap["directory_path"] = d.DirectoryPath
	d.fieldMap["directory_name"] = d.DirectoryName
	d.fieldMap["op_percent"] = d.OpPercent
	d.fieldMap["can_editor"] = d.CanEditor
	d.fieldMap["stransaction_idx"] = d.StransactionIdx
	d.fieldMap["exp_ora_version"] = d.ExpOraVersion
	d.fieldMap["all_meta_dump_filename"] = d.AllMetaDumpFilename
	d.fieldMap["sid"] = d.Sid
	d.fieldMap["all_meta_log_filename"] = d.AllMetaLogFilename
	d.fieldMap["is_delete"] = d.IsDelete
}

func (d dbdataImport) clone(db *gorm.DB) dbdataImport {
	d.dbdataImportDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataImport) replaceDB(db *gorm.DB) dbdataImport {
	d.dbdataImportDo.ReplaceDB(db)
	return d
}

type dbdataImportDo struct{ gen.DO }

type IDbdataImportDo interface {
	gen.SubQuery
	Debug() IDbdataImportDo
	WithContext(ctx context.Context) IDbdataImportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataImportDo
	WriteDB() IDbdataImportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataImportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataImportDo
	Not(conds ...gen.Condition) IDbdataImportDo
	Or(conds ...gen.Condition) IDbdataImportDo
	Select(conds ...field.Expr) IDbdataImportDo
	Where(conds ...gen.Condition) IDbdataImportDo
	Order(conds ...field.Expr) IDbdataImportDo
	Distinct(cols ...field.Expr) IDbdataImportDo
	Omit(cols ...field.Expr) IDbdataImportDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataImportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataImportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataImportDo
	Group(cols ...field.Expr) IDbdataImportDo
	Having(conds ...gen.Condition) IDbdataImportDo
	Limit(limit int) IDbdataImportDo
	Offset(offset int) IDbdataImportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataImportDo
	Unscoped() IDbdataImportDo
	Create(values ...*model.DbdataImport) error
	CreateInBatches(values []*model.DbdataImport, batchSize int) error
	Save(values ...*model.DbdataImport) error
	First() (*model.DbdataImport, error)
	Take() (*model.DbdataImport, error)
	Last() (*model.DbdataImport, error)
	Find() ([]*model.DbdataImport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataImport, err error)
	FindInBatches(result *[]*model.DbdataImport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataImport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataImportDo
	Assign(attrs ...field.AssignExpr) IDbdataImportDo
	Joins(fields ...field.RelationField) IDbdataImportDo
	Preload(fields ...field.RelationField) IDbdataImportDo
	FirstOrInit() (*model.DbdataImport, error)
	FirstOrCreate() (*model.DbdataImport, error)
	FindByPage(offset int, limit int) (result []*model.DbdataImport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataImportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataImportDo) Debug() IDbdataImportDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataImportDo) WithContext(ctx context.Context) IDbdataImportDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataImportDo) ReadDB() IDbdataImportDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataImportDo) WriteDB() IDbdataImportDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataImportDo) Session(config *gorm.Session) IDbdataImportDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataImportDo) Clauses(conds ...clause.Expression) IDbdataImportDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataImportDo) Returning(value interface{}, columns ...string) IDbdataImportDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataImportDo) Not(conds ...gen.Condition) IDbdataImportDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataImportDo) Or(conds ...gen.Condition) IDbdataImportDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataImportDo) Select(conds ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataImportDo) Where(conds ...gen.Condition) IDbdataImportDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataImportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataImportDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataImportDo) Order(conds ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataImportDo) Distinct(cols ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataImportDo) Omit(cols ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataImportDo) Join(table schema.Tabler, on ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataImportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataImportDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataImportDo) Group(cols ...field.Expr) IDbdataImportDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataImportDo) Having(conds ...gen.Condition) IDbdataImportDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataImportDo) Limit(limit int) IDbdataImportDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataImportDo) Offset(offset int) IDbdataImportDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataImportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataImportDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataImportDo) Unscoped() IDbdataImportDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataImportDo) Create(values ...*model.DbdataImport) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataImportDo) CreateInBatches(values []*model.DbdataImport, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataImportDo) Save(values ...*model.DbdataImport) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataImportDo) First() (*model.DbdataImport, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImport), nil
	}
}

func (d dbdataImportDo) Take() (*model.DbdataImport, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImport), nil
	}
}

func (d dbdataImportDo) Last() (*model.DbdataImport, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImport), nil
	}
}

func (d dbdataImportDo) Find() ([]*model.DbdataImport, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataImport), err
}

func (d dbdataImportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataImport, err error) {
	buf := make([]*model.DbdataImport, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataImportDo) FindInBatches(result *[]*model.DbdataImport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataImportDo) Attrs(attrs ...field.AssignExpr) IDbdataImportDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataImportDo) Assign(attrs ...field.AssignExpr) IDbdataImportDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataImportDo) Joins(fields ...field.RelationField) IDbdataImportDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataImportDo) Preload(fields ...field.RelationField) IDbdataImportDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataImportDo) FirstOrInit() (*model.DbdataImport, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImport), nil
	}
}

func (d dbdataImportDo) FirstOrCreate() (*model.DbdataImport, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImport), nil
	}
}

func (d dbdataImportDo) FindByPage(offset int, limit int) (result []*model.DbdataImport, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataImportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataImportDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataImportDo) Delete(models ...*model.DbdataImport) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataImportDo) withDO(do gen.Dao) *dbdataImportDo {
	d.DO = *do.(*gen.DO)
	return d
}
