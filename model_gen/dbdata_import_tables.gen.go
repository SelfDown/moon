// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataImportTables(db *gorm.DB, opts ...gen.DOOption) dbdataImportTables {
	_dbdataImportTables := dbdataImportTables{}

	_dbdataImportTables.dbdataImportTablesDo.UseDB(db, opts...)
	_dbdataImportTables.dbdataImportTablesDo.UseModel(&model.DbdataImportTables{})

	tableName := _dbdataImportTables.dbdataImportTablesDo.TableName()
	_dbdataImportTables.ALL = field.NewAsterisk(tableName)
	_dbdataImportTables.DbdataImportTablesID = field.NewString(tableName, "dbdata_import_tables_id")
	_dbdataImportTables.DbdataImportID = field.NewString(tableName, "dbdata_import_id")
	_dbdataImportTables.DbUser = field.NewString(tableName, "db_user")
	_dbdataImportTables.DbTable = field.NewString(tableName, "db_table")
	_dbdataImportTables.DbQuery = field.NewString(tableName, "db_query")
	_dbdataImportTables.ImportWay = field.NewString(tableName, "import_way")

	_dbdataImportTables.fillFieldMap()

	return _dbdataImportTables
}

type dbdataImportTables struct {
	dbdataImportTablesDo

	ALL                  field.Asterisk
	DbdataImportTablesID field.String
	DbdataImportID       field.String
	DbUser               field.String
	DbTable              field.String
	DbQuery              field.String
	ImportWay            field.String // 导出方式

	fieldMap map[string]field.Expr
}

func (d dbdataImportTables) Table(newTableName string) *dbdataImportTables {
	d.dbdataImportTablesDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataImportTables) As(alias string) *dbdataImportTables {
	d.dbdataImportTablesDo.DO = *(d.dbdataImportTablesDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataImportTables) updateTableName(table string) *dbdataImportTables {
	d.ALL = field.NewAsterisk(table)
	d.DbdataImportTablesID = field.NewString(table, "dbdata_import_tables_id")
	d.DbdataImportID = field.NewString(table, "dbdata_import_id")
	d.DbUser = field.NewString(table, "db_user")
	d.DbTable = field.NewString(table, "db_table")
	d.DbQuery = field.NewString(table, "db_query")
	d.ImportWay = field.NewString(table, "import_way")

	d.fillFieldMap()

	return d
}

func (d *dbdataImportTables) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataImportTables) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["dbdata_import_tables_id"] = d.DbdataImportTablesID
	d.fieldMap["dbdata_import_id"] = d.DbdataImportID
	d.fieldMap["db_user"] = d.DbUser
	d.fieldMap["db_table"] = d.DbTable
	d.fieldMap["db_query"] = d.DbQuery
	d.fieldMap["import_way"] = d.ImportWay
}

func (d dbdataImportTables) clone(db *gorm.DB) dbdataImportTables {
	d.dbdataImportTablesDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataImportTables) replaceDB(db *gorm.DB) dbdataImportTables {
	d.dbdataImportTablesDo.ReplaceDB(db)
	return d
}

type dbdataImportTablesDo struct{ gen.DO }

type IDbdataImportTablesDo interface {
	gen.SubQuery
	Debug() IDbdataImportTablesDo
	WithContext(ctx context.Context) IDbdataImportTablesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataImportTablesDo
	WriteDB() IDbdataImportTablesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataImportTablesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataImportTablesDo
	Not(conds ...gen.Condition) IDbdataImportTablesDo
	Or(conds ...gen.Condition) IDbdataImportTablesDo
	Select(conds ...field.Expr) IDbdataImportTablesDo
	Where(conds ...gen.Condition) IDbdataImportTablesDo
	Order(conds ...field.Expr) IDbdataImportTablesDo
	Distinct(cols ...field.Expr) IDbdataImportTablesDo
	Omit(cols ...field.Expr) IDbdataImportTablesDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataImportTablesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataImportTablesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataImportTablesDo
	Group(cols ...field.Expr) IDbdataImportTablesDo
	Having(conds ...gen.Condition) IDbdataImportTablesDo
	Limit(limit int) IDbdataImportTablesDo
	Offset(offset int) IDbdataImportTablesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataImportTablesDo
	Unscoped() IDbdataImportTablesDo
	Create(values ...*model.DbdataImportTables) error
	CreateInBatches(values []*model.DbdataImportTables, batchSize int) error
	Save(values ...*model.DbdataImportTables) error
	First() (*model.DbdataImportTables, error)
	Take() (*model.DbdataImportTables, error)
	Last() (*model.DbdataImportTables, error)
	Find() ([]*model.DbdataImportTables, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataImportTables, err error)
	FindInBatches(result *[]*model.DbdataImportTables, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataImportTables) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataImportTablesDo
	Assign(attrs ...field.AssignExpr) IDbdataImportTablesDo
	Joins(fields ...field.RelationField) IDbdataImportTablesDo
	Preload(fields ...field.RelationField) IDbdataImportTablesDo
	FirstOrInit() (*model.DbdataImportTables, error)
	FirstOrCreate() (*model.DbdataImportTables, error)
	FindByPage(offset int, limit int) (result []*model.DbdataImportTables, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataImportTablesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataImportTablesDo) Debug() IDbdataImportTablesDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataImportTablesDo) WithContext(ctx context.Context) IDbdataImportTablesDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataImportTablesDo) ReadDB() IDbdataImportTablesDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataImportTablesDo) WriteDB() IDbdataImportTablesDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataImportTablesDo) Session(config *gorm.Session) IDbdataImportTablesDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataImportTablesDo) Clauses(conds ...clause.Expression) IDbdataImportTablesDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataImportTablesDo) Returning(value interface{}, columns ...string) IDbdataImportTablesDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataImportTablesDo) Not(conds ...gen.Condition) IDbdataImportTablesDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataImportTablesDo) Or(conds ...gen.Condition) IDbdataImportTablesDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataImportTablesDo) Select(conds ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataImportTablesDo) Where(conds ...gen.Condition) IDbdataImportTablesDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataImportTablesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataImportTablesDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataImportTablesDo) Order(conds ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataImportTablesDo) Distinct(cols ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataImportTablesDo) Omit(cols ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataImportTablesDo) Join(table schema.Tabler, on ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataImportTablesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataImportTablesDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataImportTablesDo) Group(cols ...field.Expr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataImportTablesDo) Having(conds ...gen.Condition) IDbdataImportTablesDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataImportTablesDo) Limit(limit int) IDbdataImportTablesDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataImportTablesDo) Offset(offset int) IDbdataImportTablesDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataImportTablesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataImportTablesDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataImportTablesDo) Unscoped() IDbdataImportTablesDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataImportTablesDo) Create(values ...*model.DbdataImportTables) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataImportTablesDo) CreateInBatches(values []*model.DbdataImportTables, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataImportTablesDo) Save(values ...*model.DbdataImportTables) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataImportTablesDo) First() (*model.DbdataImportTables, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImportTables), nil
	}
}

func (d dbdataImportTablesDo) Take() (*model.DbdataImportTables, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImportTables), nil
	}
}

func (d dbdataImportTablesDo) Last() (*model.DbdataImportTables, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImportTables), nil
	}
}

func (d dbdataImportTablesDo) Find() ([]*model.DbdataImportTables, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataImportTables), err
}

func (d dbdataImportTablesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataImportTables, err error) {
	buf := make([]*model.DbdataImportTables, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataImportTablesDo) FindInBatches(result *[]*model.DbdataImportTables, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataImportTablesDo) Attrs(attrs ...field.AssignExpr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataImportTablesDo) Assign(attrs ...field.AssignExpr) IDbdataImportTablesDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataImportTablesDo) Joins(fields ...field.RelationField) IDbdataImportTablesDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataImportTablesDo) Preload(fields ...field.RelationField) IDbdataImportTablesDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataImportTablesDo) FirstOrInit() (*model.DbdataImportTables, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImportTables), nil
	}
}

func (d dbdataImportTablesDo) FirstOrCreate() (*model.DbdataImportTables, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataImportTables), nil
	}
}

func (d dbdataImportTablesDo) FindByPage(offset int, limit int) (result []*model.DbdataImportTables, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataImportTablesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataImportTablesDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataImportTablesDo) Delete(models ...*model.DbdataImportTables) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataImportTablesDo) withDO(do gen.Dao) *dbdataImportTablesDo {
	d.DO = *do.(*gen.DO)
	return d
}
