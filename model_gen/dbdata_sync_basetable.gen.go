// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataSyncBasetable(db *gorm.DB, opts ...gen.DOOption) dbdataSyncBasetable {
	_dbdataSyncBasetable := dbdataSyncBasetable{}

	_dbdataSyncBasetable.dbdataSyncBasetableDo.UseDB(db, opts...)
	_dbdataSyncBasetable.dbdataSyncBasetableDo.UseModel(&model.DbdataSyncBasetable{})

	tableName := _dbdataSyncBasetable.dbdataSyncBasetableDo.TableName()
	_dbdataSyncBasetable.ALL = field.NewAsterisk(tableName)
	_dbdataSyncBasetable.DbdataSyncBasetableID = field.NewString(tableName, "dbdata_sync_basetable_id")
	_dbdataSyncBasetable.TableName_ = field.NewString(tableName, "table_name")
	_dbdataSyncBasetable.TableComment = field.NewString(tableName, "table_comment")
	_dbdataSyncBasetable.TableIndex = field.NewInt32(tableName, "table_index")
	_dbdataSyncBasetable.Comments = field.NewString(tableName, "comments")
	_dbdataSyncBasetable.ModifyTime = field.NewTime(tableName, "modify_time")

	_dbdataSyncBasetable.fillFieldMap()

	return _dbdataSyncBasetable
}

type dbdataSyncBasetable struct {
	dbdataSyncBasetableDo

	ALL                   field.Asterisk
	DbdataSyncBasetableID field.String
	TableName_            field.String
	TableComment          field.String
	TableIndex            field.Int32
	Comments              field.String
	ModifyTime            field.Time

	fieldMap map[string]field.Expr
}

func (d dbdataSyncBasetable) Table(newTableName string) *dbdataSyncBasetable {
	d.dbdataSyncBasetableDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataSyncBasetable) As(alias string) *dbdataSyncBasetable {
	d.dbdataSyncBasetableDo.DO = *(d.dbdataSyncBasetableDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataSyncBasetable) updateTableName(table string) *dbdataSyncBasetable {
	d.ALL = field.NewAsterisk(table)
	d.DbdataSyncBasetableID = field.NewString(table, "dbdata_sync_basetable_id")
	d.TableName_ = field.NewString(table, "table_name")
	d.TableComment = field.NewString(table, "table_comment")
	d.TableIndex = field.NewInt32(table, "table_index")
	d.Comments = field.NewString(table, "comments")
	d.ModifyTime = field.NewTime(table, "modify_time")

	d.fillFieldMap()

	return d
}

func (d *dbdataSyncBasetable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataSyncBasetable) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["dbdata_sync_basetable_id"] = d.DbdataSyncBasetableID
	d.fieldMap["table_name"] = d.TableName_
	d.fieldMap["table_comment"] = d.TableComment
	d.fieldMap["table_index"] = d.TableIndex
	d.fieldMap["comments"] = d.Comments
	d.fieldMap["modify_time"] = d.ModifyTime
}

func (d dbdataSyncBasetable) clone(db *gorm.DB) dbdataSyncBasetable {
	d.dbdataSyncBasetableDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataSyncBasetable) replaceDB(db *gorm.DB) dbdataSyncBasetable {
	d.dbdataSyncBasetableDo.ReplaceDB(db)
	return d
}

type dbdataSyncBasetableDo struct{ gen.DO }

type IDbdataSyncBasetableDo interface {
	gen.SubQuery
	Debug() IDbdataSyncBasetableDo
	WithContext(ctx context.Context) IDbdataSyncBasetableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataSyncBasetableDo
	WriteDB() IDbdataSyncBasetableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataSyncBasetableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataSyncBasetableDo
	Not(conds ...gen.Condition) IDbdataSyncBasetableDo
	Or(conds ...gen.Condition) IDbdataSyncBasetableDo
	Select(conds ...field.Expr) IDbdataSyncBasetableDo
	Where(conds ...gen.Condition) IDbdataSyncBasetableDo
	Order(conds ...field.Expr) IDbdataSyncBasetableDo
	Distinct(cols ...field.Expr) IDbdataSyncBasetableDo
	Omit(cols ...field.Expr) IDbdataSyncBasetableDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataSyncBasetableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncBasetableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncBasetableDo
	Group(cols ...field.Expr) IDbdataSyncBasetableDo
	Having(conds ...gen.Condition) IDbdataSyncBasetableDo
	Limit(limit int) IDbdataSyncBasetableDo
	Offset(offset int) IDbdataSyncBasetableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataSyncBasetableDo
	Unscoped() IDbdataSyncBasetableDo
	Create(values ...*model.DbdataSyncBasetable) error
	CreateInBatches(values []*model.DbdataSyncBasetable, batchSize int) error
	Save(values ...*model.DbdataSyncBasetable) error
	First() (*model.DbdataSyncBasetable, error)
	Take() (*model.DbdataSyncBasetable, error)
	Last() (*model.DbdataSyncBasetable, error)
	Find() ([]*model.DbdataSyncBasetable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataSyncBasetable, err error)
	FindInBatches(result *[]*model.DbdataSyncBasetable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataSyncBasetable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataSyncBasetableDo
	Assign(attrs ...field.AssignExpr) IDbdataSyncBasetableDo
	Joins(fields ...field.RelationField) IDbdataSyncBasetableDo
	Preload(fields ...field.RelationField) IDbdataSyncBasetableDo
	FirstOrInit() (*model.DbdataSyncBasetable, error)
	FirstOrCreate() (*model.DbdataSyncBasetable, error)
	FindByPage(offset int, limit int) (result []*model.DbdataSyncBasetable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataSyncBasetableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataSyncBasetableDo) Debug() IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataSyncBasetableDo) WithContext(ctx context.Context) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataSyncBasetableDo) ReadDB() IDbdataSyncBasetableDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataSyncBasetableDo) WriteDB() IDbdataSyncBasetableDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataSyncBasetableDo) Session(config *gorm.Session) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataSyncBasetableDo) Clauses(conds ...clause.Expression) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataSyncBasetableDo) Returning(value interface{}, columns ...string) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataSyncBasetableDo) Not(conds ...gen.Condition) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataSyncBasetableDo) Or(conds ...gen.Condition) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataSyncBasetableDo) Select(conds ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataSyncBasetableDo) Where(conds ...gen.Condition) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataSyncBasetableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataSyncBasetableDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataSyncBasetableDo) Order(conds ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataSyncBasetableDo) Distinct(cols ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataSyncBasetableDo) Omit(cols ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataSyncBasetableDo) Join(table schema.Tabler, on ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataSyncBasetableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataSyncBasetableDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataSyncBasetableDo) Group(cols ...field.Expr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataSyncBasetableDo) Having(conds ...gen.Condition) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataSyncBasetableDo) Limit(limit int) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataSyncBasetableDo) Offset(offset int) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataSyncBasetableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataSyncBasetableDo) Unscoped() IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataSyncBasetableDo) Create(values ...*model.DbdataSyncBasetable) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataSyncBasetableDo) CreateInBatches(values []*model.DbdataSyncBasetable, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataSyncBasetableDo) Save(values ...*model.DbdataSyncBasetable) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataSyncBasetableDo) First() (*model.DbdataSyncBasetable, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncBasetable), nil
	}
}

func (d dbdataSyncBasetableDo) Take() (*model.DbdataSyncBasetable, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncBasetable), nil
	}
}

func (d dbdataSyncBasetableDo) Last() (*model.DbdataSyncBasetable, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncBasetable), nil
	}
}

func (d dbdataSyncBasetableDo) Find() ([]*model.DbdataSyncBasetable, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataSyncBasetable), err
}

func (d dbdataSyncBasetableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataSyncBasetable, err error) {
	buf := make([]*model.DbdataSyncBasetable, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataSyncBasetableDo) FindInBatches(result *[]*model.DbdataSyncBasetable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataSyncBasetableDo) Attrs(attrs ...field.AssignExpr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataSyncBasetableDo) Assign(attrs ...field.AssignExpr) IDbdataSyncBasetableDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataSyncBasetableDo) Joins(fields ...field.RelationField) IDbdataSyncBasetableDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataSyncBasetableDo) Preload(fields ...field.RelationField) IDbdataSyncBasetableDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataSyncBasetableDo) FirstOrInit() (*model.DbdataSyncBasetable, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncBasetable), nil
	}
}

func (d dbdataSyncBasetableDo) FirstOrCreate() (*model.DbdataSyncBasetable, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncBasetable), nil
	}
}

func (d dbdataSyncBasetableDo) FindByPage(offset int, limit int) (result []*model.DbdataSyncBasetable, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataSyncBasetableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataSyncBasetableDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataSyncBasetableDo) Delete(models ...*model.DbdataSyncBasetable) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataSyncBasetableDo) withDO(do gen.Dao) *dbdataSyncBasetableDo {
	d.DO = *do.(*gen.DO)
	return d
}
