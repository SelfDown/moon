// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataSyncImpEvent(db *gorm.DB, opts ...gen.DOOption) dbdataSyncImpEvent {
	_dbdataSyncImpEvent := dbdataSyncImpEvent{}

	_dbdataSyncImpEvent.dbdataSyncImpEventDo.UseDB(db, opts...)
	_dbdataSyncImpEvent.dbdataSyncImpEventDo.UseModel(&model.DbdataSyncImpEvent{})

	tableName := _dbdataSyncImpEvent.dbdataSyncImpEventDo.TableName()
	_dbdataSyncImpEvent.ALL = field.NewAsterisk(tableName)
	_dbdataSyncImpEvent.DbsyncImpEventID = field.NewString(tableName, "dbsync_imp_event_id")
	_dbdataSyncImpEvent.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_dbdataSyncImpEvent.SoftUserID = field.NewString(tableName, "soft_user_id")
	_dbdataSyncImpEvent.DbsyncExpEventID = field.NewString(tableName, "dbsync_exp_event_id")
	_dbdataSyncImpEvent.TaskTitle = field.NewString(tableName, "task_title")
	_dbdataSyncImpEvent.StepIndex = field.NewString(tableName, "step_index")
	_dbdataSyncImpEvent.SyncStartTime = field.NewTime(tableName, "sync_start_time")
	_dbdataSyncImpEvent.SyncEndTime = field.NewTime(tableName, "sync_end_time")
	_dbdataSyncImpEvent.SyncCurrentStep = field.NewString(tableName, "sync_current_step")
	_dbdataSyncImpEvent.SyncLog = field.NewString(tableName, "sync_log")
	_dbdataSyncImpEvent.SyncScript = field.NewString(tableName, "sync_script")
	_dbdataSyncImpEvent.AddTime = field.NewTime(tableName, "add_time")
	_dbdataSyncImpEvent.OpUser = field.NewString(tableName, "op_user")
	_dbdataSyncImpEvent.Note = field.NewString(tableName, "note")
	_dbdataSyncImpEvent.SyncStatu = field.NewString(tableName, "sync_statu")
	_dbdataSyncImpEvent.DirectoryPath = field.NewString(tableName, "directory_path")
	_dbdataSyncImpEvent.OpPercent = field.NewString(tableName, "op_percent")
	_dbdataSyncImpEvent.DbsyncSrcFile = field.NewString(tableName, "dbsync_src_file")
	_dbdataSyncImpEvent.CanEditor = field.NewString(tableName, "can_editor")
	_dbdataSyncImpEvent.StransactionIdx = field.NewString(tableName, "stransaction_idx")

	_dbdataSyncImpEvent.fillFieldMap()

	return _dbdataSyncImpEvent
}

type dbdataSyncImpEvent struct {
	dbdataSyncImpEventDo

	ALL              field.Asterisk
	DbsyncImpEventID field.String
	InstallSoftID    field.String
	SoftUserID       field.String
	DbsyncExpEventID field.String
	TaskTitle        field.String
	StepIndex        field.String
	SyncStartTime    field.Time
	SyncEndTime      field.Time
	SyncCurrentStep  field.String
	SyncLog          field.String
	SyncScript       field.String
	AddTime          field.Time
	OpUser           field.String
	Note             field.String
	SyncStatu        field.String
	DirectoryPath    field.String
	OpPercent        field.String
	DbsyncSrcFile    field.String
	CanEditor        field.String
	StransactionIdx  field.String

	fieldMap map[string]field.Expr
}

func (d dbdataSyncImpEvent) Table(newTableName string) *dbdataSyncImpEvent {
	d.dbdataSyncImpEventDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataSyncImpEvent) As(alias string) *dbdataSyncImpEvent {
	d.dbdataSyncImpEventDo.DO = *(d.dbdataSyncImpEventDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataSyncImpEvent) updateTableName(table string) *dbdataSyncImpEvent {
	d.ALL = field.NewAsterisk(table)
	d.DbsyncImpEventID = field.NewString(table, "dbsync_imp_event_id")
	d.InstallSoftID = field.NewString(table, "install_soft_id")
	d.SoftUserID = field.NewString(table, "soft_user_id")
	d.DbsyncExpEventID = field.NewString(table, "dbsync_exp_event_id")
	d.TaskTitle = field.NewString(table, "task_title")
	d.StepIndex = field.NewString(table, "step_index")
	d.SyncStartTime = field.NewTime(table, "sync_start_time")
	d.SyncEndTime = field.NewTime(table, "sync_end_time")
	d.SyncCurrentStep = field.NewString(table, "sync_current_step")
	d.SyncLog = field.NewString(table, "sync_log")
	d.SyncScript = field.NewString(table, "sync_script")
	d.AddTime = field.NewTime(table, "add_time")
	d.OpUser = field.NewString(table, "op_user")
	d.Note = field.NewString(table, "note")
	d.SyncStatu = field.NewString(table, "sync_statu")
	d.DirectoryPath = field.NewString(table, "directory_path")
	d.OpPercent = field.NewString(table, "op_percent")
	d.DbsyncSrcFile = field.NewString(table, "dbsync_src_file")
	d.CanEditor = field.NewString(table, "can_editor")
	d.StransactionIdx = field.NewString(table, "stransaction_idx")

	d.fillFieldMap()

	return d
}

func (d *dbdataSyncImpEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataSyncImpEvent) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 20)
	d.fieldMap["dbsync_imp_event_id"] = d.DbsyncImpEventID
	d.fieldMap["install_soft_id"] = d.InstallSoftID
	d.fieldMap["soft_user_id"] = d.SoftUserID
	d.fieldMap["dbsync_exp_event_id"] = d.DbsyncExpEventID
	d.fieldMap["task_title"] = d.TaskTitle
	d.fieldMap["step_index"] = d.StepIndex
	d.fieldMap["sync_start_time"] = d.SyncStartTime
	d.fieldMap["sync_end_time"] = d.SyncEndTime
	d.fieldMap["sync_current_step"] = d.SyncCurrentStep
	d.fieldMap["sync_log"] = d.SyncLog
	d.fieldMap["sync_script"] = d.SyncScript
	d.fieldMap["add_time"] = d.AddTime
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["note"] = d.Note
	d.fieldMap["sync_statu"] = d.SyncStatu
	d.fieldMap["directory_path"] = d.DirectoryPath
	d.fieldMap["op_percent"] = d.OpPercent
	d.fieldMap["dbsync_src_file"] = d.DbsyncSrcFile
	d.fieldMap["can_editor"] = d.CanEditor
	d.fieldMap["stransaction_idx"] = d.StransactionIdx
}

func (d dbdataSyncImpEvent) clone(db *gorm.DB) dbdataSyncImpEvent {
	d.dbdataSyncImpEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataSyncImpEvent) replaceDB(db *gorm.DB) dbdataSyncImpEvent {
	d.dbdataSyncImpEventDo.ReplaceDB(db)
	return d
}

type dbdataSyncImpEventDo struct{ gen.DO }

type IDbdataSyncImpEventDo interface {
	gen.SubQuery
	Debug() IDbdataSyncImpEventDo
	WithContext(ctx context.Context) IDbdataSyncImpEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataSyncImpEventDo
	WriteDB() IDbdataSyncImpEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataSyncImpEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataSyncImpEventDo
	Not(conds ...gen.Condition) IDbdataSyncImpEventDo
	Or(conds ...gen.Condition) IDbdataSyncImpEventDo
	Select(conds ...field.Expr) IDbdataSyncImpEventDo
	Where(conds ...gen.Condition) IDbdataSyncImpEventDo
	Order(conds ...field.Expr) IDbdataSyncImpEventDo
	Distinct(cols ...field.Expr) IDbdataSyncImpEventDo
	Omit(cols ...field.Expr) IDbdataSyncImpEventDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataSyncImpEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncImpEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncImpEventDo
	Group(cols ...field.Expr) IDbdataSyncImpEventDo
	Having(conds ...gen.Condition) IDbdataSyncImpEventDo
	Limit(limit int) IDbdataSyncImpEventDo
	Offset(offset int) IDbdataSyncImpEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataSyncImpEventDo
	Unscoped() IDbdataSyncImpEventDo
	Create(values ...*model.DbdataSyncImpEvent) error
	CreateInBatches(values []*model.DbdataSyncImpEvent, batchSize int) error
	Save(values ...*model.DbdataSyncImpEvent) error
	First() (*model.DbdataSyncImpEvent, error)
	Take() (*model.DbdataSyncImpEvent, error)
	Last() (*model.DbdataSyncImpEvent, error)
	Find() ([]*model.DbdataSyncImpEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataSyncImpEvent, err error)
	FindInBatches(result *[]*model.DbdataSyncImpEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataSyncImpEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataSyncImpEventDo
	Assign(attrs ...field.AssignExpr) IDbdataSyncImpEventDo
	Joins(fields ...field.RelationField) IDbdataSyncImpEventDo
	Preload(fields ...field.RelationField) IDbdataSyncImpEventDo
	FirstOrInit() (*model.DbdataSyncImpEvent, error)
	FirstOrCreate() (*model.DbdataSyncImpEvent, error)
	FindByPage(offset int, limit int) (result []*model.DbdataSyncImpEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataSyncImpEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataSyncImpEventDo) Debug() IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataSyncImpEventDo) WithContext(ctx context.Context) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataSyncImpEventDo) ReadDB() IDbdataSyncImpEventDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataSyncImpEventDo) WriteDB() IDbdataSyncImpEventDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataSyncImpEventDo) Session(config *gorm.Session) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataSyncImpEventDo) Clauses(conds ...clause.Expression) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataSyncImpEventDo) Returning(value interface{}, columns ...string) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataSyncImpEventDo) Not(conds ...gen.Condition) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataSyncImpEventDo) Or(conds ...gen.Condition) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataSyncImpEventDo) Select(conds ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataSyncImpEventDo) Where(conds ...gen.Condition) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataSyncImpEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataSyncImpEventDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataSyncImpEventDo) Order(conds ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataSyncImpEventDo) Distinct(cols ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataSyncImpEventDo) Omit(cols ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataSyncImpEventDo) Join(table schema.Tabler, on ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataSyncImpEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataSyncImpEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataSyncImpEventDo) Group(cols ...field.Expr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataSyncImpEventDo) Having(conds ...gen.Condition) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataSyncImpEventDo) Limit(limit int) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataSyncImpEventDo) Offset(offset int) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataSyncImpEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataSyncImpEventDo) Unscoped() IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataSyncImpEventDo) Create(values ...*model.DbdataSyncImpEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataSyncImpEventDo) CreateInBatches(values []*model.DbdataSyncImpEvent, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataSyncImpEventDo) Save(values ...*model.DbdataSyncImpEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataSyncImpEventDo) First() (*model.DbdataSyncImpEvent, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncImpEvent), nil
	}
}

func (d dbdataSyncImpEventDo) Take() (*model.DbdataSyncImpEvent, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncImpEvent), nil
	}
}

func (d dbdataSyncImpEventDo) Last() (*model.DbdataSyncImpEvent, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncImpEvent), nil
	}
}

func (d dbdataSyncImpEventDo) Find() ([]*model.DbdataSyncImpEvent, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataSyncImpEvent), err
}

func (d dbdataSyncImpEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataSyncImpEvent, err error) {
	buf := make([]*model.DbdataSyncImpEvent, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataSyncImpEventDo) FindInBatches(result *[]*model.DbdataSyncImpEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataSyncImpEventDo) Attrs(attrs ...field.AssignExpr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataSyncImpEventDo) Assign(attrs ...field.AssignExpr) IDbdataSyncImpEventDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataSyncImpEventDo) Joins(fields ...field.RelationField) IDbdataSyncImpEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataSyncImpEventDo) Preload(fields ...field.RelationField) IDbdataSyncImpEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataSyncImpEventDo) FirstOrInit() (*model.DbdataSyncImpEvent, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncImpEvent), nil
	}
}

func (d dbdataSyncImpEventDo) FirstOrCreate() (*model.DbdataSyncImpEvent, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncImpEvent), nil
	}
}

func (d dbdataSyncImpEventDo) FindByPage(offset int, limit int) (result []*model.DbdataSyncImpEvent, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataSyncImpEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataSyncImpEventDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataSyncImpEventDo) Delete(models ...*model.DbdataSyncImpEvent) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataSyncImpEventDo) withDO(do gen.Dao) *dbdataSyncImpEventDo {
	d.DO = *do.(*gen.DO)
	return d
}
