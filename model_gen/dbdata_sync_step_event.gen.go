// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbdataSyncStepEvent(db *gorm.DB, opts ...gen.DOOption) dbdataSyncStepEvent {
	_dbdataSyncStepEvent := dbdataSyncStepEvent{}

	_dbdataSyncStepEvent.dbdataSyncStepEventDo.UseDB(db, opts...)
	_dbdataSyncStepEvent.dbdataSyncStepEventDo.UseModel(&model.DbdataSyncStepEvent{})

	tableName := _dbdataSyncStepEvent.dbdataSyncStepEventDo.TableName()
	_dbdataSyncStepEvent.ALL = field.NewAsterisk(tableName)
	_dbdataSyncStepEvent.DbdataSyncStepEventID = field.NewString(tableName, "dbdata_sync_step_event_id")
	_dbdataSyncStepEvent.DbsyncExpEventID = field.NewString(tableName, "dbsync_exp_event_id")
	_dbdataSyncStepEvent.DbsyncImpEventID = field.NewString(tableName, "dbsync_imp_event_id")
	_dbdataSyncStepEvent.StepScript = field.NewString(tableName, "step_script")
	_dbdataSyncStepEvent.StepName = field.NewString(tableName, "step_name")
	_dbdataSyncStepEvent.StepSyncLog = field.NewString(tableName, "step_sync_log")
	_dbdataSyncStepEvent.StepReqStr = field.NewString(tableName, "step_req_str")
	_dbdataSyncStepEvent.StepStatu = field.NewString(tableName, "step_statu")
	_dbdataSyncStepEvent.AddTime = field.NewTime(tableName, "add_time")
	_dbdataSyncStepEvent.OpUser = field.NewString(tableName, "op_user")
	_dbdataSyncStepEvent.Note = field.NewString(tableName, "note")

	_dbdataSyncStepEvent.fillFieldMap()

	return _dbdataSyncStepEvent
}

type dbdataSyncStepEvent struct {
	dbdataSyncStepEventDo

	ALL                   field.Asterisk
	DbdataSyncStepEventID field.String
	DbsyncExpEventID      field.String
	DbsyncImpEventID      field.String
	StepScript            field.String
	StepName              field.String
	StepSyncLog           field.String
	StepReqStr            field.String
	StepStatu             field.String
	AddTime               field.Time
	OpUser                field.String
	Note                  field.String

	fieldMap map[string]field.Expr
}

func (d dbdataSyncStepEvent) Table(newTableName string) *dbdataSyncStepEvent {
	d.dbdataSyncStepEventDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbdataSyncStepEvent) As(alias string) *dbdataSyncStepEvent {
	d.dbdataSyncStepEventDo.DO = *(d.dbdataSyncStepEventDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbdataSyncStepEvent) updateTableName(table string) *dbdataSyncStepEvent {
	d.ALL = field.NewAsterisk(table)
	d.DbdataSyncStepEventID = field.NewString(table, "dbdata_sync_step_event_id")
	d.DbsyncExpEventID = field.NewString(table, "dbsync_exp_event_id")
	d.DbsyncImpEventID = field.NewString(table, "dbsync_imp_event_id")
	d.StepScript = field.NewString(table, "step_script")
	d.StepName = field.NewString(table, "step_name")
	d.StepSyncLog = field.NewString(table, "step_sync_log")
	d.StepReqStr = field.NewString(table, "step_req_str")
	d.StepStatu = field.NewString(table, "step_statu")
	d.AddTime = field.NewTime(table, "add_time")
	d.OpUser = field.NewString(table, "op_user")
	d.Note = field.NewString(table, "note")

	d.fillFieldMap()

	return d
}

func (d *dbdataSyncStepEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbdataSyncStepEvent) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["dbdata_sync_step_event_id"] = d.DbdataSyncStepEventID
	d.fieldMap["dbsync_exp_event_id"] = d.DbsyncExpEventID
	d.fieldMap["dbsync_imp_event_id"] = d.DbsyncImpEventID
	d.fieldMap["step_script"] = d.StepScript
	d.fieldMap["step_name"] = d.StepName
	d.fieldMap["step_sync_log"] = d.StepSyncLog
	d.fieldMap["step_req_str"] = d.StepReqStr
	d.fieldMap["step_statu"] = d.StepStatu
	d.fieldMap["add_time"] = d.AddTime
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["note"] = d.Note
}

func (d dbdataSyncStepEvent) clone(db *gorm.DB) dbdataSyncStepEvent {
	d.dbdataSyncStepEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbdataSyncStepEvent) replaceDB(db *gorm.DB) dbdataSyncStepEvent {
	d.dbdataSyncStepEventDo.ReplaceDB(db)
	return d
}

type dbdataSyncStepEventDo struct{ gen.DO }

type IDbdataSyncStepEventDo interface {
	gen.SubQuery
	Debug() IDbdataSyncStepEventDo
	WithContext(ctx context.Context) IDbdataSyncStepEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbdataSyncStepEventDo
	WriteDB() IDbdataSyncStepEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbdataSyncStepEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbdataSyncStepEventDo
	Not(conds ...gen.Condition) IDbdataSyncStepEventDo
	Or(conds ...gen.Condition) IDbdataSyncStepEventDo
	Select(conds ...field.Expr) IDbdataSyncStepEventDo
	Where(conds ...gen.Condition) IDbdataSyncStepEventDo
	Order(conds ...field.Expr) IDbdataSyncStepEventDo
	Distinct(cols ...field.Expr) IDbdataSyncStepEventDo
	Omit(cols ...field.Expr) IDbdataSyncStepEventDo
	Join(table schema.Tabler, on ...field.Expr) IDbdataSyncStepEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncStepEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncStepEventDo
	Group(cols ...field.Expr) IDbdataSyncStepEventDo
	Having(conds ...gen.Condition) IDbdataSyncStepEventDo
	Limit(limit int) IDbdataSyncStepEventDo
	Offset(offset int) IDbdataSyncStepEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataSyncStepEventDo
	Unscoped() IDbdataSyncStepEventDo
	Create(values ...*model.DbdataSyncStepEvent) error
	CreateInBatches(values []*model.DbdataSyncStepEvent, batchSize int) error
	Save(values ...*model.DbdataSyncStepEvent) error
	First() (*model.DbdataSyncStepEvent, error)
	Take() (*model.DbdataSyncStepEvent, error)
	Last() (*model.DbdataSyncStepEvent, error)
	Find() ([]*model.DbdataSyncStepEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataSyncStepEvent, err error)
	FindInBatches(result *[]*model.DbdataSyncStepEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbdataSyncStepEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbdataSyncStepEventDo
	Assign(attrs ...field.AssignExpr) IDbdataSyncStepEventDo
	Joins(fields ...field.RelationField) IDbdataSyncStepEventDo
	Preload(fields ...field.RelationField) IDbdataSyncStepEventDo
	FirstOrInit() (*model.DbdataSyncStepEvent, error)
	FirstOrCreate() (*model.DbdataSyncStepEvent, error)
	FindByPage(offset int, limit int) (result []*model.DbdataSyncStepEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbdataSyncStepEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbdataSyncStepEventDo) Debug() IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Debug())
}

func (d dbdataSyncStepEventDo) WithContext(ctx context.Context) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbdataSyncStepEventDo) ReadDB() IDbdataSyncStepEventDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbdataSyncStepEventDo) WriteDB() IDbdataSyncStepEventDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbdataSyncStepEventDo) Session(config *gorm.Session) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbdataSyncStepEventDo) Clauses(conds ...clause.Expression) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbdataSyncStepEventDo) Returning(value interface{}, columns ...string) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbdataSyncStepEventDo) Not(conds ...gen.Condition) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbdataSyncStepEventDo) Or(conds ...gen.Condition) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbdataSyncStepEventDo) Select(conds ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbdataSyncStepEventDo) Where(conds ...gen.Condition) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbdataSyncStepEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbdataSyncStepEventDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbdataSyncStepEventDo) Order(conds ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbdataSyncStepEventDo) Distinct(cols ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbdataSyncStepEventDo) Omit(cols ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbdataSyncStepEventDo) Join(table schema.Tabler, on ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbdataSyncStepEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbdataSyncStepEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbdataSyncStepEventDo) Group(cols ...field.Expr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbdataSyncStepEventDo) Having(conds ...gen.Condition) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbdataSyncStepEventDo) Limit(limit int) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbdataSyncStepEventDo) Offset(offset int) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbdataSyncStepEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbdataSyncStepEventDo) Unscoped() IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbdataSyncStepEventDo) Create(values ...*model.DbdataSyncStepEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbdataSyncStepEventDo) CreateInBatches(values []*model.DbdataSyncStepEvent, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbdataSyncStepEventDo) Save(values ...*model.DbdataSyncStepEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbdataSyncStepEventDo) First() (*model.DbdataSyncStepEvent, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncStepEvent), nil
	}
}

func (d dbdataSyncStepEventDo) Take() (*model.DbdataSyncStepEvent, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncStepEvent), nil
	}
}

func (d dbdataSyncStepEventDo) Last() (*model.DbdataSyncStepEvent, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncStepEvent), nil
	}
}

func (d dbdataSyncStepEventDo) Find() ([]*model.DbdataSyncStepEvent, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbdataSyncStepEvent), err
}

func (d dbdataSyncStepEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbdataSyncStepEvent, err error) {
	buf := make([]*model.DbdataSyncStepEvent, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbdataSyncStepEventDo) FindInBatches(result *[]*model.DbdataSyncStepEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbdataSyncStepEventDo) Attrs(attrs ...field.AssignExpr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbdataSyncStepEventDo) Assign(attrs ...field.AssignExpr) IDbdataSyncStepEventDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbdataSyncStepEventDo) Joins(fields ...field.RelationField) IDbdataSyncStepEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbdataSyncStepEventDo) Preload(fields ...field.RelationField) IDbdataSyncStepEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbdataSyncStepEventDo) FirstOrInit() (*model.DbdataSyncStepEvent, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncStepEvent), nil
	}
}

func (d dbdataSyncStepEventDo) FirstOrCreate() (*model.DbdataSyncStepEvent, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbdataSyncStepEvent), nil
	}
}

func (d dbdataSyncStepEventDo) FindByPage(offset int, limit int) (result []*model.DbdataSyncStepEvent, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbdataSyncStepEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbdataSyncStepEventDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbdataSyncStepEventDo) Delete(models ...*model.DbdataSyncStepEvent) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbdataSyncStepEventDo) withDO(do gen.Dao) *dbdataSyncStepEventDo {
	d.DO = *do.(*gen.DO)
	return d
}
