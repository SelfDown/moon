// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbscriptIssueList(db *gorm.DB, opts ...gen.DOOption) dbscriptIssueList {
	_dbscriptIssueList := dbscriptIssueList{}

	_dbscriptIssueList.dbscriptIssueListDo.UseDB(db, opts...)
	_dbscriptIssueList.dbscriptIssueListDo.UseModel(&model.DbscriptIssueList{})

	tableName := _dbscriptIssueList.dbscriptIssueListDo.TableName()
	_dbscriptIssueList.ALL = field.NewAsterisk(tableName)
	_dbscriptIssueList.ID = field.NewInt32(tableName, "id")
	_dbscriptIssueList.DbscriptIssueID = field.NewString(tableName, "dbscript_issue_id")
	_dbscriptIssueList.DbscriptEventID = field.NewString(tableName, "dbscript_event_id")
	_dbscriptIssueList.IssueKey = field.NewString(tableName, "issue_key")
	_dbscriptIssueList.IssueTitle = field.NewString(tableName, "issue_title")
	_dbscriptIssueList.IssueStatusText = field.NewString(tableName, "issue_status_text")
	_dbscriptIssueList.CreateTime = field.NewTime(tableName, "create_time")
	_dbscriptIssueList.ModifyTime = field.NewTime(tableName, "modify_time")
	_dbscriptIssueList.Comments = field.NewString(tableName, "comments")

	_dbscriptIssueList.fillFieldMap()

	return _dbscriptIssueList
}

type dbscriptIssueList struct {
	dbscriptIssueListDo

	ALL             field.Asterisk
	ID              field.Int32
	DbscriptIssueID field.String
	DbscriptEventID field.String
	IssueKey        field.String
	IssueTitle      field.String
	IssueStatusText field.String // ISSUE状态的中文表示
	CreateTime      field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time   // 记录修改时间（数据库自动写入）
	Comments        field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d dbscriptIssueList) Table(newTableName string) *dbscriptIssueList {
	d.dbscriptIssueListDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbscriptIssueList) As(alias string) *dbscriptIssueList {
	d.dbscriptIssueListDo.DO = *(d.dbscriptIssueListDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbscriptIssueList) updateTableName(table string) *dbscriptIssueList {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.DbscriptIssueID = field.NewString(table, "dbscript_issue_id")
	d.DbscriptEventID = field.NewString(table, "dbscript_event_id")
	d.IssueKey = field.NewString(table, "issue_key")
	d.IssueTitle = field.NewString(table, "issue_title")
	d.IssueStatusText = field.NewString(table, "issue_status_text")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *dbscriptIssueList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbscriptIssueList) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dbscript_issue_id"] = d.DbscriptIssueID
	d.fieldMap["dbscript_event_id"] = d.DbscriptEventID
	d.fieldMap["issue_key"] = d.IssueKey
	d.fieldMap["issue_title"] = d.IssueTitle
	d.fieldMap["issue_status_text"] = d.IssueStatusText
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d dbscriptIssueList) clone(db *gorm.DB) dbscriptIssueList {
	d.dbscriptIssueListDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbscriptIssueList) replaceDB(db *gorm.DB) dbscriptIssueList {
	d.dbscriptIssueListDo.ReplaceDB(db)
	return d
}

type dbscriptIssueListDo struct{ gen.DO }

type IDbscriptIssueListDo interface {
	gen.SubQuery
	Debug() IDbscriptIssueListDo
	WithContext(ctx context.Context) IDbscriptIssueListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbscriptIssueListDo
	WriteDB() IDbscriptIssueListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbscriptIssueListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbscriptIssueListDo
	Not(conds ...gen.Condition) IDbscriptIssueListDo
	Or(conds ...gen.Condition) IDbscriptIssueListDo
	Select(conds ...field.Expr) IDbscriptIssueListDo
	Where(conds ...gen.Condition) IDbscriptIssueListDo
	Order(conds ...field.Expr) IDbscriptIssueListDo
	Distinct(cols ...field.Expr) IDbscriptIssueListDo
	Omit(cols ...field.Expr) IDbscriptIssueListDo
	Join(table schema.Tabler, on ...field.Expr) IDbscriptIssueListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptIssueListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptIssueListDo
	Group(cols ...field.Expr) IDbscriptIssueListDo
	Having(conds ...gen.Condition) IDbscriptIssueListDo
	Limit(limit int) IDbscriptIssueListDo
	Offset(offset int) IDbscriptIssueListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptIssueListDo
	Unscoped() IDbscriptIssueListDo
	Create(values ...*model.DbscriptIssueList) error
	CreateInBatches(values []*model.DbscriptIssueList, batchSize int) error
	Save(values ...*model.DbscriptIssueList) error
	First() (*model.DbscriptIssueList, error)
	Take() (*model.DbscriptIssueList, error)
	Last() (*model.DbscriptIssueList, error)
	Find() ([]*model.DbscriptIssueList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptIssueList, err error)
	FindInBatches(result *[]*model.DbscriptIssueList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbscriptIssueList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbscriptIssueListDo
	Assign(attrs ...field.AssignExpr) IDbscriptIssueListDo
	Joins(fields ...field.RelationField) IDbscriptIssueListDo
	Preload(fields ...field.RelationField) IDbscriptIssueListDo
	FirstOrInit() (*model.DbscriptIssueList, error)
	FirstOrCreate() (*model.DbscriptIssueList, error)
	FindByPage(offset int, limit int) (result []*model.DbscriptIssueList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbscriptIssueListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbscriptIssueListDo) Debug() IDbscriptIssueListDo {
	return d.withDO(d.DO.Debug())
}

func (d dbscriptIssueListDo) WithContext(ctx context.Context) IDbscriptIssueListDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbscriptIssueListDo) ReadDB() IDbscriptIssueListDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbscriptIssueListDo) WriteDB() IDbscriptIssueListDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbscriptIssueListDo) Session(config *gorm.Session) IDbscriptIssueListDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbscriptIssueListDo) Clauses(conds ...clause.Expression) IDbscriptIssueListDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbscriptIssueListDo) Returning(value interface{}, columns ...string) IDbscriptIssueListDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbscriptIssueListDo) Not(conds ...gen.Condition) IDbscriptIssueListDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbscriptIssueListDo) Or(conds ...gen.Condition) IDbscriptIssueListDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbscriptIssueListDo) Select(conds ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbscriptIssueListDo) Where(conds ...gen.Condition) IDbscriptIssueListDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbscriptIssueListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbscriptIssueListDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbscriptIssueListDo) Order(conds ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbscriptIssueListDo) Distinct(cols ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbscriptIssueListDo) Omit(cols ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbscriptIssueListDo) Join(table schema.Tabler, on ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbscriptIssueListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbscriptIssueListDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbscriptIssueListDo) Group(cols ...field.Expr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbscriptIssueListDo) Having(conds ...gen.Condition) IDbscriptIssueListDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbscriptIssueListDo) Limit(limit int) IDbscriptIssueListDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbscriptIssueListDo) Offset(offset int) IDbscriptIssueListDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbscriptIssueListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptIssueListDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbscriptIssueListDo) Unscoped() IDbscriptIssueListDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbscriptIssueListDo) Create(values ...*model.DbscriptIssueList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbscriptIssueListDo) CreateInBatches(values []*model.DbscriptIssueList, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbscriptIssueListDo) Save(values ...*model.DbscriptIssueList) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbscriptIssueListDo) First() (*model.DbscriptIssueList, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptIssueList), nil
	}
}

func (d dbscriptIssueListDo) Take() (*model.DbscriptIssueList, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptIssueList), nil
	}
}

func (d dbscriptIssueListDo) Last() (*model.DbscriptIssueList, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptIssueList), nil
	}
}

func (d dbscriptIssueListDo) Find() ([]*model.DbscriptIssueList, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbscriptIssueList), err
}

func (d dbscriptIssueListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptIssueList, err error) {
	buf := make([]*model.DbscriptIssueList, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbscriptIssueListDo) FindInBatches(result *[]*model.DbscriptIssueList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbscriptIssueListDo) Attrs(attrs ...field.AssignExpr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbscriptIssueListDo) Assign(attrs ...field.AssignExpr) IDbscriptIssueListDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbscriptIssueListDo) Joins(fields ...field.RelationField) IDbscriptIssueListDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbscriptIssueListDo) Preload(fields ...field.RelationField) IDbscriptIssueListDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbscriptIssueListDo) FirstOrInit() (*model.DbscriptIssueList, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptIssueList), nil
	}
}

func (d dbscriptIssueListDo) FirstOrCreate() (*model.DbscriptIssueList, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptIssueList), nil
	}
}

func (d dbscriptIssueListDo) FindByPage(offset int, limit int) (result []*model.DbscriptIssueList, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbscriptIssueListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbscriptIssueListDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbscriptIssueListDo) Delete(models ...*model.DbscriptIssueList) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbscriptIssueListDo) withDO(do gen.Dao) *dbscriptIssueListDo {
	d.DO = *do.(*gen.DO)
	return d
}
