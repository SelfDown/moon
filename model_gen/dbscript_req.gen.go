// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbscriptReq(db *gorm.DB, opts ...gen.DOOption) dbscriptReq {
	_dbscriptReq := dbscriptReq{}

	_dbscriptReq.dbscriptReqDo.UseDB(db, opts...)
	_dbscriptReq.dbscriptReqDo.UseModel(&model.DbscriptReq{})

	tableName := _dbscriptReq.dbscriptReqDo.TableName()
	_dbscriptReq.ALL = field.NewAsterisk(tableName)
	_dbscriptReq.DbscriptEventID = field.NewString(tableName, "dbscript_event_id")
	_dbscriptReq.DbscriptName = field.NewString(tableName, "dbscript_name")
	_dbscriptReq.OpUser = field.NewString(tableName, "op_user")
	_dbscriptReq.OpTime = field.NewTime(tableName, "op_time")
	_dbscriptReq.TestUser = field.NewString(tableName, "test_user")
	_dbscriptReq.CheckUser = field.NewString(tableName, "check_user")
	_dbscriptReq.CheckTime = field.NewTime(tableName, "check_time")
	_dbscriptReq.DbscriptVersion = field.NewString(tableName, "dbscript_version")
	_dbscriptReq.PrepareExecTime = field.NewTime(tableName, "prepare_exec_time")
	_dbscriptReq.ReqStatu = field.NewInt32(tableName, "req_statu")
	_dbscriptReq.ArchiveUser = field.NewString(tableName, "archive_user")
	_dbscriptReq.ArchiveTime = field.NewTime(tableName, "archive_time")
	_dbscriptReq.RelIssueKey = field.NewString(tableName, "rel_issue_key")
	_dbscriptReq.RelIssueTitle = field.NewString(tableName, "rel_issue_title")
	_dbscriptReq.FlagDel = field.NewString(tableName, "flag_del")
	_dbscriptReq.Note = field.NewString(tableName, "note")
	_dbscriptReq.RelSqlFilePath = field.NewString(tableName, "rel_sql_file_path")
	_dbscriptReq.IsCommonSql = field.NewString(tableName, "is_common_sql")
	_dbscriptReq.RunProductUser = field.NewString(tableName, "run_product_user")
	_dbscriptReq.RunProductTime = field.NewTime(tableName, "run_product_time")
	_dbscriptReq.DelUser = field.NewString(tableName, "del_user")
	_dbscriptReq.DelTime = field.NewTime(tableName, "del_time")
	_dbscriptReq.IsRollbacked = field.NewInt32(tableName, "is_rollbacked")
	_dbscriptReq.RollbackSql = field.NewString(tableName, "rollback_sql")
	_dbscriptReq.RolbackTime = field.NewTime(tableName, "rolback_time")
	_dbscriptReq.RolbackUser = field.NewString(tableName, "rolback_user")
	_dbscriptReq.ReqSql = field.NewString(tableName, "req_sql")
	_dbscriptReq.ReqSqlHTML = field.NewString(tableName, "req_sql_html")
	_dbscriptReq.Ids = field.NewInt32(tableName, "ids")
	_dbscriptReq.HisModule = field.NewString(tableName, "his_module")
	_dbscriptReq.ProTeamID = field.NewString(tableName, "pro_team_id")
	_dbscriptReq.OnlineVersion = field.NewString(tableName, "online_version")
	_dbscriptReq.ImportUser = field.NewString(tableName, "import_user")
	_dbscriptReq.CreateTime = field.NewTime(tableName, "create_time")
	_dbscriptReq.ModifyTime = field.NewTime(tableName, "modify_time")
	_dbscriptReq.Comments = field.NewString(tableName, "comments")
	_dbscriptReq.IsBacksql = field.NewString(tableName, "is_backsql")

	_dbscriptReq.fillFieldMap()

	return _dbscriptReq
}

type dbscriptReq struct {
	dbscriptReqDo

	ALL             field.Asterisk
	DbscriptEventID field.String // -1、逻辑删除、0、已申请 1、已审核 3、已归档 4、已实施
	DbscriptName    field.String // 脚本概述
	OpUser          field.String // 申请人
	OpTime          field.Time
	TestUser        field.String // 测试负责人
	CheckUser       field.String
	CheckTime       field.Time
	DbscriptVersion field.String // 脚本版本
	PrepareExecTime field.Time   // 预发布时间
	/*
		申请状态
		0、已申请
		1、审核通过
		3、审核不通过
		2、已归档
	*/
	ReqStatu       field.Int32
	ArchiveUser    field.String // 归档用户
	ArchiveTime    field.Time   // 归档时间
	RelIssueKey    field.String
	RelIssueTitle  field.String
	FlagDel        field.String
	Note           field.String
	RelSqlFilePath field.String // 关联的SQL文件的相对位置用于脚本与文件的关联
	IsCommonSql    field.String // 是否属于产品级脚本归档 0 否 1 是
	RunProductUser field.String // 脚本负责人,脚本执行人
	RunProductTime field.Time
	DelUser        field.String
	DelTime        field.Time
	IsRollbacked   field.Int32
	RollbackSql    field.String
	RolbackTime    field.Time
	RolbackUser    field.String
	ReqSql         field.String // 保存富文本框的文本
	ReqSqlHTML     field.String // 保存富文本框的html
	Ids            field.Int32
	HisModule      field.String // HIS模块分组,如:EMR\BMS\DMS\PDS
	ProTeamID      field.String // 与sys_project_team.sys_project_team_id关联
	OnlineVersion  field.String // 线上真实应用版本号
	ImportUser     field.String // 脚本从外界导入的时候操作用户
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明
	IsBacksql      field.String

	fieldMap map[string]field.Expr
}

func (d dbscriptReq) Table(newTableName string) *dbscriptReq {
	d.dbscriptReqDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbscriptReq) As(alias string) *dbscriptReq {
	d.dbscriptReqDo.DO = *(d.dbscriptReqDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbscriptReq) updateTableName(table string) *dbscriptReq {
	d.ALL = field.NewAsterisk(table)
	d.DbscriptEventID = field.NewString(table, "dbscript_event_id")
	d.DbscriptName = field.NewString(table, "dbscript_name")
	d.OpUser = field.NewString(table, "op_user")
	d.OpTime = field.NewTime(table, "op_time")
	d.TestUser = field.NewString(table, "test_user")
	d.CheckUser = field.NewString(table, "check_user")
	d.CheckTime = field.NewTime(table, "check_time")
	d.DbscriptVersion = field.NewString(table, "dbscript_version")
	d.PrepareExecTime = field.NewTime(table, "prepare_exec_time")
	d.ReqStatu = field.NewInt32(table, "req_statu")
	d.ArchiveUser = field.NewString(table, "archive_user")
	d.ArchiveTime = field.NewTime(table, "archive_time")
	d.RelIssueKey = field.NewString(table, "rel_issue_key")
	d.RelIssueTitle = field.NewString(table, "rel_issue_title")
	d.FlagDel = field.NewString(table, "flag_del")
	d.Note = field.NewString(table, "note")
	d.RelSqlFilePath = field.NewString(table, "rel_sql_file_path")
	d.IsCommonSql = field.NewString(table, "is_common_sql")
	d.RunProductUser = field.NewString(table, "run_product_user")
	d.RunProductTime = field.NewTime(table, "run_product_time")
	d.DelUser = field.NewString(table, "del_user")
	d.DelTime = field.NewTime(table, "del_time")
	d.IsRollbacked = field.NewInt32(table, "is_rollbacked")
	d.RollbackSql = field.NewString(table, "rollback_sql")
	d.RolbackTime = field.NewTime(table, "rolback_time")
	d.RolbackUser = field.NewString(table, "rolback_user")
	d.ReqSql = field.NewString(table, "req_sql")
	d.ReqSqlHTML = field.NewString(table, "req_sql_html")
	d.Ids = field.NewInt32(table, "ids")
	d.HisModule = field.NewString(table, "his_module")
	d.ProTeamID = field.NewString(table, "pro_team_id")
	d.OnlineVersion = field.NewString(table, "online_version")
	d.ImportUser = field.NewString(table, "import_user")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")
	d.IsBacksql = field.NewString(table, "is_backsql")

	d.fillFieldMap()

	return d
}

func (d *dbscriptReq) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbscriptReq) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 37)
	d.fieldMap["dbscript_event_id"] = d.DbscriptEventID
	d.fieldMap["dbscript_name"] = d.DbscriptName
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["op_time"] = d.OpTime
	d.fieldMap["test_user"] = d.TestUser
	d.fieldMap["check_user"] = d.CheckUser
	d.fieldMap["check_time"] = d.CheckTime
	d.fieldMap["dbscript_version"] = d.DbscriptVersion
	d.fieldMap["prepare_exec_time"] = d.PrepareExecTime
	d.fieldMap["req_statu"] = d.ReqStatu
	d.fieldMap["archive_user"] = d.ArchiveUser
	d.fieldMap["archive_time"] = d.ArchiveTime
	d.fieldMap["rel_issue_key"] = d.RelIssueKey
	d.fieldMap["rel_issue_title"] = d.RelIssueTitle
	d.fieldMap["flag_del"] = d.FlagDel
	d.fieldMap["note"] = d.Note
	d.fieldMap["rel_sql_file_path"] = d.RelSqlFilePath
	d.fieldMap["is_common_sql"] = d.IsCommonSql
	d.fieldMap["run_product_user"] = d.RunProductUser
	d.fieldMap["run_product_time"] = d.RunProductTime
	d.fieldMap["del_user"] = d.DelUser
	d.fieldMap["del_time"] = d.DelTime
	d.fieldMap["is_rollbacked"] = d.IsRollbacked
	d.fieldMap["rollback_sql"] = d.RollbackSql
	d.fieldMap["rolback_time"] = d.RolbackTime
	d.fieldMap["rolback_user"] = d.RolbackUser
	d.fieldMap["req_sql"] = d.ReqSql
	d.fieldMap["req_sql_html"] = d.ReqSqlHTML
	d.fieldMap["ids"] = d.Ids
	d.fieldMap["his_module"] = d.HisModule
	d.fieldMap["pro_team_id"] = d.ProTeamID
	d.fieldMap["online_version"] = d.OnlineVersion
	d.fieldMap["import_user"] = d.ImportUser
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
	d.fieldMap["is_backsql"] = d.IsBacksql
}

func (d dbscriptReq) clone(db *gorm.DB) dbscriptReq {
	d.dbscriptReqDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbscriptReq) replaceDB(db *gorm.DB) dbscriptReq {
	d.dbscriptReqDo.ReplaceDB(db)
	return d
}

type dbscriptReqDo struct{ gen.DO }

type IDbscriptReqDo interface {
	gen.SubQuery
	Debug() IDbscriptReqDo
	WithContext(ctx context.Context) IDbscriptReqDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbscriptReqDo
	WriteDB() IDbscriptReqDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbscriptReqDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbscriptReqDo
	Not(conds ...gen.Condition) IDbscriptReqDo
	Or(conds ...gen.Condition) IDbscriptReqDo
	Select(conds ...field.Expr) IDbscriptReqDo
	Where(conds ...gen.Condition) IDbscriptReqDo
	Order(conds ...field.Expr) IDbscriptReqDo
	Distinct(cols ...field.Expr) IDbscriptReqDo
	Omit(cols ...field.Expr) IDbscriptReqDo
	Join(table schema.Tabler, on ...field.Expr) IDbscriptReqDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqDo
	Group(cols ...field.Expr) IDbscriptReqDo
	Having(conds ...gen.Condition) IDbscriptReqDo
	Limit(limit int) IDbscriptReqDo
	Offset(offset int) IDbscriptReqDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptReqDo
	Unscoped() IDbscriptReqDo
	Create(values ...*model.DbscriptReq) error
	CreateInBatches(values []*model.DbscriptReq, batchSize int) error
	Save(values ...*model.DbscriptReq) error
	First() (*model.DbscriptReq, error)
	Take() (*model.DbscriptReq, error)
	Last() (*model.DbscriptReq, error)
	Find() ([]*model.DbscriptReq, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptReq, err error)
	FindInBatches(result *[]*model.DbscriptReq, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbscriptReq) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbscriptReqDo
	Assign(attrs ...field.AssignExpr) IDbscriptReqDo
	Joins(fields ...field.RelationField) IDbscriptReqDo
	Preload(fields ...field.RelationField) IDbscriptReqDo
	FirstOrInit() (*model.DbscriptReq, error)
	FirstOrCreate() (*model.DbscriptReq, error)
	FindByPage(offset int, limit int) (result []*model.DbscriptReq, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbscriptReqDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbscriptReqDo) Debug() IDbscriptReqDo {
	return d.withDO(d.DO.Debug())
}

func (d dbscriptReqDo) WithContext(ctx context.Context) IDbscriptReqDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbscriptReqDo) ReadDB() IDbscriptReqDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbscriptReqDo) WriteDB() IDbscriptReqDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbscriptReqDo) Session(config *gorm.Session) IDbscriptReqDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbscriptReqDo) Clauses(conds ...clause.Expression) IDbscriptReqDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbscriptReqDo) Returning(value interface{}, columns ...string) IDbscriptReqDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbscriptReqDo) Not(conds ...gen.Condition) IDbscriptReqDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbscriptReqDo) Or(conds ...gen.Condition) IDbscriptReqDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbscriptReqDo) Select(conds ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbscriptReqDo) Where(conds ...gen.Condition) IDbscriptReqDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbscriptReqDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbscriptReqDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbscriptReqDo) Order(conds ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbscriptReqDo) Distinct(cols ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbscriptReqDo) Omit(cols ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbscriptReqDo) Join(table schema.Tabler, on ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbscriptReqDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbscriptReqDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbscriptReqDo) Group(cols ...field.Expr) IDbscriptReqDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbscriptReqDo) Having(conds ...gen.Condition) IDbscriptReqDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbscriptReqDo) Limit(limit int) IDbscriptReqDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbscriptReqDo) Offset(offset int) IDbscriptReqDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbscriptReqDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptReqDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbscriptReqDo) Unscoped() IDbscriptReqDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbscriptReqDo) Create(values ...*model.DbscriptReq) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbscriptReqDo) CreateInBatches(values []*model.DbscriptReq, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbscriptReqDo) Save(values ...*model.DbscriptReq) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbscriptReqDo) First() (*model.DbscriptReq, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReq), nil
	}
}

func (d dbscriptReqDo) Take() (*model.DbscriptReq, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReq), nil
	}
}

func (d dbscriptReqDo) Last() (*model.DbscriptReq, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReq), nil
	}
}

func (d dbscriptReqDo) Find() ([]*model.DbscriptReq, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbscriptReq), err
}

func (d dbscriptReqDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptReq, err error) {
	buf := make([]*model.DbscriptReq, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbscriptReqDo) FindInBatches(result *[]*model.DbscriptReq, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbscriptReqDo) Attrs(attrs ...field.AssignExpr) IDbscriptReqDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbscriptReqDo) Assign(attrs ...field.AssignExpr) IDbscriptReqDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbscriptReqDo) Joins(fields ...field.RelationField) IDbscriptReqDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbscriptReqDo) Preload(fields ...field.RelationField) IDbscriptReqDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbscriptReqDo) FirstOrInit() (*model.DbscriptReq, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReq), nil
	}
}

func (d dbscriptReqDo) FirstOrCreate() (*model.DbscriptReq, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReq), nil
	}
}

func (d dbscriptReqDo) FindByPage(offset int, limit int) (result []*model.DbscriptReq, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbscriptReqDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbscriptReqDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbscriptReqDo) Delete(models ...*model.DbscriptReq) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbscriptReqDo) withDO(do gen.Dao) *dbscriptReqDo {
	d.DO = *do.(*gen.DO)
	return d
}
