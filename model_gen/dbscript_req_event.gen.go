// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbscriptReqEvent(db *gorm.DB, opts ...gen.DOOption) dbscriptReqEvent {
	_dbscriptReqEvent := dbscriptReqEvent{}

	_dbscriptReqEvent.dbscriptReqEventDo.UseDB(db, opts...)
	_dbscriptReqEvent.dbscriptReqEventDo.UseModel(&model.DbscriptReqEvent{})

	tableName := _dbscriptReqEvent.dbscriptReqEventDo.TableName()
	_dbscriptReqEvent.ALL = field.NewAsterisk(tableName)
	_dbscriptReqEvent.DbscriptEventID = field.NewString(tableName, "dbscript_event_id")
	_dbscriptReqEvent.OpUser = field.NewString(tableName, "op_user")
	_dbscriptReqEvent.OpTime = field.NewTime(tableName, "op_time")
	_dbscriptReqEvent.CheckFalg = field.NewInt32(tableName, "check_falg")
	_dbscriptReqEvent.CheckUser = field.NewString(tableName, "check_user")
	_dbscriptReqEvent.CheckTime = field.NewTime(tableName, "check_time")
	_dbscriptReqEvent.ReqStatu = field.NewInt32(tableName, "req_statu")
	_dbscriptReqEvent.HospitalCode = field.NewString(tableName, "hospital_code")
	_dbscriptReqEvent.CreateTime = field.NewTime(tableName, "create_time")
	_dbscriptReqEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_dbscriptReqEvent.Comments = field.NewString(tableName, "comments")

	_dbscriptReqEvent.fillFieldMap()

	return _dbscriptReqEvent
}

type dbscriptReqEvent struct {
	dbscriptReqEventDo

	ALL             field.Asterisk
	DbscriptEventID field.String
	OpUser          field.String
	OpTime          field.Time
	CheckFalg       field.Int32
	CheckUser       field.String
	CheckTime       field.Time
	ReqStatu        field.Int32 // 申请状态 0、已申请 1、已审核 2、已归档  3 用户下载
	HospitalCode    field.String
	CreateTime      field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time   // 记录修改时间（数据库自动写入）
	Comments        field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d dbscriptReqEvent) Table(newTableName string) *dbscriptReqEvent {
	d.dbscriptReqEventDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbscriptReqEvent) As(alias string) *dbscriptReqEvent {
	d.dbscriptReqEventDo.DO = *(d.dbscriptReqEventDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbscriptReqEvent) updateTableName(table string) *dbscriptReqEvent {
	d.ALL = field.NewAsterisk(table)
	d.DbscriptEventID = field.NewString(table, "dbscript_event_id")
	d.OpUser = field.NewString(table, "op_user")
	d.OpTime = field.NewTime(table, "op_time")
	d.CheckFalg = field.NewInt32(table, "check_falg")
	d.CheckUser = field.NewString(table, "check_user")
	d.CheckTime = field.NewTime(table, "check_time")
	d.ReqStatu = field.NewInt32(table, "req_statu")
	d.HospitalCode = field.NewString(table, "hospital_code")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *dbscriptReqEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbscriptReqEvent) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["dbscript_event_id"] = d.DbscriptEventID
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["op_time"] = d.OpTime
	d.fieldMap["check_falg"] = d.CheckFalg
	d.fieldMap["check_user"] = d.CheckUser
	d.fieldMap["check_time"] = d.CheckTime
	d.fieldMap["req_statu"] = d.ReqStatu
	d.fieldMap["hospital_code"] = d.HospitalCode
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d dbscriptReqEvent) clone(db *gorm.DB) dbscriptReqEvent {
	d.dbscriptReqEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbscriptReqEvent) replaceDB(db *gorm.DB) dbscriptReqEvent {
	d.dbscriptReqEventDo.ReplaceDB(db)
	return d
}

type dbscriptReqEventDo struct{ gen.DO }

type IDbscriptReqEventDo interface {
	gen.SubQuery
	Debug() IDbscriptReqEventDo
	WithContext(ctx context.Context) IDbscriptReqEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbscriptReqEventDo
	WriteDB() IDbscriptReqEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbscriptReqEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbscriptReqEventDo
	Not(conds ...gen.Condition) IDbscriptReqEventDo
	Or(conds ...gen.Condition) IDbscriptReqEventDo
	Select(conds ...field.Expr) IDbscriptReqEventDo
	Where(conds ...gen.Condition) IDbscriptReqEventDo
	Order(conds ...field.Expr) IDbscriptReqEventDo
	Distinct(cols ...field.Expr) IDbscriptReqEventDo
	Omit(cols ...field.Expr) IDbscriptReqEventDo
	Join(table schema.Tabler, on ...field.Expr) IDbscriptReqEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqEventDo
	Group(cols ...field.Expr) IDbscriptReqEventDo
	Having(conds ...gen.Condition) IDbscriptReqEventDo
	Limit(limit int) IDbscriptReqEventDo
	Offset(offset int) IDbscriptReqEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptReqEventDo
	Unscoped() IDbscriptReqEventDo
	Create(values ...*model.DbscriptReqEvent) error
	CreateInBatches(values []*model.DbscriptReqEvent, batchSize int) error
	Save(values ...*model.DbscriptReqEvent) error
	First() (*model.DbscriptReqEvent, error)
	Take() (*model.DbscriptReqEvent, error)
	Last() (*model.DbscriptReqEvent, error)
	Find() ([]*model.DbscriptReqEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptReqEvent, err error)
	FindInBatches(result *[]*model.DbscriptReqEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbscriptReqEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbscriptReqEventDo
	Assign(attrs ...field.AssignExpr) IDbscriptReqEventDo
	Joins(fields ...field.RelationField) IDbscriptReqEventDo
	Preload(fields ...field.RelationField) IDbscriptReqEventDo
	FirstOrInit() (*model.DbscriptReqEvent, error)
	FirstOrCreate() (*model.DbscriptReqEvent, error)
	FindByPage(offset int, limit int) (result []*model.DbscriptReqEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbscriptReqEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbscriptReqEventDo) Debug() IDbscriptReqEventDo {
	return d.withDO(d.DO.Debug())
}

func (d dbscriptReqEventDo) WithContext(ctx context.Context) IDbscriptReqEventDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbscriptReqEventDo) ReadDB() IDbscriptReqEventDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbscriptReqEventDo) WriteDB() IDbscriptReqEventDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbscriptReqEventDo) Session(config *gorm.Session) IDbscriptReqEventDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbscriptReqEventDo) Clauses(conds ...clause.Expression) IDbscriptReqEventDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbscriptReqEventDo) Returning(value interface{}, columns ...string) IDbscriptReqEventDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbscriptReqEventDo) Not(conds ...gen.Condition) IDbscriptReqEventDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbscriptReqEventDo) Or(conds ...gen.Condition) IDbscriptReqEventDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbscriptReqEventDo) Select(conds ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbscriptReqEventDo) Where(conds ...gen.Condition) IDbscriptReqEventDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbscriptReqEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbscriptReqEventDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbscriptReqEventDo) Order(conds ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbscriptReqEventDo) Distinct(cols ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbscriptReqEventDo) Omit(cols ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbscriptReqEventDo) Join(table schema.Tabler, on ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbscriptReqEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbscriptReqEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbscriptReqEventDo) Group(cols ...field.Expr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbscriptReqEventDo) Having(conds ...gen.Condition) IDbscriptReqEventDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbscriptReqEventDo) Limit(limit int) IDbscriptReqEventDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbscriptReqEventDo) Offset(offset int) IDbscriptReqEventDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbscriptReqEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptReqEventDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbscriptReqEventDo) Unscoped() IDbscriptReqEventDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbscriptReqEventDo) Create(values ...*model.DbscriptReqEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbscriptReqEventDo) CreateInBatches(values []*model.DbscriptReqEvent, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbscriptReqEventDo) Save(values ...*model.DbscriptReqEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbscriptReqEventDo) First() (*model.DbscriptReqEvent, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqEvent), nil
	}
}

func (d dbscriptReqEventDo) Take() (*model.DbscriptReqEvent, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqEvent), nil
	}
}

func (d dbscriptReqEventDo) Last() (*model.DbscriptReqEvent, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqEvent), nil
	}
}

func (d dbscriptReqEventDo) Find() ([]*model.DbscriptReqEvent, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbscriptReqEvent), err
}

func (d dbscriptReqEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptReqEvent, err error) {
	buf := make([]*model.DbscriptReqEvent, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbscriptReqEventDo) FindInBatches(result *[]*model.DbscriptReqEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbscriptReqEventDo) Attrs(attrs ...field.AssignExpr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbscriptReqEventDo) Assign(attrs ...field.AssignExpr) IDbscriptReqEventDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbscriptReqEventDo) Joins(fields ...field.RelationField) IDbscriptReqEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbscriptReqEventDo) Preload(fields ...field.RelationField) IDbscriptReqEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbscriptReqEventDo) FirstOrInit() (*model.DbscriptReqEvent, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqEvent), nil
	}
}

func (d dbscriptReqEventDo) FirstOrCreate() (*model.DbscriptReqEvent, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqEvent), nil
	}
}

func (d dbscriptReqEventDo) FindByPage(offset int, limit int) (result []*model.DbscriptReqEvent, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbscriptReqEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbscriptReqEventDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbscriptReqEventDo) Delete(models ...*model.DbscriptReqEvent) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbscriptReqEventDo) withDO(do gen.Dao) *dbscriptReqEventDo {
	d.DO = *do.(*gen.DO)
	return d
}
