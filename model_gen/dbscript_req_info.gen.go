// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDbscriptReqInfo(db *gorm.DB, opts ...gen.DOOption) dbscriptReqInfo {
	_dbscriptReqInfo := dbscriptReqInfo{}

	_dbscriptReqInfo.dbscriptReqInfoDo.UseDB(db, opts...)
	_dbscriptReqInfo.dbscriptReqInfoDo.UseModel(&model.DbscriptReqInfo{})

	tableName := _dbscriptReqInfo.dbscriptReqInfoDo.TableName()
	_dbscriptReqInfo.ALL = field.NewAsterisk(tableName)
	_dbscriptReqInfo.DbscriptInfoID = field.NewString(tableName, "dbscript_info_id")
	_dbscriptReqInfo.DbscriptEventID = field.NewString(tableName, "dbscript_event_id")
	_dbscriptReqInfo.OpUser = field.NewString(tableName, "op_user")
	_dbscriptReqInfo.OpTime = field.NewTime(tableName, "op_time")
	_dbscriptReqInfo.ReqVersion = field.NewString(tableName, "req_version")
	_dbscriptReqInfo.ReqSql = field.NewString(tableName, "req_sql")
	_dbscriptReqInfo.ReqHospital = field.NewString(tableName, "req_hospital")
	_dbscriptReqInfo.CreateTime = field.NewTime(tableName, "create_time")
	_dbscriptReqInfo.ModifyTime = field.NewTime(tableName, "modify_time")
	_dbscriptReqInfo.Comments = field.NewString(tableName, "comments")

	_dbscriptReqInfo.fillFieldMap()

	return _dbscriptReqInfo
}

type dbscriptReqInfo struct {
	dbscriptReqInfoDo

	ALL             field.Asterisk
	DbscriptInfoID  field.String
	DbscriptEventID field.String
	OpUser          field.String
	OpTime          field.Time
	ReqVersion      field.String
	ReqSql          field.String
	ReqHospital     field.String
	CreateTime      field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time   // 记录修改时间（数据库自动写入）
	Comments        field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d dbscriptReqInfo) Table(newTableName string) *dbscriptReqInfo {
	d.dbscriptReqInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbscriptReqInfo) As(alias string) *dbscriptReqInfo {
	d.dbscriptReqInfoDo.DO = *(d.dbscriptReqInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbscriptReqInfo) updateTableName(table string) *dbscriptReqInfo {
	d.ALL = field.NewAsterisk(table)
	d.DbscriptInfoID = field.NewString(table, "dbscript_info_id")
	d.DbscriptEventID = field.NewString(table, "dbscript_event_id")
	d.OpUser = field.NewString(table, "op_user")
	d.OpTime = field.NewTime(table, "op_time")
	d.ReqVersion = field.NewString(table, "req_version")
	d.ReqSql = field.NewString(table, "req_sql")
	d.ReqHospital = field.NewString(table, "req_hospital")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *dbscriptReqInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbscriptReqInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["dbscript_info_id"] = d.DbscriptInfoID
	d.fieldMap["dbscript_event_id"] = d.DbscriptEventID
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["op_time"] = d.OpTime
	d.fieldMap["req_version"] = d.ReqVersion
	d.fieldMap["req_sql"] = d.ReqSql
	d.fieldMap["req_hospital"] = d.ReqHospital
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d dbscriptReqInfo) clone(db *gorm.DB) dbscriptReqInfo {
	d.dbscriptReqInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbscriptReqInfo) replaceDB(db *gorm.DB) dbscriptReqInfo {
	d.dbscriptReqInfoDo.ReplaceDB(db)
	return d
}

type dbscriptReqInfoDo struct{ gen.DO }

type IDbscriptReqInfoDo interface {
	gen.SubQuery
	Debug() IDbscriptReqInfoDo
	WithContext(ctx context.Context) IDbscriptReqInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbscriptReqInfoDo
	WriteDB() IDbscriptReqInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbscriptReqInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbscriptReqInfoDo
	Not(conds ...gen.Condition) IDbscriptReqInfoDo
	Or(conds ...gen.Condition) IDbscriptReqInfoDo
	Select(conds ...field.Expr) IDbscriptReqInfoDo
	Where(conds ...gen.Condition) IDbscriptReqInfoDo
	Order(conds ...field.Expr) IDbscriptReqInfoDo
	Distinct(cols ...field.Expr) IDbscriptReqInfoDo
	Omit(cols ...field.Expr) IDbscriptReqInfoDo
	Join(table schema.Tabler, on ...field.Expr) IDbscriptReqInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqInfoDo
	Group(cols ...field.Expr) IDbscriptReqInfoDo
	Having(conds ...gen.Condition) IDbscriptReqInfoDo
	Limit(limit int) IDbscriptReqInfoDo
	Offset(offset int) IDbscriptReqInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptReqInfoDo
	Unscoped() IDbscriptReqInfoDo
	Create(values ...*model.DbscriptReqInfo) error
	CreateInBatches(values []*model.DbscriptReqInfo, batchSize int) error
	Save(values ...*model.DbscriptReqInfo) error
	First() (*model.DbscriptReqInfo, error)
	Take() (*model.DbscriptReqInfo, error)
	Last() (*model.DbscriptReqInfo, error)
	Find() ([]*model.DbscriptReqInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptReqInfo, err error)
	FindInBatches(result *[]*model.DbscriptReqInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbscriptReqInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbscriptReqInfoDo
	Assign(attrs ...field.AssignExpr) IDbscriptReqInfoDo
	Joins(fields ...field.RelationField) IDbscriptReqInfoDo
	Preload(fields ...field.RelationField) IDbscriptReqInfoDo
	FirstOrInit() (*model.DbscriptReqInfo, error)
	FirstOrCreate() (*model.DbscriptReqInfo, error)
	FindByPage(offset int, limit int) (result []*model.DbscriptReqInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbscriptReqInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbscriptReqInfoDo) Debug() IDbscriptReqInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d dbscriptReqInfoDo) WithContext(ctx context.Context) IDbscriptReqInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbscriptReqInfoDo) ReadDB() IDbscriptReqInfoDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbscriptReqInfoDo) WriteDB() IDbscriptReqInfoDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbscriptReqInfoDo) Session(config *gorm.Session) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbscriptReqInfoDo) Clauses(conds ...clause.Expression) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbscriptReqInfoDo) Returning(value interface{}, columns ...string) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbscriptReqInfoDo) Not(conds ...gen.Condition) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbscriptReqInfoDo) Or(conds ...gen.Condition) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbscriptReqInfoDo) Select(conds ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbscriptReqInfoDo) Where(conds ...gen.Condition) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbscriptReqInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDbscriptReqInfoDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dbscriptReqInfoDo) Order(conds ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbscriptReqInfoDo) Distinct(cols ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbscriptReqInfoDo) Omit(cols ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbscriptReqInfoDo) Join(table schema.Tabler, on ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbscriptReqInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbscriptReqInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbscriptReqInfoDo) Group(cols ...field.Expr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbscriptReqInfoDo) Having(conds ...gen.Condition) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbscriptReqInfoDo) Limit(limit int) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbscriptReqInfoDo) Offset(offset int) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbscriptReqInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbscriptReqInfoDo) Unscoped() IDbscriptReqInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbscriptReqInfoDo) Create(values ...*model.DbscriptReqInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbscriptReqInfoDo) CreateInBatches(values []*model.DbscriptReqInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbscriptReqInfoDo) Save(values ...*model.DbscriptReqInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbscriptReqInfoDo) First() (*model.DbscriptReqInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqInfo), nil
	}
}

func (d dbscriptReqInfoDo) Take() (*model.DbscriptReqInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqInfo), nil
	}
}

func (d dbscriptReqInfoDo) Last() (*model.DbscriptReqInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqInfo), nil
	}
}

func (d dbscriptReqInfoDo) Find() ([]*model.DbscriptReqInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbscriptReqInfo), err
}

func (d dbscriptReqInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbscriptReqInfo, err error) {
	buf := make([]*model.DbscriptReqInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbscriptReqInfoDo) FindInBatches(result *[]*model.DbscriptReqInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbscriptReqInfoDo) Attrs(attrs ...field.AssignExpr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbscriptReqInfoDo) Assign(attrs ...field.AssignExpr) IDbscriptReqInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbscriptReqInfoDo) Joins(fields ...field.RelationField) IDbscriptReqInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbscriptReqInfoDo) Preload(fields ...field.RelationField) IDbscriptReqInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbscriptReqInfoDo) FirstOrInit() (*model.DbscriptReqInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqInfo), nil
	}
}

func (d dbscriptReqInfoDo) FirstOrCreate() (*model.DbscriptReqInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbscriptReqInfo), nil
	}
}

func (d dbscriptReqInfoDo) FindByPage(offset int, limit int) (result []*model.DbscriptReqInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbscriptReqInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbscriptReqInfoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbscriptReqInfoDo) Delete(models ...*model.DbscriptReqInfo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbscriptReqInfoDo) withDO(do gen.Dao) *dbscriptReqInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}
