// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDepLocalLink(db *gorm.DB, opts ...gen.DOOption) depLocalLink {
	_depLocalLink := depLocalLink{}

	_depLocalLink.depLocalLinkDo.UseDB(db, opts...)
	_depLocalLink.depLocalLinkDo.UseModel(&model.DepLocalLink{})

	tableName := _depLocalLink.depLocalLinkDo.TableName()
	_depLocalLink.ALL = field.NewAsterisk(tableName)
	_depLocalLink.DepLocalLinkID = field.NewString(tableName, "dep_local_link_id")
	_depLocalLink.DepTaskID = field.NewString(tableName, "dep_task_id")
	_depLocalLink.SecretKey = field.NewString(tableName, "secret_key")
	_depLocalLink.UserID = field.NewString(tableName, "user_id")
	_depLocalLink.UserName = field.NewString(tableName, "user_name")
	_depLocalLink.WarGroup = field.NewString(tableName, "war_group")
	_depLocalLink.WarArtifact = field.NewString(tableName, "war_artifact")
	_depLocalLink.CreateTime = field.NewTime(tableName, "create_time")
	_depLocalLink.ModifyTime = field.NewTime(tableName, "modify_time")
	_depLocalLink.Comments = field.NewString(tableName, "comments")
	_depLocalLink.InvalidTime = field.NewTime(tableName, "invalid_time")

	_depLocalLink.fillFieldMap()

	return _depLocalLink
}

type depLocalLink struct {
	depLocalLinkDo

	ALL            field.Asterisk
	DepLocalLinkID field.String
	DepTaskID      field.String
	SecretKey      field.String // 用户密匙
	UserID         field.String // 0 无效   1有效
	UserName       field.String
	WarGroup       field.String
	WarArtifact    field.String
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明
	InvalidTime    field.Time   // 失效时间

	fieldMap map[string]field.Expr
}

func (d depLocalLink) Table(newTableName string) *depLocalLink {
	d.depLocalLinkDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d depLocalLink) As(alias string) *depLocalLink {
	d.depLocalLinkDo.DO = *(d.depLocalLinkDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *depLocalLink) updateTableName(table string) *depLocalLink {
	d.ALL = field.NewAsterisk(table)
	d.DepLocalLinkID = field.NewString(table, "dep_local_link_id")
	d.DepTaskID = field.NewString(table, "dep_task_id")
	d.SecretKey = field.NewString(table, "secret_key")
	d.UserID = field.NewString(table, "user_id")
	d.UserName = field.NewString(table, "user_name")
	d.WarGroup = field.NewString(table, "war_group")
	d.WarArtifact = field.NewString(table, "war_artifact")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")
	d.InvalidTime = field.NewTime(table, "invalid_time")

	d.fillFieldMap()

	return d
}

func (d *depLocalLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *depLocalLink) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["dep_local_link_id"] = d.DepLocalLinkID
	d.fieldMap["dep_task_id"] = d.DepTaskID
	d.fieldMap["secret_key"] = d.SecretKey
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["user_name"] = d.UserName
	d.fieldMap["war_group"] = d.WarGroup
	d.fieldMap["war_artifact"] = d.WarArtifact
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
	d.fieldMap["invalid_time"] = d.InvalidTime
}

func (d depLocalLink) clone(db *gorm.DB) depLocalLink {
	d.depLocalLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d depLocalLink) replaceDB(db *gorm.DB) depLocalLink {
	d.depLocalLinkDo.ReplaceDB(db)
	return d
}

type depLocalLinkDo struct{ gen.DO }

type IDepLocalLinkDo interface {
	gen.SubQuery
	Debug() IDepLocalLinkDo
	WithContext(ctx context.Context) IDepLocalLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDepLocalLinkDo
	WriteDB() IDepLocalLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDepLocalLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDepLocalLinkDo
	Not(conds ...gen.Condition) IDepLocalLinkDo
	Or(conds ...gen.Condition) IDepLocalLinkDo
	Select(conds ...field.Expr) IDepLocalLinkDo
	Where(conds ...gen.Condition) IDepLocalLinkDo
	Order(conds ...field.Expr) IDepLocalLinkDo
	Distinct(cols ...field.Expr) IDepLocalLinkDo
	Omit(cols ...field.Expr) IDepLocalLinkDo
	Join(table schema.Tabler, on ...field.Expr) IDepLocalLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDepLocalLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDepLocalLinkDo
	Group(cols ...field.Expr) IDepLocalLinkDo
	Having(conds ...gen.Condition) IDepLocalLinkDo
	Limit(limit int) IDepLocalLinkDo
	Offset(offset int) IDepLocalLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDepLocalLinkDo
	Unscoped() IDepLocalLinkDo
	Create(values ...*model.DepLocalLink) error
	CreateInBatches(values []*model.DepLocalLink, batchSize int) error
	Save(values ...*model.DepLocalLink) error
	First() (*model.DepLocalLink, error)
	Take() (*model.DepLocalLink, error)
	Last() (*model.DepLocalLink, error)
	Find() ([]*model.DepLocalLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DepLocalLink, err error)
	FindInBatches(result *[]*model.DepLocalLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DepLocalLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDepLocalLinkDo
	Assign(attrs ...field.AssignExpr) IDepLocalLinkDo
	Joins(fields ...field.RelationField) IDepLocalLinkDo
	Preload(fields ...field.RelationField) IDepLocalLinkDo
	FirstOrInit() (*model.DepLocalLink, error)
	FirstOrCreate() (*model.DepLocalLink, error)
	FindByPage(offset int, limit int) (result []*model.DepLocalLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDepLocalLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d depLocalLinkDo) Debug() IDepLocalLinkDo {
	return d.withDO(d.DO.Debug())
}

func (d depLocalLinkDo) WithContext(ctx context.Context) IDepLocalLinkDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d depLocalLinkDo) ReadDB() IDepLocalLinkDo {
	return d.Clauses(dbresolver.Read)
}

func (d depLocalLinkDo) WriteDB() IDepLocalLinkDo {
	return d.Clauses(dbresolver.Write)
}

func (d depLocalLinkDo) Session(config *gorm.Session) IDepLocalLinkDo {
	return d.withDO(d.DO.Session(config))
}

func (d depLocalLinkDo) Clauses(conds ...clause.Expression) IDepLocalLinkDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d depLocalLinkDo) Returning(value interface{}, columns ...string) IDepLocalLinkDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d depLocalLinkDo) Not(conds ...gen.Condition) IDepLocalLinkDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d depLocalLinkDo) Or(conds ...gen.Condition) IDepLocalLinkDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d depLocalLinkDo) Select(conds ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d depLocalLinkDo) Where(conds ...gen.Condition) IDepLocalLinkDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d depLocalLinkDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDepLocalLinkDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d depLocalLinkDo) Order(conds ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d depLocalLinkDo) Distinct(cols ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d depLocalLinkDo) Omit(cols ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d depLocalLinkDo) Join(table schema.Tabler, on ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d depLocalLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d depLocalLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d depLocalLinkDo) Group(cols ...field.Expr) IDepLocalLinkDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d depLocalLinkDo) Having(conds ...gen.Condition) IDepLocalLinkDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d depLocalLinkDo) Limit(limit int) IDepLocalLinkDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d depLocalLinkDo) Offset(offset int) IDepLocalLinkDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d depLocalLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDepLocalLinkDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d depLocalLinkDo) Unscoped() IDepLocalLinkDo {
	return d.withDO(d.DO.Unscoped())
}

func (d depLocalLinkDo) Create(values ...*model.DepLocalLink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d depLocalLinkDo) CreateInBatches(values []*model.DepLocalLink, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d depLocalLinkDo) Save(values ...*model.DepLocalLink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d depLocalLinkDo) First() (*model.DepLocalLink, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepLocalLink), nil
	}
}

func (d depLocalLinkDo) Take() (*model.DepLocalLink, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepLocalLink), nil
	}
}

func (d depLocalLinkDo) Last() (*model.DepLocalLink, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepLocalLink), nil
	}
}

func (d depLocalLinkDo) Find() ([]*model.DepLocalLink, error) {
	result, err := d.DO.Find()
	return result.([]*model.DepLocalLink), err
}

func (d depLocalLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DepLocalLink, err error) {
	buf := make([]*model.DepLocalLink, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d depLocalLinkDo) FindInBatches(result *[]*model.DepLocalLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d depLocalLinkDo) Attrs(attrs ...field.AssignExpr) IDepLocalLinkDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d depLocalLinkDo) Assign(attrs ...field.AssignExpr) IDepLocalLinkDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d depLocalLinkDo) Joins(fields ...field.RelationField) IDepLocalLinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d depLocalLinkDo) Preload(fields ...field.RelationField) IDepLocalLinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d depLocalLinkDo) FirstOrInit() (*model.DepLocalLink, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepLocalLink), nil
	}
}

func (d depLocalLinkDo) FirstOrCreate() (*model.DepLocalLink, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepLocalLink), nil
	}
}

func (d depLocalLinkDo) FindByPage(offset int, limit int) (result []*model.DepLocalLink, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d depLocalLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d depLocalLinkDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d depLocalLinkDo) Delete(models ...*model.DepLocalLink) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *depLocalLinkDo) withDO(do gen.Dao) *depLocalLinkDo {
	d.DO = *do.(*gen.DO)
	return d
}
