// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDepTasklistUpdateRecord(db *gorm.DB, opts ...gen.DOOption) depTasklistUpdateRecord {
	_depTasklistUpdateRecord := depTasklistUpdateRecord{}

	_depTasklistUpdateRecord.depTasklistUpdateRecordDo.UseDB(db, opts...)
	_depTasklistUpdateRecord.depTasklistUpdateRecordDo.UseModel(&model.DepTasklistUpdateRecord{})

	tableName := _depTasklistUpdateRecord.depTasklistUpdateRecordDo.TableName()
	_depTasklistUpdateRecord.ALL = field.NewAsterisk(tableName)
	_depTasklistUpdateRecord.UpdateRecordID = field.NewString(tableName, "update_record_id")
	_depTasklistUpdateRecord.ServerEnvID = field.NewString(tableName, "server_env_id")
	_depTasklistUpdateRecord.ServerID = field.NewString(tableName, "server_id")
	_depTasklistUpdateRecord.ServerIP = field.NewString(tableName, "server_ip")
	_depTasklistUpdateRecord.WarGroupid = field.NewString(tableName, "war_groupid")
	_depTasklistUpdateRecord.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_depTasklistUpdateRecord.Field = field.NewString(tableName, "field")
	_depTasklistUpdateRecord.Name = field.NewString(tableName, "name")
	_depTasklistUpdateRecord.Before = field.NewString(tableName, "before")
	_depTasklistUpdateRecord.After = field.NewString(tableName, "after")
	_depTasklistUpdateRecord.CreateTime = field.NewString(tableName, "create_time")
	_depTasklistUpdateRecord.OpUser = field.NewString(tableName, "op_user")
	_depTasklistUpdateRecord.Operation = field.NewString(tableName, "operation")

	_depTasklistUpdateRecord.fillFieldMap()

	return _depTasklistUpdateRecord
}

type depTasklistUpdateRecord struct {
	depTasklistUpdateRecordDo

	ALL            field.Asterisk
	UpdateRecordID field.String
	ServerEnvID    field.String
	ServerID       field.String // 服务器ID
	ServerIP       field.String // 服务器IP
	WarGroupid     field.String
	WarArtifactid  field.String
	Field          field.String
	Name           field.String
	Before         field.String
	After          field.String
	CreateTime     field.String
	OpUser         field.String
	Operation      field.String

	fieldMap map[string]field.Expr
}

func (d depTasklistUpdateRecord) Table(newTableName string) *depTasklistUpdateRecord {
	d.depTasklistUpdateRecordDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d depTasklistUpdateRecord) As(alias string) *depTasklistUpdateRecord {
	d.depTasklistUpdateRecordDo.DO = *(d.depTasklistUpdateRecordDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *depTasklistUpdateRecord) updateTableName(table string) *depTasklistUpdateRecord {
	d.ALL = field.NewAsterisk(table)
	d.UpdateRecordID = field.NewString(table, "update_record_id")
	d.ServerEnvID = field.NewString(table, "server_env_id")
	d.ServerID = field.NewString(table, "server_id")
	d.ServerIP = field.NewString(table, "server_ip")
	d.WarGroupid = field.NewString(table, "war_groupid")
	d.WarArtifactid = field.NewString(table, "war_artifactid")
	d.Field = field.NewString(table, "field")
	d.Name = field.NewString(table, "name")
	d.Before = field.NewString(table, "before")
	d.After = field.NewString(table, "after")
	d.CreateTime = field.NewString(table, "create_time")
	d.OpUser = field.NewString(table, "op_user")
	d.Operation = field.NewString(table, "operation")

	d.fillFieldMap()

	return d
}

func (d *depTasklistUpdateRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *depTasklistUpdateRecord) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["update_record_id"] = d.UpdateRecordID
	d.fieldMap["server_env_id"] = d.ServerEnvID
	d.fieldMap["server_id"] = d.ServerID
	d.fieldMap["server_ip"] = d.ServerIP
	d.fieldMap["war_groupid"] = d.WarGroupid
	d.fieldMap["war_artifactid"] = d.WarArtifactid
	d.fieldMap["field"] = d.Field
	d.fieldMap["name"] = d.Name
	d.fieldMap["before"] = d.Before
	d.fieldMap["after"] = d.After
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["operation"] = d.Operation
}

func (d depTasklistUpdateRecord) clone(db *gorm.DB) depTasklistUpdateRecord {
	d.depTasklistUpdateRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d depTasklistUpdateRecord) replaceDB(db *gorm.DB) depTasklistUpdateRecord {
	d.depTasklistUpdateRecordDo.ReplaceDB(db)
	return d
}

type depTasklistUpdateRecordDo struct{ gen.DO }

type IDepTasklistUpdateRecordDo interface {
	gen.SubQuery
	Debug() IDepTasklistUpdateRecordDo
	WithContext(ctx context.Context) IDepTasklistUpdateRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDepTasklistUpdateRecordDo
	WriteDB() IDepTasklistUpdateRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDepTasklistUpdateRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDepTasklistUpdateRecordDo
	Not(conds ...gen.Condition) IDepTasklistUpdateRecordDo
	Or(conds ...gen.Condition) IDepTasklistUpdateRecordDo
	Select(conds ...field.Expr) IDepTasklistUpdateRecordDo
	Where(conds ...gen.Condition) IDepTasklistUpdateRecordDo
	Order(conds ...field.Expr) IDepTasklistUpdateRecordDo
	Distinct(cols ...field.Expr) IDepTasklistUpdateRecordDo
	Omit(cols ...field.Expr) IDepTasklistUpdateRecordDo
	Join(table schema.Tabler, on ...field.Expr) IDepTasklistUpdateRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDepTasklistUpdateRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDepTasklistUpdateRecordDo
	Group(cols ...field.Expr) IDepTasklistUpdateRecordDo
	Having(conds ...gen.Condition) IDepTasklistUpdateRecordDo
	Limit(limit int) IDepTasklistUpdateRecordDo
	Offset(offset int) IDepTasklistUpdateRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDepTasklistUpdateRecordDo
	Unscoped() IDepTasklistUpdateRecordDo
	Create(values ...*model.DepTasklistUpdateRecord) error
	CreateInBatches(values []*model.DepTasklistUpdateRecord, batchSize int) error
	Save(values ...*model.DepTasklistUpdateRecord) error
	First() (*model.DepTasklistUpdateRecord, error)
	Take() (*model.DepTasklistUpdateRecord, error)
	Last() (*model.DepTasklistUpdateRecord, error)
	Find() ([]*model.DepTasklistUpdateRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DepTasklistUpdateRecord, err error)
	FindInBatches(result *[]*model.DepTasklistUpdateRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DepTasklistUpdateRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDepTasklistUpdateRecordDo
	Assign(attrs ...field.AssignExpr) IDepTasklistUpdateRecordDo
	Joins(fields ...field.RelationField) IDepTasklistUpdateRecordDo
	Preload(fields ...field.RelationField) IDepTasklistUpdateRecordDo
	FirstOrInit() (*model.DepTasklistUpdateRecord, error)
	FirstOrCreate() (*model.DepTasklistUpdateRecord, error)
	FindByPage(offset int, limit int) (result []*model.DepTasklistUpdateRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDepTasklistUpdateRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d depTasklistUpdateRecordDo) Debug() IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Debug())
}

func (d depTasklistUpdateRecordDo) WithContext(ctx context.Context) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d depTasklistUpdateRecordDo) ReadDB() IDepTasklistUpdateRecordDo {
	return d.Clauses(dbresolver.Read)
}

func (d depTasklistUpdateRecordDo) WriteDB() IDepTasklistUpdateRecordDo {
	return d.Clauses(dbresolver.Write)
}

func (d depTasklistUpdateRecordDo) Session(config *gorm.Session) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Session(config))
}

func (d depTasklistUpdateRecordDo) Clauses(conds ...clause.Expression) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d depTasklistUpdateRecordDo) Returning(value interface{}, columns ...string) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d depTasklistUpdateRecordDo) Not(conds ...gen.Condition) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d depTasklistUpdateRecordDo) Or(conds ...gen.Condition) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d depTasklistUpdateRecordDo) Select(conds ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d depTasklistUpdateRecordDo) Where(conds ...gen.Condition) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d depTasklistUpdateRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDepTasklistUpdateRecordDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d depTasklistUpdateRecordDo) Order(conds ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d depTasklistUpdateRecordDo) Distinct(cols ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d depTasklistUpdateRecordDo) Omit(cols ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d depTasklistUpdateRecordDo) Join(table schema.Tabler, on ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d depTasklistUpdateRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d depTasklistUpdateRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d depTasklistUpdateRecordDo) Group(cols ...field.Expr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d depTasklistUpdateRecordDo) Having(conds ...gen.Condition) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d depTasklistUpdateRecordDo) Limit(limit int) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d depTasklistUpdateRecordDo) Offset(offset int) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d depTasklistUpdateRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d depTasklistUpdateRecordDo) Unscoped() IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Unscoped())
}

func (d depTasklistUpdateRecordDo) Create(values ...*model.DepTasklistUpdateRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d depTasklistUpdateRecordDo) CreateInBatches(values []*model.DepTasklistUpdateRecord, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d depTasklistUpdateRecordDo) Save(values ...*model.DepTasklistUpdateRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d depTasklistUpdateRecordDo) First() (*model.DepTasklistUpdateRecord, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepTasklistUpdateRecord), nil
	}
}

func (d depTasklistUpdateRecordDo) Take() (*model.DepTasklistUpdateRecord, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepTasklistUpdateRecord), nil
	}
}

func (d depTasklistUpdateRecordDo) Last() (*model.DepTasklistUpdateRecord, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepTasklistUpdateRecord), nil
	}
}

func (d depTasklistUpdateRecordDo) Find() ([]*model.DepTasklistUpdateRecord, error) {
	result, err := d.DO.Find()
	return result.([]*model.DepTasklistUpdateRecord), err
}

func (d depTasklistUpdateRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DepTasklistUpdateRecord, err error) {
	buf := make([]*model.DepTasklistUpdateRecord, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d depTasklistUpdateRecordDo) FindInBatches(result *[]*model.DepTasklistUpdateRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d depTasklistUpdateRecordDo) Attrs(attrs ...field.AssignExpr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d depTasklistUpdateRecordDo) Assign(attrs ...field.AssignExpr) IDepTasklistUpdateRecordDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d depTasklistUpdateRecordDo) Joins(fields ...field.RelationField) IDepTasklistUpdateRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d depTasklistUpdateRecordDo) Preload(fields ...field.RelationField) IDepTasklistUpdateRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d depTasklistUpdateRecordDo) FirstOrInit() (*model.DepTasklistUpdateRecord, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepTasklistUpdateRecord), nil
	}
}

func (d depTasklistUpdateRecordDo) FirstOrCreate() (*model.DepTasklistUpdateRecord, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DepTasklistUpdateRecord), nil
	}
}

func (d depTasklistUpdateRecordDo) FindByPage(offset int, limit int) (result []*model.DepTasklistUpdateRecord, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d depTasklistUpdateRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d depTasklistUpdateRecordDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d depTasklistUpdateRecordDo) Delete(models ...*model.DepTasklistUpdateRecord) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *depTasklistUpdateRecordDo) withDO(do gen.Dao) *depTasklistUpdateRecordDo {
	d.DO = *do.(*gen.DO)
	return d
}
