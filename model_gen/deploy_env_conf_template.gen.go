// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployEnvConfTemplate(db *gorm.DB, opts ...gen.DOOption) deployEnvConfTemplate {
	_deployEnvConfTemplate := deployEnvConfTemplate{}

	_deployEnvConfTemplate.deployEnvConfTemplateDo.UseDB(db, opts...)
	_deployEnvConfTemplate.deployEnvConfTemplateDo.UseModel(&model.DeployEnvConfTemplate{})

	tableName := _deployEnvConfTemplate.deployEnvConfTemplateDo.TableName()
	_deployEnvConfTemplate.ALL = field.NewAsterisk(tableName)
	_deployEnvConfTemplate.EnvConfTemplateID = field.NewString(tableName, "env_conf_template_id")
	_deployEnvConfTemplate.EnvConfTemplateName = field.NewString(tableName, "env_conf_template_name")
	_deployEnvConfTemplate.EnvConf = field.NewString(tableName, "env_conf")
	_deployEnvConfTemplate.Comments = field.NewString(tableName, "comments")

	_deployEnvConfTemplate.fillFieldMap()

	return _deployEnvConfTemplate
}

type deployEnvConfTemplate struct {
	deployEnvConfTemplateDo

	ALL                 field.Asterisk
	EnvConfTemplateID   field.String
	EnvConfTemplateName field.String
	EnvConf             field.String
	Comments            field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d deployEnvConfTemplate) Table(newTableName string) *deployEnvConfTemplate {
	d.deployEnvConfTemplateDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployEnvConfTemplate) As(alias string) *deployEnvConfTemplate {
	d.deployEnvConfTemplateDo.DO = *(d.deployEnvConfTemplateDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployEnvConfTemplate) updateTableName(table string) *deployEnvConfTemplate {
	d.ALL = field.NewAsterisk(table)
	d.EnvConfTemplateID = field.NewString(table, "env_conf_template_id")
	d.EnvConfTemplateName = field.NewString(table, "env_conf_template_name")
	d.EnvConf = field.NewString(table, "env_conf")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deployEnvConfTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployEnvConfTemplate) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["env_conf_template_id"] = d.EnvConfTemplateID
	d.fieldMap["env_conf_template_name"] = d.EnvConfTemplateName
	d.fieldMap["env_conf"] = d.EnvConf
	d.fieldMap["comments"] = d.Comments
}

func (d deployEnvConfTemplate) clone(db *gorm.DB) deployEnvConfTemplate {
	d.deployEnvConfTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployEnvConfTemplate) replaceDB(db *gorm.DB) deployEnvConfTemplate {
	d.deployEnvConfTemplateDo.ReplaceDB(db)
	return d
}

type deployEnvConfTemplateDo struct{ gen.DO }

type IDeployEnvConfTemplateDo interface {
	gen.SubQuery
	Debug() IDeployEnvConfTemplateDo
	WithContext(ctx context.Context) IDeployEnvConfTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployEnvConfTemplateDo
	WriteDB() IDeployEnvConfTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployEnvConfTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployEnvConfTemplateDo
	Not(conds ...gen.Condition) IDeployEnvConfTemplateDo
	Or(conds ...gen.Condition) IDeployEnvConfTemplateDo
	Select(conds ...field.Expr) IDeployEnvConfTemplateDo
	Where(conds ...gen.Condition) IDeployEnvConfTemplateDo
	Order(conds ...field.Expr) IDeployEnvConfTemplateDo
	Distinct(cols ...field.Expr) IDeployEnvConfTemplateDo
	Omit(cols ...field.Expr) IDeployEnvConfTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IDeployEnvConfTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployEnvConfTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployEnvConfTemplateDo
	Group(cols ...field.Expr) IDeployEnvConfTemplateDo
	Having(conds ...gen.Condition) IDeployEnvConfTemplateDo
	Limit(limit int) IDeployEnvConfTemplateDo
	Offset(offset int) IDeployEnvConfTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployEnvConfTemplateDo
	Unscoped() IDeployEnvConfTemplateDo
	Create(values ...*model.DeployEnvConfTemplate) error
	CreateInBatches(values []*model.DeployEnvConfTemplate, batchSize int) error
	Save(values ...*model.DeployEnvConfTemplate) error
	First() (*model.DeployEnvConfTemplate, error)
	Take() (*model.DeployEnvConfTemplate, error)
	Last() (*model.DeployEnvConfTemplate, error)
	Find() ([]*model.DeployEnvConfTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployEnvConfTemplate, err error)
	FindInBatches(result *[]*model.DeployEnvConfTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployEnvConfTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployEnvConfTemplateDo
	Assign(attrs ...field.AssignExpr) IDeployEnvConfTemplateDo
	Joins(fields ...field.RelationField) IDeployEnvConfTemplateDo
	Preload(fields ...field.RelationField) IDeployEnvConfTemplateDo
	FirstOrInit() (*model.DeployEnvConfTemplate, error)
	FirstOrCreate() (*model.DeployEnvConfTemplate, error)
	FindByPage(offset int, limit int) (result []*model.DeployEnvConfTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployEnvConfTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployEnvConfTemplateDo) Debug() IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Debug())
}

func (d deployEnvConfTemplateDo) WithContext(ctx context.Context) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployEnvConfTemplateDo) ReadDB() IDeployEnvConfTemplateDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployEnvConfTemplateDo) WriteDB() IDeployEnvConfTemplateDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployEnvConfTemplateDo) Session(config *gorm.Session) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployEnvConfTemplateDo) Clauses(conds ...clause.Expression) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployEnvConfTemplateDo) Returning(value interface{}, columns ...string) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployEnvConfTemplateDo) Not(conds ...gen.Condition) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployEnvConfTemplateDo) Or(conds ...gen.Condition) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployEnvConfTemplateDo) Select(conds ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployEnvConfTemplateDo) Where(conds ...gen.Condition) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployEnvConfTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployEnvConfTemplateDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployEnvConfTemplateDo) Order(conds ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployEnvConfTemplateDo) Distinct(cols ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployEnvConfTemplateDo) Omit(cols ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployEnvConfTemplateDo) Join(table schema.Tabler, on ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployEnvConfTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployEnvConfTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployEnvConfTemplateDo) Group(cols ...field.Expr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployEnvConfTemplateDo) Having(conds ...gen.Condition) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployEnvConfTemplateDo) Limit(limit int) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployEnvConfTemplateDo) Offset(offset int) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployEnvConfTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployEnvConfTemplateDo) Unscoped() IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployEnvConfTemplateDo) Create(values ...*model.DeployEnvConfTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployEnvConfTemplateDo) CreateInBatches(values []*model.DeployEnvConfTemplate, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployEnvConfTemplateDo) Save(values ...*model.DeployEnvConfTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployEnvConfTemplateDo) First() (*model.DeployEnvConfTemplate, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEnvConfTemplate), nil
	}
}

func (d deployEnvConfTemplateDo) Take() (*model.DeployEnvConfTemplate, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEnvConfTemplate), nil
	}
}

func (d deployEnvConfTemplateDo) Last() (*model.DeployEnvConfTemplate, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEnvConfTemplate), nil
	}
}

func (d deployEnvConfTemplateDo) Find() ([]*model.DeployEnvConfTemplate, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployEnvConfTemplate), err
}

func (d deployEnvConfTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployEnvConfTemplate, err error) {
	buf := make([]*model.DeployEnvConfTemplate, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployEnvConfTemplateDo) FindInBatches(result *[]*model.DeployEnvConfTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployEnvConfTemplateDo) Attrs(attrs ...field.AssignExpr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployEnvConfTemplateDo) Assign(attrs ...field.AssignExpr) IDeployEnvConfTemplateDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployEnvConfTemplateDo) Joins(fields ...field.RelationField) IDeployEnvConfTemplateDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployEnvConfTemplateDo) Preload(fields ...field.RelationField) IDeployEnvConfTemplateDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployEnvConfTemplateDo) FirstOrInit() (*model.DeployEnvConfTemplate, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEnvConfTemplate), nil
	}
}

func (d deployEnvConfTemplateDo) FirstOrCreate() (*model.DeployEnvConfTemplate, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEnvConfTemplate), nil
	}
}

func (d deployEnvConfTemplateDo) FindByPage(offset int, limit int) (result []*model.DeployEnvConfTemplate, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployEnvConfTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployEnvConfTemplateDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployEnvConfTemplateDo) Delete(models ...*model.DeployEnvConfTemplate) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployEnvConfTemplateDo) withDO(do gen.Dao) *deployEnvConfTemplateDo {
	d.DO = *do.(*gen.DO)
	return d
}
