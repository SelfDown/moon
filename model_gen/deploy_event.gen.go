// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployEvent(db *gorm.DB, opts ...gen.DOOption) deployEvent {
	_deployEvent := deployEvent{}

	_deployEvent.deployEventDo.UseDB(db, opts...)
	_deployEvent.deployEventDo.UseModel(&model.DeployEvent{})

	tableName := _deployEvent.deployEventDo.TableName()
	_deployEvent.ALL = field.NewAsterisk(tableName)
	_deployEvent.DepEventID = field.NewString(tableName, "dep_event_id")
	_deployEvent.OpUser = field.NewString(tableName, "op_user")
	_deployEvent.OpTime = field.NewTime(tableName, "op_time")
	_deployEvent.DepStatu = field.NewInt32(tableName, "dep_statu")
	_deployEvent.HospitalCode = field.NewString(tableName, "hospital_code")
	_deployEvent.CreateTime = field.NewTime(tableName, "create_time")
	_deployEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployEvent.Comments = field.NewString(tableName, "comments")

	_deployEvent.fillFieldMap()

	return _deployEvent
}

type deployEvent struct {
	deployEventDo

	ALL          field.Asterisk
	DepEventID   field.String
	OpUser       field.String
	OpTime       field.Time
	DepStatu     field.Int32 // -1 状态未写入，0 失败 ，1成功，2部分失败，3 未知
	HospitalCode field.String
	CreateTime   field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time   // 记录修改时间（数据库自动写入）
	Comments     field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d deployEvent) Table(newTableName string) *deployEvent {
	d.deployEventDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployEvent) As(alias string) *deployEvent {
	d.deployEventDo.DO = *(d.deployEventDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployEvent) updateTableName(table string) *deployEvent {
	d.ALL = field.NewAsterisk(table)
	d.DepEventID = field.NewString(table, "dep_event_id")
	d.OpUser = field.NewString(table, "op_user")
	d.OpTime = field.NewTime(table, "op_time")
	d.DepStatu = field.NewInt32(table, "dep_statu")
	d.HospitalCode = field.NewString(table, "hospital_code")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deployEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployEvent) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["dep_event_id"] = d.DepEventID
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["op_time"] = d.OpTime
	d.fieldMap["dep_statu"] = d.DepStatu
	d.fieldMap["hospital_code"] = d.HospitalCode
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d deployEvent) clone(db *gorm.DB) deployEvent {
	d.deployEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployEvent) replaceDB(db *gorm.DB) deployEvent {
	d.deployEventDo.ReplaceDB(db)
	return d
}

type deployEventDo struct{ gen.DO }

type IDeployEventDo interface {
	gen.SubQuery
	Debug() IDeployEventDo
	WithContext(ctx context.Context) IDeployEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployEventDo
	WriteDB() IDeployEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployEventDo
	Not(conds ...gen.Condition) IDeployEventDo
	Or(conds ...gen.Condition) IDeployEventDo
	Select(conds ...field.Expr) IDeployEventDo
	Where(conds ...gen.Condition) IDeployEventDo
	Order(conds ...field.Expr) IDeployEventDo
	Distinct(cols ...field.Expr) IDeployEventDo
	Omit(cols ...field.Expr) IDeployEventDo
	Join(table schema.Tabler, on ...field.Expr) IDeployEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployEventDo
	Group(cols ...field.Expr) IDeployEventDo
	Having(conds ...gen.Condition) IDeployEventDo
	Limit(limit int) IDeployEventDo
	Offset(offset int) IDeployEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployEventDo
	Unscoped() IDeployEventDo
	Create(values ...*model.DeployEvent) error
	CreateInBatches(values []*model.DeployEvent, batchSize int) error
	Save(values ...*model.DeployEvent) error
	First() (*model.DeployEvent, error)
	Take() (*model.DeployEvent, error)
	Last() (*model.DeployEvent, error)
	Find() ([]*model.DeployEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployEvent, err error)
	FindInBatches(result *[]*model.DeployEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployEventDo
	Assign(attrs ...field.AssignExpr) IDeployEventDo
	Joins(fields ...field.RelationField) IDeployEventDo
	Preload(fields ...field.RelationField) IDeployEventDo
	FirstOrInit() (*model.DeployEvent, error)
	FirstOrCreate() (*model.DeployEvent, error)
	FindByPage(offset int, limit int) (result []*model.DeployEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployEventDo) Debug() IDeployEventDo {
	return d.withDO(d.DO.Debug())
}

func (d deployEventDo) WithContext(ctx context.Context) IDeployEventDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployEventDo) ReadDB() IDeployEventDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployEventDo) WriteDB() IDeployEventDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployEventDo) Session(config *gorm.Session) IDeployEventDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployEventDo) Clauses(conds ...clause.Expression) IDeployEventDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployEventDo) Returning(value interface{}, columns ...string) IDeployEventDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployEventDo) Not(conds ...gen.Condition) IDeployEventDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployEventDo) Or(conds ...gen.Condition) IDeployEventDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployEventDo) Select(conds ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployEventDo) Where(conds ...gen.Condition) IDeployEventDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployEventDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployEventDo) Order(conds ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployEventDo) Distinct(cols ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployEventDo) Omit(cols ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployEventDo) Join(table schema.Tabler, on ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployEventDo) Group(cols ...field.Expr) IDeployEventDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployEventDo) Having(conds ...gen.Condition) IDeployEventDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployEventDo) Limit(limit int) IDeployEventDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployEventDo) Offset(offset int) IDeployEventDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployEventDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployEventDo) Unscoped() IDeployEventDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployEventDo) Create(values ...*model.DeployEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployEventDo) CreateInBatches(values []*model.DeployEvent, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployEventDo) Save(values ...*model.DeployEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployEventDo) First() (*model.DeployEvent, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEvent), nil
	}
}

func (d deployEventDo) Take() (*model.DeployEvent, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEvent), nil
	}
}

func (d deployEventDo) Last() (*model.DeployEvent, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEvent), nil
	}
}

func (d deployEventDo) Find() ([]*model.DeployEvent, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployEvent), err
}

func (d deployEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployEvent, err error) {
	buf := make([]*model.DeployEvent, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployEventDo) FindInBatches(result *[]*model.DeployEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployEventDo) Attrs(attrs ...field.AssignExpr) IDeployEventDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployEventDo) Assign(attrs ...field.AssignExpr) IDeployEventDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployEventDo) Joins(fields ...field.RelationField) IDeployEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployEventDo) Preload(fields ...field.RelationField) IDeployEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployEventDo) FirstOrInit() (*model.DeployEvent, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEvent), nil
	}
}

func (d deployEventDo) FirstOrCreate() (*model.DeployEvent, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployEvent), nil
	}
}

func (d deployEventDo) FindByPage(offset int, limit int) (result []*model.DeployEvent, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployEventDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployEventDo) Delete(models ...*model.DeployEvent) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployEventDo) withDO(do gen.Dao) *deployEventDo {
	d.DO = *do.(*gen.DO)
	return d
}
