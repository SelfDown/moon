// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployReplaceEvent(db *gorm.DB, opts ...gen.DOOption) deployReplaceEvent {
	_deployReplaceEvent := deployReplaceEvent{}

	_deployReplaceEvent.deployReplaceEventDo.UseDB(db, opts...)
	_deployReplaceEvent.deployReplaceEventDo.UseModel(&model.DeployReplaceEvent{})

	tableName := _deployReplaceEvent.deployReplaceEventDo.TableName()
	_deployReplaceEvent.ALL = field.NewAsterisk(tableName)
	_deployReplaceEvent.DepRepID = field.NewString(tableName, "dep_rep_id")
	_deployReplaceEvent.OpUser = field.NewString(tableName, "op_user")
	_deployReplaceEvent.OpTime = field.NewTime(tableName, "op_time")
	_deployReplaceEvent.HospitalArea = field.NewString(tableName, "hospital_area")
	_deployReplaceEvent.EnvCode = field.NewString(tableName, "env_code")
	_deployReplaceEvent.CreateTime = field.NewTime(tableName, "create_time")
	_deployReplaceEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployReplaceEvent.Comments = field.NewString(tableName, "comments")

	_deployReplaceEvent.fillFieldMap()

	return _deployReplaceEvent
}

type deployReplaceEvent struct {
	deployReplaceEventDo

	ALL          field.Asterisk
	DepRepID     field.String
	OpUser       field.String // 操作员
	OpTime       field.Time   // 操作时间
	HospitalArea field.String // 院区
	EnvCode      field.String
	CreateTime   field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time   // 记录修改时间（数据库自动写入）
	Comments     field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d deployReplaceEvent) Table(newTableName string) *deployReplaceEvent {
	d.deployReplaceEventDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployReplaceEvent) As(alias string) *deployReplaceEvent {
	d.deployReplaceEventDo.DO = *(d.deployReplaceEventDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployReplaceEvent) updateTableName(table string) *deployReplaceEvent {
	d.ALL = field.NewAsterisk(table)
	d.DepRepID = field.NewString(table, "dep_rep_id")
	d.OpUser = field.NewString(table, "op_user")
	d.OpTime = field.NewTime(table, "op_time")
	d.HospitalArea = field.NewString(table, "hospital_area")
	d.EnvCode = field.NewString(table, "env_code")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deployReplaceEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployReplaceEvent) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["dep_rep_id"] = d.DepRepID
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["op_time"] = d.OpTime
	d.fieldMap["hospital_area"] = d.HospitalArea
	d.fieldMap["env_code"] = d.EnvCode
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d deployReplaceEvent) clone(db *gorm.DB) deployReplaceEvent {
	d.deployReplaceEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployReplaceEvent) replaceDB(db *gorm.DB) deployReplaceEvent {
	d.deployReplaceEventDo.ReplaceDB(db)
	return d
}

type deployReplaceEventDo struct{ gen.DO }

type IDeployReplaceEventDo interface {
	gen.SubQuery
	Debug() IDeployReplaceEventDo
	WithContext(ctx context.Context) IDeployReplaceEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployReplaceEventDo
	WriteDB() IDeployReplaceEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployReplaceEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployReplaceEventDo
	Not(conds ...gen.Condition) IDeployReplaceEventDo
	Or(conds ...gen.Condition) IDeployReplaceEventDo
	Select(conds ...field.Expr) IDeployReplaceEventDo
	Where(conds ...gen.Condition) IDeployReplaceEventDo
	Order(conds ...field.Expr) IDeployReplaceEventDo
	Distinct(cols ...field.Expr) IDeployReplaceEventDo
	Omit(cols ...field.Expr) IDeployReplaceEventDo
	Join(table schema.Tabler, on ...field.Expr) IDeployReplaceEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceEventDo
	Group(cols ...field.Expr) IDeployReplaceEventDo
	Having(conds ...gen.Condition) IDeployReplaceEventDo
	Limit(limit int) IDeployReplaceEventDo
	Offset(offset int) IDeployReplaceEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployReplaceEventDo
	Unscoped() IDeployReplaceEventDo
	Create(values ...*model.DeployReplaceEvent) error
	CreateInBatches(values []*model.DeployReplaceEvent, batchSize int) error
	Save(values ...*model.DeployReplaceEvent) error
	First() (*model.DeployReplaceEvent, error)
	Take() (*model.DeployReplaceEvent, error)
	Last() (*model.DeployReplaceEvent, error)
	Find() ([]*model.DeployReplaceEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployReplaceEvent, err error)
	FindInBatches(result *[]*model.DeployReplaceEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployReplaceEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployReplaceEventDo
	Assign(attrs ...field.AssignExpr) IDeployReplaceEventDo
	Joins(fields ...field.RelationField) IDeployReplaceEventDo
	Preload(fields ...field.RelationField) IDeployReplaceEventDo
	FirstOrInit() (*model.DeployReplaceEvent, error)
	FirstOrCreate() (*model.DeployReplaceEvent, error)
	FindByPage(offset int, limit int) (result []*model.DeployReplaceEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployReplaceEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployReplaceEventDo) Debug() IDeployReplaceEventDo {
	return d.withDO(d.DO.Debug())
}

func (d deployReplaceEventDo) WithContext(ctx context.Context) IDeployReplaceEventDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployReplaceEventDo) ReadDB() IDeployReplaceEventDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployReplaceEventDo) WriteDB() IDeployReplaceEventDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployReplaceEventDo) Session(config *gorm.Session) IDeployReplaceEventDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployReplaceEventDo) Clauses(conds ...clause.Expression) IDeployReplaceEventDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployReplaceEventDo) Returning(value interface{}, columns ...string) IDeployReplaceEventDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployReplaceEventDo) Not(conds ...gen.Condition) IDeployReplaceEventDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployReplaceEventDo) Or(conds ...gen.Condition) IDeployReplaceEventDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployReplaceEventDo) Select(conds ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployReplaceEventDo) Where(conds ...gen.Condition) IDeployReplaceEventDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployReplaceEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployReplaceEventDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployReplaceEventDo) Order(conds ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployReplaceEventDo) Distinct(cols ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployReplaceEventDo) Omit(cols ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployReplaceEventDo) Join(table schema.Tabler, on ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployReplaceEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployReplaceEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployReplaceEventDo) Group(cols ...field.Expr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployReplaceEventDo) Having(conds ...gen.Condition) IDeployReplaceEventDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployReplaceEventDo) Limit(limit int) IDeployReplaceEventDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployReplaceEventDo) Offset(offset int) IDeployReplaceEventDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployReplaceEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployReplaceEventDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployReplaceEventDo) Unscoped() IDeployReplaceEventDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployReplaceEventDo) Create(values ...*model.DeployReplaceEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployReplaceEventDo) CreateInBatches(values []*model.DeployReplaceEvent, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployReplaceEventDo) Save(values ...*model.DeployReplaceEvent) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployReplaceEventDo) First() (*model.DeployReplaceEvent, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceEvent), nil
	}
}

func (d deployReplaceEventDo) Take() (*model.DeployReplaceEvent, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceEvent), nil
	}
}

func (d deployReplaceEventDo) Last() (*model.DeployReplaceEvent, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceEvent), nil
	}
}

func (d deployReplaceEventDo) Find() ([]*model.DeployReplaceEvent, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployReplaceEvent), err
}

func (d deployReplaceEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployReplaceEvent, err error) {
	buf := make([]*model.DeployReplaceEvent, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployReplaceEventDo) FindInBatches(result *[]*model.DeployReplaceEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployReplaceEventDo) Attrs(attrs ...field.AssignExpr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployReplaceEventDo) Assign(attrs ...field.AssignExpr) IDeployReplaceEventDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployReplaceEventDo) Joins(fields ...field.RelationField) IDeployReplaceEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployReplaceEventDo) Preload(fields ...field.RelationField) IDeployReplaceEventDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployReplaceEventDo) FirstOrInit() (*model.DeployReplaceEvent, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceEvent), nil
	}
}

func (d deployReplaceEventDo) FirstOrCreate() (*model.DeployReplaceEvent, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceEvent), nil
	}
}

func (d deployReplaceEventDo) FindByPage(offset int, limit int) (result []*model.DeployReplaceEvent, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployReplaceEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployReplaceEventDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployReplaceEventDo) Delete(models ...*model.DeployReplaceEvent) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployReplaceEventDo) withDO(do gen.Dao) *deployReplaceEventDo {
	d.DO = *do.(*gen.DO)
	return d
}
