// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployReplaceWar(db *gorm.DB, opts ...gen.DOOption) deployReplaceWar {
	_deployReplaceWar := deployReplaceWar{}

	_deployReplaceWar.deployReplaceWarDo.UseDB(db, opts...)
	_deployReplaceWar.deployReplaceWarDo.UseModel(&model.DeployReplaceWar{})

	tableName := _deployReplaceWar.deployReplaceWarDo.TableName()
	_deployReplaceWar.ALL = field.NewAsterisk(tableName)
	_deployReplaceWar.RepWarID = field.NewString(tableName, "rep_war_id")
	_deployReplaceWar.DepRepID = field.NewString(tableName, "dep_rep_id")
	_deployReplaceWar.GlobalParamID = field.NewString(tableName, "global_param_id")
	_deployReplaceWar.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_deployReplaceWar.WarGroupid = field.NewString(tableName, "war_groupid")
	_deployReplaceWar.WarVersion = field.NewString(tableName, "war_version")
	_deployReplaceWar.WarRepLocation = field.NewString(tableName, "war_rep_location")
	_deployReplaceWar.CreateTime = field.NewTime(tableName, "create_time")
	_deployReplaceWar.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployReplaceWar.Comments = field.NewString(tableName, "comments")
	_deployReplaceWar.DepEventID = field.NewString(tableName, "dep_event_id")

	_deployReplaceWar.fillFieldMap()

	return _deployReplaceWar
}

type deployReplaceWar struct {
	deployReplaceWarDo

	ALL            field.Asterisk
	RepWarID       field.String
	DepRepID       field.String // 对应的替换事件
	GlobalParamID  field.String // global配置文件
	WarArtifactid  field.String
	WarGroupid     field.String
	WarVersion     field.String // war包版本，注意这个版本号是前端输入的
	WarRepLocation field.String // 替换后文件存放的路径
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明
	DepEventID     field.String

	fieldMap map[string]field.Expr
}

func (d deployReplaceWar) Table(newTableName string) *deployReplaceWar {
	d.deployReplaceWarDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployReplaceWar) As(alias string) *deployReplaceWar {
	d.deployReplaceWarDo.DO = *(d.deployReplaceWarDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployReplaceWar) updateTableName(table string) *deployReplaceWar {
	d.ALL = field.NewAsterisk(table)
	d.RepWarID = field.NewString(table, "rep_war_id")
	d.DepRepID = field.NewString(table, "dep_rep_id")
	d.GlobalParamID = field.NewString(table, "global_param_id")
	d.WarArtifactid = field.NewString(table, "war_artifactid")
	d.WarGroupid = field.NewString(table, "war_groupid")
	d.WarVersion = field.NewString(table, "war_version")
	d.WarRepLocation = field.NewString(table, "war_rep_location")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")
	d.DepEventID = field.NewString(table, "dep_event_id")

	d.fillFieldMap()

	return d
}

func (d *deployReplaceWar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployReplaceWar) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["rep_war_id"] = d.RepWarID
	d.fieldMap["dep_rep_id"] = d.DepRepID
	d.fieldMap["global_param_id"] = d.GlobalParamID
	d.fieldMap["war_artifactid"] = d.WarArtifactid
	d.fieldMap["war_groupid"] = d.WarGroupid
	d.fieldMap["war_version"] = d.WarVersion
	d.fieldMap["war_rep_location"] = d.WarRepLocation
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
	d.fieldMap["dep_event_id"] = d.DepEventID
}

func (d deployReplaceWar) clone(db *gorm.DB) deployReplaceWar {
	d.deployReplaceWarDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployReplaceWar) replaceDB(db *gorm.DB) deployReplaceWar {
	d.deployReplaceWarDo.ReplaceDB(db)
	return d
}

type deployReplaceWarDo struct{ gen.DO }

type IDeployReplaceWarDo interface {
	gen.SubQuery
	Debug() IDeployReplaceWarDo
	WithContext(ctx context.Context) IDeployReplaceWarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployReplaceWarDo
	WriteDB() IDeployReplaceWarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployReplaceWarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployReplaceWarDo
	Not(conds ...gen.Condition) IDeployReplaceWarDo
	Or(conds ...gen.Condition) IDeployReplaceWarDo
	Select(conds ...field.Expr) IDeployReplaceWarDo
	Where(conds ...gen.Condition) IDeployReplaceWarDo
	Order(conds ...field.Expr) IDeployReplaceWarDo
	Distinct(cols ...field.Expr) IDeployReplaceWarDo
	Omit(cols ...field.Expr) IDeployReplaceWarDo
	Join(table schema.Tabler, on ...field.Expr) IDeployReplaceWarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceWarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceWarDo
	Group(cols ...field.Expr) IDeployReplaceWarDo
	Having(conds ...gen.Condition) IDeployReplaceWarDo
	Limit(limit int) IDeployReplaceWarDo
	Offset(offset int) IDeployReplaceWarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployReplaceWarDo
	Unscoped() IDeployReplaceWarDo
	Create(values ...*model.DeployReplaceWar) error
	CreateInBatches(values []*model.DeployReplaceWar, batchSize int) error
	Save(values ...*model.DeployReplaceWar) error
	First() (*model.DeployReplaceWar, error)
	Take() (*model.DeployReplaceWar, error)
	Last() (*model.DeployReplaceWar, error)
	Find() ([]*model.DeployReplaceWar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployReplaceWar, err error)
	FindInBatches(result *[]*model.DeployReplaceWar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployReplaceWar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployReplaceWarDo
	Assign(attrs ...field.AssignExpr) IDeployReplaceWarDo
	Joins(fields ...field.RelationField) IDeployReplaceWarDo
	Preload(fields ...field.RelationField) IDeployReplaceWarDo
	FirstOrInit() (*model.DeployReplaceWar, error)
	FirstOrCreate() (*model.DeployReplaceWar, error)
	FindByPage(offset int, limit int) (result []*model.DeployReplaceWar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployReplaceWarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployReplaceWarDo) Debug() IDeployReplaceWarDo {
	return d.withDO(d.DO.Debug())
}

func (d deployReplaceWarDo) WithContext(ctx context.Context) IDeployReplaceWarDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployReplaceWarDo) ReadDB() IDeployReplaceWarDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployReplaceWarDo) WriteDB() IDeployReplaceWarDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployReplaceWarDo) Session(config *gorm.Session) IDeployReplaceWarDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployReplaceWarDo) Clauses(conds ...clause.Expression) IDeployReplaceWarDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployReplaceWarDo) Returning(value interface{}, columns ...string) IDeployReplaceWarDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployReplaceWarDo) Not(conds ...gen.Condition) IDeployReplaceWarDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployReplaceWarDo) Or(conds ...gen.Condition) IDeployReplaceWarDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployReplaceWarDo) Select(conds ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployReplaceWarDo) Where(conds ...gen.Condition) IDeployReplaceWarDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployReplaceWarDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployReplaceWarDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployReplaceWarDo) Order(conds ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployReplaceWarDo) Distinct(cols ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployReplaceWarDo) Omit(cols ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployReplaceWarDo) Join(table schema.Tabler, on ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployReplaceWarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployReplaceWarDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployReplaceWarDo) Group(cols ...field.Expr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployReplaceWarDo) Having(conds ...gen.Condition) IDeployReplaceWarDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployReplaceWarDo) Limit(limit int) IDeployReplaceWarDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployReplaceWarDo) Offset(offset int) IDeployReplaceWarDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployReplaceWarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployReplaceWarDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployReplaceWarDo) Unscoped() IDeployReplaceWarDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployReplaceWarDo) Create(values ...*model.DeployReplaceWar) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployReplaceWarDo) CreateInBatches(values []*model.DeployReplaceWar, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployReplaceWarDo) Save(values ...*model.DeployReplaceWar) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployReplaceWarDo) First() (*model.DeployReplaceWar, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceWar), nil
	}
}

func (d deployReplaceWarDo) Take() (*model.DeployReplaceWar, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceWar), nil
	}
}

func (d deployReplaceWarDo) Last() (*model.DeployReplaceWar, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceWar), nil
	}
}

func (d deployReplaceWarDo) Find() ([]*model.DeployReplaceWar, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployReplaceWar), err
}

func (d deployReplaceWarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployReplaceWar, err error) {
	buf := make([]*model.DeployReplaceWar, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployReplaceWarDo) FindInBatches(result *[]*model.DeployReplaceWar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployReplaceWarDo) Attrs(attrs ...field.AssignExpr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployReplaceWarDo) Assign(attrs ...field.AssignExpr) IDeployReplaceWarDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployReplaceWarDo) Joins(fields ...field.RelationField) IDeployReplaceWarDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployReplaceWarDo) Preload(fields ...field.RelationField) IDeployReplaceWarDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployReplaceWarDo) FirstOrInit() (*model.DeployReplaceWar, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceWar), nil
	}
}

func (d deployReplaceWarDo) FirstOrCreate() (*model.DeployReplaceWar, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReplaceWar), nil
	}
}

func (d deployReplaceWarDo) FindByPage(offset int, limit int) (result []*model.DeployReplaceWar, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployReplaceWarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployReplaceWarDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployReplaceWarDo) Delete(models ...*model.DeployReplaceWar) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployReplaceWarDo) withDO(do gen.Dao) *deployReplaceWarDo {
	d.DO = *do.(*gen.DO)
	return d
}
