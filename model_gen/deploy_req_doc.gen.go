// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployReqDoc(db *gorm.DB, opts ...gen.DOOption) deployReqDoc {
	_deployReqDoc := deployReqDoc{}

	_deployReqDoc.deployReqDocDo.UseDB(db, opts...)
	_deployReqDoc.deployReqDocDo.UseModel(&model.DeployReqDoc{})

	tableName := _deployReqDoc.deployReqDocDo.TableName()
	_deployReqDoc.ALL = field.NewAsterisk(tableName)
	_deployReqDoc.ReqDocID = field.NewString(tableName, "req_doc_id")
	_deployReqDoc.ReqDocName = field.NewString(tableName, "req_doc_name")
	_deployReqDoc.DevUser = field.NewString(tableName, "dev_user")
	_deployReqDoc.TestUser = field.NewString(tableName, "test_user")
	_deployReqDoc.SrUser = field.NewString(tableName, "sr_user")
	_deployReqDoc.ReqTime = field.NewTime(tableName, "req_time")
	_deployReqDoc.ReqNotes = field.NewString(tableName, "req_notes")
	_deployReqDoc.CheckFlag = field.NewInt32(tableName, "check_flag")
	_deployReqDoc.CreateTime = field.NewTime(tableName, "create_time")
	_deployReqDoc.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployReqDoc.Comments = field.NewString(tableName, "comments")

	_deployReqDoc.fillFieldMap()

	return _deployReqDoc
}

type deployReqDoc struct {
	deployReqDocDo

	ALL        field.Asterisk
	ReqDocID   field.String // 确认单申请ID
	ReqDocName field.String
	DevUser    field.String
	TestUser   field.String
	SrUser     field.String
	ReqTime    field.Time
	ReqNotes   field.String
	CheckFlag  field.Int32
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d deployReqDoc) Table(newTableName string) *deployReqDoc {
	d.deployReqDocDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployReqDoc) As(alias string) *deployReqDoc {
	d.deployReqDocDo.DO = *(d.deployReqDocDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployReqDoc) updateTableName(table string) *deployReqDoc {
	d.ALL = field.NewAsterisk(table)
	d.ReqDocID = field.NewString(table, "req_doc_id")
	d.ReqDocName = field.NewString(table, "req_doc_name")
	d.DevUser = field.NewString(table, "dev_user")
	d.TestUser = field.NewString(table, "test_user")
	d.SrUser = field.NewString(table, "sr_user")
	d.ReqTime = field.NewTime(table, "req_time")
	d.ReqNotes = field.NewString(table, "req_notes")
	d.CheckFlag = field.NewInt32(table, "check_flag")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deployReqDoc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployReqDoc) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["req_doc_id"] = d.ReqDocID
	d.fieldMap["req_doc_name"] = d.ReqDocName
	d.fieldMap["dev_user"] = d.DevUser
	d.fieldMap["test_user"] = d.TestUser
	d.fieldMap["sr_user"] = d.SrUser
	d.fieldMap["req_time"] = d.ReqTime
	d.fieldMap["req_notes"] = d.ReqNotes
	d.fieldMap["check_flag"] = d.CheckFlag
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d deployReqDoc) clone(db *gorm.DB) deployReqDoc {
	d.deployReqDocDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployReqDoc) replaceDB(db *gorm.DB) deployReqDoc {
	d.deployReqDocDo.ReplaceDB(db)
	return d
}

type deployReqDocDo struct{ gen.DO }

type IDeployReqDocDo interface {
	gen.SubQuery
	Debug() IDeployReqDocDo
	WithContext(ctx context.Context) IDeployReqDocDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployReqDocDo
	WriteDB() IDeployReqDocDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployReqDocDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployReqDocDo
	Not(conds ...gen.Condition) IDeployReqDocDo
	Or(conds ...gen.Condition) IDeployReqDocDo
	Select(conds ...field.Expr) IDeployReqDocDo
	Where(conds ...gen.Condition) IDeployReqDocDo
	Order(conds ...field.Expr) IDeployReqDocDo
	Distinct(cols ...field.Expr) IDeployReqDocDo
	Omit(cols ...field.Expr) IDeployReqDocDo
	Join(table schema.Tabler, on ...field.Expr) IDeployReqDocDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployReqDocDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployReqDocDo
	Group(cols ...field.Expr) IDeployReqDocDo
	Having(conds ...gen.Condition) IDeployReqDocDo
	Limit(limit int) IDeployReqDocDo
	Offset(offset int) IDeployReqDocDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployReqDocDo
	Unscoped() IDeployReqDocDo
	Create(values ...*model.DeployReqDoc) error
	CreateInBatches(values []*model.DeployReqDoc, batchSize int) error
	Save(values ...*model.DeployReqDoc) error
	First() (*model.DeployReqDoc, error)
	Take() (*model.DeployReqDoc, error)
	Last() (*model.DeployReqDoc, error)
	Find() ([]*model.DeployReqDoc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployReqDoc, err error)
	FindInBatches(result *[]*model.DeployReqDoc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployReqDoc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployReqDocDo
	Assign(attrs ...field.AssignExpr) IDeployReqDocDo
	Joins(fields ...field.RelationField) IDeployReqDocDo
	Preload(fields ...field.RelationField) IDeployReqDocDo
	FirstOrInit() (*model.DeployReqDoc, error)
	FirstOrCreate() (*model.DeployReqDoc, error)
	FindByPage(offset int, limit int) (result []*model.DeployReqDoc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployReqDocDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployReqDocDo) Debug() IDeployReqDocDo {
	return d.withDO(d.DO.Debug())
}

func (d deployReqDocDo) WithContext(ctx context.Context) IDeployReqDocDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployReqDocDo) ReadDB() IDeployReqDocDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployReqDocDo) WriteDB() IDeployReqDocDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployReqDocDo) Session(config *gorm.Session) IDeployReqDocDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployReqDocDo) Clauses(conds ...clause.Expression) IDeployReqDocDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployReqDocDo) Returning(value interface{}, columns ...string) IDeployReqDocDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployReqDocDo) Not(conds ...gen.Condition) IDeployReqDocDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployReqDocDo) Or(conds ...gen.Condition) IDeployReqDocDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployReqDocDo) Select(conds ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployReqDocDo) Where(conds ...gen.Condition) IDeployReqDocDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployReqDocDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployReqDocDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployReqDocDo) Order(conds ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployReqDocDo) Distinct(cols ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployReqDocDo) Omit(cols ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployReqDocDo) Join(table schema.Tabler, on ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployReqDocDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployReqDocDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployReqDocDo) Group(cols ...field.Expr) IDeployReqDocDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployReqDocDo) Having(conds ...gen.Condition) IDeployReqDocDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployReqDocDo) Limit(limit int) IDeployReqDocDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployReqDocDo) Offset(offset int) IDeployReqDocDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployReqDocDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployReqDocDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployReqDocDo) Unscoped() IDeployReqDocDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployReqDocDo) Create(values ...*model.DeployReqDoc) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployReqDocDo) CreateInBatches(values []*model.DeployReqDoc, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployReqDocDo) Save(values ...*model.DeployReqDoc) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployReqDocDo) First() (*model.DeployReqDoc, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReqDoc), nil
	}
}

func (d deployReqDocDo) Take() (*model.DeployReqDoc, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReqDoc), nil
	}
}

func (d deployReqDocDo) Last() (*model.DeployReqDoc, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReqDoc), nil
	}
}

func (d deployReqDocDo) Find() ([]*model.DeployReqDoc, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployReqDoc), err
}

func (d deployReqDocDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployReqDoc, err error) {
	buf := make([]*model.DeployReqDoc, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployReqDocDo) FindInBatches(result *[]*model.DeployReqDoc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployReqDocDo) Attrs(attrs ...field.AssignExpr) IDeployReqDocDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployReqDocDo) Assign(attrs ...field.AssignExpr) IDeployReqDocDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployReqDocDo) Joins(fields ...field.RelationField) IDeployReqDocDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployReqDocDo) Preload(fields ...field.RelationField) IDeployReqDocDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployReqDocDo) FirstOrInit() (*model.DeployReqDoc, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReqDoc), nil
	}
}

func (d deployReqDocDo) FirstOrCreate() (*model.DeployReqDoc, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployReqDoc), nil
	}
}

func (d deployReqDocDo) FindByPage(offset int, limit int) (result []*model.DeployReqDoc, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployReqDocDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployReqDocDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployReqDocDo) Delete(models ...*model.DeployReqDoc) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployReqDocDo) withDO(do gen.Dao) *deployReqDocDo {
	d.DO = *do.(*gen.DO)
	return d
}
