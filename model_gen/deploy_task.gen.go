// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployTask(db *gorm.DB, opts ...gen.DOOption) deployTask {
	_deployTask := deployTask{}

	_deployTask.deployTaskDo.UseDB(db, opts...)
	_deployTask.deployTaskDo.UseModel(&model.DeployTask{})

	tableName := _deployTask.deployTaskDo.TableName()
	_deployTask.ALL = field.NewAsterisk(tableName)
	_deployTask.DeployTaskID = field.NewString(tableName, "deploy_task_id")
	_deployTask.DeployConfigJSON = field.NewString(tableName, "deploy_config_json")
	_deployTask.ServerEnvID = field.NewString(tableName, "server_env_id")
	_deployTask.OpUser = field.NewString(tableName, "op_user")
	_deployTask.Step = field.NewString(tableName, "step")
	_deployTask.ServerStatus = field.NewString(tableName, "server_status")
	_deployTask.UserStatus = field.NewString(tableName, "user_status")
	_deployTask.SoftStatus = field.NewString(tableName, "soft_status")
	_deployTask.WarStatus = field.NewString(tableName, "war_status")
	_deployTask.ParamStatus = field.NewString(tableName, "param_status")
	_deployTask.DeployTasklistStatus = field.NewString(tableName, "deploy_tasklist_status")
	_deployTask.PreStatus = field.NewString(tableName, "pre_status")
	_deployTask.EnvStatus = field.NewString(tableName, "env_status")
	_deployTask.IsNewest = field.NewString(tableName, "is_newest")
	_deployTask.CreateTime = field.NewTime(tableName, "create_time")
	_deployTask.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployTask.Comments = field.NewString(tableName, "comments")

	_deployTask.fillFieldMap()

	return _deployTask
}

type deployTask struct {
	deployTaskDo

	ALL                  field.Asterisk
	DeployTaskID         field.String
	DeployConfigJSON     field.String
	ServerEnvID          field.String
	OpUser               field.String
	Step                 field.String
	ServerStatus         field.String
	UserStatus           field.String
	SoftStatus           field.String
	WarStatus            field.String
	ParamStatus          field.String
	DeployTasklistStatus field.String
	PreStatus            field.String
	EnvStatus            field.String
	IsNewest             field.String
	CreateTime           field.Time
	ModifyTime           field.Time
	Comments             field.String

	fieldMap map[string]field.Expr
}

func (d deployTask) Table(newTableName string) *deployTask {
	d.deployTaskDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployTask) As(alias string) *deployTask {
	d.deployTaskDo.DO = *(d.deployTaskDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployTask) updateTableName(table string) *deployTask {
	d.ALL = field.NewAsterisk(table)
	d.DeployTaskID = field.NewString(table, "deploy_task_id")
	d.DeployConfigJSON = field.NewString(table, "deploy_config_json")
	d.ServerEnvID = field.NewString(table, "server_env_id")
	d.OpUser = field.NewString(table, "op_user")
	d.Step = field.NewString(table, "step")
	d.ServerStatus = field.NewString(table, "server_status")
	d.UserStatus = field.NewString(table, "user_status")
	d.SoftStatus = field.NewString(table, "soft_status")
	d.WarStatus = field.NewString(table, "war_status")
	d.ParamStatus = field.NewString(table, "param_status")
	d.DeployTasklistStatus = field.NewString(table, "deploy_tasklist_status")
	d.PreStatus = field.NewString(table, "pre_status")
	d.EnvStatus = field.NewString(table, "env_status")
	d.IsNewest = field.NewString(table, "is_newest")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deployTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployTask) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 17)
	d.fieldMap["deploy_task_id"] = d.DeployTaskID
	d.fieldMap["deploy_config_json"] = d.DeployConfigJSON
	d.fieldMap["server_env_id"] = d.ServerEnvID
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["step"] = d.Step
	d.fieldMap["server_status"] = d.ServerStatus
	d.fieldMap["user_status"] = d.UserStatus
	d.fieldMap["soft_status"] = d.SoftStatus
	d.fieldMap["war_status"] = d.WarStatus
	d.fieldMap["param_status"] = d.ParamStatus
	d.fieldMap["deploy_tasklist_status"] = d.DeployTasklistStatus
	d.fieldMap["pre_status"] = d.PreStatus
	d.fieldMap["env_status"] = d.EnvStatus
	d.fieldMap["is_newest"] = d.IsNewest
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d deployTask) clone(db *gorm.DB) deployTask {
	d.deployTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployTask) replaceDB(db *gorm.DB) deployTask {
	d.deployTaskDo.ReplaceDB(db)
	return d
}

type deployTaskDo struct{ gen.DO }

type IDeployTaskDo interface {
	gen.SubQuery
	Debug() IDeployTaskDo
	WithContext(ctx context.Context) IDeployTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployTaskDo
	WriteDB() IDeployTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployTaskDo
	Not(conds ...gen.Condition) IDeployTaskDo
	Or(conds ...gen.Condition) IDeployTaskDo
	Select(conds ...field.Expr) IDeployTaskDo
	Where(conds ...gen.Condition) IDeployTaskDo
	Order(conds ...field.Expr) IDeployTaskDo
	Distinct(cols ...field.Expr) IDeployTaskDo
	Omit(cols ...field.Expr) IDeployTaskDo
	Join(table schema.Tabler, on ...field.Expr) IDeployTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployTaskDo
	Group(cols ...field.Expr) IDeployTaskDo
	Having(conds ...gen.Condition) IDeployTaskDo
	Limit(limit int) IDeployTaskDo
	Offset(offset int) IDeployTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTaskDo
	Unscoped() IDeployTaskDo
	Create(values ...*model.DeployTask) error
	CreateInBatches(values []*model.DeployTask, batchSize int) error
	Save(values ...*model.DeployTask) error
	First() (*model.DeployTask, error)
	Take() (*model.DeployTask, error)
	Last() (*model.DeployTask, error)
	Find() ([]*model.DeployTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTask, err error)
	FindInBatches(result *[]*model.DeployTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployTaskDo
	Assign(attrs ...field.AssignExpr) IDeployTaskDo
	Joins(fields ...field.RelationField) IDeployTaskDo
	Preload(fields ...field.RelationField) IDeployTaskDo
	FirstOrInit() (*model.DeployTask, error)
	FirstOrCreate() (*model.DeployTask, error)
	FindByPage(offset int, limit int) (result []*model.DeployTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployTaskDo) Debug() IDeployTaskDo {
	return d.withDO(d.DO.Debug())
}

func (d deployTaskDo) WithContext(ctx context.Context) IDeployTaskDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployTaskDo) ReadDB() IDeployTaskDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployTaskDo) WriteDB() IDeployTaskDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployTaskDo) Session(config *gorm.Session) IDeployTaskDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployTaskDo) Clauses(conds ...clause.Expression) IDeployTaskDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployTaskDo) Returning(value interface{}, columns ...string) IDeployTaskDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployTaskDo) Not(conds ...gen.Condition) IDeployTaskDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployTaskDo) Or(conds ...gen.Condition) IDeployTaskDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployTaskDo) Select(conds ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployTaskDo) Where(conds ...gen.Condition) IDeployTaskDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployTaskDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployTaskDo) Order(conds ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployTaskDo) Distinct(cols ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployTaskDo) Omit(cols ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployTaskDo) Join(table schema.Tabler, on ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployTaskDo) Group(cols ...field.Expr) IDeployTaskDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployTaskDo) Having(conds ...gen.Condition) IDeployTaskDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployTaskDo) Limit(limit int) IDeployTaskDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployTaskDo) Offset(offset int) IDeployTaskDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTaskDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployTaskDo) Unscoped() IDeployTaskDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployTaskDo) Create(values ...*model.DeployTask) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployTaskDo) CreateInBatches(values []*model.DeployTask, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployTaskDo) Save(values ...*model.DeployTask) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployTaskDo) First() (*model.DeployTask, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTask), nil
	}
}

func (d deployTaskDo) Take() (*model.DeployTask, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTask), nil
	}
}

func (d deployTaskDo) Last() (*model.DeployTask, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTask), nil
	}
}

func (d deployTaskDo) Find() ([]*model.DeployTask, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployTask), err
}

func (d deployTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTask, err error) {
	buf := make([]*model.DeployTask, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployTaskDo) FindInBatches(result *[]*model.DeployTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployTaskDo) Attrs(attrs ...field.AssignExpr) IDeployTaskDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployTaskDo) Assign(attrs ...field.AssignExpr) IDeployTaskDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployTaskDo) Joins(fields ...field.RelationField) IDeployTaskDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployTaskDo) Preload(fields ...field.RelationField) IDeployTaskDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployTaskDo) FirstOrInit() (*model.DeployTask, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTask), nil
	}
}

func (d deployTaskDo) FirstOrCreate() (*model.DeployTask, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTask), nil
	}
}

func (d deployTaskDo) FindByPage(offset int, limit int) (result []*model.DeployTask, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployTaskDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployTaskDo) Delete(models ...*model.DeployTask) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployTaskDo) withDO(do gen.Dao) *deployTaskDo {
	d.DO = *do.(*gen.DO)
	return d
}
