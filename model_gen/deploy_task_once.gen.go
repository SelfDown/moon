// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployTaskOnce(db *gorm.DB, opts ...gen.DOOption) deployTaskOnce {
	_deployTaskOnce := deployTaskOnce{}

	_deployTaskOnce.deployTaskOnceDo.UseDB(db, opts...)
	_deployTaskOnce.deployTaskOnceDo.UseModel(&model.DeployTaskOnce{})

	tableName := _deployTaskOnce.deployTaskOnceDo.TableName()
	_deployTaskOnce.ALL = field.NewAsterisk(tableName)
	_deployTaskOnce.DepTaskID = field.NewString(tableName, "dep_task_id")
	_deployTaskOnce.DepEventID = field.NewString(tableName, "dep_event_id")
	_deployTaskOnce.GlobalParamID = field.NewString(tableName, "global_param_id")
	_deployTaskOnce.RepWarID = field.NewString(tableName, "rep_war_id")
	_deployTaskOnce.ServerID = field.NewString(tableName, "server_id")
	_deployTaskOnce.ServerIP = field.NewString(tableName, "server_ip")
	_deployTaskOnce.WarVersion = field.NewString(tableName, "war_version")
	_deployTaskOnce.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_deployTaskOnce.Notes = field.NewString(tableName, "notes")
	_deployTaskOnce.Deploydir = field.NewString(tableName, "deploydir")
	_deployTaskOnce.DepInfo = field.NewString(tableName, "dep_info")
	_deployTaskOnce.OldWarVersion = field.NewString(tableName, "old_war_version")
	_deployTaskOnce.CreateTime = field.NewTime(tableName, "create_time")
	_deployTaskOnce.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployTaskOnce.Comments = field.NewString(tableName, "comments")

	_deployTaskOnce.fillFieldMap()

	return _deployTaskOnce
}

type deployTaskOnce struct {
	deployTaskOnceDo

	ALL           field.Asterisk
	DepTaskID     field.String
	DepEventID    field.String // 对应的配置文件ID
	GlobalParamID field.String // 对应的配置文件信息
	RepWarID      field.String // 对应的替换war信息
	ServerID      field.String // 服务器ID
	ServerIP      field.String // 服务器IP
	WarVersion    field.String
	WarArtifactid field.String
	Notes         field.String
	Deploydir     field.String // 部署目录
	DepInfo       field.String // 部署的最新结果信息，比如失败后的堆栈信息
	OldWarVersion field.String // 上一次部署的版本，用于版本回退提供信息。
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d deployTaskOnce) Table(newTableName string) *deployTaskOnce {
	d.deployTaskOnceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployTaskOnce) As(alias string) *deployTaskOnce {
	d.deployTaskOnceDo.DO = *(d.deployTaskOnceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployTaskOnce) updateTableName(table string) *deployTaskOnce {
	d.ALL = field.NewAsterisk(table)
	d.DepTaskID = field.NewString(table, "dep_task_id")
	d.DepEventID = field.NewString(table, "dep_event_id")
	d.GlobalParamID = field.NewString(table, "global_param_id")
	d.RepWarID = field.NewString(table, "rep_war_id")
	d.ServerID = field.NewString(table, "server_id")
	d.ServerIP = field.NewString(table, "server_ip")
	d.WarVersion = field.NewString(table, "war_version")
	d.WarArtifactid = field.NewString(table, "war_artifactid")
	d.Notes = field.NewString(table, "notes")
	d.Deploydir = field.NewString(table, "deploydir")
	d.DepInfo = field.NewString(table, "dep_info")
	d.OldWarVersion = field.NewString(table, "old_war_version")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deployTaskOnce) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployTaskOnce) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["dep_task_id"] = d.DepTaskID
	d.fieldMap["dep_event_id"] = d.DepEventID
	d.fieldMap["global_param_id"] = d.GlobalParamID
	d.fieldMap["rep_war_id"] = d.RepWarID
	d.fieldMap["server_id"] = d.ServerID
	d.fieldMap["server_ip"] = d.ServerIP
	d.fieldMap["war_version"] = d.WarVersion
	d.fieldMap["war_artifactid"] = d.WarArtifactid
	d.fieldMap["notes"] = d.Notes
	d.fieldMap["deploydir"] = d.Deploydir
	d.fieldMap["dep_info"] = d.DepInfo
	d.fieldMap["old_war_version"] = d.OldWarVersion
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d deployTaskOnce) clone(db *gorm.DB) deployTaskOnce {
	d.deployTaskOnceDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployTaskOnce) replaceDB(db *gorm.DB) deployTaskOnce {
	d.deployTaskOnceDo.ReplaceDB(db)
	return d
}

type deployTaskOnceDo struct{ gen.DO }

type IDeployTaskOnceDo interface {
	gen.SubQuery
	Debug() IDeployTaskOnceDo
	WithContext(ctx context.Context) IDeployTaskOnceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployTaskOnceDo
	WriteDB() IDeployTaskOnceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployTaskOnceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployTaskOnceDo
	Not(conds ...gen.Condition) IDeployTaskOnceDo
	Or(conds ...gen.Condition) IDeployTaskOnceDo
	Select(conds ...field.Expr) IDeployTaskOnceDo
	Where(conds ...gen.Condition) IDeployTaskOnceDo
	Order(conds ...field.Expr) IDeployTaskOnceDo
	Distinct(cols ...field.Expr) IDeployTaskOnceDo
	Omit(cols ...field.Expr) IDeployTaskOnceDo
	Join(table schema.Tabler, on ...field.Expr) IDeployTaskOnceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceDo
	Group(cols ...field.Expr) IDeployTaskOnceDo
	Having(conds ...gen.Condition) IDeployTaskOnceDo
	Limit(limit int) IDeployTaskOnceDo
	Offset(offset int) IDeployTaskOnceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTaskOnceDo
	Unscoped() IDeployTaskOnceDo
	Create(values ...*model.DeployTaskOnce) error
	CreateInBatches(values []*model.DeployTaskOnce, batchSize int) error
	Save(values ...*model.DeployTaskOnce) error
	First() (*model.DeployTaskOnce, error)
	Take() (*model.DeployTaskOnce, error)
	Last() (*model.DeployTaskOnce, error)
	Find() ([]*model.DeployTaskOnce, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTaskOnce, err error)
	FindInBatches(result *[]*model.DeployTaskOnce, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployTaskOnce) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployTaskOnceDo
	Assign(attrs ...field.AssignExpr) IDeployTaskOnceDo
	Joins(fields ...field.RelationField) IDeployTaskOnceDo
	Preload(fields ...field.RelationField) IDeployTaskOnceDo
	FirstOrInit() (*model.DeployTaskOnce, error)
	FirstOrCreate() (*model.DeployTaskOnce, error)
	FindByPage(offset int, limit int) (result []*model.DeployTaskOnce, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployTaskOnceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployTaskOnceDo) Debug() IDeployTaskOnceDo {
	return d.withDO(d.DO.Debug())
}

func (d deployTaskOnceDo) WithContext(ctx context.Context) IDeployTaskOnceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployTaskOnceDo) ReadDB() IDeployTaskOnceDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployTaskOnceDo) WriteDB() IDeployTaskOnceDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployTaskOnceDo) Session(config *gorm.Session) IDeployTaskOnceDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployTaskOnceDo) Clauses(conds ...clause.Expression) IDeployTaskOnceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployTaskOnceDo) Returning(value interface{}, columns ...string) IDeployTaskOnceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployTaskOnceDo) Not(conds ...gen.Condition) IDeployTaskOnceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployTaskOnceDo) Or(conds ...gen.Condition) IDeployTaskOnceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployTaskOnceDo) Select(conds ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployTaskOnceDo) Where(conds ...gen.Condition) IDeployTaskOnceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployTaskOnceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployTaskOnceDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployTaskOnceDo) Order(conds ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployTaskOnceDo) Distinct(cols ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployTaskOnceDo) Omit(cols ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployTaskOnceDo) Join(table schema.Tabler, on ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployTaskOnceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployTaskOnceDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployTaskOnceDo) Group(cols ...field.Expr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployTaskOnceDo) Having(conds ...gen.Condition) IDeployTaskOnceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployTaskOnceDo) Limit(limit int) IDeployTaskOnceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployTaskOnceDo) Offset(offset int) IDeployTaskOnceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployTaskOnceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTaskOnceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployTaskOnceDo) Unscoped() IDeployTaskOnceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployTaskOnceDo) Create(values ...*model.DeployTaskOnce) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployTaskOnceDo) CreateInBatches(values []*model.DeployTaskOnce, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployTaskOnceDo) Save(values ...*model.DeployTaskOnce) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployTaskOnceDo) First() (*model.DeployTaskOnce, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnce), nil
	}
}

func (d deployTaskOnceDo) Take() (*model.DeployTaskOnce, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnce), nil
	}
}

func (d deployTaskOnceDo) Last() (*model.DeployTaskOnce, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnce), nil
	}
}

func (d deployTaskOnceDo) Find() ([]*model.DeployTaskOnce, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployTaskOnce), err
}

func (d deployTaskOnceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTaskOnce, err error) {
	buf := make([]*model.DeployTaskOnce, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployTaskOnceDo) FindInBatches(result *[]*model.DeployTaskOnce, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployTaskOnceDo) Attrs(attrs ...field.AssignExpr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployTaskOnceDo) Assign(attrs ...field.AssignExpr) IDeployTaskOnceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployTaskOnceDo) Joins(fields ...field.RelationField) IDeployTaskOnceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployTaskOnceDo) Preload(fields ...field.RelationField) IDeployTaskOnceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployTaskOnceDo) FirstOrInit() (*model.DeployTaskOnce, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnce), nil
	}
}

func (d deployTaskOnceDo) FirstOrCreate() (*model.DeployTaskOnce, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnce), nil
	}
}

func (d deployTaskOnceDo) FindByPage(offset int, limit int) (result []*model.DeployTaskOnce, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployTaskOnceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployTaskOnceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployTaskOnceDo) Delete(models ...*model.DeployTaskOnce) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployTaskOnceDo) withDO(do gen.Dao) *deployTaskOnceDo {
	d.DO = *do.(*gen.DO)
	return d
}
