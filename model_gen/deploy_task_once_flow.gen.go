// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployTaskOnceFlow(db *gorm.DB, opts ...gen.DOOption) deployTaskOnceFlow {
	_deployTaskOnceFlow := deployTaskOnceFlow{}

	_deployTaskOnceFlow.deployTaskOnceFlowDo.UseDB(db, opts...)
	_deployTaskOnceFlow.deployTaskOnceFlowDo.UseModel(&model.DeployTaskOnceFlow{})

	tableName := _deployTaskOnceFlow.deployTaskOnceFlowDo.TableName()
	_deployTaskOnceFlow.ALL = field.NewAsterisk(tableName)
	_deployTaskOnceFlow.DepTaskOnceID = field.NewString(tableName, "dep_task_once_id")
	_deployTaskOnceFlow.DepTaskID = field.NewString(tableName, "dep_task_id")
	_deployTaskOnceFlow.DepEventID = field.NewString(tableName, "dep_event_id")
	_deployTaskOnceFlow.GlobalParamID = field.NewString(tableName, "global_param_id")
	_deployTaskOnceFlow.ServerID = field.NewString(tableName, "server_id")
	_deployTaskOnceFlow.ServerIP = field.NewString(tableName, "server_ip")
	_deployTaskOnceFlow.WarVersion = field.NewString(tableName, "war_version")
	_deployTaskOnceFlow.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_deployTaskOnceFlow.Notes = field.NewString(tableName, "notes")
	_deployTaskOnceFlow.Deploydir = field.NewString(tableName, "deploydir")
	_deployTaskOnceFlow.DepInfo = field.NewString(tableName, "dep_info")
	_deployTaskOnceFlow.OldWarVersion = field.NewString(tableName, "old_war_version")
	_deployTaskOnceFlow.CreateTime = field.NewTime(tableName, "create_time")
	_deployTaskOnceFlow.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployTaskOnceFlow.Comments = field.NewString(tableName, "comments")
	_deployTaskOnceFlow.HospitalCode = field.NewString(tableName, "hospital_code")
	_deployTaskOnceFlow.WarGroupid = field.NewString(tableName, "war_groupid")

	_deployTaskOnceFlow.fillFieldMap()

	return _deployTaskOnceFlow
}

type deployTaskOnceFlow struct {
	deployTaskOnceFlowDo

	ALL           field.Asterisk
	DepTaskOnceID field.String // 主键流水
	DepTaskID     field.String
	DepEventID    field.String // 对应的配置文件ID
	GlobalParamID field.String // 对应的配置文件信息
	ServerID      field.String // 服务器ID
	ServerIP      field.String // 服务器IP
	WarVersion    field.String
	WarArtifactid field.String
	Notes         field.String
	Deploydir     field.String // 部署目录
	DepInfo       field.String // 部署的最新结果信息，比如失败后的堆栈信息
	OldWarVersion field.String // 上一次部署的版本，用于版本回退提供信息。
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明
	HospitalCode  field.String // 包所属院区编号
	WarGroupid    field.String

	fieldMap map[string]field.Expr
}

func (d deployTaskOnceFlow) Table(newTableName string) *deployTaskOnceFlow {
	d.deployTaskOnceFlowDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployTaskOnceFlow) As(alias string) *deployTaskOnceFlow {
	d.deployTaskOnceFlowDo.DO = *(d.deployTaskOnceFlowDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployTaskOnceFlow) updateTableName(table string) *deployTaskOnceFlow {
	d.ALL = field.NewAsterisk(table)
	d.DepTaskOnceID = field.NewString(table, "dep_task_once_id")
	d.DepTaskID = field.NewString(table, "dep_task_id")
	d.DepEventID = field.NewString(table, "dep_event_id")
	d.GlobalParamID = field.NewString(table, "global_param_id")
	d.ServerID = field.NewString(table, "server_id")
	d.ServerIP = field.NewString(table, "server_ip")
	d.WarVersion = field.NewString(table, "war_version")
	d.WarArtifactid = field.NewString(table, "war_artifactid")
	d.Notes = field.NewString(table, "notes")
	d.Deploydir = field.NewString(table, "deploydir")
	d.DepInfo = field.NewString(table, "dep_info")
	d.OldWarVersion = field.NewString(table, "old_war_version")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")
	d.HospitalCode = field.NewString(table, "hospital_code")
	d.WarGroupid = field.NewString(table, "war_groupid")

	d.fillFieldMap()

	return d
}

func (d *deployTaskOnceFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployTaskOnceFlow) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 17)
	d.fieldMap["dep_task_once_id"] = d.DepTaskOnceID
	d.fieldMap["dep_task_id"] = d.DepTaskID
	d.fieldMap["dep_event_id"] = d.DepEventID
	d.fieldMap["global_param_id"] = d.GlobalParamID
	d.fieldMap["server_id"] = d.ServerID
	d.fieldMap["server_ip"] = d.ServerIP
	d.fieldMap["war_version"] = d.WarVersion
	d.fieldMap["war_artifactid"] = d.WarArtifactid
	d.fieldMap["notes"] = d.Notes
	d.fieldMap["deploydir"] = d.Deploydir
	d.fieldMap["dep_info"] = d.DepInfo
	d.fieldMap["old_war_version"] = d.OldWarVersion
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
	d.fieldMap["hospital_code"] = d.HospitalCode
	d.fieldMap["war_groupid"] = d.WarGroupid
}

func (d deployTaskOnceFlow) clone(db *gorm.DB) deployTaskOnceFlow {
	d.deployTaskOnceFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployTaskOnceFlow) replaceDB(db *gorm.DB) deployTaskOnceFlow {
	d.deployTaskOnceFlowDo.ReplaceDB(db)
	return d
}

type deployTaskOnceFlowDo struct{ gen.DO }

type IDeployTaskOnceFlowDo interface {
	gen.SubQuery
	Debug() IDeployTaskOnceFlowDo
	WithContext(ctx context.Context) IDeployTaskOnceFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployTaskOnceFlowDo
	WriteDB() IDeployTaskOnceFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployTaskOnceFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployTaskOnceFlowDo
	Not(conds ...gen.Condition) IDeployTaskOnceFlowDo
	Or(conds ...gen.Condition) IDeployTaskOnceFlowDo
	Select(conds ...field.Expr) IDeployTaskOnceFlowDo
	Where(conds ...gen.Condition) IDeployTaskOnceFlowDo
	Order(conds ...field.Expr) IDeployTaskOnceFlowDo
	Distinct(cols ...field.Expr) IDeployTaskOnceFlowDo
	Omit(cols ...field.Expr) IDeployTaskOnceFlowDo
	Join(table schema.Tabler, on ...field.Expr) IDeployTaskOnceFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceFlowDo
	Group(cols ...field.Expr) IDeployTaskOnceFlowDo
	Having(conds ...gen.Condition) IDeployTaskOnceFlowDo
	Limit(limit int) IDeployTaskOnceFlowDo
	Offset(offset int) IDeployTaskOnceFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTaskOnceFlowDo
	Unscoped() IDeployTaskOnceFlowDo
	Create(values ...*model.DeployTaskOnceFlow) error
	CreateInBatches(values []*model.DeployTaskOnceFlow, batchSize int) error
	Save(values ...*model.DeployTaskOnceFlow) error
	First() (*model.DeployTaskOnceFlow, error)
	Take() (*model.DeployTaskOnceFlow, error)
	Last() (*model.DeployTaskOnceFlow, error)
	Find() ([]*model.DeployTaskOnceFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTaskOnceFlow, err error)
	FindInBatches(result *[]*model.DeployTaskOnceFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployTaskOnceFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployTaskOnceFlowDo
	Assign(attrs ...field.AssignExpr) IDeployTaskOnceFlowDo
	Joins(fields ...field.RelationField) IDeployTaskOnceFlowDo
	Preload(fields ...field.RelationField) IDeployTaskOnceFlowDo
	FirstOrInit() (*model.DeployTaskOnceFlow, error)
	FirstOrCreate() (*model.DeployTaskOnceFlow, error)
	FindByPage(offset int, limit int) (result []*model.DeployTaskOnceFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployTaskOnceFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployTaskOnceFlowDo) Debug() IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Debug())
}

func (d deployTaskOnceFlowDo) WithContext(ctx context.Context) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployTaskOnceFlowDo) ReadDB() IDeployTaskOnceFlowDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployTaskOnceFlowDo) WriteDB() IDeployTaskOnceFlowDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployTaskOnceFlowDo) Session(config *gorm.Session) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployTaskOnceFlowDo) Clauses(conds ...clause.Expression) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployTaskOnceFlowDo) Returning(value interface{}, columns ...string) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployTaskOnceFlowDo) Not(conds ...gen.Condition) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployTaskOnceFlowDo) Or(conds ...gen.Condition) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployTaskOnceFlowDo) Select(conds ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployTaskOnceFlowDo) Where(conds ...gen.Condition) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployTaskOnceFlowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployTaskOnceFlowDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployTaskOnceFlowDo) Order(conds ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployTaskOnceFlowDo) Distinct(cols ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployTaskOnceFlowDo) Omit(cols ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployTaskOnceFlowDo) Join(table schema.Tabler, on ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployTaskOnceFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployTaskOnceFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployTaskOnceFlowDo) Group(cols ...field.Expr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployTaskOnceFlowDo) Having(conds ...gen.Condition) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployTaskOnceFlowDo) Limit(limit int) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployTaskOnceFlowDo) Offset(offset int) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployTaskOnceFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployTaskOnceFlowDo) Unscoped() IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployTaskOnceFlowDo) Create(values ...*model.DeployTaskOnceFlow) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployTaskOnceFlowDo) CreateInBatches(values []*model.DeployTaskOnceFlow, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployTaskOnceFlowDo) Save(values ...*model.DeployTaskOnceFlow) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployTaskOnceFlowDo) First() (*model.DeployTaskOnceFlow, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnceFlow), nil
	}
}

func (d deployTaskOnceFlowDo) Take() (*model.DeployTaskOnceFlow, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnceFlow), nil
	}
}

func (d deployTaskOnceFlowDo) Last() (*model.DeployTaskOnceFlow, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnceFlow), nil
	}
}

func (d deployTaskOnceFlowDo) Find() ([]*model.DeployTaskOnceFlow, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployTaskOnceFlow), err
}

func (d deployTaskOnceFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTaskOnceFlow, err error) {
	buf := make([]*model.DeployTaskOnceFlow, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployTaskOnceFlowDo) FindInBatches(result *[]*model.DeployTaskOnceFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployTaskOnceFlowDo) Attrs(attrs ...field.AssignExpr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployTaskOnceFlowDo) Assign(attrs ...field.AssignExpr) IDeployTaskOnceFlowDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployTaskOnceFlowDo) Joins(fields ...field.RelationField) IDeployTaskOnceFlowDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployTaskOnceFlowDo) Preload(fields ...field.RelationField) IDeployTaskOnceFlowDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployTaskOnceFlowDo) FirstOrInit() (*model.DeployTaskOnceFlow, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnceFlow), nil
	}
}

func (d deployTaskOnceFlowDo) FirstOrCreate() (*model.DeployTaskOnceFlow, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTaskOnceFlow), nil
	}
}

func (d deployTaskOnceFlowDo) FindByPage(offset int, limit int) (result []*model.DeployTaskOnceFlow, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployTaskOnceFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployTaskOnceFlowDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployTaskOnceFlowDo) Delete(models ...*model.DeployTaskOnceFlow) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployTaskOnceFlowDo) withDO(do gen.Dao) *deployTaskOnceFlowDo {
	d.DO = *do.(*gen.DO)
	return d
}
