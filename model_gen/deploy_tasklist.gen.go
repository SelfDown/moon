// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeployTasklist(db *gorm.DB, opts ...gen.DOOption) deployTasklist {
	_deployTasklist := deployTasklist{}

	_deployTasklist.deployTasklistDo.UseDB(db, opts...)
	_deployTasklist.deployTasklistDo.UseModel(&model.DeployTasklist{})

	tableName := _deployTasklist.deployTasklistDo.TableName()
	_deployTasklist.ALL = field.NewAsterisk(tableName)
	_deployTasklist.DeployFlag = field.NewString(tableName, "deploy_flag")
	_deployTasklist.DepTaskID = field.NewString(tableName, "dep_task_id")
	_deployTasklist.ServerID = field.NewString(tableName, "server_id")
	_deployTasklist.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_deployTasklist.WarGroupid = field.NewString(tableName, "war_groupid")
	_deployTasklist.Notes = field.NewString(tableName, "notes")
	_deployTasklist.HospitalCode = field.NewString(tableName, "hospital_code")
	_deployTasklist.Appstatu = field.NewString(tableName, "appstatu")
	_deployTasklist.Lastversion = field.NewString(tableName, "lastversion")
	_deployTasklist.Lastglobalgroupid = field.NewString(tableName, "lastglobalgroupid")
	_deployTasklist.Deploydir = field.NewString(tableName, "deploydir")
	_deployTasklist.Appurl = field.NewString(tableName, "appurl")
	_deployTasklist.Deploystatu = field.NewString(tableName, "deploystatu")
	_deployTasklist.Locked = field.NewString(tableName, "locked")
	_deployTasklist.EnvCode = field.NewString(tableName, "env_code")
	_deployTasklist.GlobalGroupID = field.NewString(tableName, "global_group_id")
	_deployTasklist.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_deployTasklist.Orderindex = field.NewInt32(tableName, "orderindex")
	_deployTasklist.Lastdeployver = field.NewString(tableName, "lastdeployver")
	_deployTasklist.WarRemotefilesize = field.NewString(tableName, "war_remotefilesize")
	_deployTasklist.WarDownloadPercent = field.NewString(tableName, "war_download_percent")
	_deployTasklist.WarDownloadComplete = field.NewString(tableName, "war_download_complete")
	_deployTasklist.OpUser = field.NewString(tableName, "op_user")
	_deployTasklist.WarDownloadSpeed = field.NewString(tableName, "war_download_speed")
	_deployTasklist.BeforehandID = field.NewString(tableName, "beforehand_id")
	_deployTasklist.ThreadName = field.NewString(tableName, "thread_name")
	_deployTasklist.ArtifactPath = field.NewString(tableName, "artifact_path")
	_deployTasklist.ArtifactMd5 = field.NewString(tableName, "artifact_md5")
	_deployTasklist.CheckWarStatusCode = field.NewString(tableName, "check_war_status_code")
	_deployTasklist.PublishReqVer = field.NewString(tableName, "publishReqVer")
	_deployTasklist.Deploy = field.NewInt32(tableName, "deploy_")
	_deployTasklist.FrameworkVersion = field.NewString(tableName, "framework_version")
	_deployTasklist.CreateTime = field.NewTime(tableName, "create_time")
	_deployTasklist.ModifyTime = field.NewTime(tableName, "modify_time")
	_deployTasklist.Comments = field.NewString(tableName, "comments")
	_deployTasklist.StabilityAssuranceEventID = field.NewString(tableName, "stability_assurance_event_id")
	_deployTasklist.JbossCliPid = field.NewString(tableName, "jboss_cli_pid")
	_deployTasklist.JbossCliPidStartTime = field.NewTime(tableName, "jboss_cli_pid_start_time")
	_deployTasklist.Checkwarstatu = field.NewString(tableName, "checkwarstatu")
	_deployTasklist.SingledepBakPath = field.NewString(tableName, "singledep_bak_path")
	_deployTasklist.IPAddress = field.NewString(tableName, "ip_address")
	_deployTasklist.DomainName = field.NewString(tableName, "domain_name")
	_deployTasklist.DomainNameAddress = field.NewString(tableName, "domain_name_address")
	_deployTasklist.EnvConfTemplateID = field.NewString(tableName, "env_conf_template_id")
	_deployTasklist.RestartDetail = field.NewString(tableName, "restart_detail")
	_deployTasklist.StopDetail = field.NewString(tableName, "stop_detail")

	_deployTasklist.fillFieldMap()

	return _deployTasklist
}

type deployTasklist struct {
	deployTasklistDo

	ALL field.Asterisk
	/*
		部署是否完成
		0 部署未完成
		1 部署完成。
	*/
	DeployFlag          field.String
	DepTaskID           field.String
	ServerID            field.String // 服务器ID
	WarArtifactid       field.String
	WarGroupid          field.String
	Notes               field.String
	HospitalCode        field.String // 院区
	Appstatu            field.String // jboss应用HTTP状态
	Lastversion         field.String // 最后一次部署的版本号
	Lastglobalgroupid   field.String // 最近一次使用的global文件ID
	Deploydir           field.String
	Appurl              field.String // 程序网址,用于检查状态
	Deploystatu         field.String // 应用部署状态
	Locked              field.String // 部署锁定状态 1 表示被锁 0 未被锁，可以部署
	EnvCode             field.String
	GlobalGroupID       field.String
	InstallSoftID       field.String
	Orderindex          field.Int32
	Lastdeployver       field.String // 上一次部署成功的版本号
	WarRemotefilesize   field.String // war包大小
	WarDownloadPercent  field.String // 下载进度
	WarDownloadComplete field.String // 0 待下载，下载完成。
	OpUser              field.String // userid
	WarDownloadSpeed    field.String // 下载速度
	BeforehandID        field.String // 预下载UUID,用于预部署读取目录路径。
	ThreadName          field.String // 任务现场号
	ArtifactPath        field.String // 最近一次下载的war包存放路径
	ArtifactMd5         field.String // 最近一次下载的war包文件md5
	/*
		check.war web状态
		值：存HTTP_code
	*/
	CheckWarStatusCode        field.String
	PublishReqVer             field.String // 同字段，publish_req_ver  ，用于新旧版本兼容
	Deploy                    field.Int32
	FrameworkVersion          field.String // java应用依赖的框架版本
	CreateTime                field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime                field.Time   // 记录修改时间（数据库自动写入）
	Comments                  field.String
	StabilityAssuranceEventID field.String // 稳定性保障中心操作事件ID
	JbossCliPid               field.String // jboss_cli进程ID
	JbossCliPidStartTime      field.Time   // jboss cli 进程启动时间
	Checkwarstatu             field.String
	SingledepBakPath          field.String
	IPAddress                 field.String
	DomainName                field.String
	DomainNameAddress         field.String
	EnvConfTemplateID         field.String
	RestartDetail             field.String
	StopDetail                field.String

	fieldMap map[string]field.Expr
}

func (d deployTasklist) Table(newTableName string) *deployTasklist {
	d.deployTasklistDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployTasklist) As(alias string) *deployTasklist {
	d.deployTasklistDo.DO = *(d.deployTasklistDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployTasklist) updateTableName(table string) *deployTasklist {
	d.ALL = field.NewAsterisk(table)
	d.DeployFlag = field.NewString(table, "deploy_flag")
	d.DepTaskID = field.NewString(table, "dep_task_id")
	d.ServerID = field.NewString(table, "server_id")
	d.WarArtifactid = field.NewString(table, "war_artifactid")
	d.WarGroupid = field.NewString(table, "war_groupid")
	d.Notes = field.NewString(table, "notes")
	d.HospitalCode = field.NewString(table, "hospital_code")
	d.Appstatu = field.NewString(table, "appstatu")
	d.Lastversion = field.NewString(table, "lastversion")
	d.Lastglobalgroupid = field.NewString(table, "lastglobalgroupid")
	d.Deploydir = field.NewString(table, "deploydir")
	d.Appurl = field.NewString(table, "appurl")
	d.Deploystatu = field.NewString(table, "deploystatu")
	d.Locked = field.NewString(table, "locked")
	d.EnvCode = field.NewString(table, "env_code")
	d.GlobalGroupID = field.NewString(table, "global_group_id")
	d.InstallSoftID = field.NewString(table, "install_soft_id")
	d.Orderindex = field.NewInt32(table, "orderindex")
	d.Lastdeployver = field.NewString(table, "lastdeployver")
	d.WarRemotefilesize = field.NewString(table, "war_remotefilesize")
	d.WarDownloadPercent = field.NewString(table, "war_download_percent")
	d.WarDownloadComplete = field.NewString(table, "war_download_complete")
	d.OpUser = field.NewString(table, "op_user")
	d.WarDownloadSpeed = field.NewString(table, "war_download_speed")
	d.BeforehandID = field.NewString(table, "beforehand_id")
	d.ThreadName = field.NewString(table, "thread_name")
	d.ArtifactPath = field.NewString(table, "artifact_path")
	d.ArtifactMd5 = field.NewString(table, "artifact_md5")
	d.CheckWarStatusCode = field.NewString(table, "check_war_status_code")
	d.PublishReqVer = field.NewString(table, "publishReqVer")
	d.Deploy = field.NewInt32(table, "deploy_")
	d.FrameworkVersion = field.NewString(table, "framework_version")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")
	d.StabilityAssuranceEventID = field.NewString(table, "stability_assurance_event_id")
	d.JbossCliPid = field.NewString(table, "jboss_cli_pid")
	d.JbossCliPidStartTime = field.NewTime(table, "jboss_cli_pid_start_time")
	d.Checkwarstatu = field.NewString(table, "checkwarstatu")
	d.SingledepBakPath = field.NewString(table, "singledep_bak_path")
	d.IPAddress = field.NewString(table, "ip_address")
	d.DomainName = field.NewString(table, "domain_name")
	d.DomainNameAddress = field.NewString(table, "domain_name_address")
	d.EnvConfTemplateID = field.NewString(table, "env_conf_template_id")
	d.RestartDetail = field.NewString(table, "restart_detail")
	d.StopDetail = field.NewString(table, "stop_detail")

	d.fillFieldMap()

	return d
}

func (d *deployTasklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployTasklist) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 46)
	d.fieldMap["deploy_flag"] = d.DeployFlag
	d.fieldMap["dep_task_id"] = d.DepTaskID
	d.fieldMap["server_id"] = d.ServerID
	d.fieldMap["war_artifactid"] = d.WarArtifactid
	d.fieldMap["war_groupid"] = d.WarGroupid
	d.fieldMap["notes"] = d.Notes
	d.fieldMap["hospital_code"] = d.HospitalCode
	d.fieldMap["appstatu"] = d.Appstatu
	d.fieldMap["lastversion"] = d.Lastversion
	d.fieldMap["lastglobalgroupid"] = d.Lastglobalgroupid
	d.fieldMap["deploydir"] = d.Deploydir
	d.fieldMap["appurl"] = d.Appurl
	d.fieldMap["deploystatu"] = d.Deploystatu
	d.fieldMap["locked"] = d.Locked
	d.fieldMap["env_code"] = d.EnvCode
	d.fieldMap["global_group_id"] = d.GlobalGroupID
	d.fieldMap["install_soft_id"] = d.InstallSoftID
	d.fieldMap["orderindex"] = d.Orderindex
	d.fieldMap["lastdeployver"] = d.Lastdeployver
	d.fieldMap["war_remotefilesize"] = d.WarRemotefilesize
	d.fieldMap["war_download_percent"] = d.WarDownloadPercent
	d.fieldMap["war_download_complete"] = d.WarDownloadComplete
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["war_download_speed"] = d.WarDownloadSpeed
	d.fieldMap["beforehand_id"] = d.BeforehandID
	d.fieldMap["thread_name"] = d.ThreadName
	d.fieldMap["artifact_path"] = d.ArtifactPath
	d.fieldMap["artifact_md5"] = d.ArtifactMd5
	d.fieldMap["check_war_status_code"] = d.CheckWarStatusCode
	d.fieldMap["publishReqVer"] = d.PublishReqVer
	d.fieldMap["deploy_"] = d.Deploy
	d.fieldMap["framework_version"] = d.FrameworkVersion
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
	d.fieldMap["stability_assurance_event_id"] = d.StabilityAssuranceEventID
	d.fieldMap["jboss_cli_pid"] = d.JbossCliPid
	d.fieldMap["jboss_cli_pid_start_time"] = d.JbossCliPidStartTime
	d.fieldMap["checkwarstatu"] = d.Checkwarstatu
	d.fieldMap["singledep_bak_path"] = d.SingledepBakPath
	d.fieldMap["ip_address"] = d.IPAddress
	d.fieldMap["domain_name"] = d.DomainName
	d.fieldMap["domain_name_address"] = d.DomainNameAddress
	d.fieldMap["env_conf_template_id"] = d.EnvConfTemplateID
	d.fieldMap["restart_detail"] = d.RestartDetail
	d.fieldMap["stop_detail"] = d.StopDetail
}

func (d deployTasklist) clone(db *gorm.DB) deployTasklist {
	d.deployTasklistDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployTasklist) replaceDB(db *gorm.DB) deployTasklist {
	d.deployTasklistDo.ReplaceDB(db)
	return d
}

type deployTasklistDo struct{ gen.DO }

type IDeployTasklistDo interface {
	gen.SubQuery
	Debug() IDeployTasklistDo
	WithContext(ctx context.Context) IDeployTasklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployTasklistDo
	WriteDB() IDeployTasklistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployTasklistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployTasklistDo
	Not(conds ...gen.Condition) IDeployTasklistDo
	Or(conds ...gen.Condition) IDeployTasklistDo
	Select(conds ...field.Expr) IDeployTasklistDo
	Where(conds ...gen.Condition) IDeployTasklistDo
	Order(conds ...field.Expr) IDeployTasklistDo
	Distinct(cols ...field.Expr) IDeployTasklistDo
	Omit(cols ...field.Expr) IDeployTasklistDo
	Join(table schema.Tabler, on ...field.Expr) IDeployTasklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTasklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployTasklistDo
	Group(cols ...field.Expr) IDeployTasklistDo
	Having(conds ...gen.Condition) IDeployTasklistDo
	Limit(limit int) IDeployTasklistDo
	Offset(offset int) IDeployTasklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTasklistDo
	Unscoped() IDeployTasklistDo
	Create(values ...*model.DeployTasklist) error
	CreateInBatches(values []*model.DeployTasklist, batchSize int) error
	Save(values ...*model.DeployTasklist) error
	First() (*model.DeployTasklist, error)
	Take() (*model.DeployTasklist, error)
	Last() (*model.DeployTasklist, error)
	Find() ([]*model.DeployTasklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTasklist, err error)
	FindInBatches(result *[]*model.DeployTasklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployTasklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployTasklistDo
	Assign(attrs ...field.AssignExpr) IDeployTasklistDo
	Joins(fields ...field.RelationField) IDeployTasklistDo
	Preload(fields ...field.RelationField) IDeployTasklistDo
	FirstOrInit() (*model.DeployTasklist, error)
	FirstOrCreate() (*model.DeployTasklist, error)
	FindByPage(offset int, limit int) (result []*model.DeployTasklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployTasklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployTasklistDo) Debug() IDeployTasklistDo {
	return d.withDO(d.DO.Debug())
}

func (d deployTasklistDo) WithContext(ctx context.Context) IDeployTasklistDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployTasklistDo) ReadDB() IDeployTasklistDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployTasklistDo) WriteDB() IDeployTasklistDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployTasklistDo) Session(config *gorm.Session) IDeployTasklistDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployTasklistDo) Clauses(conds ...clause.Expression) IDeployTasklistDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployTasklistDo) Returning(value interface{}, columns ...string) IDeployTasklistDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployTasklistDo) Not(conds ...gen.Condition) IDeployTasklistDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployTasklistDo) Or(conds ...gen.Condition) IDeployTasklistDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployTasklistDo) Select(conds ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployTasklistDo) Where(conds ...gen.Condition) IDeployTasklistDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployTasklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeployTasklistDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deployTasklistDo) Order(conds ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployTasklistDo) Distinct(cols ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployTasklistDo) Omit(cols ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployTasklistDo) Join(table schema.Tabler, on ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployTasklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployTasklistDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployTasklistDo) Group(cols ...field.Expr) IDeployTasklistDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployTasklistDo) Having(conds ...gen.Condition) IDeployTasklistDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployTasklistDo) Limit(limit int) IDeployTasklistDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployTasklistDo) Offset(offset int) IDeployTasklistDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployTasklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployTasklistDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployTasklistDo) Unscoped() IDeployTasklistDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployTasklistDo) Create(values ...*model.DeployTasklist) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployTasklistDo) CreateInBatches(values []*model.DeployTasklist, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployTasklistDo) Save(values ...*model.DeployTasklist) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployTasklistDo) First() (*model.DeployTasklist, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTasklist), nil
	}
}

func (d deployTasklistDo) Take() (*model.DeployTasklist, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTasklist), nil
	}
}

func (d deployTasklistDo) Last() (*model.DeployTasklist, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTasklist), nil
	}
}

func (d deployTasklistDo) Find() ([]*model.DeployTasklist, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployTasklist), err
}

func (d deployTasklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployTasklist, err error) {
	buf := make([]*model.DeployTasklist, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployTasklistDo) FindInBatches(result *[]*model.DeployTasklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployTasklistDo) Attrs(attrs ...field.AssignExpr) IDeployTasklistDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployTasklistDo) Assign(attrs ...field.AssignExpr) IDeployTasklistDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployTasklistDo) Joins(fields ...field.RelationField) IDeployTasklistDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployTasklistDo) Preload(fields ...field.RelationField) IDeployTasklistDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployTasklistDo) FirstOrInit() (*model.DeployTasklist, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTasklist), nil
	}
}

func (d deployTasklistDo) FirstOrCreate() (*model.DeployTasklist, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployTasklist), nil
	}
}

func (d deployTasklistDo) FindByPage(offset int, limit int) (result []*model.DeployTasklist, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployTasklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployTasklistDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployTasklistDo) Delete(models ...*model.DeployTasklist) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployTasklistDo) withDO(do gen.Dao) *deployTasklistDo {
	d.DO = *do.(*gen.DO)
	return d
}
