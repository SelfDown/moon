// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDeptaskSpringbootConf(db *gorm.DB, opts ...gen.DOOption) deptaskSpringbootConf {
	_deptaskSpringbootConf := deptaskSpringbootConf{}

	_deptaskSpringbootConf.deptaskSpringbootConfDo.UseDB(db, opts...)
	_deptaskSpringbootConf.deptaskSpringbootConfDo.UseModel(&model.DeptaskSpringbootConf{})

	tableName := _deptaskSpringbootConf.deptaskSpringbootConfDo.TableName()
	_deptaskSpringbootConf.ALL = field.NewAsterisk(tableName)
	_deptaskSpringbootConf.SpringbootConfID = field.NewString(tableName, "springboot_conf_id")
	_deptaskSpringbootConf.DepTaskID = field.NewString(tableName, "dep_task_id")
	_deptaskSpringbootConf.EnvConf = field.NewString(tableName, "env_conf")
	_deptaskSpringbootConf.Isvalid = field.NewString(tableName, "isvalid")
	_deptaskSpringbootConf.OpUser = field.NewString(tableName, "op_user")
	_deptaskSpringbootConf.CreateTime = field.NewTime(tableName, "create_time")
	_deptaskSpringbootConf.ModifyTime = field.NewTime(tableName, "modify_time")
	_deptaskSpringbootConf.Comments = field.NewString(tableName, "comments")

	_deptaskSpringbootConf.fillFieldMap()

	return _deptaskSpringbootConf
}

type deptaskSpringbootConf struct {
	deptaskSpringbootConfDo

	ALL              field.Asterisk
	SpringbootConfID field.String
	DepTaskID        field.String
	EnvConf          field.String
	Isvalid          field.String // 0 无效   1有效
	OpUser           field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (d deptaskSpringbootConf) Table(newTableName string) *deptaskSpringbootConf {
	d.deptaskSpringbootConfDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deptaskSpringbootConf) As(alias string) *deptaskSpringbootConf {
	d.deptaskSpringbootConfDo.DO = *(d.deptaskSpringbootConfDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deptaskSpringbootConf) updateTableName(table string) *deptaskSpringbootConf {
	d.ALL = field.NewAsterisk(table)
	d.SpringbootConfID = field.NewString(table, "springboot_conf_id")
	d.DepTaskID = field.NewString(table, "dep_task_id")
	d.EnvConf = field.NewString(table, "env_conf")
	d.Isvalid = field.NewString(table, "isvalid")
	d.OpUser = field.NewString(table, "op_user")
	d.CreateTime = field.NewTime(table, "create_time")
	d.ModifyTime = field.NewTime(table, "modify_time")
	d.Comments = field.NewString(table, "comments")

	d.fillFieldMap()

	return d
}

func (d *deptaskSpringbootConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deptaskSpringbootConf) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["springboot_conf_id"] = d.SpringbootConfID
	d.fieldMap["dep_task_id"] = d.DepTaskID
	d.fieldMap["env_conf"] = d.EnvConf
	d.fieldMap["isvalid"] = d.Isvalid
	d.fieldMap["op_user"] = d.OpUser
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["modify_time"] = d.ModifyTime
	d.fieldMap["comments"] = d.Comments
}

func (d deptaskSpringbootConf) clone(db *gorm.DB) deptaskSpringbootConf {
	d.deptaskSpringbootConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deptaskSpringbootConf) replaceDB(db *gorm.DB) deptaskSpringbootConf {
	d.deptaskSpringbootConfDo.ReplaceDB(db)
	return d
}

type deptaskSpringbootConfDo struct{ gen.DO }

type IDeptaskSpringbootConfDo interface {
	gen.SubQuery
	Debug() IDeptaskSpringbootConfDo
	WithContext(ctx context.Context) IDeptaskSpringbootConfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeptaskSpringbootConfDo
	WriteDB() IDeptaskSpringbootConfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeptaskSpringbootConfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeptaskSpringbootConfDo
	Not(conds ...gen.Condition) IDeptaskSpringbootConfDo
	Or(conds ...gen.Condition) IDeptaskSpringbootConfDo
	Select(conds ...field.Expr) IDeptaskSpringbootConfDo
	Where(conds ...gen.Condition) IDeptaskSpringbootConfDo
	Order(conds ...field.Expr) IDeptaskSpringbootConfDo
	Distinct(cols ...field.Expr) IDeptaskSpringbootConfDo
	Omit(cols ...field.Expr) IDeptaskSpringbootConfDo
	Join(table schema.Tabler, on ...field.Expr) IDeptaskSpringbootConfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeptaskSpringbootConfDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeptaskSpringbootConfDo
	Group(cols ...field.Expr) IDeptaskSpringbootConfDo
	Having(conds ...gen.Condition) IDeptaskSpringbootConfDo
	Limit(limit int) IDeptaskSpringbootConfDo
	Offset(offset int) IDeptaskSpringbootConfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeptaskSpringbootConfDo
	Unscoped() IDeptaskSpringbootConfDo
	Create(values ...*model.DeptaskSpringbootConf) error
	CreateInBatches(values []*model.DeptaskSpringbootConf, batchSize int) error
	Save(values ...*model.DeptaskSpringbootConf) error
	First() (*model.DeptaskSpringbootConf, error)
	Take() (*model.DeptaskSpringbootConf, error)
	Last() (*model.DeptaskSpringbootConf, error)
	Find() ([]*model.DeptaskSpringbootConf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeptaskSpringbootConf, err error)
	FindInBatches(result *[]*model.DeptaskSpringbootConf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeptaskSpringbootConf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeptaskSpringbootConfDo
	Assign(attrs ...field.AssignExpr) IDeptaskSpringbootConfDo
	Joins(fields ...field.RelationField) IDeptaskSpringbootConfDo
	Preload(fields ...field.RelationField) IDeptaskSpringbootConfDo
	FirstOrInit() (*model.DeptaskSpringbootConf, error)
	FirstOrCreate() (*model.DeptaskSpringbootConf, error)
	FindByPage(offset int, limit int) (result []*model.DeptaskSpringbootConf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeptaskSpringbootConfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deptaskSpringbootConfDo) Debug() IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Debug())
}

func (d deptaskSpringbootConfDo) WithContext(ctx context.Context) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deptaskSpringbootConfDo) ReadDB() IDeptaskSpringbootConfDo {
	return d.Clauses(dbresolver.Read)
}

func (d deptaskSpringbootConfDo) WriteDB() IDeptaskSpringbootConfDo {
	return d.Clauses(dbresolver.Write)
}

func (d deptaskSpringbootConfDo) Session(config *gorm.Session) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Session(config))
}

func (d deptaskSpringbootConfDo) Clauses(conds ...clause.Expression) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deptaskSpringbootConfDo) Returning(value interface{}, columns ...string) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deptaskSpringbootConfDo) Not(conds ...gen.Condition) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deptaskSpringbootConfDo) Or(conds ...gen.Condition) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deptaskSpringbootConfDo) Select(conds ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deptaskSpringbootConfDo) Where(conds ...gen.Condition) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deptaskSpringbootConfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeptaskSpringbootConfDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deptaskSpringbootConfDo) Order(conds ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deptaskSpringbootConfDo) Distinct(cols ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deptaskSpringbootConfDo) Omit(cols ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deptaskSpringbootConfDo) Join(table schema.Tabler, on ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deptaskSpringbootConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deptaskSpringbootConfDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deptaskSpringbootConfDo) Group(cols ...field.Expr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deptaskSpringbootConfDo) Having(conds ...gen.Condition) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deptaskSpringbootConfDo) Limit(limit int) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deptaskSpringbootConfDo) Offset(offset int) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deptaskSpringbootConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deptaskSpringbootConfDo) Unscoped() IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deptaskSpringbootConfDo) Create(values ...*model.DeptaskSpringbootConf) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deptaskSpringbootConfDo) CreateInBatches(values []*model.DeptaskSpringbootConf, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deptaskSpringbootConfDo) Save(values ...*model.DeptaskSpringbootConf) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deptaskSpringbootConfDo) First() (*model.DeptaskSpringbootConf, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeptaskSpringbootConf), nil
	}
}

func (d deptaskSpringbootConfDo) Take() (*model.DeptaskSpringbootConf, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeptaskSpringbootConf), nil
	}
}

func (d deptaskSpringbootConfDo) Last() (*model.DeptaskSpringbootConf, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeptaskSpringbootConf), nil
	}
}

func (d deptaskSpringbootConfDo) Find() ([]*model.DeptaskSpringbootConf, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeptaskSpringbootConf), err
}

func (d deptaskSpringbootConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeptaskSpringbootConf, err error) {
	buf := make([]*model.DeptaskSpringbootConf, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deptaskSpringbootConfDo) FindInBatches(result *[]*model.DeptaskSpringbootConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deptaskSpringbootConfDo) Attrs(attrs ...field.AssignExpr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deptaskSpringbootConfDo) Assign(attrs ...field.AssignExpr) IDeptaskSpringbootConfDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deptaskSpringbootConfDo) Joins(fields ...field.RelationField) IDeptaskSpringbootConfDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deptaskSpringbootConfDo) Preload(fields ...field.RelationField) IDeptaskSpringbootConfDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deptaskSpringbootConfDo) FirstOrInit() (*model.DeptaskSpringbootConf, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeptaskSpringbootConf), nil
	}
}

func (d deptaskSpringbootConfDo) FirstOrCreate() (*model.DeptaskSpringbootConf, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeptaskSpringbootConf), nil
	}
}

func (d deptaskSpringbootConfDo) FindByPage(offset int, limit int) (result []*model.DeptaskSpringbootConf, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deptaskSpringbootConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deptaskSpringbootConfDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deptaskSpringbootConfDo) Delete(models ...*model.DeptaskSpringbootConf) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deptaskSpringbootConfDo) withDO(do gen.Dao) *deptaskSpringbootConfDo {
	d.DO = *do.(*gen.DO)
	return d
}
