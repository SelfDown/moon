// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDjangoAdminLog(db *gorm.DB, opts ...gen.DOOption) djangoAdminLog {
	_djangoAdminLog := djangoAdminLog{}

	_djangoAdminLog.djangoAdminLogDo.UseDB(db, opts...)
	_djangoAdminLog.djangoAdminLogDo.UseModel(&model.DjangoAdminLog{})

	tableName := _djangoAdminLog.djangoAdminLogDo.TableName()
	_djangoAdminLog.ALL = field.NewAsterisk(tableName)
	_djangoAdminLog.ID = field.NewInt32(tableName, "id")
	_djangoAdminLog.ActionTime = field.NewTime(tableName, "action_time")
	_djangoAdminLog.ObjectID = field.NewString(tableName, "object_id")
	_djangoAdminLog.ObjectRepr = field.NewString(tableName, "object_repr")
	_djangoAdminLog.ActionFlag = field.NewInt32(tableName, "action_flag")
	_djangoAdminLog.ChangeMessage = field.NewString(tableName, "change_message")
	_djangoAdminLog.ContentTypeID = field.NewInt32(tableName, "content_type_id")
	_djangoAdminLog.UserID = field.NewInt32(tableName, "user_id")

	_djangoAdminLog.fillFieldMap()

	return _djangoAdminLog
}

type djangoAdminLog struct {
	djangoAdminLogDo

	ALL           field.Asterisk
	ID            field.Int32
	ActionTime    field.Time
	ObjectID      field.String
	ObjectRepr    field.String
	ActionFlag    field.Int32
	ChangeMessage field.String
	ContentTypeID field.Int32
	UserID        field.Int32

	fieldMap map[string]field.Expr
}

func (d djangoAdminLog) Table(newTableName string) *djangoAdminLog {
	d.djangoAdminLogDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoAdminLog) As(alias string) *djangoAdminLog {
	d.djangoAdminLogDo.DO = *(d.djangoAdminLogDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoAdminLog) updateTableName(table string) *djangoAdminLog {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.ActionTime = field.NewTime(table, "action_time")
	d.ObjectID = field.NewString(table, "object_id")
	d.ObjectRepr = field.NewString(table, "object_repr")
	d.ActionFlag = field.NewInt32(table, "action_flag")
	d.ChangeMessage = field.NewString(table, "change_message")
	d.ContentTypeID = field.NewInt32(table, "content_type_id")
	d.UserID = field.NewInt32(table, "user_id")

	d.fillFieldMap()

	return d
}

func (d *djangoAdminLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoAdminLog) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["action_time"] = d.ActionTime
	d.fieldMap["object_id"] = d.ObjectID
	d.fieldMap["object_repr"] = d.ObjectRepr
	d.fieldMap["action_flag"] = d.ActionFlag
	d.fieldMap["change_message"] = d.ChangeMessage
	d.fieldMap["content_type_id"] = d.ContentTypeID
	d.fieldMap["user_id"] = d.UserID
}

func (d djangoAdminLog) clone(db *gorm.DB) djangoAdminLog {
	d.djangoAdminLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d djangoAdminLog) replaceDB(db *gorm.DB) djangoAdminLog {
	d.djangoAdminLogDo.ReplaceDB(db)
	return d
}

type djangoAdminLogDo struct{ gen.DO }

type IDjangoAdminLogDo interface {
	gen.SubQuery
	Debug() IDjangoAdminLogDo
	WithContext(ctx context.Context) IDjangoAdminLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDjangoAdminLogDo
	WriteDB() IDjangoAdminLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDjangoAdminLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoAdminLogDo
	Not(conds ...gen.Condition) IDjangoAdminLogDo
	Or(conds ...gen.Condition) IDjangoAdminLogDo
	Select(conds ...field.Expr) IDjangoAdminLogDo
	Where(conds ...gen.Condition) IDjangoAdminLogDo
	Order(conds ...field.Expr) IDjangoAdminLogDo
	Distinct(cols ...field.Expr) IDjangoAdminLogDo
	Omit(cols ...field.Expr) IDjangoAdminLogDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoAdminLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoAdminLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoAdminLogDo
	Group(cols ...field.Expr) IDjangoAdminLogDo
	Having(conds ...gen.Condition) IDjangoAdminLogDo
	Limit(limit int) IDjangoAdminLogDo
	Offset(offset int) IDjangoAdminLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoAdminLogDo
	Unscoped() IDjangoAdminLogDo
	Create(values ...*model.DjangoAdminLog) error
	CreateInBatches(values []*model.DjangoAdminLog, batchSize int) error
	Save(values ...*model.DjangoAdminLog) error
	First() (*model.DjangoAdminLog, error)
	Take() (*model.DjangoAdminLog, error)
	Last() (*model.DjangoAdminLog, error)
	Find() ([]*model.DjangoAdminLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoAdminLog, err error)
	FindInBatches(result *[]*model.DjangoAdminLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoAdminLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoAdminLogDo
	Assign(attrs ...field.AssignExpr) IDjangoAdminLogDo
	Joins(fields ...field.RelationField) IDjangoAdminLogDo
	Preload(fields ...field.RelationField) IDjangoAdminLogDo
	FirstOrInit() (*model.DjangoAdminLog, error)
	FirstOrCreate() (*model.DjangoAdminLog, error)
	FindByPage(offset int, limit int) (result []*model.DjangoAdminLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoAdminLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoAdminLogDo) Debug() IDjangoAdminLogDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoAdminLogDo) WithContext(ctx context.Context) IDjangoAdminLogDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoAdminLogDo) ReadDB() IDjangoAdminLogDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoAdminLogDo) WriteDB() IDjangoAdminLogDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoAdminLogDo) Session(config *gorm.Session) IDjangoAdminLogDo {
	return d.withDO(d.DO.Session(config))
}

func (d djangoAdminLogDo) Clauses(conds ...clause.Expression) IDjangoAdminLogDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoAdminLogDo) Returning(value interface{}, columns ...string) IDjangoAdminLogDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoAdminLogDo) Not(conds ...gen.Condition) IDjangoAdminLogDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoAdminLogDo) Or(conds ...gen.Condition) IDjangoAdminLogDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoAdminLogDo) Select(conds ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoAdminLogDo) Where(conds ...gen.Condition) IDjangoAdminLogDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoAdminLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoAdminLogDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoAdminLogDo) Order(conds ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoAdminLogDo) Distinct(cols ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoAdminLogDo) Omit(cols ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoAdminLogDo) Join(table schema.Tabler, on ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoAdminLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoAdminLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoAdminLogDo) Group(cols ...field.Expr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoAdminLogDo) Having(conds ...gen.Condition) IDjangoAdminLogDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoAdminLogDo) Limit(limit int) IDjangoAdminLogDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoAdminLogDo) Offset(offset int) IDjangoAdminLogDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoAdminLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoAdminLogDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoAdminLogDo) Unscoped() IDjangoAdminLogDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoAdminLogDo) Create(values ...*model.DjangoAdminLog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoAdminLogDo) CreateInBatches(values []*model.DjangoAdminLog, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoAdminLogDo) Save(values ...*model.DjangoAdminLog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoAdminLogDo) First() (*model.DjangoAdminLog, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoAdminLog), nil
	}
}

func (d djangoAdminLogDo) Take() (*model.DjangoAdminLog, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoAdminLog), nil
	}
}

func (d djangoAdminLogDo) Last() (*model.DjangoAdminLog, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoAdminLog), nil
	}
}

func (d djangoAdminLogDo) Find() ([]*model.DjangoAdminLog, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoAdminLog), err
}

func (d djangoAdminLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoAdminLog, err error) {
	buf := make([]*model.DjangoAdminLog, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoAdminLogDo) FindInBatches(result *[]*model.DjangoAdminLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoAdminLogDo) Attrs(attrs ...field.AssignExpr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoAdminLogDo) Assign(attrs ...field.AssignExpr) IDjangoAdminLogDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoAdminLogDo) Joins(fields ...field.RelationField) IDjangoAdminLogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoAdminLogDo) Preload(fields ...field.RelationField) IDjangoAdminLogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoAdminLogDo) FirstOrInit() (*model.DjangoAdminLog, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoAdminLog), nil
	}
}

func (d djangoAdminLogDo) FirstOrCreate() (*model.DjangoAdminLog, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoAdminLog), nil
	}
}

func (d djangoAdminLogDo) FindByPage(offset int, limit int) (result []*model.DjangoAdminLog, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoAdminLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoAdminLogDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoAdminLogDo) Delete(models ...*model.DjangoAdminLog) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoAdminLogDo) withDO(do gen.Dao) *djangoAdminLogDo {
	d.DO = *do.(*gen.DO)
	return d
}
