// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDjangoApschedulerDjangojobexecution(db *gorm.DB, opts ...gen.DOOption) djangoApschedulerDjangojobexecution {
	_djangoApschedulerDjangojobexecution := djangoApschedulerDjangojobexecution{}

	_djangoApschedulerDjangojobexecution.djangoApschedulerDjangojobexecutionDo.UseDB(db, opts...)
	_djangoApschedulerDjangojobexecution.djangoApschedulerDjangojobexecutionDo.UseModel(&model.DjangoApschedulerDjangojobexecution{})

	tableName := _djangoApschedulerDjangojobexecution.djangoApschedulerDjangojobexecutionDo.TableName()
	_djangoApschedulerDjangojobexecution.ALL = field.NewAsterisk(tableName)
	_djangoApschedulerDjangojobexecution.ID = field.NewInt32(tableName, "id")
	_djangoApschedulerDjangojobexecution.Status = field.NewString(tableName, "status")
	_djangoApschedulerDjangojobexecution.RunTime = field.NewTime(tableName, "run_time")
	_djangoApschedulerDjangojobexecution.Duration = field.NewFloat64(tableName, "duration")
	_djangoApschedulerDjangojobexecution.Started = field.NewFloat64(tableName, "started")
	_djangoApschedulerDjangojobexecution.Finished = field.NewFloat64(tableName, "finished")
	_djangoApschedulerDjangojobexecution.Exception = field.NewString(tableName, "exception")
	_djangoApschedulerDjangojobexecution.Traceback = field.NewString(tableName, "traceback")
	_djangoApschedulerDjangojobexecution.JobID = field.NewInt32(tableName, "job_id")

	_djangoApschedulerDjangojobexecution.fillFieldMap()

	return _djangoApschedulerDjangojobexecution
}

type djangoApschedulerDjangojobexecution struct {
	djangoApschedulerDjangojobexecutionDo

	ALL       field.Asterisk
	ID        field.Int32
	Status    field.String
	RunTime   field.Time
	Duration  field.Float64
	Started   field.Float64
	Finished  field.Float64
	Exception field.String
	Traceback field.String
	JobID     field.Int32

	fieldMap map[string]field.Expr
}

func (d djangoApschedulerDjangojobexecution) Table(newTableName string) *djangoApschedulerDjangojobexecution {
	d.djangoApschedulerDjangojobexecutionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoApschedulerDjangojobexecution) As(alias string) *djangoApschedulerDjangojobexecution {
	d.djangoApschedulerDjangojobexecutionDo.DO = *(d.djangoApschedulerDjangojobexecutionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoApschedulerDjangojobexecution) updateTableName(table string) *djangoApschedulerDjangojobexecution {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Status = field.NewString(table, "status")
	d.RunTime = field.NewTime(table, "run_time")
	d.Duration = field.NewFloat64(table, "duration")
	d.Started = field.NewFloat64(table, "started")
	d.Finished = field.NewFloat64(table, "finished")
	d.Exception = field.NewString(table, "exception")
	d.Traceback = field.NewString(table, "traceback")
	d.JobID = field.NewInt32(table, "job_id")

	d.fillFieldMap()

	return d
}

func (d *djangoApschedulerDjangojobexecution) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoApschedulerDjangojobexecution) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["status"] = d.Status
	d.fieldMap["run_time"] = d.RunTime
	d.fieldMap["duration"] = d.Duration
	d.fieldMap["started"] = d.Started
	d.fieldMap["finished"] = d.Finished
	d.fieldMap["exception"] = d.Exception
	d.fieldMap["traceback"] = d.Traceback
	d.fieldMap["job_id"] = d.JobID
}

func (d djangoApschedulerDjangojobexecution) clone(db *gorm.DB) djangoApschedulerDjangojobexecution {
	d.djangoApschedulerDjangojobexecutionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d djangoApschedulerDjangojobexecution) replaceDB(db *gorm.DB) djangoApschedulerDjangojobexecution {
	d.djangoApschedulerDjangojobexecutionDo.ReplaceDB(db)
	return d
}

type djangoApschedulerDjangojobexecutionDo struct{ gen.DO }

type IDjangoApschedulerDjangojobexecutionDo interface {
	gen.SubQuery
	Debug() IDjangoApschedulerDjangojobexecutionDo
	WithContext(ctx context.Context) IDjangoApschedulerDjangojobexecutionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDjangoApschedulerDjangojobexecutionDo
	WriteDB() IDjangoApschedulerDjangojobexecutionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDjangoApschedulerDjangojobexecutionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoApschedulerDjangojobexecutionDo
	Not(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo
	Or(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo
	Select(conds ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	Where(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo
	Order(conds ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	Distinct(cols ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	Omit(cols ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	Group(cols ...field.Expr) IDjangoApschedulerDjangojobexecutionDo
	Having(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo
	Limit(limit int) IDjangoApschedulerDjangojobexecutionDo
	Offset(offset int) IDjangoApschedulerDjangojobexecutionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoApschedulerDjangojobexecutionDo
	Unscoped() IDjangoApschedulerDjangojobexecutionDo
	Create(values ...*model.DjangoApschedulerDjangojobexecution) error
	CreateInBatches(values []*model.DjangoApschedulerDjangojobexecution, batchSize int) error
	Save(values ...*model.DjangoApschedulerDjangojobexecution) error
	First() (*model.DjangoApschedulerDjangojobexecution, error)
	Take() (*model.DjangoApschedulerDjangojobexecution, error)
	Last() (*model.DjangoApschedulerDjangojobexecution, error)
	Find() ([]*model.DjangoApschedulerDjangojobexecution, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoApschedulerDjangojobexecution, err error)
	FindInBatches(result *[]*model.DjangoApschedulerDjangojobexecution, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoApschedulerDjangojobexecution) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoApschedulerDjangojobexecutionDo
	Assign(attrs ...field.AssignExpr) IDjangoApschedulerDjangojobexecutionDo
	Joins(fields ...field.RelationField) IDjangoApschedulerDjangojobexecutionDo
	Preload(fields ...field.RelationField) IDjangoApschedulerDjangojobexecutionDo
	FirstOrInit() (*model.DjangoApschedulerDjangojobexecution, error)
	FirstOrCreate() (*model.DjangoApschedulerDjangojobexecution, error)
	FindByPage(offset int, limit int) (result []*model.DjangoApschedulerDjangojobexecution, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoApschedulerDjangojobexecutionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoApschedulerDjangojobexecutionDo) Debug() IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoApschedulerDjangojobexecutionDo) WithContext(ctx context.Context) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoApschedulerDjangojobexecutionDo) ReadDB() IDjangoApschedulerDjangojobexecutionDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoApschedulerDjangojobexecutionDo) WriteDB() IDjangoApschedulerDjangojobexecutionDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoApschedulerDjangojobexecutionDo) Session(config *gorm.Session) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Session(config))
}

func (d djangoApschedulerDjangojobexecutionDo) Clauses(conds ...clause.Expression) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Returning(value interface{}, columns ...string) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoApschedulerDjangojobexecutionDo) Not(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Or(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Select(conds ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Where(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoApschedulerDjangojobexecutionDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoApschedulerDjangojobexecutionDo) Order(conds ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Distinct(cols ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoApschedulerDjangojobexecutionDo) Omit(cols ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoApschedulerDjangojobexecutionDo) Join(table schema.Tabler, on ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoApschedulerDjangojobexecutionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoApschedulerDjangojobexecutionDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoApschedulerDjangojobexecutionDo) Group(cols ...field.Expr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoApschedulerDjangojobexecutionDo) Having(conds ...gen.Condition) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoApschedulerDjangojobexecutionDo) Limit(limit int) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoApschedulerDjangojobexecutionDo) Offset(offset int) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoApschedulerDjangojobexecutionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoApschedulerDjangojobexecutionDo) Unscoped() IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoApschedulerDjangojobexecutionDo) Create(values ...*model.DjangoApschedulerDjangojobexecution) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoApschedulerDjangojobexecutionDo) CreateInBatches(values []*model.DjangoApschedulerDjangojobexecution, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoApschedulerDjangojobexecutionDo) Save(values ...*model.DjangoApschedulerDjangojobexecution) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoApschedulerDjangojobexecutionDo) First() (*model.DjangoApschedulerDjangojobexecution, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoApschedulerDjangojobexecution), nil
	}
}

func (d djangoApschedulerDjangojobexecutionDo) Take() (*model.DjangoApschedulerDjangojobexecution, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoApschedulerDjangojobexecution), nil
	}
}

func (d djangoApschedulerDjangojobexecutionDo) Last() (*model.DjangoApschedulerDjangojobexecution, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoApschedulerDjangojobexecution), nil
	}
}

func (d djangoApschedulerDjangojobexecutionDo) Find() ([]*model.DjangoApschedulerDjangojobexecution, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoApschedulerDjangojobexecution), err
}

func (d djangoApschedulerDjangojobexecutionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoApschedulerDjangojobexecution, err error) {
	buf := make([]*model.DjangoApschedulerDjangojobexecution, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoApschedulerDjangojobexecutionDo) FindInBatches(result *[]*model.DjangoApschedulerDjangojobexecution, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoApschedulerDjangojobexecutionDo) Attrs(attrs ...field.AssignExpr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoApschedulerDjangojobexecutionDo) Assign(attrs ...field.AssignExpr) IDjangoApschedulerDjangojobexecutionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoApschedulerDjangojobexecutionDo) Joins(fields ...field.RelationField) IDjangoApschedulerDjangojobexecutionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoApschedulerDjangojobexecutionDo) Preload(fields ...field.RelationField) IDjangoApschedulerDjangojobexecutionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoApschedulerDjangojobexecutionDo) FirstOrInit() (*model.DjangoApschedulerDjangojobexecution, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoApschedulerDjangojobexecution), nil
	}
}

func (d djangoApschedulerDjangojobexecutionDo) FirstOrCreate() (*model.DjangoApschedulerDjangojobexecution, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoApschedulerDjangojobexecution), nil
	}
}

func (d djangoApschedulerDjangojobexecutionDo) FindByPage(offset int, limit int) (result []*model.DjangoApschedulerDjangojobexecution, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoApschedulerDjangojobexecutionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoApschedulerDjangojobexecutionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoApschedulerDjangojobexecutionDo) Delete(models ...*model.DjangoApschedulerDjangojobexecution) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoApschedulerDjangojobexecutionDo) withDO(do gen.Dao) *djangoApschedulerDjangojobexecutionDo {
	d.DO = *do.(*gen.DO)
	return d
}
