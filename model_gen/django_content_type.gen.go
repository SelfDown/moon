// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDjangoContentType(db *gorm.DB, opts ...gen.DOOption) djangoContentType {
	_djangoContentType := djangoContentType{}

	_djangoContentType.djangoContentTypeDo.UseDB(db, opts...)
	_djangoContentType.djangoContentTypeDo.UseModel(&model.DjangoContentType{})

	tableName := _djangoContentType.djangoContentTypeDo.TableName()
	_djangoContentType.ALL = field.NewAsterisk(tableName)
	_djangoContentType.ID = field.NewInt32(tableName, "id")
	_djangoContentType.AppLabel = field.NewString(tableName, "app_label")
	_djangoContentType.Model = field.NewString(tableName, "model")

	_djangoContentType.fillFieldMap()

	return _djangoContentType
}

type djangoContentType struct {
	djangoContentTypeDo

	ALL      field.Asterisk
	ID       field.Int32
	AppLabel field.String
	Model    field.String

	fieldMap map[string]field.Expr
}

func (d djangoContentType) Table(newTableName string) *djangoContentType {
	d.djangoContentTypeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoContentType) As(alias string) *djangoContentType {
	d.djangoContentTypeDo.DO = *(d.djangoContentTypeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoContentType) updateTableName(table string) *djangoContentType {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.AppLabel = field.NewString(table, "app_label")
	d.Model = field.NewString(table, "model")

	d.fillFieldMap()

	return d
}

func (d *djangoContentType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoContentType) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_label"] = d.AppLabel
	d.fieldMap["model"] = d.Model
}

func (d djangoContentType) clone(db *gorm.DB) djangoContentType {
	d.djangoContentTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d djangoContentType) replaceDB(db *gorm.DB) djangoContentType {
	d.djangoContentTypeDo.ReplaceDB(db)
	return d
}

type djangoContentTypeDo struct{ gen.DO }

type IDjangoContentTypeDo interface {
	gen.SubQuery
	Debug() IDjangoContentTypeDo
	WithContext(ctx context.Context) IDjangoContentTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDjangoContentTypeDo
	WriteDB() IDjangoContentTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDjangoContentTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoContentTypeDo
	Not(conds ...gen.Condition) IDjangoContentTypeDo
	Or(conds ...gen.Condition) IDjangoContentTypeDo
	Select(conds ...field.Expr) IDjangoContentTypeDo
	Where(conds ...gen.Condition) IDjangoContentTypeDo
	Order(conds ...field.Expr) IDjangoContentTypeDo
	Distinct(cols ...field.Expr) IDjangoContentTypeDo
	Omit(cols ...field.Expr) IDjangoContentTypeDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoContentTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoContentTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoContentTypeDo
	Group(cols ...field.Expr) IDjangoContentTypeDo
	Having(conds ...gen.Condition) IDjangoContentTypeDo
	Limit(limit int) IDjangoContentTypeDo
	Offset(offset int) IDjangoContentTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoContentTypeDo
	Unscoped() IDjangoContentTypeDo
	Create(values ...*model.DjangoContentType) error
	CreateInBatches(values []*model.DjangoContentType, batchSize int) error
	Save(values ...*model.DjangoContentType) error
	First() (*model.DjangoContentType, error)
	Take() (*model.DjangoContentType, error)
	Last() (*model.DjangoContentType, error)
	Find() ([]*model.DjangoContentType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoContentType, err error)
	FindInBatches(result *[]*model.DjangoContentType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoContentType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoContentTypeDo
	Assign(attrs ...field.AssignExpr) IDjangoContentTypeDo
	Joins(fields ...field.RelationField) IDjangoContentTypeDo
	Preload(fields ...field.RelationField) IDjangoContentTypeDo
	FirstOrInit() (*model.DjangoContentType, error)
	FirstOrCreate() (*model.DjangoContentType, error)
	FindByPage(offset int, limit int) (result []*model.DjangoContentType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoContentTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoContentTypeDo) Debug() IDjangoContentTypeDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoContentTypeDo) WithContext(ctx context.Context) IDjangoContentTypeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoContentTypeDo) ReadDB() IDjangoContentTypeDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoContentTypeDo) WriteDB() IDjangoContentTypeDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoContentTypeDo) Session(config *gorm.Session) IDjangoContentTypeDo {
	return d.withDO(d.DO.Session(config))
}

func (d djangoContentTypeDo) Clauses(conds ...clause.Expression) IDjangoContentTypeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoContentTypeDo) Returning(value interface{}, columns ...string) IDjangoContentTypeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoContentTypeDo) Not(conds ...gen.Condition) IDjangoContentTypeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoContentTypeDo) Or(conds ...gen.Condition) IDjangoContentTypeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoContentTypeDo) Select(conds ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoContentTypeDo) Where(conds ...gen.Condition) IDjangoContentTypeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoContentTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoContentTypeDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoContentTypeDo) Order(conds ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoContentTypeDo) Distinct(cols ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoContentTypeDo) Omit(cols ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoContentTypeDo) Join(table schema.Tabler, on ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoContentTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoContentTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoContentTypeDo) Group(cols ...field.Expr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoContentTypeDo) Having(conds ...gen.Condition) IDjangoContentTypeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoContentTypeDo) Limit(limit int) IDjangoContentTypeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoContentTypeDo) Offset(offset int) IDjangoContentTypeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoContentTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoContentTypeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoContentTypeDo) Unscoped() IDjangoContentTypeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoContentTypeDo) Create(values ...*model.DjangoContentType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoContentTypeDo) CreateInBatches(values []*model.DjangoContentType, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoContentTypeDo) Save(values ...*model.DjangoContentType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoContentTypeDo) First() (*model.DjangoContentType, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoContentType), nil
	}
}

func (d djangoContentTypeDo) Take() (*model.DjangoContentType, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoContentType), nil
	}
}

func (d djangoContentTypeDo) Last() (*model.DjangoContentType, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoContentType), nil
	}
}

func (d djangoContentTypeDo) Find() ([]*model.DjangoContentType, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoContentType), err
}

func (d djangoContentTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoContentType, err error) {
	buf := make([]*model.DjangoContentType, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoContentTypeDo) FindInBatches(result *[]*model.DjangoContentType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoContentTypeDo) Attrs(attrs ...field.AssignExpr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoContentTypeDo) Assign(attrs ...field.AssignExpr) IDjangoContentTypeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoContentTypeDo) Joins(fields ...field.RelationField) IDjangoContentTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoContentTypeDo) Preload(fields ...field.RelationField) IDjangoContentTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoContentTypeDo) FirstOrInit() (*model.DjangoContentType, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoContentType), nil
	}
}

func (d djangoContentTypeDo) FirstOrCreate() (*model.DjangoContentType, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoContentType), nil
	}
}

func (d djangoContentTypeDo) FindByPage(offset int, limit int) (result []*model.DjangoContentType, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoContentTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoContentTypeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoContentTypeDo) Delete(models ...*model.DjangoContentType) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoContentTypeDo) withDO(do gen.Dao) *djangoContentTypeDo {
	d.DO = *do.(*gen.DO)
	return d
}
