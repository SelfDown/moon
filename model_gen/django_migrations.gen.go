// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDjangoMigrations(db *gorm.DB, opts ...gen.DOOption) djangoMigrations {
	_djangoMigrations := djangoMigrations{}

	_djangoMigrations.djangoMigrationsDo.UseDB(db, opts...)
	_djangoMigrations.djangoMigrationsDo.UseModel(&model.DjangoMigrations{})

	tableName := _djangoMigrations.djangoMigrationsDo.TableName()
	_djangoMigrations.ALL = field.NewAsterisk(tableName)
	_djangoMigrations.ID = field.NewInt32(tableName, "id")
	_djangoMigrations.App = field.NewString(tableName, "app")
	_djangoMigrations.Name = field.NewString(tableName, "name")
	_djangoMigrations.Applied = field.NewTime(tableName, "applied")

	_djangoMigrations.fillFieldMap()

	return _djangoMigrations
}

type djangoMigrations struct {
	djangoMigrationsDo

	ALL     field.Asterisk
	ID      field.Int32
	App     field.String
	Name    field.String
	Applied field.Time

	fieldMap map[string]field.Expr
}

func (d djangoMigrations) Table(newTableName string) *djangoMigrations {
	d.djangoMigrationsDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoMigrations) As(alias string) *djangoMigrations {
	d.djangoMigrationsDo.DO = *(d.djangoMigrationsDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoMigrations) updateTableName(table string) *djangoMigrations {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.App = field.NewString(table, "app")
	d.Name = field.NewString(table, "name")
	d.Applied = field.NewTime(table, "applied")

	d.fillFieldMap()

	return d
}

func (d *djangoMigrations) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoMigrations) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app"] = d.App
	d.fieldMap["name"] = d.Name
	d.fieldMap["applied"] = d.Applied
}

func (d djangoMigrations) clone(db *gorm.DB) djangoMigrations {
	d.djangoMigrationsDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d djangoMigrations) replaceDB(db *gorm.DB) djangoMigrations {
	d.djangoMigrationsDo.ReplaceDB(db)
	return d
}

type djangoMigrationsDo struct{ gen.DO }

type IDjangoMigrationsDo interface {
	gen.SubQuery
	Debug() IDjangoMigrationsDo
	WithContext(ctx context.Context) IDjangoMigrationsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDjangoMigrationsDo
	WriteDB() IDjangoMigrationsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDjangoMigrationsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoMigrationsDo
	Not(conds ...gen.Condition) IDjangoMigrationsDo
	Or(conds ...gen.Condition) IDjangoMigrationsDo
	Select(conds ...field.Expr) IDjangoMigrationsDo
	Where(conds ...gen.Condition) IDjangoMigrationsDo
	Order(conds ...field.Expr) IDjangoMigrationsDo
	Distinct(cols ...field.Expr) IDjangoMigrationsDo
	Omit(cols ...field.Expr) IDjangoMigrationsDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoMigrationsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationsDo
	Group(cols ...field.Expr) IDjangoMigrationsDo
	Having(conds ...gen.Condition) IDjangoMigrationsDo
	Limit(limit int) IDjangoMigrationsDo
	Offset(offset int) IDjangoMigrationsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoMigrationsDo
	Unscoped() IDjangoMigrationsDo
	Create(values ...*model.DjangoMigrations) error
	CreateInBatches(values []*model.DjangoMigrations, batchSize int) error
	Save(values ...*model.DjangoMigrations) error
	First() (*model.DjangoMigrations, error)
	Take() (*model.DjangoMigrations, error)
	Last() (*model.DjangoMigrations, error)
	Find() ([]*model.DjangoMigrations, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoMigrations, err error)
	FindInBatches(result *[]*model.DjangoMigrations, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoMigrations) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoMigrationsDo
	Assign(attrs ...field.AssignExpr) IDjangoMigrationsDo
	Joins(fields ...field.RelationField) IDjangoMigrationsDo
	Preload(fields ...field.RelationField) IDjangoMigrationsDo
	FirstOrInit() (*model.DjangoMigrations, error)
	FirstOrCreate() (*model.DjangoMigrations, error)
	FindByPage(offset int, limit int) (result []*model.DjangoMigrations, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoMigrationsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoMigrationsDo) Debug() IDjangoMigrationsDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoMigrationsDo) WithContext(ctx context.Context) IDjangoMigrationsDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoMigrationsDo) ReadDB() IDjangoMigrationsDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoMigrationsDo) WriteDB() IDjangoMigrationsDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoMigrationsDo) Session(config *gorm.Session) IDjangoMigrationsDo {
	return d.withDO(d.DO.Session(config))
}

func (d djangoMigrationsDo) Clauses(conds ...clause.Expression) IDjangoMigrationsDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoMigrationsDo) Returning(value interface{}, columns ...string) IDjangoMigrationsDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoMigrationsDo) Not(conds ...gen.Condition) IDjangoMigrationsDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoMigrationsDo) Or(conds ...gen.Condition) IDjangoMigrationsDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoMigrationsDo) Select(conds ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoMigrationsDo) Where(conds ...gen.Condition) IDjangoMigrationsDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoMigrationsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoMigrationsDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoMigrationsDo) Order(conds ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoMigrationsDo) Distinct(cols ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoMigrationsDo) Omit(cols ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoMigrationsDo) Join(table schema.Tabler, on ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoMigrationsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoMigrationsDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoMigrationsDo) Group(cols ...field.Expr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoMigrationsDo) Having(conds ...gen.Condition) IDjangoMigrationsDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoMigrationsDo) Limit(limit int) IDjangoMigrationsDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoMigrationsDo) Offset(offset int) IDjangoMigrationsDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoMigrationsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoMigrationsDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoMigrationsDo) Unscoped() IDjangoMigrationsDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoMigrationsDo) Create(values ...*model.DjangoMigrations) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoMigrationsDo) CreateInBatches(values []*model.DjangoMigrations, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoMigrationsDo) Save(values ...*model.DjangoMigrations) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoMigrationsDo) First() (*model.DjangoMigrations, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigrations), nil
	}
}

func (d djangoMigrationsDo) Take() (*model.DjangoMigrations, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigrations), nil
	}
}

func (d djangoMigrationsDo) Last() (*model.DjangoMigrations, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigrations), nil
	}
}

func (d djangoMigrationsDo) Find() ([]*model.DjangoMigrations, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoMigrations), err
}

func (d djangoMigrationsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoMigrations, err error) {
	buf := make([]*model.DjangoMigrations, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoMigrationsDo) FindInBatches(result *[]*model.DjangoMigrations, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoMigrationsDo) Attrs(attrs ...field.AssignExpr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoMigrationsDo) Assign(attrs ...field.AssignExpr) IDjangoMigrationsDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoMigrationsDo) Joins(fields ...field.RelationField) IDjangoMigrationsDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoMigrationsDo) Preload(fields ...field.RelationField) IDjangoMigrationsDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoMigrationsDo) FirstOrInit() (*model.DjangoMigrations, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigrations), nil
	}
}

func (d djangoMigrationsDo) FirstOrCreate() (*model.DjangoMigrations, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoMigrations), nil
	}
}

func (d djangoMigrationsDo) FindByPage(offset int, limit int) (result []*model.DjangoMigrations, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoMigrationsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoMigrationsDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoMigrationsDo) Delete(models ...*model.DjangoMigrations) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoMigrationsDo) withDO(do gen.Dao) *djangoMigrationsDo {
	d.DO = *do.(*gen.DO)
	return d
}
