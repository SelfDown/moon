// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDjangoSession(db *gorm.DB, opts ...gen.DOOption) djangoSession {
	_djangoSession := djangoSession{}

	_djangoSession.djangoSessionDo.UseDB(db, opts...)
	_djangoSession.djangoSessionDo.UseModel(&model.DjangoSession{})

	tableName := _djangoSession.djangoSessionDo.TableName()
	_djangoSession.ALL = field.NewAsterisk(tableName)
	_djangoSession.SessionKey = field.NewString(tableName, "session_key")
	_djangoSession.SessionData = field.NewString(tableName, "session_data")
	_djangoSession.ExpireDate = field.NewTime(tableName, "expire_date")

	_djangoSession.fillFieldMap()

	return _djangoSession
}

type djangoSession struct {
	djangoSessionDo

	ALL         field.Asterisk
	SessionKey  field.String
	SessionData field.String
	ExpireDate  field.Time

	fieldMap map[string]field.Expr
}

func (d djangoSession) Table(newTableName string) *djangoSession {
	d.djangoSessionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d djangoSession) As(alias string) *djangoSession {
	d.djangoSessionDo.DO = *(d.djangoSessionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *djangoSession) updateTableName(table string) *djangoSession {
	d.ALL = field.NewAsterisk(table)
	d.SessionKey = field.NewString(table, "session_key")
	d.SessionData = field.NewString(table, "session_data")
	d.ExpireDate = field.NewTime(table, "expire_date")

	d.fillFieldMap()

	return d
}

func (d *djangoSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *djangoSession) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 3)
	d.fieldMap["session_key"] = d.SessionKey
	d.fieldMap["session_data"] = d.SessionData
	d.fieldMap["expire_date"] = d.ExpireDate
}

func (d djangoSession) clone(db *gorm.DB) djangoSession {
	d.djangoSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d djangoSession) replaceDB(db *gorm.DB) djangoSession {
	d.djangoSessionDo.ReplaceDB(db)
	return d
}

type djangoSessionDo struct{ gen.DO }

type IDjangoSessionDo interface {
	gen.SubQuery
	Debug() IDjangoSessionDo
	WithContext(ctx context.Context) IDjangoSessionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDjangoSessionDo
	WriteDB() IDjangoSessionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDjangoSessionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDjangoSessionDo
	Not(conds ...gen.Condition) IDjangoSessionDo
	Or(conds ...gen.Condition) IDjangoSessionDo
	Select(conds ...field.Expr) IDjangoSessionDo
	Where(conds ...gen.Condition) IDjangoSessionDo
	Order(conds ...field.Expr) IDjangoSessionDo
	Distinct(cols ...field.Expr) IDjangoSessionDo
	Omit(cols ...field.Expr) IDjangoSessionDo
	Join(table schema.Tabler, on ...field.Expr) IDjangoSessionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoSessionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDjangoSessionDo
	Group(cols ...field.Expr) IDjangoSessionDo
	Having(conds ...gen.Condition) IDjangoSessionDo
	Limit(limit int) IDjangoSessionDo
	Offset(offset int) IDjangoSessionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoSessionDo
	Unscoped() IDjangoSessionDo
	Create(values ...*model.DjangoSession) error
	CreateInBatches(values []*model.DjangoSession, batchSize int) error
	Save(values ...*model.DjangoSession) error
	First() (*model.DjangoSession, error)
	Take() (*model.DjangoSession, error)
	Last() (*model.DjangoSession, error)
	Find() ([]*model.DjangoSession, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoSession, err error)
	FindInBatches(result *[]*model.DjangoSession, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DjangoSession) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDjangoSessionDo
	Assign(attrs ...field.AssignExpr) IDjangoSessionDo
	Joins(fields ...field.RelationField) IDjangoSessionDo
	Preload(fields ...field.RelationField) IDjangoSessionDo
	FirstOrInit() (*model.DjangoSession, error)
	FirstOrCreate() (*model.DjangoSession, error)
	FindByPage(offset int, limit int) (result []*model.DjangoSession, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDjangoSessionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d djangoSessionDo) Debug() IDjangoSessionDo {
	return d.withDO(d.DO.Debug())
}

func (d djangoSessionDo) WithContext(ctx context.Context) IDjangoSessionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d djangoSessionDo) ReadDB() IDjangoSessionDo {
	return d.Clauses(dbresolver.Read)
}

func (d djangoSessionDo) WriteDB() IDjangoSessionDo {
	return d.Clauses(dbresolver.Write)
}

func (d djangoSessionDo) Session(config *gorm.Session) IDjangoSessionDo {
	return d.withDO(d.DO.Session(config))
}

func (d djangoSessionDo) Clauses(conds ...clause.Expression) IDjangoSessionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d djangoSessionDo) Returning(value interface{}, columns ...string) IDjangoSessionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d djangoSessionDo) Not(conds ...gen.Condition) IDjangoSessionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d djangoSessionDo) Or(conds ...gen.Condition) IDjangoSessionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d djangoSessionDo) Select(conds ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d djangoSessionDo) Where(conds ...gen.Condition) IDjangoSessionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d djangoSessionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDjangoSessionDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d djangoSessionDo) Order(conds ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d djangoSessionDo) Distinct(cols ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d djangoSessionDo) Omit(cols ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d djangoSessionDo) Join(table schema.Tabler, on ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d djangoSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d djangoSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d djangoSessionDo) Group(cols ...field.Expr) IDjangoSessionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d djangoSessionDo) Having(conds ...gen.Condition) IDjangoSessionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d djangoSessionDo) Limit(limit int) IDjangoSessionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d djangoSessionDo) Offset(offset int) IDjangoSessionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d djangoSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDjangoSessionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d djangoSessionDo) Unscoped() IDjangoSessionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d djangoSessionDo) Create(values ...*model.DjangoSession) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d djangoSessionDo) CreateInBatches(values []*model.DjangoSession, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d djangoSessionDo) Save(values ...*model.DjangoSession) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d djangoSessionDo) First() (*model.DjangoSession, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoSession), nil
	}
}

func (d djangoSessionDo) Take() (*model.DjangoSession, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoSession), nil
	}
}

func (d djangoSessionDo) Last() (*model.DjangoSession, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoSession), nil
	}
}

func (d djangoSessionDo) Find() ([]*model.DjangoSession, error) {
	result, err := d.DO.Find()
	return result.([]*model.DjangoSession), err
}

func (d djangoSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DjangoSession, err error) {
	buf := make([]*model.DjangoSession, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d djangoSessionDo) FindInBatches(result *[]*model.DjangoSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d djangoSessionDo) Attrs(attrs ...field.AssignExpr) IDjangoSessionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d djangoSessionDo) Assign(attrs ...field.AssignExpr) IDjangoSessionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d djangoSessionDo) Joins(fields ...field.RelationField) IDjangoSessionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d djangoSessionDo) Preload(fields ...field.RelationField) IDjangoSessionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d djangoSessionDo) FirstOrInit() (*model.DjangoSession, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoSession), nil
	}
}

func (d djangoSessionDo) FirstOrCreate() (*model.DjangoSession, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DjangoSession), nil
	}
}

func (d djangoSessionDo) FindByPage(offset int, limit int) (result []*model.DjangoSession, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d djangoSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d djangoSessionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d djangoSessionDo) Delete(models ...*model.DjangoSession) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *djangoSessionDo) withDO(do gen.Dao) *djangoSessionDo {
	d.DO = *do.(*gen.DO)
	return d
}
