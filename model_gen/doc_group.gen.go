// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDocGroup(db *gorm.DB, opts ...gen.DOOption) docGroup {
	_docGroup := docGroup{}

	_docGroup.docGroupDo.UseDB(db, opts...)
	_docGroup.docGroupDo.UseModel(&model.DocGroup{})

	tableName := _docGroup.docGroupDo.TableName()
	_docGroup.ALL = field.NewAsterisk(tableName)
	_docGroup.DocGroupID = field.NewString(tableName, "doc_group_id")
	_docGroup.Name = field.NewString(tableName, "name")
	_docGroup.Type = field.NewString(tableName, "type")
	_docGroup.Desc = field.NewString(tableName, "desc")
	_docGroup.OrderIndex = field.NewInt32(tableName, "order_index")
	_docGroup.CreateTime = field.NewString(tableName, "create_time")
	_docGroup.CreateUser = field.NewString(tableName, "create_user")
	_docGroup.IsDelete = field.NewString(tableName, "is_delete")

	_docGroup.fillFieldMap()

	return _docGroup
}

type docGroup struct {
	docGroupDo

	ALL        field.Asterisk
	DocGroupID field.String
	Name       field.String
	Type       field.String
	Desc       field.String
	OrderIndex field.Int32
	CreateTime field.String
	CreateUser field.String
	IsDelete   field.String

	fieldMap map[string]field.Expr
}

func (d docGroup) Table(newTableName string) *docGroup {
	d.docGroupDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d docGroup) As(alias string) *docGroup {
	d.docGroupDo.DO = *(d.docGroupDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *docGroup) updateTableName(table string) *docGroup {
	d.ALL = field.NewAsterisk(table)
	d.DocGroupID = field.NewString(table, "doc_group_id")
	d.Name = field.NewString(table, "name")
	d.Type = field.NewString(table, "type")
	d.Desc = field.NewString(table, "desc")
	d.OrderIndex = field.NewInt32(table, "order_index")
	d.CreateTime = field.NewString(table, "create_time")
	d.CreateUser = field.NewString(table, "create_user")
	d.IsDelete = field.NewString(table, "is_delete")

	d.fillFieldMap()

	return d
}

func (d *docGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *docGroup) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["doc_group_id"] = d.DocGroupID
	d.fieldMap["name"] = d.Name
	d.fieldMap["type"] = d.Type
	d.fieldMap["desc"] = d.Desc
	d.fieldMap["order_index"] = d.OrderIndex
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["create_user"] = d.CreateUser
	d.fieldMap["is_delete"] = d.IsDelete
}

func (d docGroup) clone(db *gorm.DB) docGroup {
	d.docGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d docGroup) replaceDB(db *gorm.DB) docGroup {
	d.docGroupDo.ReplaceDB(db)
	return d
}

type docGroupDo struct{ gen.DO }

type IDocGroupDo interface {
	gen.SubQuery
	Debug() IDocGroupDo
	WithContext(ctx context.Context) IDocGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocGroupDo
	WriteDB() IDocGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocGroupDo
	Not(conds ...gen.Condition) IDocGroupDo
	Or(conds ...gen.Condition) IDocGroupDo
	Select(conds ...field.Expr) IDocGroupDo
	Where(conds ...gen.Condition) IDocGroupDo
	Order(conds ...field.Expr) IDocGroupDo
	Distinct(cols ...field.Expr) IDocGroupDo
	Omit(cols ...field.Expr) IDocGroupDo
	Join(table schema.Tabler, on ...field.Expr) IDocGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocGroupDo
	Group(cols ...field.Expr) IDocGroupDo
	Having(conds ...gen.Condition) IDocGroupDo
	Limit(limit int) IDocGroupDo
	Offset(offset int) IDocGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocGroupDo
	Unscoped() IDocGroupDo
	Create(values ...*model.DocGroup) error
	CreateInBatches(values []*model.DocGroup, batchSize int) error
	Save(values ...*model.DocGroup) error
	First() (*model.DocGroup, error)
	Take() (*model.DocGroup, error)
	Last() (*model.DocGroup, error)
	Find() ([]*model.DocGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocGroup, err error)
	FindInBatches(result *[]*model.DocGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DocGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocGroupDo
	Assign(attrs ...field.AssignExpr) IDocGroupDo
	Joins(fields ...field.RelationField) IDocGroupDo
	Preload(fields ...field.RelationField) IDocGroupDo
	FirstOrInit() (*model.DocGroup, error)
	FirstOrCreate() (*model.DocGroup, error)
	FindByPage(offset int, limit int) (result []*model.DocGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d docGroupDo) Debug() IDocGroupDo {
	return d.withDO(d.DO.Debug())
}

func (d docGroupDo) WithContext(ctx context.Context) IDocGroupDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d docGroupDo) ReadDB() IDocGroupDo {
	return d.Clauses(dbresolver.Read)
}

func (d docGroupDo) WriteDB() IDocGroupDo {
	return d.Clauses(dbresolver.Write)
}

func (d docGroupDo) Session(config *gorm.Session) IDocGroupDo {
	return d.withDO(d.DO.Session(config))
}

func (d docGroupDo) Clauses(conds ...clause.Expression) IDocGroupDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d docGroupDo) Returning(value interface{}, columns ...string) IDocGroupDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d docGroupDo) Not(conds ...gen.Condition) IDocGroupDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d docGroupDo) Or(conds ...gen.Condition) IDocGroupDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d docGroupDo) Select(conds ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d docGroupDo) Where(conds ...gen.Condition) IDocGroupDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d docGroupDo) Order(conds ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d docGroupDo) Distinct(cols ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d docGroupDo) Omit(cols ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d docGroupDo) Join(table schema.Tabler, on ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d docGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d docGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d docGroupDo) Group(cols ...field.Expr) IDocGroupDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d docGroupDo) Having(conds ...gen.Condition) IDocGroupDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d docGroupDo) Limit(limit int) IDocGroupDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d docGroupDo) Offset(offset int) IDocGroupDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d docGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocGroupDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d docGroupDo) Unscoped() IDocGroupDo {
	return d.withDO(d.DO.Unscoped())
}

func (d docGroupDo) Create(values ...*model.DocGroup) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d docGroupDo) CreateInBatches(values []*model.DocGroup, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d docGroupDo) Save(values ...*model.DocGroup) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d docGroupDo) First() (*model.DocGroup, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocGroup), nil
	}
}

func (d docGroupDo) Take() (*model.DocGroup, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocGroup), nil
	}
}

func (d docGroupDo) Last() (*model.DocGroup, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocGroup), nil
	}
}

func (d docGroupDo) Find() ([]*model.DocGroup, error) {
	result, err := d.DO.Find()
	return result.([]*model.DocGroup), err
}

func (d docGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DocGroup, err error) {
	buf := make([]*model.DocGroup, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d docGroupDo) FindInBatches(result *[]*model.DocGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d docGroupDo) Attrs(attrs ...field.AssignExpr) IDocGroupDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d docGroupDo) Assign(attrs ...field.AssignExpr) IDocGroupDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d docGroupDo) Joins(fields ...field.RelationField) IDocGroupDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d docGroupDo) Preload(fields ...field.RelationField) IDocGroupDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d docGroupDo) FirstOrInit() (*model.DocGroup, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocGroup), nil
	}
}

func (d docGroupDo) FirstOrCreate() (*model.DocGroup, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DocGroup), nil
	}
}

func (d docGroupDo) FindByPage(offset int, limit int) (result []*model.DocGroup, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d docGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d docGroupDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d docGroupDo) Delete(models ...*model.DocGroup) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *docGroupDo) withDO(do gen.Dao) *docGroupDo {
	d.DO = *do.(*gen.DO)
	return d
}
