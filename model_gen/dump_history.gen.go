// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newDumpHistory(db *gorm.DB, opts ...gen.DOOption) dumpHistory {
	_dumpHistory := dumpHistory{}

	_dumpHistory.dumpHistoryDo.UseDB(db, opts...)
	_dumpHistory.dumpHistoryDo.UseModel(&model.DumpHistory{})

	tableName := _dumpHistory.dumpHistoryDo.TableName()
	_dumpHistory.ALL = field.NewAsterisk(tableName)
	_dumpHistory.DumpHistoryID = field.NewString(tableName, "dump_history_id")
	_dumpHistory.DepTaskID = field.NewString(tableName, "dep_task_id")
	_dumpHistory.ServerID = field.NewString(tableName, "server_id")
	_dumpHistory.ServerIP = field.NewString(tableName, "server_ip")
	_dumpHistory.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_dumpHistory.SoftName = field.NewString(tableName, "soft_name")
	_dumpHistory.DumpStatus = field.NewString(tableName, "dump_status")
	_dumpHistory.FlowSuccess = field.NewString(tableName, "flow_success")
	_dumpHistory.LocalPath = field.NewString(tableName, "local_path")
	_dumpHistory.RemotePath = field.NewString(tableName, "remote_path")
	_dumpHistory.FileSize = field.NewInt32(tableName, "file_size")
	_dumpHistory.FlowMsg = field.NewString(tableName, "flow_msg")
	_dumpHistory.CreateTime = field.NewString(tableName, "create_time")
	_dumpHistory.FinishTime = field.NewString(tableName, "finish_time")
	_dumpHistory.OpUser = field.NewString(tableName, "op_user")

	_dumpHistory.fillFieldMap()

	return _dumpHistory
}

type dumpHistory struct {
	dumpHistoryDo

	ALL           field.Asterisk
	DumpHistoryID field.String
	DepTaskID     field.String
	ServerID      field.String
	ServerIP      field.String
	WarArtifactid field.String
	SoftName      field.String
	DumpStatus    field.String
	FlowSuccess   field.String
	LocalPath     field.String
	RemotePath    field.String
	FileSize      field.Int32
	FlowMsg       field.String
	CreateTime    field.String
	FinishTime    field.String
	OpUser        field.String

	fieldMap map[string]field.Expr
}

func (d dumpHistory) Table(newTableName string) *dumpHistory {
	d.dumpHistoryDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dumpHistory) As(alias string) *dumpHistory {
	d.dumpHistoryDo.DO = *(d.dumpHistoryDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dumpHistory) updateTableName(table string) *dumpHistory {
	d.ALL = field.NewAsterisk(table)
	d.DumpHistoryID = field.NewString(table, "dump_history_id")
	d.DepTaskID = field.NewString(table, "dep_task_id")
	d.ServerID = field.NewString(table, "server_id")
	d.ServerIP = field.NewString(table, "server_ip")
	d.WarArtifactid = field.NewString(table, "war_artifactid")
	d.SoftName = field.NewString(table, "soft_name")
	d.DumpStatus = field.NewString(table, "dump_status")
	d.FlowSuccess = field.NewString(table, "flow_success")
	d.LocalPath = field.NewString(table, "local_path")
	d.RemotePath = field.NewString(table, "remote_path")
	d.FileSize = field.NewInt32(table, "file_size")
	d.FlowMsg = field.NewString(table, "flow_msg")
	d.CreateTime = field.NewString(table, "create_time")
	d.FinishTime = field.NewString(table, "finish_time")
	d.OpUser = field.NewString(table, "op_user")

	d.fillFieldMap()

	return d
}

func (d *dumpHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dumpHistory) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["dump_history_id"] = d.DumpHistoryID
	d.fieldMap["dep_task_id"] = d.DepTaskID
	d.fieldMap["server_id"] = d.ServerID
	d.fieldMap["server_ip"] = d.ServerIP
	d.fieldMap["war_artifactid"] = d.WarArtifactid
	d.fieldMap["soft_name"] = d.SoftName
	d.fieldMap["dump_status"] = d.DumpStatus
	d.fieldMap["flow_success"] = d.FlowSuccess
	d.fieldMap["local_path"] = d.LocalPath
	d.fieldMap["remote_path"] = d.RemotePath
	d.fieldMap["file_size"] = d.FileSize
	d.fieldMap["flow_msg"] = d.FlowMsg
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["finish_time"] = d.FinishTime
	d.fieldMap["op_user"] = d.OpUser
}

func (d dumpHistory) clone(db *gorm.DB) dumpHistory {
	d.dumpHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dumpHistory) replaceDB(db *gorm.DB) dumpHistory {
	d.dumpHistoryDo.ReplaceDB(db)
	return d
}

type dumpHistoryDo struct{ gen.DO }

type IDumpHistoryDo interface {
	gen.SubQuery
	Debug() IDumpHistoryDo
	WithContext(ctx context.Context) IDumpHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDumpHistoryDo
	WriteDB() IDumpHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDumpHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDumpHistoryDo
	Not(conds ...gen.Condition) IDumpHistoryDo
	Or(conds ...gen.Condition) IDumpHistoryDo
	Select(conds ...field.Expr) IDumpHistoryDo
	Where(conds ...gen.Condition) IDumpHistoryDo
	Order(conds ...field.Expr) IDumpHistoryDo
	Distinct(cols ...field.Expr) IDumpHistoryDo
	Omit(cols ...field.Expr) IDumpHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IDumpHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDumpHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDumpHistoryDo
	Group(cols ...field.Expr) IDumpHistoryDo
	Having(conds ...gen.Condition) IDumpHistoryDo
	Limit(limit int) IDumpHistoryDo
	Offset(offset int) IDumpHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDumpHistoryDo
	Unscoped() IDumpHistoryDo
	Create(values ...*model.DumpHistory) error
	CreateInBatches(values []*model.DumpHistory, batchSize int) error
	Save(values ...*model.DumpHistory) error
	First() (*model.DumpHistory, error)
	Take() (*model.DumpHistory, error)
	Last() (*model.DumpHistory, error)
	Find() ([]*model.DumpHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DumpHistory, err error)
	FindInBatches(result *[]*model.DumpHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DumpHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDumpHistoryDo
	Assign(attrs ...field.AssignExpr) IDumpHistoryDo
	Joins(fields ...field.RelationField) IDumpHistoryDo
	Preload(fields ...field.RelationField) IDumpHistoryDo
	FirstOrInit() (*model.DumpHistory, error)
	FirstOrCreate() (*model.DumpHistory, error)
	FindByPage(offset int, limit int) (result []*model.DumpHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDumpHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dumpHistoryDo) Debug() IDumpHistoryDo {
	return d.withDO(d.DO.Debug())
}

func (d dumpHistoryDo) WithContext(ctx context.Context) IDumpHistoryDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dumpHistoryDo) ReadDB() IDumpHistoryDo {
	return d.Clauses(dbresolver.Read)
}

func (d dumpHistoryDo) WriteDB() IDumpHistoryDo {
	return d.Clauses(dbresolver.Write)
}

func (d dumpHistoryDo) Session(config *gorm.Session) IDumpHistoryDo {
	return d.withDO(d.DO.Session(config))
}

func (d dumpHistoryDo) Clauses(conds ...clause.Expression) IDumpHistoryDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dumpHistoryDo) Returning(value interface{}, columns ...string) IDumpHistoryDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dumpHistoryDo) Not(conds ...gen.Condition) IDumpHistoryDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dumpHistoryDo) Or(conds ...gen.Condition) IDumpHistoryDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dumpHistoryDo) Select(conds ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dumpHistoryDo) Where(conds ...gen.Condition) IDumpHistoryDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dumpHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDumpHistoryDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dumpHistoryDo) Order(conds ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dumpHistoryDo) Distinct(cols ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dumpHistoryDo) Omit(cols ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dumpHistoryDo) Join(table schema.Tabler, on ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dumpHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dumpHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dumpHistoryDo) Group(cols ...field.Expr) IDumpHistoryDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dumpHistoryDo) Having(conds ...gen.Condition) IDumpHistoryDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dumpHistoryDo) Limit(limit int) IDumpHistoryDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dumpHistoryDo) Offset(offset int) IDumpHistoryDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dumpHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDumpHistoryDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dumpHistoryDo) Unscoped() IDumpHistoryDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dumpHistoryDo) Create(values ...*model.DumpHistory) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dumpHistoryDo) CreateInBatches(values []*model.DumpHistory, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dumpHistoryDo) Save(values ...*model.DumpHistory) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dumpHistoryDo) First() (*model.DumpHistory, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DumpHistory), nil
	}
}

func (d dumpHistoryDo) Take() (*model.DumpHistory, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DumpHistory), nil
	}
}

func (d dumpHistoryDo) Last() (*model.DumpHistory, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DumpHistory), nil
	}
}

func (d dumpHistoryDo) Find() ([]*model.DumpHistory, error) {
	result, err := d.DO.Find()
	return result.([]*model.DumpHistory), err
}

func (d dumpHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DumpHistory, err error) {
	buf := make([]*model.DumpHistory, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dumpHistoryDo) FindInBatches(result *[]*model.DumpHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dumpHistoryDo) Attrs(attrs ...field.AssignExpr) IDumpHistoryDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dumpHistoryDo) Assign(attrs ...field.AssignExpr) IDumpHistoryDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dumpHistoryDo) Joins(fields ...field.RelationField) IDumpHistoryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dumpHistoryDo) Preload(fields ...field.RelationField) IDumpHistoryDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dumpHistoryDo) FirstOrInit() (*model.DumpHistory, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DumpHistory), nil
	}
}

func (d dumpHistoryDo) FirstOrCreate() (*model.DumpHistory, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DumpHistory), nil
	}
}

func (d dumpHistoryDo) FindByPage(offset int, limit int) (result []*model.DumpHistory, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dumpHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dumpHistoryDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dumpHistoryDo) Delete(models ...*model.DumpHistory) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dumpHistoryDo) withDO(do gen.Dao) *dumpHistoryDo {
	d.DO = *do.(*gen.DO)
	return d
}
