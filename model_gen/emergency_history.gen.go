// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newEmergencyHistory(db *gorm.DB, opts ...gen.DOOption) emergencyHistory {
	_emergencyHistory := emergencyHistory{}

	_emergencyHistory.emergencyHistoryDo.UseDB(db, opts...)
	_emergencyHistory.emergencyHistoryDo.UseModel(&model.EmergencyHistory{})

	tableName := _emergencyHistory.emergencyHistoryDo.TableName()
	_emergencyHistory.ALL = field.NewAsterisk(tableName)
	_emergencyHistory.EmergencyHistoryID = field.NewString(tableName, "emergency_history_id")
	_emergencyHistory.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_emergencyHistory.Room = field.NewString(tableName, "room")
	_emergencyHistory.RoomCode = field.NewString(tableName, "room_code")
	_emergencyHistory.EmergencyTime = field.NewString(tableName, "emergency_time")
	_emergencyHistory.EmergencyUser = field.NewString(tableName, "emergency_user")
	_emergencyHistory.EmergencyWorkCode = field.NewString(tableName, "emergency_work_code")
	_emergencyHistory.EmergencyMsg = field.NewString(tableName, "emergency_msg")
	_emergencyHistory.RecordStatus = field.NewString(tableName, "record_status")
	_emergencyHistory.ResolveUser = field.NewString(tableName, "resolve_user")
	_emergencyHistory.ResolveUserID = field.NewString(tableName, "resolve_user_id")
	_emergencyHistory.ResolveComment = field.NewString(tableName, "resolve_comment")
	_emergencyHistory.ResolveTime = field.NewString(tableName, "resolve_time")

	_emergencyHistory.fillFieldMap()

	return _emergencyHistory
}

type emergencyHistory struct {
	emergencyHistoryDo

	ALL                field.Asterisk
	EmergencyHistoryID field.String
	HisIssueRecordID   field.String
	Room               field.String
	RoomCode           field.String
	EmergencyTime      field.String
	EmergencyUser      field.String // 标题
	EmergencyWorkCode  field.String // 标题
	EmergencyMsg       field.String
	RecordStatus       field.String
	ResolveUser        field.String
	ResolveUserID      field.String
	ResolveComment     field.String
	ResolveTime        field.String

	fieldMap map[string]field.Expr
}

func (e emergencyHistory) Table(newTableName string) *emergencyHistory {
	e.emergencyHistoryDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emergencyHistory) As(alias string) *emergencyHistory {
	e.emergencyHistoryDo.DO = *(e.emergencyHistoryDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emergencyHistory) updateTableName(table string) *emergencyHistory {
	e.ALL = field.NewAsterisk(table)
	e.EmergencyHistoryID = field.NewString(table, "emergency_history_id")
	e.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	e.Room = field.NewString(table, "room")
	e.RoomCode = field.NewString(table, "room_code")
	e.EmergencyTime = field.NewString(table, "emergency_time")
	e.EmergencyUser = field.NewString(table, "emergency_user")
	e.EmergencyWorkCode = field.NewString(table, "emergency_work_code")
	e.EmergencyMsg = field.NewString(table, "emergency_msg")
	e.RecordStatus = field.NewString(table, "record_status")
	e.ResolveUser = field.NewString(table, "resolve_user")
	e.ResolveUserID = field.NewString(table, "resolve_user_id")
	e.ResolveComment = field.NewString(table, "resolve_comment")
	e.ResolveTime = field.NewString(table, "resolve_time")

	e.fillFieldMap()

	return e
}

func (e *emergencyHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emergencyHistory) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["emergency_history_id"] = e.EmergencyHistoryID
	e.fieldMap["his_issue_record_id"] = e.HisIssueRecordID
	e.fieldMap["room"] = e.Room
	e.fieldMap["room_code"] = e.RoomCode
	e.fieldMap["emergency_time"] = e.EmergencyTime
	e.fieldMap["emergency_user"] = e.EmergencyUser
	e.fieldMap["emergency_work_code"] = e.EmergencyWorkCode
	e.fieldMap["emergency_msg"] = e.EmergencyMsg
	e.fieldMap["record_status"] = e.RecordStatus
	e.fieldMap["resolve_user"] = e.ResolveUser
	e.fieldMap["resolve_user_id"] = e.ResolveUserID
	e.fieldMap["resolve_comment"] = e.ResolveComment
	e.fieldMap["resolve_time"] = e.ResolveTime
}

func (e emergencyHistory) clone(db *gorm.DB) emergencyHistory {
	e.emergencyHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e emergencyHistory) replaceDB(db *gorm.DB) emergencyHistory {
	e.emergencyHistoryDo.ReplaceDB(db)
	return e
}

type emergencyHistoryDo struct{ gen.DO }

type IEmergencyHistoryDo interface {
	gen.SubQuery
	Debug() IEmergencyHistoryDo
	WithContext(ctx context.Context) IEmergencyHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEmergencyHistoryDo
	WriteDB() IEmergencyHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEmergencyHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmergencyHistoryDo
	Not(conds ...gen.Condition) IEmergencyHistoryDo
	Or(conds ...gen.Condition) IEmergencyHistoryDo
	Select(conds ...field.Expr) IEmergencyHistoryDo
	Where(conds ...gen.Condition) IEmergencyHistoryDo
	Order(conds ...field.Expr) IEmergencyHistoryDo
	Distinct(cols ...field.Expr) IEmergencyHistoryDo
	Omit(cols ...field.Expr) IEmergencyHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IEmergencyHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmergencyHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmergencyHistoryDo
	Group(cols ...field.Expr) IEmergencyHistoryDo
	Having(conds ...gen.Condition) IEmergencyHistoryDo
	Limit(limit int) IEmergencyHistoryDo
	Offset(offset int) IEmergencyHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmergencyHistoryDo
	Unscoped() IEmergencyHistoryDo
	Create(values ...*model.EmergencyHistory) error
	CreateInBatches(values []*model.EmergencyHistory, batchSize int) error
	Save(values ...*model.EmergencyHistory) error
	First() (*model.EmergencyHistory, error)
	Take() (*model.EmergencyHistory, error)
	Last() (*model.EmergencyHistory, error)
	Find() ([]*model.EmergencyHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmergencyHistory, err error)
	FindInBatches(result *[]*model.EmergencyHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EmergencyHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmergencyHistoryDo
	Assign(attrs ...field.AssignExpr) IEmergencyHistoryDo
	Joins(fields ...field.RelationField) IEmergencyHistoryDo
	Preload(fields ...field.RelationField) IEmergencyHistoryDo
	FirstOrInit() (*model.EmergencyHistory, error)
	FirstOrCreate() (*model.EmergencyHistory, error)
	FindByPage(offset int, limit int) (result []*model.EmergencyHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmergencyHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e emergencyHistoryDo) Debug() IEmergencyHistoryDo {
	return e.withDO(e.DO.Debug())
}

func (e emergencyHistoryDo) WithContext(ctx context.Context) IEmergencyHistoryDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e emergencyHistoryDo) ReadDB() IEmergencyHistoryDo {
	return e.Clauses(dbresolver.Read)
}

func (e emergencyHistoryDo) WriteDB() IEmergencyHistoryDo {
	return e.Clauses(dbresolver.Write)
}

func (e emergencyHistoryDo) Session(config *gorm.Session) IEmergencyHistoryDo {
	return e.withDO(e.DO.Session(config))
}

func (e emergencyHistoryDo) Clauses(conds ...clause.Expression) IEmergencyHistoryDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e emergencyHistoryDo) Returning(value interface{}, columns ...string) IEmergencyHistoryDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e emergencyHistoryDo) Not(conds ...gen.Condition) IEmergencyHistoryDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e emergencyHistoryDo) Or(conds ...gen.Condition) IEmergencyHistoryDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e emergencyHistoryDo) Select(conds ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e emergencyHistoryDo) Where(conds ...gen.Condition) IEmergencyHistoryDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e emergencyHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEmergencyHistoryDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e emergencyHistoryDo) Order(conds ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e emergencyHistoryDo) Distinct(cols ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e emergencyHistoryDo) Omit(cols ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e emergencyHistoryDo) Join(table schema.Tabler, on ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e emergencyHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e emergencyHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e emergencyHistoryDo) Group(cols ...field.Expr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e emergencyHistoryDo) Having(conds ...gen.Condition) IEmergencyHistoryDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e emergencyHistoryDo) Limit(limit int) IEmergencyHistoryDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e emergencyHistoryDo) Offset(offset int) IEmergencyHistoryDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e emergencyHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmergencyHistoryDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e emergencyHistoryDo) Unscoped() IEmergencyHistoryDo {
	return e.withDO(e.DO.Unscoped())
}

func (e emergencyHistoryDo) Create(values ...*model.EmergencyHistory) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e emergencyHistoryDo) CreateInBatches(values []*model.EmergencyHistory, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e emergencyHistoryDo) Save(values ...*model.EmergencyHistory) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e emergencyHistoryDo) First() (*model.EmergencyHistory, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmergencyHistory), nil
	}
}

func (e emergencyHistoryDo) Take() (*model.EmergencyHistory, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmergencyHistory), nil
	}
}

func (e emergencyHistoryDo) Last() (*model.EmergencyHistory, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmergencyHistory), nil
	}
}

func (e emergencyHistoryDo) Find() ([]*model.EmergencyHistory, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmergencyHistory), err
}

func (e emergencyHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmergencyHistory, err error) {
	buf := make([]*model.EmergencyHistory, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e emergencyHistoryDo) FindInBatches(result *[]*model.EmergencyHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e emergencyHistoryDo) Attrs(attrs ...field.AssignExpr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e emergencyHistoryDo) Assign(attrs ...field.AssignExpr) IEmergencyHistoryDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e emergencyHistoryDo) Joins(fields ...field.RelationField) IEmergencyHistoryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e emergencyHistoryDo) Preload(fields ...field.RelationField) IEmergencyHistoryDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e emergencyHistoryDo) FirstOrInit() (*model.EmergencyHistory, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmergencyHistory), nil
	}
}

func (e emergencyHistoryDo) FirstOrCreate() (*model.EmergencyHistory, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmergencyHistory), nil
	}
}

func (e emergencyHistoryDo) FindByPage(offset int, limit int) (result []*model.EmergencyHistory, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e emergencyHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e emergencyHistoryDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e emergencyHistoryDo) Delete(models ...*model.EmergencyHistory) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *emergencyHistoryDo) withDO(do gen.Dao) *emergencyHistoryDo {
	e.DO = *do.(*gen.DO)
	return e
}
