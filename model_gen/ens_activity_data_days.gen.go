// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newEnsActivityDataDays(db *gorm.DB, opts ...gen.DOOption) ensActivityDataDays {
	_ensActivityDataDays := ensActivityDataDays{}

	_ensActivityDataDays.ensActivityDataDaysDo.UseDB(db, opts...)
	_ensActivityDataDays.ensActivityDataDaysDo.UseModel(&model.EnsActivityDataDays{})

	tableName := _ensActivityDataDays.ensActivityDataDaysDo.TableName()
	_ensActivityDataDays.ALL = field.NewAsterisk(tableName)
	_ensActivityDataDays.ID = field.NewInt32(tableName, "id")
	_ensActivityDataDays.Hostname = field.NewString(tableName, "hostname")
	_ensActivityDataDays.Hosttype = field.NewString(tableName, "hosttype")
	_ensActivityDataDays.Instance = field.NewString(tableName, "instance")
	_ensActivityDataDays.Namespace = field.NewString(tableName, "namespace")
	_ensActivityDataDays.Period = field.NewInt32(tableName, "period")
	_ensActivityDataDays.Sitedimension = field.NewString(tableName, "sitedimension")
	_ensActivityDataDays.Timeslot = field.NewTime(tableName, "timeslot")
	_ensActivityDataDays.Timeslotutc = field.NewTime(tableName, "timeslotutc")
	_ensActivityDataDays.Totalcount = field.NewInt32(tableName, "totalcount")
	_ensActivityDataDays.Totalduration = field.NewFloat64(tableName, "totalduration")
	_ensActivityDataDays.Totaldurationsquare = field.NewFloat64(tableName, "totaldurationsquare")
	_ensActivityDataDays.Totalqueueduration = field.NewFloat64(tableName, "totalqueueduration")
	_ensActivityDataDays.Project = field.NewString(tableName, "project")

	_ensActivityDataDays.fillFieldMap()

	return _ensActivityDataDays
}

type ensActivityDataDays struct {
	ensActivityDataDaysDo

	ALL                 field.Asterisk
	ID                  field.Int32
	Hostname            field.String
	Hosttype            field.String
	Instance            field.String
	Namespace           field.String
	Period              field.Int32
	Sitedimension       field.String
	Timeslot            field.Time
	Timeslotutc         field.Time
	Totalcount          field.Int32
	Totalduration       field.Float64
	Totaldurationsquare field.Float64
	Totalqueueduration  field.Float64
	Project             field.String // 项目编码

	fieldMap map[string]field.Expr
}

func (e ensActivityDataDays) Table(newTableName string) *ensActivityDataDays {
	e.ensActivityDataDaysDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ensActivityDataDays) As(alias string) *ensActivityDataDays {
	e.ensActivityDataDaysDo.DO = *(e.ensActivityDataDaysDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ensActivityDataDays) updateTableName(table string) *ensActivityDataDays {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Hostname = field.NewString(table, "hostname")
	e.Hosttype = field.NewString(table, "hosttype")
	e.Instance = field.NewString(table, "instance")
	e.Namespace = field.NewString(table, "namespace")
	e.Period = field.NewInt32(table, "period")
	e.Sitedimension = field.NewString(table, "sitedimension")
	e.Timeslot = field.NewTime(table, "timeslot")
	e.Timeslotutc = field.NewTime(table, "timeslotutc")
	e.Totalcount = field.NewInt32(table, "totalcount")
	e.Totalduration = field.NewFloat64(table, "totalduration")
	e.Totaldurationsquare = field.NewFloat64(table, "totaldurationsquare")
	e.Totalqueueduration = field.NewFloat64(table, "totalqueueduration")
	e.Project = field.NewString(table, "project")

	e.fillFieldMap()

	return e
}

func (e *ensActivityDataDays) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ensActivityDataDays) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["hostname"] = e.Hostname
	e.fieldMap["hosttype"] = e.Hosttype
	e.fieldMap["instance"] = e.Instance
	e.fieldMap["namespace"] = e.Namespace
	e.fieldMap["period"] = e.Period
	e.fieldMap["sitedimension"] = e.Sitedimension
	e.fieldMap["timeslot"] = e.Timeslot
	e.fieldMap["timeslotutc"] = e.Timeslotutc
	e.fieldMap["totalcount"] = e.Totalcount
	e.fieldMap["totalduration"] = e.Totalduration
	e.fieldMap["totaldurationsquare"] = e.Totaldurationsquare
	e.fieldMap["totalqueueduration"] = e.Totalqueueduration
	e.fieldMap["project"] = e.Project
}

func (e ensActivityDataDays) clone(db *gorm.DB) ensActivityDataDays {
	e.ensActivityDataDaysDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ensActivityDataDays) replaceDB(db *gorm.DB) ensActivityDataDays {
	e.ensActivityDataDaysDo.ReplaceDB(db)
	return e
}

type ensActivityDataDaysDo struct{ gen.DO }

type IEnsActivityDataDaysDo interface {
	gen.SubQuery
	Debug() IEnsActivityDataDaysDo
	WithContext(ctx context.Context) IEnsActivityDataDaysDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnsActivityDataDaysDo
	WriteDB() IEnsActivityDataDaysDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnsActivityDataDaysDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnsActivityDataDaysDo
	Not(conds ...gen.Condition) IEnsActivityDataDaysDo
	Or(conds ...gen.Condition) IEnsActivityDataDaysDo
	Select(conds ...field.Expr) IEnsActivityDataDaysDo
	Where(conds ...gen.Condition) IEnsActivityDataDaysDo
	Order(conds ...field.Expr) IEnsActivityDataDaysDo
	Distinct(cols ...field.Expr) IEnsActivityDataDaysDo
	Omit(cols ...field.Expr) IEnsActivityDataDaysDo
	Join(table schema.Tabler, on ...field.Expr) IEnsActivityDataDaysDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnsActivityDataDaysDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnsActivityDataDaysDo
	Group(cols ...field.Expr) IEnsActivityDataDaysDo
	Having(conds ...gen.Condition) IEnsActivityDataDaysDo
	Limit(limit int) IEnsActivityDataDaysDo
	Offset(offset int) IEnsActivityDataDaysDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsActivityDataDaysDo
	Unscoped() IEnsActivityDataDaysDo
	Create(values ...*model.EnsActivityDataDays) error
	CreateInBatches(values []*model.EnsActivityDataDays, batchSize int) error
	Save(values ...*model.EnsActivityDataDays) error
	First() (*model.EnsActivityDataDays, error)
	Take() (*model.EnsActivityDataDays, error)
	Last() (*model.EnsActivityDataDays, error)
	Find() ([]*model.EnsActivityDataDays, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsActivityDataDays, err error)
	FindInBatches(result *[]*model.EnsActivityDataDays, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnsActivityDataDays) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnsActivityDataDaysDo
	Assign(attrs ...field.AssignExpr) IEnsActivityDataDaysDo
	Joins(fields ...field.RelationField) IEnsActivityDataDaysDo
	Preload(fields ...field.RelationField) IEnsActivityDataDaysDo
	FirstOrInit() (*model.EnsActivityDataDays, error)
	FirstOrCreate() (*model.EnsActivityDataDays, error)
	FindByPage(offset int, limit int) (result []*model.EnsActivityDataDays, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnsActivityDataDaysDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ensActivityDataDaysDo) Debug() IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Debug())
}

func (e ensActivityDataDaysDo) WithContext(ctx context.Context) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ensActivityDataDaysDo) ReadDB() IEnsActivityDataDaysDo {
	return e.Clauses(dbresolver.Read)
}

func (e ensActivityDataDaysDo) WriteDB() IEnsActivityDataDaysDo {
	return e.Clauses(dbresolver.Write)
}

func (e ensActivityDataDaysDo) Session(config *gorm.Session) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Session(config))
}

func (e ensActivityDataDaysDo) Clauses(conds ...clause.Expression) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ensActivityDataDaysDo) Returning(value interface{}, columns ...string) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ensActivityDataDaysDo) Not(conds ...gen.Condition) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ensActivityDataDaysDo) Or(conds ...gen.Condition) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ensActivityDataDaysDo) Select(conds ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ensActivityDataDaysDo) Where(conds ...gen.Condition) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ensActivityDataDaysDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEnsActivityDataDaysDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ensActivityDataDaysDo) Order(conds ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ensActivityDataDaysDo) Distinct(cols ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ensActivityDataDaysDo) Omit(cols ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ensActivityDataDaysDo) Join(table schema.Tabler, on ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ensActivityDataDaysDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ensActivityDataDaysDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ensActivityDataDaysDo) Group(cols ...field.Expr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ensActivityDataDaysDo) Having(conds ...gen.Condition) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ensActivityDataDaysDo) Limit(limit int) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ensActivityDataDaysDo) Offset(offset int) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ensActivityDataDaysDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ensActivityDataDaysDo) Unscoped() IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ensActivityDataDaysDo) Create(values ...*model.EnsActivityDataDays) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ensActivityDataDaysDo) CreateInBatches(values []*model.EnsActivityDataDays, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ensActivityDataDaysDo) Save(values ...*model.EnsActivityDataDays) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ensActivityDataDaysDo) First() (*model.EnsActivityDataDays, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsActivityDataDays), nil
	}
}

func (e ensActivityDataDaysDo) Take() (*model.EnsActivityDataDays, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsActivityDataDays), nil
	}
}

func (e ensActivityDataDaysDo) Last() (*model.EnsActivityDataDays, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsActivityDataDays), nil
	}
}

func (e ensActivityDataDaysDo) Find() ([]*model.EnsActivityDataDays, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnsActivityDataDays), err
}

func (e ensActivityDataDaysDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsActivityDataDays, err error) {
	buf := make([]*model.EnsActivityDataDays, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ensActivityDataDaysDo) FindInBatches(result *[]*model.EnsActivityDataDays, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ensActivityDataDaysDo) Attrs(attrs ...field.AssignExpr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ensActivityDataDaysDo) Assign(attrs ...field.AssignExpr) IEnsActivityDataDaysDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ensActivityDataDaysDo) Joins(fields ...field.RelationField) IEnsActivityDataDaysDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ensActivityDataDaysDo) Preload(fields ...field.RelationField) IEnsActivityDataDaysDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ensActivityDataDaysDo) FirstOrInit() (*model.EnsActivityDataDays, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsActivityDataDays), nil
	}
}

func (e ensActivityDataDaysDo) FirstOrCreate() (*model.EnsActivityDataDays, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsActivityDataDays), nil
	}
}

func (e ensActivityDataDaysDo) FindByPage(offset int, limit int) (result []*model.EnsActivityDataDays, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ensActivityDataDaysDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ensActivityDataDaysDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ensActivityDataDaysDo) Delete(models ...*model.EnsActivityDataDays) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ensActivityDataDaysDo) withDO(do gen.Dao) *ensActivityDataDaysDo {
	e.DO = *do.(*gen.DO)
	return e
}
