// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newEnsMessageheader(db *gorm.DB, opts ...gen.DOOption) ensMessageheader {
	_ensMessageheader := ensMessageheader{}

	_ensMessageheader.ensMessageheaderDo.UseDB(db, opts...)
	_ensMessageheader.ensMessageheaderDo.UseModel(&model.EnsMessageheader{})

	tableName := _ensMessageheader.ensMessageheaderDo.TableName()
	_ensMessageheader.ALL = field.NewAsterisk(tableName)
	_ensMessageheader.ID = field.NewInt32(tableName, "id")
	_ensMessageheader.Banked = field.NewInt32(tableName, "banked")
	_ensMessageheader.Businessprocessid = field.NewInt32(tableName, "businessprocessid")
	_ensMessageheader.Correspondingmessageid = field.NewInt32(tableName, "correspondingmessageid")
	_ensMessageheader.Description = field.NewString(tableName, "description")
	_ensMessageheader.Errorstatus = field.NewString(tableName, "errorstatus")
	_ensMessageheader.Invocation = field.NewInt32(tableName, "invocation")
	_ensMessageheader.Iserror = field.NewString(tableName, "iserror")
	_ensMessageheader.Messagebodyclassname = field.NewString(tableName, "messagebodyclassname")
	_ensMessageheader.Messagebodyid = field.NewString(tableName, "messagebodyid")
	_ensMessageheader.Priority = field.NewInt32(tableName, "priority")
	_ensMessageheader.Resent = field.NewString(tableName, "resent")
	_ensMessageheader.Returnqueuename = field.NewString(tableName, "returnqueuename")
	_ensMessageheader.Sessionid = field.NewInt32(tableName, "sessionid")
	_ensMessageheader.Sourcebusinesstype = field.NewInt32(tableName, "sourcebusinesstype")
	_ensMessageheader.Sourceconfigname = field.NewString(tableName, "sourceconfigname")
	_ensMessageheader.Status = field.NewInt32(tableName, "status")
	_ensMessageheader.Supersession = field.NewString(tableName, "supersession")
	_ensMessageheader.Targetbusinesstype = field.NewString(tableName, "targetbusinesstype")
	_ensMessageheader.Targetconfigname = field.NewString(tableName, "targetconfigname")
	_ensMessageheader.Targetqueuename = field.NewString(tableName, "targetqueuename")
	_ensMessageheader.Timecreated = field.NewTime(tableName, "timecreated")
	_ensMessageheader.Timeprocessed = field.NewTime(tableName, "timeprocessed")
	_ensMessageheader.Type = field.NewInt32(tableName, "type")
	_ensMessageheader.Project = field.NewString(tableName, "project")

	_ensMessageheader.fillFieldMap()

	return _ensMessageheader
}

type ensMessageheader struct {
	ensMessageheaderDo

	ALL                    field.Asterisk
	ID                     field.Int32
	Banked                 field.Int32
	Businessprocessid      field.Int32
	Correspondingmessageid field.Int32
	Description            field.String
	Errorstatus            field.String
	Invocation             field.Int32
	Iserror                field.String
	Messagebodyclassname   field.String
	Messagebodyid          field.String
	Priority               field.Int32
	Resent                 field.String
	Returnqueuename        field.String
	Sessionid              field.Int32
	Sourcebusinesstype     field.Int32
	Sourceconfigname       field.String
	Status                 field.Int32
	Supersession           field.String
	Targetbusinesstype     field.String
	Targetconfigname       field.String
	Targetqueuename        field.String
	Timecreated            field.Time
	Timeprocessed          field.Time
	Type                   field.Int32
	Project                field.String

	fieldMap map[string]field.Expr
}

func (e ensMessageheader) Table(newTableName string) *ensMessageheader {
	e.ensMessageheaderDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ensMessageheader) As(alias string) *ensMessageheader {
	e.ensMessageheaderDo.DO = *(e.ensMessageheaderDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ensMessageheader) updateTableName(table string) *ensMessageheader {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Banked = field.NewInt32(table, "banked")
	e.Businessprocessid = field.NewInt32(table, "businessprocessid")
	e.Correspondingmessageid = field.NewInt32(table, "correspondingmessageid")
	e.Description = field.NewString(table, "description")
	e.Errorstatus = field.NewString(table, "errorstatus")
	e.Invocation = field.NewInt32(table, "invocation")
	e.Iserror = field.NewString(table, "iserror")
	e.Messagebodyclassname = field.NewString(table, "messagebodyclassname")
	e.Messagebodyid = field.NewString(table, "messagebodyid")
	e.Priority = field.NewInt32(table, "priority")
	e.Resent = field.NewString(table, "resent")
	e.Returnqueuename = field.NewString(table, "returnqueuename")
	e.Sessionid = field.NewInt32(table, "sessionid")
	e.Sourcebusinesstype = field.NewInt32(table, "sourcebusinesstype")
	e.Sourceconfigname = field.NewString(table, "sourceconfigname")
	e.Status = field.NewInt32(table, "status")
	e.Supersession = field.NewString(table, "supersession")
	e.Targetbusinesstype = field.NewString(table, "targetbusinesstype")
	e.Targetconfigname = field.NewString(table, "targetconfigname")
	e.Targetqueuename = field.NewString(table, "targetqueuename")
	e.Timecreated = field.NewTime(table, "timecreated")
	e.Timeprocessed = field.NewTime(table, "timeprocessed")
	e.Type = field.NewInt32(table, "type")
	e.Project = field.NewString(table, "project")

	e.fillFieldMap()

	return e
}

func (e *ensMessageheader) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ensMessageheader) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 25)
	e.fieldMap["id"] = e.ID
	e.fieldMap["banked"] = e.Banked
	e.fieldMap["businessprocessid"] = e.Businessprocessid
	e.fieldMap["correspondingmessageid"] = e.Correspondingmessageid
	e.fieldMap["description"] = e.Description
	e.fieldMap["errorstatus"] = e.Errorstatus
	e.fieldMap["invocation"] = e.Invocation
	e.fieldMap["iserror"] = e.Iserror
	e.fieldMap["messagebodyclassname"] = e.Messagebodyclassname
	e.fieldMap["messagebodyid"] = e.Messagebodyid
	e.fieldMap["priority"] = e.Priority
	e.fieldMap["resent"] = e.Resent
	e.fieldMap["returnqueuename"] = e.Returnqueuename
	e.fieldMap["sessionid"] = e.Sessionid
	e.fieldMap["sourcebusinesstype"] = e.Sourcebusinesstype
	e.fieldMap["sourceconfigname"] = e.Sourceconfigname
	e.fieldMap["status"] = e.Status
	e.fieldMap["supersession"] = e.Supersession
	e.fieldMap["targetbusinesstype"] = e.Targetbusinesstype
	e.fieldMap["targetconfigname"] = e.Targetconfigname
	e.fieldMap["targetqueuename"] = e.Targetqueuename
	e.fieldMap["timecreated"] = e.Timecreated
	e.fieldMap["timeprocessed"] = e.Timeprocessed
	e.fieldMap["type"] = e.Type
	e.fieldMap["project"] = e.Project
}

func (e ensMessageheader) clone(db *gorm.DB) ensMessageheader {
	e.ensMessageheaderDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ensMessageheader) replaceDB(db *gorm.DB) ensMessageheader {
	e.ensMessageheaderDo.ReplaceDB(db)
	return e
}

type ensMessageheaderDo struct{ gen.DO }

type IEnsMessageheaderDo interface {
	gen.SubQuery
	Debug() IEnsMessageheaderDo
	WithContext(ctx context.Context) IEnsMessageheaderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnsMessageheaderDo
	WriteDB() IEnsMessageheaderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnsMessageheaderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnsMessageheaderDo
	Not(conds ...gen.Condition) IEnsMessageheaderDo
	Or(conds ...gen.Condition) IEnsMessageheaderDo
	Select(conds ...field.Expr) IEnsMessageheaderDo
	Where(conds ...gen.Condition) IEnsMessageheaderDo
	Order(conds ...field.Expr) IEnsMessageheaderDo
	Distinct(cols ...field.Expr) IEnsMessageheaderDo
	Omit(cols ...field.Expr) IEnsMessageheaderDo
	Join(table schema.Tabler, on ...field.Expr) IEnsMessageheaderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderDo
	Group(cols ...field.Expr) IEnsMessageheaderDo
	Having(conds ...gen.Condition) IEnsMessageheaderDo
	Limit(limit int) IEnsMessageheaderDo
	Offset(offset int) IEnsMessageheaderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsMessageheaderDo
	Unscoped() IEnsMessageheaderDo
	Create(values ...*model.EnsMessageheader) error
	CreateInBatches(values []*model.EnsMessageheader, batchSize int) error
	Save(values ...*model.EnsMessageheader) error
	First() (*model.EnsMessageheader, error)
	Take() (*model.EnsMessageheader, error)
	Last() (*model.EnsMessageheader, error)
	Find() ([]*model.EnsMessageheader, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsMessageheader, err error)
	FindInBatches(result *[]*model.EnsMessageheader, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnsMessageheader) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnsMessageheaderDo
	Assign(attrs ...field.AssignExpr) IEnsMessageheaderDo
	Joins(fields ...field.RelationField) IEnsMessageheaderDo
	Preload(fields ...field.RelationField) IEnsMessageheaderDo
	FirstOrInit() (*model.EnsMessageheader, error)
	FirstOrCreate() (*model.EnsMessageheader, error)
	FindByPage(offset int, limit int) (result []*model.EnsMessageheader, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnsMessageheaderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ensMessageheaderDo) Debug() IEnsMessageheaderDo {
	return e.withDO(e.DO.Debug())
}

func (e ensMessageheaderDo) WithContext(ctx context.Context) IEnsMessageheaderDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ensMessageheaderDo) ReadDB() IEnsMessageheaderDo {
	return e.Clauses(dbresolver.Read)
}

func (e ensMessageheaderDo) WriteDB() IEnsMessageheaderDo {
	return e.Clauses(dbresolver.Write)
}

func (e ensMessageheaderDo) Session(config *gorm.Session) IEnsMessageheaderDo {
	return e.withDO(e.DO.Session(config))
}

func (e ensMessageheaderDo) Clauses(conds ...clause.Expression) IEnsMessageheaderDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ensMessageheaderDo) Returning(value interface{}, columns ...string) IEnsMessageheaderDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ensMessageheaderDo) Not(conds ...gen.Condition) IEnsMessageheaderDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ensMessageheaderDo) Or(conds ...gen.Condition) IEnsMessageheaderDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ensMessageheaderDo) Select(conds ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ensMessageheaderDo) Where(conds ...gen.Condition) IEnsMessageheaderDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ensMessageheaderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEnsMessageheaderDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ensMessageheaderDo) Order(conds ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ensMessageheaderDo) Distinct(cols ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ensMessageheaderDo) Omit(cols ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ensMessageheaderDo) Join(table schema.Tabler, on ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ensMessageheaderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ensMessageheaderDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ensMessageheaderDo) Group(cols ...field.Expr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ensMessageheaderDo) Having(conds ...gen.Condition) IEnsMessageheaderDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ensMessageheaderDo) Limit(limit int) IEnsMessageheaderDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ensMessageheaderDo) Offset(offset int) IEnsMessageheaderDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ensMessageheaderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsMessageheaderDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ensMessageheaderDo) Unscoped() IEnsMessageheaderDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ensMessageheaderDo) Create(values ...*model.EnsMessageheader) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ensMessageheaderDo) CreateInBatches(values []*model.EnsMessageheader, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ensMessageheaderDo) Save(values ...*model.EnsMessageheader) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ensMessageheaderDo) First() (*model.EnsMessageheader, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheader), nil
	}
}

func (e ensMessageheaderDo) Take() (*model.EnsMessageheader, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheader), nil
	}
}

func (e ensMessageheaderDo) Last() (*model.EnsMessageheader, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheader), nil
	}
}

func (e ensMessageheaderDo) Find() ([]*model.EnsMessageheader, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnsMessageheader), err
}

func (e ensMessageheaderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsMessageheader, err error) {
	buf := make([]*model.EnsMessageheader, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ensMessageheaderDo) FindInBatches(result *[]*model.EnsMessageheader, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ensMessageheaderDo) Attrs(attrs ...field.AssignExpr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ensMessageheaderDo) Assign(attrs ...field.AssignExpr) IEnsMessageheaderDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ensMessageheaderDo) Joins(fields ...field.RelationField) IEnsMessageheaderDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ensMessageheaderDo) Preload(fields ...field.RelationField) IEnsMessageheaderDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ensMessageheaderDo) FirstOrInit() (*model.EnsMessageheader, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheader), nil
	}
}

func (e ensMessageheaderDo) FirstOrCreate() (*model.EnsMessageheader, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheader), nil
	}
}

func (e ensMessageheaderDo) FindByPage(offset int, limit int) (result []*model.EnsMessageheader, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ensMessageheaderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ensMessageheaderDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ensMessageheaderDo) Delete(models ...*model.EnsMessageheader) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ensMessageheaderDo) withDO(do gen.Dao) *ensMessageheaderDo {
	e.DO = *do.(*gen.DO)
	return e
}
