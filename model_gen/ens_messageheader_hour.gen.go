// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newEnsMessageheaderHour(db *gorm.DB, opts ...gen.DOOption) ensMessageheaderHour {
	_ensMessageheaderHour := ensMessageheaderHour{}

	_ensMessageheaderHour.ensMessageheaderHourDo.UseDB(db, opts...)
	_ensMessageheaderHour.ensMessageheaderHourDo.UseModel(&model.EnsMessageheaderHour{})

	tableName := _ensMessageheaderHour.ensMessageheaderHourDo.TableName()
	_ensMessageheaderHour.ALL = field.NewAsterisk(tableName)
	_ensMessageheaderHour.ID = field.NewString(tableName, "id")
	_ensMessageheaderHour.Targetconfigname = field.NewString(tableName, "targetconfigname")
	_ensMessageheaderHour.TimecreatedHour = field.NewTime(tableName, "timecreated_hour")
	_ensMessageheaderHour.Project = field.NewString(tableName, "project")
	_ensMessageheaderHour.MsgCount = field.NewInt32(tableName, "msg_count")

	_ensMessageheaderHour.fillFieldMap()

	return _ensMessageheaderHour
}

type ensMessageheaderHour struct {
	ensMessageheaderHourDo

	ALL              field.Asterisk
	ID               field.String
	Targetconfigname field.String
	TimecreatedHour  field.Time
	Project          field.String
	MsgCount         field.Int32

	fieldMap map[string]field.Expr
}

func (e ensMessageheaderHour) Table(newTableName string) *ensMessageheaderHour {
	e.ensMessageheaderHourDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ensMessageheaderHour) As(alias string) *ensMessageheaderHour {
	e.ensMessageheaderHourDo.DO = *(e.ensMessageheaderHourDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ensMessageheaderHour) updateTableName(table string) *ensMessageheaderHour {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.Targetconfigname = field.NewString(table, "targetconfigname")
	e.TimecreatedHour = field.NewTime(table, "timecreated_hour")
	e.Project = field.NewString(table, "project")
	e.MsgCount = field.NewInt32(table, "msg_count")

	e.fillFieldMap()

	return e
}

func (e *ensMessageheaderHour) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ensMessageheaderHour) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["targetconfigname"] = e.Targetconfigname
	e.fieldMap["timecreated_hour"] = e.TimecreatedHour
	e.fieldMap["project"] = e.Project
	e.fieldMap["msg_count"] = e.MsgCount
}

func (e ensMessageheaderHour) clone(db *gorm.DB) ensMessageheaderHour {
	e.ensMessageheaderHourDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ensMessageheaderHour) replaceDB(db *gorm.DB) ensMessageheaderHour {
	e.ensMessageheaderHourDo.ReplaceDB(db)
	return e
}

type ensMessageheaderHourDo struct{ gen.DO }

type IEnsMessageheaderHourDo interface {
	gen.SubQuery
	Debug() IEnsMessageheaderHourDo
	WithContext(ctx context.Context) IEnsMessageheaderHourDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnsMessageheaderHourDo
	WriteDB() IEnsMessageheaderHourDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnsMessageheaderHourDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnsMessageheaderHourDo
	Not(conds ...gen.Condition) IEnsMessageheaderHourDo
	Or(conds ...gen.Condition) IEnsMessageheaderHourDo
	Select(conds ...field.Expr) IEnsMessageheaderHourDo
	Where(conds ...gen.Condition) IEnsMessageheaderHourDo
	Order(conds ...field.Expr) IEnsMessageheaderHourDo
	Distinct(cols ...field.Expr) IEnsMessageheaderHourDo
	Omit(cols ...field.Expr) IEnsMessageheaderHourDo
	Join(table schema.Tabler, on ...field.Expr) IEnsMessageheaderHourDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderHourDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderHourDo
	Group(cols ...field.Expr) IEnsMessageheaderHourDo
	Having(conds ...gen.Condition) IEnsMessageheaderHourDo
	Limit(limit int) IEnsMessageheaderHourDo
	Offset(offset int) IEnsMessageheaderHourDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsMessageheaderHourDo
	Unscoped() IEnsMessageheaderHourDo
	Create(values ...*model.EnsMessageheaderHour) error
	CreateInBatches(values []*model.EnsMessageheaderHour, batchSize int) error
	Save(values ...*model.EnsMessageheaderHour) error
	First() (*model.EnsMessageheaderHour, error)
	Take() (*model.EnsMessageheaderHour, error)
	Last() (*model.EnsMessageheaderHour, error)
	Find() ([]*model.EnsMessageheaderHour, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsMessageheaderHour, err error)
	FindInBatches(result *[]*model.EnsMessageheaderHour, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnsMessageheaderHour) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnsMessageheaderHourDo
	Assign(attrs ...field.AssignExpr) IEnsMessageheaderHourDo
	Joins(fields ...field.RelationField) IEnsMessageheaderHourDo
	Preload(fields ...field.RelationField) IEnsMessageheaderHourDo
	FirstOrInit() (*model.EnsMessageheaderHour, error)
	FirstOrCreate() (*model.EnsMessageheaderHour, error)
	FindByPage(offset int, limit int) (result []*model.EnsMessageheaderHour, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnsMessageheaderHourDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ensMessageheaderHourDo) Debug() IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Debug())
}

func (e ensMessageheaderHourDo) WithContext(ctx context.Context) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ensMessageheaderHourDo) ReadDB() IEnsMessageheaderHourDo {
	return e.Clauses(dbresolver.Read)
}

func (e ensMessageheaderHourDo) WriteDB() IEnsMessageheaderHourDo {
	return e.Clauses(dbresolver.Write)
}

func (e ensMessageheaderHourDo) Session(config *gorm.Session) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Session(config))
}

func (e ensMessageheaderHourDo) Clauses(conds ...clause.Expression) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ensMessageheaderHourDo) Returning(value interface{}, columns ...string) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ensMessageheaderHourDo) Not(conds ...gen.Condition) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ensMessageheaderHourDo) Or(conds ...gen.Condition) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ensMessageheaderHourDo) Select(conds ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ensMessageheaderHourDo) Where(conds ...gen.Condition) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ensMessageheaderHourDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEnsMessageheaderHourDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ensMessageheaderHourDo) Order(conds ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ensMessageheaderHourDo) Distinct(cols ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ensMessageheaderHourDo) Omit(cols ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ensMessageheaderHourDo) Join(table schema.Tabler, on ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ensMessageheaderHourDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ensMessageheaderHourDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ensMessageheaderHourDo) Group(cols ...field.Expr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ensMessageheaderHourDo) Having(conds ...gen.Condition) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ensMessageheaderHourDo) Limit(limit int) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ensMessageheaderHourDo) Offset(offset int) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ensMessageheaderHourDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ensMessageheaderHourDo) Unscoped() IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ensMessageheaderHourDo) Create(values ...*model.EnsMessageheaderHour) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ensMessageheaderHourDo) CreateInBatches(values []*model.EnsMessageheaderHour, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ensMessageheaderHourDo) Save(values ...*model.EnsMessageheaderHour) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ensMessageheaderHourDo) First() (*model.EnsMessageheaderHour, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheaderHour), nil
	}
}

func (e ensMessageheaderHourDo) Take() (*model.EnsMessageheaderHour, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheaderHour), nil
	}
}

func (e ensMessageheaderHourDo) Last() (*model.EnsMessageheaderHour, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheaderHour), nil
	}
}

func (e ensMessageheaderHourDo) Find() ([]*model.EnsMessageheaderHour, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnsMessageheaderHour), err
}

func (e ensMessageheaderHourDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsMessageheaderHour, err error) {
	buf := make([]*model.EnsMessageheaderHour, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ensMessageheaderHourDo) FindInBatches(result *[]*model.EnsMessageheaderHour, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ensMessageheaderHourDo) Attrs(attrs ...field.AssignExpr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ensMessageheaderHourDo) Assign(attrs ...field.AssignExpr) IEnsMessageheaderHourDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ensMessageheaderHourDo) Joins(fields ...field.RelationField) IEnsMessageheaderHourDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ensMessageheaderHourDo) Preload(fields ...field.RelationField) IEnsMessageheaderHourDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ensMessageheaderHourDo) FirstOrInit() (*model.EnsMessageheaderHour, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheaderHour), nil
	}
}

func (e ensMessageheaderHourDo) FirstOrCreate() (*model.EnsMessageheaderHour, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsMessageheaderHour), nil
	}
}

func (e ensMessageheaderHourDo) FindByPage(offset int, limit int) (result []*model.EnsMessageheaderHour, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ensMessageheaderHourDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ensMessageheaderHourDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ensMessageheaderHourDo) Delete(models ...*model.EnsMessageheaderHour) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ensMessageheaderHourDo) withDO(do gen.Dao) *ensMessageheaderHourDo {
	e.DO = *do.(*gen.DO)
	return e
}
