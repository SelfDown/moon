// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newEnsUtilLog(db *gorm.DB, opts ...gen.DOOption) ensUtilLog {
	_ensUtilLog := ensUtilLog{}

	_ensUtilLog.ensUtilLogDo.UseDB(db, opts...)
	_ensUtilLog.ensUtilLogDo.UseModel(&model.EnsUtilLog{})

	tableName := _ensUtilLog.ensUtilLogDo.TableName()
	_ensUtilLog.ALL = field.NewAsterisk(tableName)
	_ensUtilLog.ID = field.NewInt32(tableName, "id")
	_ensUtilLog.Configname = field.NewString(tableName, "configname")
	_ensUtilLog.Job = field.NewString(tableName, "job")
	_ensUtilLog.Messageid = field.NewInt32(tableName, "messageid")
	_ensUtilLog.Sessionid = field.NewInt32(tableName, "sessionid")
	_ensUtilLog.Sourceclass = field.NewString(tableName, "sourceclass")
	_ensUtilLog.Sourcemethod = field.NewString(tableName, "sourcemethod")
	_ensUtilLog.Stack = field.NewString(tableName, "stack")
	_ensUtilLog.Text = field.NewString(tableName, "text")
	_ensUtilLog.Timelogged = field.NewTime(tableName, "timelogged")
	_ensUtilLog.Tracecat = field.NewString(tableName, "tracecat")
	_ensUtilLog.Type = field.NewInt32(tableName, "type")
	_ensUtilLog.Project = field.NewString(tableName, "project")

	_ensUtilLog.fillFieldMap()

	return _ensUtilLog
}

type ensUtilLog struct {
	ensUtilLogDo

	ALL          field.Asterisk
	ID           field.Int32
	Configname   field.String
	Job          field.String
	Messageid    field.Int32
	Sessionid    field.Int32
	Sourceclass  field.String
	Sourcemethod field.String
	Stack        field.String
	Text         field.String
	Timelogged   field.Time
	Tracecat     field.String
	Type         field.Int32
	Project      field.String

	fieldMap map[string]field.Expr
}

func (e ensUtilLog) Table(newTableName string) *ensUtilLog {
	e.ensUtilLogDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ensUtilLog) As(alias string) *ensUtilLog {
	e.ensUtilLogDo.DO = *(e.ensUtilLogDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ensUtilLog) updateTableName(table string) *ensUtilLog {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Configname = field.NewString(table, "configname")
	e.Job = field.NewString(table, "job")
	e.Messageid = field.NewInt32(table, "messageid")
	e.Sessionid = field.NewInt32(table, "sessionid")
	e.Sourceclass = field.NewString(table, "sourceclass")
	e.Sourcemethod = field.NewString(table, "sourcemethod")
	e.Stack = field.NewString(table, "stack")
	e.Text = field.NewString(table, "text")
	e.Timelogged = field.NewTime(table, "timelogged")
	e.Tracecat = field.NewString(table, "tracecat")
	e.Type = field.NewInt32(table, "type")
	e.Project = field.NewString(table, "project")

	e.fillFieldMap()

	return e
}

func (e *ensUtilLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ensUtilLog) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["id"] = e.ID
	e.fieldMap["configname"] = e.Configname
	e.fieldMap["job"] = e.Job
	e.fieldMap["messageid"] = e.Messageid
	e.fieldMap["sessionid"] = e.Sessionid
	e.fieldMap["sourceclass"] = e.Sourceclass
	e.fieldMap["sourcemethod"] = e.Sourcemethod
	e.fieldMap["stack"] = e.Stack
	e.fieldMap["text"] = e.Text
	e.fieldMap["timelogged"] = e.Timelogged
	e.fieldMap["tracecat"] = e.Tracecat
	e.fieldMap["type"] = e.Type
	e.fieldMap["project"] = e.Project
}

func (e ensUtilLog) clone(db *gorm.DB) ensUtilLog {
	e.ensUtilLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ensUtilLog) replaceDB(db *gorm.DB) ensUtilLog {
	e.ensUtilLogDo.ReplaceDB(db)
	return e
}

type ensUtilLogDo struct{ gen.DO }

type IEnsUtilLogDo interface {
	gen.SubQuery
	Debug() IEnsUtilLogDo
	WithContext(ctx context.Context) IEnsUtilLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnsUtilLogDo
	WriteDB() IEnsUtilLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnsUtilLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnsUtilLogDo
	Not(conds ...gen.Condition) IEnsUtilLogDo
	Or(conds ...gen.Condition) IEnsUtilLogDo
	Select(conds ...field.Expr) IEnsUtilLogDo
	Where(conds ...gen.Condition) IEnsUtilLogDo
	Order(conds ...field.Expr) IEnsUtilLogDo
	Distinct(cols ...field.Expr) IEnsUtilLogDo
	Omit(cols ...field.Expr) IEnsUtilLogDo
	Join(table schema.Tabler, on ...field.Expr) IEnsUtilLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnsUtilLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnsUtilLogDo
	Group(cols ...field.Expr) IEnsUtilLogDo
	Having(conds ...gen.Condition) IEnsUtilLogDo
	Limit(limit int) IEnsUtilLogDo
	Offset(offset int) IEnsUtilLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsUtilLogDo
	Unscoped() IEnsUtilLogDo
	Create(values ...*model.EnsUtilLog) error
	CreateInBatches(values []*model.EnsUtilLog, batchSize int) error
	Save(values ...*model.EnsUtilLog) error
	First() (*model.EnsUtilLog, error)
	Take() (*model.EnsUtilLog, error)
	Last() (*model.EnsUtilLog, error)
	Find() ([]*model.EnsUtilLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsUtilLog, err error)
	FindInBatches(result *[]*model.EnsUtilLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EnsUtilLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnsUtilLogDo
	Assign(attrs ...field.AssignExpr) IEnsUtilLogDo
	Joins(fields ...field.RelationField) IEnsUtilLogDo
	Preload(fields ...field.RelationField) IEnsUtilLogDo
	FirstOrInit() (*model.EnsUtilLog, error)
	FirstOrCreate() (*model.EnsUtilLog, error)
	FindByPage(offset int, limit int) (result []*model.EnsUtilLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnsUtilLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ensUtilLogDo) Debug() IEnsUtilLogDo {
	return e.withDO(e.DO.Debug())
}

func (e ensUtilLogDo) WithContext(ctx context.Context) IEnsUtilLogDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ensUtilLogDo) ReadDB() IEnsUtilLogDo {
	return e.Clauses(dbresolver.Read)
}

func (e ensUtilLogDo) WriteDB() IEnsUtilLogDo {
	return e.Clauses(dbresolver.Write)
}

func (e ensUtilLogDo) Session(config *gorm.Session) IEnsUtilLogDo {
	return e.withDO(e.DO.Session(config))
}

func (e ensUtilLogDo) Clauses(conds ...clause.Expression) IEnsUtilLogDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ensUtilLogDo) Returning(value interface{}, columns ...string) IEnsUtilLogDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ensUtilLogDo) Not(conds ...gen.Condition) IEnsUtilLogDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ensUtilLogDo) Or(conds ...gen.Condition) IEnsUtilLogDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ensUtilLogDo) Select(conds ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ensUtilLogDo) Where(conds ...gen.Condition) IEnsUtilLogDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ensUtilLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEnsUtilLogDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ensUtilLogDo) Order(conds ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ensUtilLogDo) Distinct(cols ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ensUtilLogDo) Omit(cols ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ensUtilLogDo) Join(table schema.Tabler, on ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ensUtilLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ensUtilLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ensUtilLogDo) Group(cols ...field.Expr) IEnsUtilLogDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ensUtilLogDo) Having(conds ...gen.Condition) IEnsUtilLogDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ensUtilLogDo) Limit(limit int) IEnsUtilLogDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ensUtilLogDo) Offset(offset int) IEnsUtilLogDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ensUtilLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnsUtilLogDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ensUtilLogDo) Unscoped() IEnsUtilLogDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ensUtilLogDo) Create(values ...*model.EnsUtilLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ensUtilLogDo) CreateInBatches(values []*model.EnsUtilLog, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ensUtilLogDo) Save(values ...*model.EnsUtilLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ensUtilLogDo) First() (*model.EnsUtilLog, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsUtilLog), nil
	}
}

func (e ensUtilLogDo) Take() (*model.EnsUtilLog, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsUtilLog), nil
	}
}

func (e ensUtilLogDo) Last() (*model.EnsUtilLog, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsUtilLog), nil
	}
}

func (e ensUtilLogDo) Find() ([]*model.EnsUtilLog, error) {
	result, err := e.DO.Find()
	return result.([]*model.EnsUtilLog), err
}

func (e ensUtilLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EnsUtilLog, err error) {
	buf := make([]*model.EnsUtilLog, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ensUtilLogDo) FindInBatches(result *[]*model.EnsUtilLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ensUtilLogDo) Attrs(attrs ...field.AssignExpr) IEnsUtilLogDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ensUtilLogDo) Assign(attrs ...field.AssignExpr) IEnsUtilLogDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ensUtilLogDo) Joins(fields ...field.RelationField) IEnsUtilLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ensUtilLogDo) Preload(fields ...field.RelationField) IEnsUtilLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ensUtilLogDo) FirstOrInit() (*model.EnsUtilLog, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsUtilLog), nil
	}
}

func (e ensUtilLogDo) FirstOrCreate() (*model.EnsUtilLog, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EnsUtilLog), nil
	}
}

func (e ensUtilLogDo) FindByPage(offset int, limit int) (result []*model.EnsUtilLog, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ensUtilLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ensUtilLogDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ensUtilLogDo) Delete(models ...*model.EnsUtilLog) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ensUtilLogDo) withDO(do gen.Dao) *ensUtilLogDo {
	e.DO = *do.(*gen.DO)
	return e
}
