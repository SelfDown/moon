// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newEventLog(db *gorm.DB, opts ...gen.DOOption) eventLog {
	_eventLog := eventLog{}

	_eventLog.eventLogDo.UseDB(db, opts...)
	_eventLog.eventLogDo.UseModel(&model.EventLog{})

	tableName := _eventLog.eventLogDo.TableName()
	_eventLog.ALL = field.NewAsterisk(tableName)
	_eventLog.EventID = field.NewString(tableName, "event_id")
	_eventLog.OpUser = field.NewString(tableName, "op_user")
	_eventLog.OpTime = field.NewTime(tableName, "op_time")
	_eventLog.EventCode = field.NewString(tableName, "event_code")
	_eventLog.EventType = field.NewString(tableName, "event_type")
	_eventLog.Note = field.NewString(tableName, "note")
	_eventLog.BusiID = field.NewString(tableName, "busi_id")
	_eventLog.StatuID = field.NewString(tableName, "statu_id")
	_eventLog.ActualCompleteTime = field.NewTime(tableName, "actual_complete_time")
	_eventLog.OldValue = field.NewString(tableName, "old_value")
	_eventLog.OldKey = field.NewString(tableName, "old_key")
	_eventLog.ReqCommentsLevel = field.NewString(tableName, "req_comments_level")
	_eventLog.CreateTime = field.NewTime(tableName, "create_time")
	_eventLog.ModifyTime = field.NewTime(tableName, "modify_time")
	_eventLog.Comments = field.NewString(tableName, "comments")
	_eventLog.Property1 = field.NewString(tableName, "property_1")
	_eventLog.Property2 = field.NewString(tableName, "property_2")

	_eventLog.fillFieldMap()

	return _eventLog
}

type eventLog struct {
	eventLogDo

	ALL       field.Asterisk
	EventID   field.String // event_id 等于 各个event表的主键ID
	OpUser    field.String // 登录用户，当前操作人的userid
	OpTime    field.Time   // 记录创建时间（数据库自动写入）
	EventCode field.String // 事件码值 sys_code.sys_code
	/*
		1、替换事件
		2、部署事件
		3、申请单创建事件 等等
		4、WAR包没有下载过的WAR下载事件
		5、重启jboss
		6、卸载war
		7、用户登录
		8、用户修改或创建计划任务 ，note里面描述是创建任务还是修改任务。
		9、计划任务投放结果，note写具体投放结果
		10、计划任务卸载结果，note写具体投放结果
		11、执行自动巡检。
		12、SRMC自身重启
		13、SRMC自身升级
		14、重启zookeeper
		15、用户杀死数据库导入或导出任务进程
	*/
	EventType          field.String
	Note               field.String // 备注信息。
	BusiID             field.String // 事件产生者的主键ID,比如，如果是部署，那这个就是某个部署队列的 deploy_tasklist.dep_task_id
	StatuID            field.String // 事件的子状态
	ActualCompleteTime field.Time   // 用户实际操作（升级，部署、测试等）完成时间
	OldValue           field.String // 操作前值
	OldKey             field.String
	/*
		升级单备注的重要级别
		0 普通备注
		1 重要备注
	*/
	ReqCommentsLevel field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明
	Property1        field.String // 扩展属性
	Property2        field.String // 扩展属性

	fieldMap map[string]field.Expr
}

func (e eventLog) Table(newTableName string) *eventLog {
	e.eventLogDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventLog) As(alias string) *eventLog {
	e.eventLogDo.DO = *(e.eventLogDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventLog) updateTableName(table string) *eventLog {
	e.ALL = field.NewAsterisk(table)
	e.EventID = field.NewString(table, "event_id")
	e.OpUser = field.NewString(table, "op_user")
	e.OpTime = field.NewTime(table, "op_time")
	e.EventCode = field.NewString(table, "event_code")
	e.EventType = field.NewString(table, "event_type")
	e.Note = field.NewString(table, "note")
	e.BusiID = field.NewString(table, "busi_id")
	e.StatuID = field.NewString(table, "statu_id")
	e.ActualCompleteTime = field.NewTime(table, "actual_complete_time")
	e.OldValue = field.NewString(table, "old_value")
	e.OldKey = field.NewString(table, "old_key")
	e.ReqCommentsLevel = field.NewString(table, "req_comments_level")
	e.CreateTime = field.NewTime(table, "create_time")
	e.ModifyTime = field.NewTime(table, "modify_time")
	e.Comments = field.NewString(table, "comments")
	e.Property1 = field.NewString(table, "property_1")
	e.Property2 = field.NewString(table, "property_2")

	e.fillFieldMap()

	return e
}

func (e *eventLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventLog) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["event_id"] = e.EventID
	e.fieldMap["op_user"] = e.OpUser
	e.fieldMap["op_time"] = e.OpTime
	e.fieldMap["event_code"] = e.EventCode
	e.fieldMap["event_type"] = e.EventType
	e.fieldMap["note"] = e.Note
	e.fieldMap["busi_id"] = e.BusiID
	e.fieldMap["statu_id"] = e.StatuID
	e.fieldMap["actual_complete_time"] = e.ActualCompleteTime
	e.fieldMap["old_value"] = e.OldValue
	e.fieldMap["old_key"] = e.OldKey
	e.fieldMap["req_comments_level"] = e.ReqCommentsLevel
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["modify_time"] = e.ModifyTime
	e.fieldMap["comments"] = e.Comments
	e.fieldMap["property_1"] = e.Property1
	e.fieldMap["property_2"] = e.Property2
}

func (e eventLog) clone(db *gorm.DB) eventLog {
	e.eventLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventLog) replaceDB(db *gorm.DB) eventLog {
	e.eventLogDo.ReplaceDB(db)
	return e
}

type eventLogDo struct{ gen.DO }

type IEventLogDo interface {
	gen.SubQuery
	Debug() IEventLogDo
	WithContext(ctx context.Context) IEventLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventLogDo
	WriteDB() IEventLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventLogDo
	Not(conds ...gen.Condition) IEventLogDo
	Or(conds ...gen.Condition) IEventLogDo
	Select(conds ...field.Expr) IEventLogDo
	Where(conds ...gen.Condition) IEventLogDo
	Order(conds ...field.Expr) IEventLogDo
	Distinct(cols ...field.Expr) IEventLogDo
	Omit(cols ...field.Expr) IEventLogDo
	Join(table schema.Tabler, on ...field.Expr) IEventLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventLogDo
	Group(cols ...field.Expr) IEventLogDo
	Having(conds ...gen.Condition) IEventLogDo
	Limit(limit int) IEventLogDo
	Offset(offset int) IEventLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventLogDo
	Unscoped() IEventLogDo
	Create(values ...*model.EventLog) error
	CreateInBatches(values []*model.EventLog, batchSize int) error
	Save(values ...*model.EventLog) error
	First() (*model.EventLog, error)
	Take() (*model.EventLog, error)
	Last() (*model.EventLog, error)
	Find() ([]*model.EventLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventLog, err error)
	FindInBatches(result *[]*model.EventLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EventLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventLogDo
	Assign(attrs ...field.AssignExpr) IEventLogDo
	Joins(fields ...field.RelationField) IEventLogDo
	Preload(fields ...field.RelationField) IEventLogDo
	FirstOrInit() (*model.EventLog, error)
	FirstOrCreate() (*model.EventLog, error)
	FindByPage(offset int, limit int) (result []*model.EventLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eventLogDo) Debug() IEventLogDo {
	return e.withDO(e.DO.Debug())
}

func (e eventLogDo) WithContext(ctx context.Context) IEventLogDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventLogDo) ReadDB() IEventLogDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventLogDo) WriteDB() IEventLogDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventLogDo) Session(config *gorm.Session) IEventLogDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventLogDo) Clauses(conds ...clause.Expression) IEventLogDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventLogDo) Returning(value interface{}, columns ...string) IEventLogDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventLogDo) Not(conds ...gen.Condition) IEventLogDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventLogDo) Or(conds ...gen.Condition) IEventLogDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventLogDo) Select(conds ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventLogDo) Where(conds ...gen.Condition) IEventLogDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEventLogDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e eventLogDo) Order(conds ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventLogDo) Distinct(cols ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventLogDo) Omit(cols ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventLogDo) Join(table schema.Tabler, on ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventLogDo) Group(cols ...field.Expr) IEventLogDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventLogDo) Having(conds ...gen.Condition) IEventLogDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventLogDo) Limit(limit int) IEventLogDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventLogDo) Offset(offset int) IEventLogDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventLogDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventLogDo) Unscoped() IEventLogDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventLogDo) Create(values ...*model.EventLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventLogDo) CreateInBatches(values []*model.EventLog, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventLogDo) Save(values ...*model.EventLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventLogDo) First() (*model.EventLog, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventLog), nil
	}
}

func (e eventLogDo) Take() (*model.EventLog, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventLog), nil
	}
}

func (e eventLogDo) Last() (*model.EventLog, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventLog), nil
	}
}

func (e eventLogDo) Find() ([]*model.EventLog, error) {
	result, err := e.DO.Find()
	return result.([]*model.EventLog), err
}

func (e eventLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventLog, err error) {
	buf := make([]*model.EventLog, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventLogDo) FindInBatches(result *[]*model.EventLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventLogDo) Attrs(attrs ...field.AssignExpr) IEventLogDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventLogDo) Assign(attrs ...field.AssignExpr) IEventLogDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventLogDo) Joins(fields ...field.RelationField) IEventLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventLogDo) Preload(fields ...field.RelationField) IEventLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventLogDo) FirstOrInit() (*model.EventLog, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventLog), nil
	}
}

func (e eventLogDo) FirstOrCreate() (*model.EventLog, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventLog), nil
	}
}

func (e eventLogDo) FindByPage(offset int, limit int) (result []*model.EventLog, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventLogDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventLogDo) Delete(models ...*model.EventLog) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventLogDo) withDO(do gen.Dao) *eventLogDo {
	e.DO = *do.(*gen.DO)
	return e
}
