// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newExplainIssues(db *gorm.DB, opts ...gen.DOOption) explainIssues {
	_explainIssues := explainIssues{}

	_explainIssues.explainIssuesDo.UseDB(db, opts...)
	_explainIssues.explainIssuesDo.UseModel(&model.ExplainIssues{})

	tableName := _explainIssues.explainIssuesDo.TableName()
	_explainIssues.ALL = field.NewAsterisk(tableName)
	_explainIssues.ExplainIssuesID = field.NewString(tableName, "explain_issues_id")
	_explainIssues.PlanID = field.NewString(tableName, "plan_id")
	_explainIssues.IssueKey = field.NewString(tableName, "issue_key")
	_explainIssues.Summary = field.NewString(tableName, "summary")
	_explainIssues.Assignee = field.NewString(tableName, "assignee")
	_explainIssues.Priority = field.NewString(tableName, "priority")
	_explainIssues.Status = field.NewString(tableName, "status")
	_explainIssues.Tags = field.NewString(tableName, "tags")
	_explainIssues.IssueCreateTime = field.NewString(tableName, "issue_create_time")
	_explainIssues.Duedate = field.NewString(tableName, "duedate")
	_explainIssues.LinkIssues = field.NewString(tableName, "link_issues")
	_explainIssues.ConfluenceAddr = field.NewString(tableName, "confluence_addr")

	_explainIssues.fillFieldMap()

	return _explainIssues
}

type explainIssues struct {
	explainIssuesDo

	ALL             field.Asterisk
	ExplainIssuesID field.String
	PlanID          field.String
	IssueKey        field.String // 标题
	Summary         field.String
	Assignee        field.String
	Priority        field.String
	Status          field.String
	Tags            field.String
	IssueCreateTime field.String
	Duedate         field.String
	LinkIssues      field.String
	ConfluenceAddr  field.String

	fieldMap map[string]field.Expr
}

func (e explainIssues) Table(newTableName string) *explainIssues {
	e.explainIssuesDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e explainIssues) As(alias string) *explainIssues {
	e.explainIssuesDo.DO = *(e.explainIssuesDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *explainIssues) updateTableName(table string) *explainIssues {
	e.ALL = field.NewAsterisk(table)
	e.ExplainIssuesID = field.NewString(table, "explain_issues_id")
	e.PlanID = field.NewString(table, "plan_id")
	e.IssueKey = field.NewString(table, "issue_key")
	e.Summary = field.NewString(table, "summary")
	e.Assignee = field.NewString(table, "assignee")
	e.Priority = field.NewString(table, "priority")
	e.Status = field.NewString(table, "status")
	e.Tags = field.NewString(table, "tags")
	e.IssueCreateTime = field.NewString(table, "issue_create_time")
	e.Duedate = field.NewString(table, "duedate")
	e.LinkIssues = field.NewString(table, "link_issues")
	e.ConfluenceAddr = field.NewString(table, "confluence_addr")

	e.fillFieldMap()

	return e
}

func (e *explainIssues) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *explainIssues) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["explain_issues_id"] = e.ExplainIssuesID
	e.fieldMap["plan_id"] = e.PlanID
	e.fieldMap["issue_key"] = e.IssueKey
	e.fieldMap["summary"] = e.Summary
	e.fieldMap["assignee"] = e.Assignee
	e.fieldMap["priority"] = e.Priority
	e.fieldMap["status"] = e.Status
	e.fieldMap["tags"] = e.Tags
	e.fieldMap["issue_create_time"] = e.IssueCreateTime
	e.fieldMap["duedate"] = e.Duedate
	e.fieldMap["link_issues"] = e.LinkIssues
	e.fieldMap["confluence_addr"] = e.ConfluenceAddr
}

func (e explainIssues) clone(db *gorm.DB) explainIssues {
	e.explainIssuesDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e explainIssues) replaceDB(db *gorm.DB) explainIssues {
	e.explainIssuesDo.ReplaceDB(db)
	return e
}

type explainIssuesDo struct{ gen.DO }

type IExplainIssuesDo interface {
	gen.SubQuery
	Debug() IExplainIssuesDo
	WithContext(ctx context.Context) IExplainIssuesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExplainIssuesDo
	WriteDB() IExplainIssuesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExplainIssuesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExplainIssuesDo
	Not(conds ...gen.Condition) IExplainIssuesDo
	Or(conds ...gen.Condition) IExplainIssuesDo
	Select(conds ...field.Expr) IExplainIssuesDo
	Where(conds ...gen.Condition) IExplainIssuesDo
	Order(conds ...field.Expr) IExplainIssuesDo
	Distinct(cols ...field.Expr) IExplainIssuesDo
	Omit(cols ...field.Expr) IExplainIssuesDo
	Join(table schema.Tabler, on ...field.Expr) IExplainIssuesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExplainIssuesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExplainIssuesDo
	Group(cols ...field.Expr) IExplainIssuesDo
	Having(conds ...gen.Condition) IExplainIssuesDo
	Limit(limit int) IExplainIssuesDo
	Offset(offset int) IExplainIssuesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExplainIssuesDo
	Unscoped() IExplainIssuesDo
	Create(values ...*model.ExplainIssues) error
	CreateInBatches(values []*model.ExplainIssues, batchSize int) error
	Save(values ...*model.ExplainIssues) error
	First() (*model.ExplainIssues, error)
	Take() (*model.ExplainIssues, error)
	Last() (*model.ExplainIssues, error)
	Find() ([]*model.ExplainIssues, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExplainIssues, err error)
	FindInBatches(result *[]*model.ExplainIssues, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExplainIssues) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExplainIssuesDo
	Assign(attrs ...field.AssignExpr) IExplainIssuesDo
	Joins(fields ...field.RelationField) IExplainIssuesDo
	Preload(fields ...field.RelationField) IExplainIssuesDo
	FirstOrInit() (*model.ExplainIssues, error)
	FirstOrCreate() (*model.ExplainIssues, error)
	FindByPage(offset int, limit int) (result []*model.ExplainIssues, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExplainIssuesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e explainIssuesDo) Debug() IExplainIssuesDo {
	return e.withDO(e.DO.Debug())
}

func (e explainIssuesDo) WithContext(ctx context.Context) IExplainIssuesDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e explainIssuesDo) ReadDB() IExplainIssuesDo {
	return e.Clauses(dbresolver.Read)
}

func (e explainIssuesDo) WriteDB() IExplainIssuesDo {
	return e.Clauses(dbresolver.Write)
}

func (e explainIssuesDo) Session(config *gorm.Session) IExplainIssuesDo {
	return e.withDO(e.DO.Session(config))
}

func (e explainIssuesDo) Clauses(conds ...clause.Expression) IExplainIssuesDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e explainIssuesDo) Returning(value interface{}, columns ...string) IExplainIssuesDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e explainIssuesDo) Not(conds ...gen.Condition) IExplainIssuesDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e explainIssuesDo) Or(conds ...gen.Condition) IExplainIssuesDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e explainIssuesDo) Select(conds ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e explainIssuesDo) Where(conds ...gen.Condition) IExplainIssuesDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e explainIssuesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IExplainIssuesDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e explainIssuesDo) Order(conds ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e explainIssuesDo) Distinct(cols ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e explainIssuesDo) Omit(cols ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e explainIssuesDo) Join(table schema.Tabler, on ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e explainIssuesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e explainIssuesDo) RightJoin(table schema.Tabler, on ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e explainIssuesDo) Group(cols ...field.Expr) IExplainIssuesDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e explainIssuesDo) Having(conds ...gen.Condition) IExplainIssuesDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e explainIssuesDo) Limit(limit int) IExplainIssuesDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e explainIssuesDo) Offset(offset int) IExplainIssuesDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e explainIssuesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExplainIssuesDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e explainIssuesDo) Unscoped() IExplainIssuesDo {
	return e.withDO(e.DO.Unscoped())
}

func (e explainIssuesDo) Create(values ...*model.ExplainIssues) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e explainIssuesDo) CreateInBatches(values []*model.ExplainIssues, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e explainIssuesDo) Save(values ...*model.ExplainIssues) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e explainIssuesDo) First() (*model.ExplainIssues, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainIssues), nil
	}
}

func (e explainIssuesDo) Take() (*model.ExplainIssues, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainIssues), nil
	}
}

func (e explainIssuesDo) Last() (*model.ExplainIssues, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainIssues), nil
	}
}

func (e explainIssuesDo) Find() ([]*model.ExplainIssues, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExplainIssues), err
}

func (e explainIssuesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExplainIssues, err error) {
	buf := make([]*model.ExplainIssues, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e explainIssuesDo) FindInBatches(result *[]*model.ExplainIssues, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e explainIssuesDo) Attrs(attrs ...field.AssignExpr) IExplainIssuesDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e explainIssuesDo) Assign(attrs ...field.AssignExpr) IExplainIssuesDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e explainIssuesDo) Joins(fields ...field.RelationField) IExplainIssuesDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e explainIssuesDo) Preload(fields ...field.RelationField) IExplainIssuesDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e explainIssuesDo) FirstOrInit() (*model.ExplainIssues, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainIssues), nil
	}
}

func (e explainIssuesDo) FirstOrCreate() (*model.ExplainIssues, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainIssues), nil
	}
}

func (e explainIssuesDo) FindByPage(offset int, limit int) (result []*model.ExplainIssues, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e explainIssuesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e explainIssuesDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e explainIssuesDo) Delete(models ...*model.ExplainIssues) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *explainIssuesDo) withDO(do gen.Dao) *explainIssuesDo {
	e.DO = *do.(*gen.DO)
	return e
}
