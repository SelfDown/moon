// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newExplainPlanning(db *gorm.DB, opts ...gen.DOOption) explainPlanning {
	_explainPlanning := explainPlanning{}

	_explainPlanning.explainPlanningDo.UseDB(db, opts...)
	_explainPlanning.explainPlanningDo.UseModel(&model.ExplainPlanning{})

	tableName := _explainPlanning.explainPlanningDo.TableName()
	_explainPlanning.ALL = field.NewAsterisk(tableName)
	_explainPlanning.PlanID = field.NewString(tableName, "plan_id")
	_explainPlanning.Summary = field.NewString(tableName, "summary")
	_explainPlanning.Version = field.NewString(tableName, "version")
	_explainPlanning.Status = field.NewString(tableName, "status")
	_explainPlanning.PlanType = field.NewString(tableName, "plan_type")
	_explainPlanning.DutyUser = field.NewString(tableName, "duty_user")
	_explainPlanning.PlanTime = field.NewString(tableName, "plan_time")
	_explainPlanning.CreateUser = field.NewString(tableName, "create_user")
	_explainPlanning.CreateTime = field.NewString(tableName, "create_time")
	_explainPlanning.ConfluenceAddr = field.NewString(tableName, "confluence_addr")
	_explainPlanning.Comment = field.NewString(tableName, "comment")

	_explainPlanning.fillFieldMap()

	return _explainPlanning
}

type explainPlanning struct {
	explainPlanningDo

	ALL            field.Asterisk
	PlanID         field.String
	Summary        field.String // 标题
	Version        field.String
	Status         field.String
	PlanType       field.String
	DutyUser       field.String
	PlanTime       field.String
	CreateUser     field.String
	CreateTime     field.String
	ConfluenceAddr field.String
	Comment        field.String

	fieldMap map[string]field.Expr
}

func (e explainPlanning) Table(newTableName string) *explainPlanning {
	e.explainPlanningDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e explainPlanning) As(alias string) *explainPlanning {
	e.explainPlanningDo.DO = *(e.explainPlanningDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *explainPlanning) updateTableName(table string) *explainPlanning {
	e.ALL = field.NewAsterisk(table)
	e.PlanID = field.NewString(table, "plan_id")
	e.Summary = field.NewString(table, "summary")
	e.Version = field.NewString(table, "version")
	e.Status = field.NewString(table, "status")
	e.PlanType = field.NewString(table, "plan_type")
	e.DutyUser = field.NewString(table, "duty_user")
	e.PlanTime = field.NewString(table, "plan_time")
	e.CreateUser = field.NewString(table, "create_user")
	e.CreateTime = field.NewString(table, "create_time")
	e.ConfluenceAddr = field.NewString(table, "confluence_addr")
	e.Comment = field.NewString(table, "comment")

	e.fillFieldMap()

	return e
}

func (e *explainPlanning) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *explainPlanning) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["plan_id"] = e.PlanID
	e.fieldMap["summary"] = e.Summary
	e.fieldMap["version"] = e.Version
	e.fieldMap["status"] = e.Status
	e.fieldMap["plan_type"] = e.PlanType
	e.fieldMap["duty_user"] = e.DutyUser
	e.fieldMap["plan_time"] = e.PlanTime
	e.fieldMap["create_user"] = e.CreateUser
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["confluence_addr"] = e.ConfluenceAddr
	e.fieldMap["comment"] = e.Comment
}

func (e explainPlanning) clone(db *gorm.DB) explainPlanning {
	e.explainPlanningDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e explainPlanning) replaceDB(db *gorm.DB) explainPlanning {
	e.explainPlanningDo.ReplaceDB(db)
	return e
}

type explainPlanningDo struct{ gen.DO }

type IExplainPlanningDo interface {
	gen.SubQuery
	Debug() IExplainPlanningDo
	WithContext(ctx context.Context) IExplainPlanningDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExplainPlanningDo
	WriteDB() IExplainPlanningDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExplainPlanningDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExplainPlanningDo
	Not(conds ...gen.Condition) IExplainPlanningDo
	Or(conds ...gen.Condition) IExplainPlanningDo
	Select(conds ...field.Expr) IExplainPlanningDo
	Where(conds ...gen.Condition) IExplainPlanningDo
	Order(conds ...field.Expr) IExplainPlanningDo
	Distinct(cols ...field.Expr) IExplainPlanningDo
	Omit(cols ...field.Expr) IExplainPlanningDo
	Join(table schema.Tabler, on ...field.Expr) IExplainPlanningDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExplainPlanningDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExplainPlanningDo
	Group(cols ...field.Expr) IExplainPlanningDo
	Having(conds ...gen.Condition) IExplainPlanningDo
	Limit(limit int) IExplainPlanningDo
	Offset(offset int) IExplainPlanningDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExplainPlanningDo
	Unscoped() IExplainPlanningDo
	Create(values ...*model.ExplainPlanning) error
	CreateInBatches(values []*model.ExplainPlanning, batchSize int) error
	Save(values ...*model.ExplainPlanning) error
	First() (*model.ExplainPlanning, error)
	Take() (*model.ExplainPlanning, error)
	Last() (*model.ExplainPlanning, error)
	Find() ([]*model.ExplainPlanning, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExplainPlanning, err error)
	FindInBatches(result *[]*model.ExplainPlanning, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExplainPlanning) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExplainPlanningDo
	Assign(attrs ...field.AssignExpr) IExplainPlanningDo
	Joins(fields ...field.RelationField) IExplainPlanningDo
	Preload(fields ...field.RelationField) IExplainPlanningDo
	FirstOrInit() (*model.ExplainPlanning, error)
	FirstOrCreate() (*model.ExplainPlanning, error)
	FindByPage(offset int, limit int) (result []*model.ExplainPlanning, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExplainPlanningDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e explainPlanningDo) Debug() IExplainPlanningDo {
	return e.withDO(e.DO.Debug())
}

func (e explainPlanningDo) WithContext(ctx context.Context) IExplainPlanningDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e explainPlanningDo) ReadDB() IExplainPlanningDo {
	return e.Clauses(dbresolver.Read)
}

func (e explainPlanningDo) WriteDB() IExplainPlanningDo {
	return e.Clauses(dbresolver.Write)
}

func (e explainPlanningDo) Session(config *gorm.Session) IExplainPlanningDo {
	return e.withDO(e.DO.Session(config))
}

func (e explainPlanningDo) Clauses(conds ...clause.Expression) IExplainPlanningDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e explainPlanningDo) Returning(value interface{}, columns ...string) IExplainPlanningDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e explainPlanningDo) Not(conds ...gen.Condition) IExplainPlanningDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e explainPlanningDo) Or(conds ...gen.Condition) IExplainPlanningDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e explainPlanningDo) Select(conds ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e explainPlanningDo) Where(conds ...gen.Condition) IExplainPlanningDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e explainPlanningDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IExplainPlanningDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e explainPlanningDo) Order(conds ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e explainPlanningDo) Distinct(cols ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e explainPlanningDo) Omit(cols ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e explainPlanningDo) Join(table schema.Tabler, on ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e explainPlanningDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e explainPlanningDo) RightJoin(table schema.Tabler, on ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e explainPlanningDo) Group(cols ...field.Expr) IExplainPlanningDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e explainPlanningDo) Having(conds ...gen.Condition) IExplainPlanningDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e explainPlanningDo) Limit(limit int) IExplainPlanningDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e explainPlanningDo) Offset(offset int) IExplainPlanningDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e explainPlanningDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExplainPlanningDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e explainPlanningDo) Unscoped() IExplainPlanningDo {
	return e.withDO(e.DO.Unscoped())
}

func (e explainPlanningDo) Create(values ...*model.ExplainPlanning) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e explainPlanningDo) CreateInBatches(values []*model.ExplainPlanning, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e explainPlanningDo) Save(values ...*model.ExplainPlanning) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e explainPlanningDo) First() (*model.ExplainPlanning, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainPlanning), nil
	}
}

func (e explainPlanningDo) Take() (*model.ExplainPlanning, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainPlanning), nil
	}
}

func (e explainPlanningDo) Last() (*model.ExplainPlanning, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainPlanning), nil
	}
}

func (e explainPlanningDo) Find() ([]*model.ExplainPlanning, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExplainPlanning), err
}

func (e explainPlanningDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExplainPlanning, err error) {
	buf := make([]*model.ExplainPlanning, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e explainPlanningDo) FindInBatches(result *[]*model.ExplainPlanning, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e explainPlanningDo) Attrs(attrs ...field.AssignExpr) IExplainPlanningDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e explainPlanningDo) Assign(attrs ...field.AssignExpr) IExplainPlanningDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e explainPlanningDo) Joins(fields ...field.RelationField) IExplainPlanningDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e explainPlanningDo) Preload(fields ...field.RelationField) IExplainPlanningDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e explainPlanningDo) FirstOrInit() (*model.ExplainPlanning, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainPlanning), nil
	}
}

func (e explainPlanningDo) FirstOrCreate() (*model.ExplainPlanning, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainPlanning), nil
	}
}

func (e explainPlanningDo) FindByPage(offset int, limit int) (result []*model.ExplainPlanning, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e explainPlanningDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e explainPlanningDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e explainPlanningDo) Delete(models ...*model.ExplainPlanning) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *explainPlanningDo) withDO(do gen.Dao) *explainPlanningDo {
	e.DO = *do.(*gen.DO)
	return e
}
