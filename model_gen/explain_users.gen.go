// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newExplainUsers(db *gorm.DB, opts ...gen.DOOption) explainUsers {
	_explainUsers := explainUsers{}

	_explainUsers.explainUsersDo.UseDB(db, opts...)
	_explainUsers.explainUsersDo.UseModel(&model.ExplainUsers{})

	tableName := _explainUsers.explainUsersDo.TableName()
	_explainUsers.ALL = field.NewAsterisk(tableName)
	_explainUsers.ExplainUsersID = field.NewString(tableName, "explain_users_id")
	_explainUsers.PlanID = field.NewString(tableName, "plan_id")
	_explainUsers.UserID = field.NewString(tableName, "user_id")

	_explainUsers.fillFieldMap()

	return _explainUsers
}

type explainUsers struct {
	explainUsersDo

	ALL            field.Asterisk
	ExplainUsersID field.String
	PlanID         field.String
	UserID         field.String

	fieldMap map[string]field.Expr
}

func (e explainUsers) Table(newTableName string) *explainUsers {
	e.explainUsersDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e explainUsers) As(alias string) *explainUsers {
	e.explainUsersDo.DO = *(e.explainUsersDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *explainUsers) updateTableName(table string) *explainUsers {
	e.ALL = field.NewAsterisk(table)
	e.ExplainUsersID = field.NewString(table, "explain_users_id")
	e.PlanID = field.NewString(table, "plan_id")
	e.UserID = field.NewString(table, "user_id")

	e.fillFieldMap()

	return e
}

func (e *explainUsers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *explainUsers) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["explain_users_id"] = e.ExplainUsersID
	e.fieldMap["plan_id"] = e.PlanID
	e.fieldMap["user_id"] = e.UserID
}

func (e explainUsers) clone(db *gorm.DB) explainUsers {
	e.explainUsersDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e explainUsers) replaceDB(db *gorm.DB) explainUsers {
	e.explainUsersDo.ReplaceDB(db)
	return e
}

type explainUsersDo struct{ gen.DO }

type IExplainUsersDo interface {
	gen.SubQuery
	Debug() IExplainUsersDo
	WithContext(ctx context.Context) IExplainUsersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExplainUsersDo
	WriteDB() IExplainUsersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExplainUsersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExplainUsersDo
	Not(conds ...gen.Condition) IExplainUsersDo
	Or(conds ...gen.Condition) IExplainUsersDo
	Select(conds ...field.Expr) IExplainUsersDo
	Where(conds ...gen.Condition) IExplainUsersDo
	Order(conds ...field.Expr) IExplainUsersDo
	Distinct(cols ...field.Expr) IExplainUsersDo
	Omit(cols ...field.Expr) IExplainUsersDo
	Join(table schema.Tabler, on ...field.Expr) IExplainUsersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExplainUsersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExplainUsersDo
	Group(cols ...field.Expr) IExplainUsersDo
	Having(conds ...gen.Condition) IExplainUsersDo
	Limit(limit int) IExplainUsersDo
	Offset(offset int) IExplainUsersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExplainUsersDo
	Unscoped() IExplainUsersDo
	Create(values ...*model.ExplainUsers) error
	CreateInBatches(values []*model.ExplainUsers, batchSize int) error
	Save(values ...*model.ExplainUsers) error
	First() (*model.ExplainUsers, error)
	Take() (*model.ExplainUsers, error)
	Last() (*model.ExplainUsers, error)
	Find() ([]*model.ExplainUsers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExplainUsers, err error)
	FindInBatches(result *[]*model.ExplainUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExplainUsers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExplainUsersDo
	Assign(attrs ...field.AssignExpr) IExplainUsersDo
	Joins(fields ...field.RelationField) IExplainUsersDo
	Preload(fields ...field.RelationField) IExplainUsersDo
	FirstOrInit() (*model.ExplainUsers, error)
	FirstOrCreate() (*model.ExplainUsers, error)
	FindByPage(offset int, limit int) (result []*model.ExplainUsers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExplainUsersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e explainUsersDo) Debug() IExplainUsersDo {
	return e.withDO(e.DO.Debug())
}

func (e explainUsersDo) WithContext(ctx context.Context) IExplainUsersDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e explainUsersDo) ReadDB() IExplainUsersDo {
	return e.Clauses(dbresolver.Read)
}

func (e explainUsersDo) WriteDB() IExplainUsersDo {
	return e.Clauses(dbresolver.Write)
}

func (e explainUsersDo) Session(config *gorm.Session) IExplainUsersDo {
	return e.withDO(e.DO.Session(config))
}

func (e explainUsersDo) Clauses(conds ...clause.Expression) IExplainUsersDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e explainUsersDo) Returning(value interface{}, columns ...string) IExplainUsersDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e explainUsersDo) Not(conds ...gen.Condition) IExplainUsersDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e explainUsersDo) Or(conds ...gen.Condition) IExplainUsersDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e explainUsersDo) Select(conds ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e explainUsersDo) Where(conds ...gen.Condition) IExplainUsersDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e explainUsersDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IExplainUsersDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e explainUsersDo) Order(conds ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e explainUsersDo) Distinct(cols ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e explainUsersDo) Omit(cols ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e explainUsersDo) Join(table schema.Tabler, on ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e explainUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e explainUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e explainUsersDo) Group(cols ...field.Expr) IExplainUsersDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e explainUsersDo) Having(conds ...gen.Condition) IExplainUsersDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e explainUsersDo) Limit(limit int) IExplainUsersDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e explainUsersDo) Offset(offset int) IExplainUsersDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e explainUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExplainUsersDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e explainUsersDo) Unscoped() IExplainUsersDo {
	return e.withDO(e.DO.Unscoped())
}

func (e explainUsersDo) Create(values ...*model.ExplainUsers) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e explainUsersDo) CreateInBatches(values []*model.ExplainUsers, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e explainUsersDo) Save(values ...*model.ExplainUsers) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e explainUsersDo) First() (*model.ExplainUsers, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainUsers), nil
	}
}

func (e explainUsersDo) Take() (*model.ExplainUsers, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainUsers), nil
	}
}

func (e explainUsersDo) Last() (*model.ExplainUsers, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainUsers), nil
	}
}

func (e explainUsersDo) Find() ([]*model.ExplainUsers, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExplainUsers), err
}

func (e explainUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExplainUsers, err error) {
	buf := make([]*model.ExplainUsers, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e explainUsersDo) FindInBatches(result *[]*model.ExplainUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e explainUsersDo) Attrs(attrs ...field.AssignExpr) IExplainUsersDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e explainUsersDo) Assign(attrs ...field.AssignExpr) IExplainUsersDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e explainUsersDo) Joins(fields ...field.RelationField) IExplainUsersDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e explainUsersDo) Preload(fields ...field.RelationField) IExplainUsersDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e explainUsersDo) FirstOrInit() (*model.ExplainUsers, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainUsers), nil
	}
}

func (e explainUsersDo) FirstOrCreate() (*model.ExplainUsers, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExplainUsers), nil
	}
}

func (e explainUsersDo) FindByPage(offset int, limit int) (result []*model.ExplainUsers, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e explainUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e explainUsersDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e explainUsersDo) Delete(models ...*model.ExplainUsers) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *explainUsersDo) withDO(do gen.Dao) *explainUsersDo {
	e.DO = *do.(*gen.DO)
	return e
}
