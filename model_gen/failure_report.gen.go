// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newFailureReport(db *gorm.DB, opts ...gen.DOOption) failureReport {
	_failureReport := failureReport{}

	_failureReport.failureReportDo.UseDB(db, opts...)
	_failureReport.failureReportDo.UseModel(&model.FailureReport{})

	tableName := _failureReport.failureReportDo.TableName()
	_failureReport.ALL = field.NewAsterisk(tableName)
	_failureReport.Components = field.NewString(tableName, "components")
	_failureReport.FixVersions = field.NewString(tableName, "fix_versions")
	_failureReport.Assignee = field.NewString(tableName, "assignee")
	_failureReport.Priority = field.NewString(tableName, "priority")
	_failureReport.Labels = field.NewString(tableName, "labels")
	_failureReport.Description = field.NewString(tableName, "description")
	_failureReport.JiraKey = field.NewString(tableName, "jira_key")
	_failureReport.ConfluenceLink = field.NewString(tableName, "confluence_link")
	_failureReport.CreatedTime = field.NewString(tableName, "created_time")
	_failureReport.Reporter = field.NewString(tableName, "reporter")
	_failureReport.FailureReportID = field.NewString(tableName, "failure_report_id")
	_failureReport.FailureTime = field.NewString(tableName, "failure_time")
	_failureReport.FailureLevel = field.NewString(tableName, "failure_level")
	_failureReport.OpUser = field.NewString(tableName, "op_user")
	_failureReport.DutyTeam = field.NewString(tableName, "duty_team")
	_failureReport.MajorMan = field.NewString(tableName, "major_man")
	_failureReport.BlackDot = field.NewFloat32(tableName, "black_dot")
	_failureReport.TestCase = field.NewString(tableName, "test_case")
	_failureReport.TestForget = field.NewString(tableName, "test_forget")
	_failureReport.TestForgetReason = field.NewString(tableName, "test_forget_reason")
	_failureReport.Avoid = field.NewString(tableName, "avoid")
	_failureReport.TestUser = field.NewString(tableName, "test_user")
	_failureReport.RelativeIssues = field.NewString(tableName, "relative_issues")
	_failureReport.RelativeVersion = field.NewString(tableName, "relative_version")
	_failureReport.RelativeReason = field.NewString(tableName, "relative_reason")
	_failureReport.FailureType = field.NewString(tableName, "failure_type")
	_failureReport.ProblemReasons = field.NewString(tableName, "problem_reasons")

	_failureReport.fillFieldMap()

	return _failureReport
}

type failureReport struct {
	failureReportDo

	ALL              field.Asterisk
	Components       field.String // 模块
	FixVersions      field.String // 版本
	Assignee         field.String // 经办人
	Priority         field.String // 优先级
	Labels           field.String // 标签
	Description      field.String // 描述内容
	JiraKey          field.String // jira链接
	ConfluenceLink   field.String // confluence链接
	CreatedTime      field.String // 创建日期
	Reporter         field.String // 报告人
	FailureReportID  field.String
	FailureTime      field.String
	FailureLevel     field.String
	OpUser           field.String // 创建人
	DutyTeam         field.String
	MajorMan         field.String
	BlackDot         field.Float32
	TestCase         field.String
	TestForget       field.String
	TestForgetReason field.String
	Avoid            field.String
	TestUser         field.String
	RelativeIssues   field.String
	RelativeVersion  field.String
	RelativeReason   field.String
	FailureType      field.String
	ProblemReasons   field.String

	fieldMap map[string]field.Expr
}

func (f failureReport) Table(newTableName string) *failureReport {
	f.failureReportDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f failureReport) As(alias string) *failureReport {
	f.failureReportDo.DO = *(f.failureReportDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *failureReport) updateTableName(table string) *failureReport {
	f.ALL = field.NewAsterisk(table)
	f.Components = field.NewString(table, "components")
	f.FixVersions = field.NewString(table, "fix_versions")
	f.Assignee = field.NewString(table, "assignee")
	f.Priority = field.NewString(table, "priority")
	f.Labels = field.NewString(table, "labels")
	f.Description = field.NewString(table, "description")
	f.JiraKey = field.NewString(table, "jira_key")
	f.ConfluenceLink = field.NewString(table, "confluence_link")
	f.CreatedTime = field.NewString(table, "created_time")
	f.Reporter = field.NewString(table, "reporter")
	f.FailureReportID = field.NewString(table, "failure_report_id")
	f.FailureTime = field.NewString(table, "failure_time")
	f.FailureLevel = field.NewString(table, "failure_level")
	f.OpUser = field.NewString(table, "op_user")
	f.DutyTeam = field.NewString(table, "duty_team")
	f.MajorMan = field.NewString(table, "major_man")
	f.BlackDot = field.NewFloat32(table, "black_dot")
	f.TestCase = field.NewString(table, "test_case")
	f.TestForget = field.NewString(table, "test_forget")
	f.TestForgetReason = field.NewString(table, "test_forget_reason")
	f.Avoid = field.NewString(table, "avoid")
	f.TestUser = field.NewString(table, "test_user")
	f.RelativeIssues = field.NewString(table, "relative_issues")
	f.RelativeVersion = field.NewString(table, "relative_version")
	f.RelativeReason = field.NewString(table, "relative_reason")
	f.FailureType = field.NewString(table, "failure_type")
	f.ProblemReasons = field.NewString(table, "problem_reasons")

	f.fillFieldMap()

	return f
}

func (f *failureReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *failureReport) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 27)
	f.fieldMap["components"] = f.Components
	f.fieldMap["fix_versions"] = f.FixVersions
	f.fieldMap["assignee"] = f.Assignee
	f.fieldMap["priority"] = f.Priority
	f.fieldMap["labels"] = f.Labels
	f.fieldMap["description"] = f.Description
	f.fieldMap["jira_key"] = f.JiraKey
	f.fieldMap["confluence_link"] = f.ConfluenceLink
	f.fieldMap["created_time"] = f.CreatedTime
	f.fieldMap["reporter"] = f.Reporter
	f.fieldMap["failure_report_id"] = f.FailureReportID
	f.fieldMap["failure_time"] = f.FailureTime
	f.fieldMap["failure_level"] = f.FailureLevel
	f.fieldMap["op_user"] = f.OpUser
	f.fieldMap["duty_team"] = f.DutyTeam
	f.fieldMap["major_man"] = f.MajorMan
	f.fieldMap["black_dot"] = f.BlackDot
	f.fieldMap["test_case"] = f.TestCase
	f.fieldMap["test_forget"] = f.TestForget
	f.fieldMap["test_forget_reason"] = f.TestForgetReason
	f.fieldMap["avoid"] = f.Avoid
	f.fieldMap["test_user"] = f.TestUser
	f.fieldMap["relative_issues"] = f.RelativeIssues
	f.fieldMap["relative_version"] = f.RelativeVersion
	f.fieldMap["relative_reason"] = f.RelativeReason
	f.fieldMap["failure_type"] = f.FailureType
	f.fieldMap["problem_reasons"] = f.ProblemReasons
}

func (f failureReport) clone(db *gorm.DB) failureReport {
	f.failureReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f failureReport) replaceDB(db *gorm.DB) failureReport {
	f.failureReportDo.ReplaceDB(db)
	return f
}

type failureReportDo struct{ gen.DO }

type IFailureReportDo interface {
	gen.SubQuery
	Debug() IFailureReportDo
	WithContext(ctx context.Context) IFailureReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFailureReportDo
	WriteDB() IFailureReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFailureReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFailureReportDo
	Not(conds ...gen.Condition) IFailureReportDo
	Or(conds ...gen.Condition) IFailureReportDo
	Select(conds ...field.Expr) IFailureReportDo
	Where(conds ...gen.Condition) IFailureReportDo
	Order(conds ...field.Expr) IFailureReportDo
	Distinct(cols ...field.Expr) IFailureReportDo
	Omit(cols ...field.Expr) IFailureReportDo
	Join(table schema.Tabler, on ...field.Expr) IFailureReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFailureReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFailureReportDo
	Group(cols ...field.Expr) IFailureReportDo
	Having(conds ...gen.Condition) IFailureReportDo
	Limit(limit int) IFailureReportDo
	Offset(offset int) IFailureReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFailureReportDo
	Unscoped() IFailureReportDo
	Create(values ...*model.FailureReport) error
	CreateInBatches(values []*model.FailureReport, batchSize int) error
	Save(values ...*model.FailureReport) error
	First() (*model.FailureReport, error)
	Take() (*model.FailureReport, error)
	Last() (*model.FailureReport, error)
	Find() ([]*model.FailureReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FailureReport, err error)
	FindInBatches(result *[]*model.FailureReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FailureReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFailureReportDo
	Assign(attrs ...field.AssignExpr) IFailureReportDo
	Joins(fields ...field.RelationField) IFailureReportDo
	Preload(fields ...field.RelationField) IFailureReportDo
	FirstOrInit() (*model.FailureReport, error)
	FirstOrCreate() (*model.FailureReport, error)
	FindByPage(offset int, limit int) (result []*model.FailureReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFailureReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f failureReportDo) Debug() IFailureReportDo {
	return f.withDO(f.DO.Debug())
}

func (f failureReportDo) WithContext(ctx context.Context) IFailureReportDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f failureReportDo) ReadDB() IFailureReportDo {
	return f.Clauses(dbresolver.Read)
}

func (f failureReportDo) WriteDB() IFailureReportDo {
	return f.Clauses(dbresolver.Write)
}

func (f failureReportDo) Session(config *gorm.Session) IFailureReportDo {
	return f.withDO(f.DO.Session(config))
}

func (f failureReportDo) Clauses(conds ...clause.Expression) IFailureReportDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f failureReportDo) Returning(value interface{}, columns ...string) IFailureReportDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f failureReportDo) Not(conds ...gen.Condition) IFailureReportDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f failureReportDo) Or(conds ...gen.Condition) IFailureReportDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f failureReportDo) Select(conds ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f failureReportDo) Where(conds ...gen.Condition) IFailureReportDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f failureReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFailureReportDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f failureReportDo) Order(conds ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f failureReportDo) Distinct(cols ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f failureReportDo) Omit(cols ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f failureReportDo) Join(table schema.Tabler, on ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f failureReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f failureReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f failureReportDo) Group(cols ...field.Expr) IFailureReportDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f failureReportDo) Having(conds ...gen.Condition) IFailureReportDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f failureReportDo) Limit(limit int) IFailureReportDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f failureReportDo) Offset(offset int) IFailureReportDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f failureReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFailureReportDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f failureReportDo) Unscoped() IFailureReportDo {
	return f.withDO(f.DO.Unscoped())
}

func (f failureReportDo) Create(values ...*model.FailureReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f failureReportDo) CreateInBatches(values []*model.FailureReport, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f failureReportDo) Save(values ...*model.FailureReport) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f failureReportDo) First() (*model.FailureReport, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReport), nil
	}
}

func (f failureReportDo) Take() (*model.FailureReport, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReport), nil
	}
}

func (f failureReportDo) Last() (*model.FailureReport, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReport), nil
	}
}

func (f failureReportDo) Find() ([]*model.FailureReport, error) {
	result, err := f.DO.Find()
	return result.([]*model.FailureReport), err
}

func (f failureReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FailureReport, err error) {
	buf := make([]*model.FailureReport, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f failureReportDo) FindInBatches(result *[]*model.FailureReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f failureReportDo) Attrs(attrs ...field.AssignExpr) IFailureReportDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f failureReportDo) Assign(attrs ...field.AssignExpr) IFailureReportDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f failureReportDo) Joins(fields ...field.RelationField) IFailureReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f failureReportDo) Preload(fields ...field.RelationField) IFailureReportDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f failureReportDo) FirstOrInit() (*model.FailureReport, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReport), nil
	}
}

func (f failureReportDo) FirstOrCreate() (*model.FailureReport, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReport), nil
	}
}

func (f failureReportDo) FindByPage(offset int, limit int) (result []*model.FailureReport, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f failureReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f failureReportDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f failureReportDo) Delete(models ...*model.FailureReport) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *failureReportDo) withDO(do gen.Dao) *failureReportDo {
	f.DO = *do.(*gen.DO)
	return f
}
