// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newFailureReportSecond(db *gorm.DB, opts ...gen.DOOption) failureReportSecond {
	_failureReportSecond := failureReportSecond{}

	_failureReportSecond.failureReportSecondDo.UseDB(db, opts...)
	_failureReportSecond.failureReportSecondDo.UseModel(&model.FailureReportSecond{})

	tableName := _failureReportSecond.failureReportSecondDo.TableName()
	_failureReportSecond.ALL = field.NewAsterisk(tableName)
	_failureReportSecond.FailureReportSecondID = field.NewString(tableName, "failure_report_second_id")
	_failureReportSecond.FailureReportID = field.NewString(tableName, "failure_report_id")
	_failureReportSecond.MajorMan = field.NewString(tableName, "major_man")
	_failureReportSecond.BlackDot = field.NewFloat32(tableName, "black_dot")

	_failureReportSecond.fillFieldMap()

	return _failureReportSecond
}

type failureReportSecond struct {
	failureReportSecondDo

	ALL                   field.Asterisk
	FailureReportSecondID field.String
	FailureReportID       field.String
	MajorMan              field.String
	BlackDot              field.Float32

	fieldMap map[string]field.Expr
}

func (f failureReportSecond) Table(newTableName string) *failureReportSecond {
	f.failureReportSecondDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f failureReportSecond) As(alias string) *failureReportSecond {
	f.failureReportSecondDo.DO = *(f.failureReportSecondDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *failureReportSecond) updateTableName(table string) *failureReportSecond {
	f.ALL = field.NewAsterisk(table)
	f.FailureReportSecondID = field.NewString(table, "failure_report_second_id")
	f.FailureReportID = field.NewString(table, "failure_report_id")
	f.MajorMan = field.NewString(table, "major_man")
	f.BlackDot = field.NewFloat32(table, "black_dot")

	f.fillFieldMap()

	return f
}

func (f *failureReportSecond) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *failureReportSecond) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 4)
	f.fieldMap["failure_report_second_id"] = f.FailureReportSecondID
	f.fieldMap["failure_report_id"] = f.FailureReportID
	f.fieldMap["major_man"] = f.MajorMan
	f.fieldMap["black_dot"] = f.BlackDot
}

func (f failureReportSecond) clone(db *gorm.DB) failureReportSecond {
	f.failureReportSecondDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f failureReportSecond) replaceDB(db *gorm.DB) failureReportSecond {
	f.failureReportSecondDo.ReplaceDB(db)
	return f
}

type failureReportSecondDo struct{ gen.DO }

type IFailureReportSecondDo interface {
	gen.SubQuery
	Debug() IFailureReportSecondDo
	WithContext(ctx context.Context) IFailureReportSecondDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFailureReportSecondDo
	WriteDB() IFailureReportSecondDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFailureReportSecondDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFailureReportSecondDo
	Not(conds ...gen.Condition) IFailureReportSecondDo
	Or(conds ...gen.Condition) IFailureReportSecondDo
	Select(conds ...field.Expr) IFailureReportSecondDo
	Where(conds ...gen.Condition) IFailureReportSecondDo
	Order(conds ...field.Expr) IFailureReportSecondDo
	Distinct(cols ...field.Expr) IFailureReportSecondDo
	Omit(cols ...field.Expr) IFailureReportSecondDo
	Join(table schema.Tabler, on ...field.Expr) IFailureReportSecondDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFailureReportSecondDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFailureReportSecondDo
	Group(cols ...field.Expr) IFailureReportSecondDo
	Having(conds ...gen.Condition) IFailureReportSecondDo
	Limit(limit int) IFailureReportSecondDo
	Offset(offset int) IFailureReportSecondDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFailureReportSecondDo
	Unscoped() IFailureReportSecondDo
	Create(values ...*model.FailureReportSecond) error
	CreateInBatches(values []*model.FailureReportSecond, batchSize int) error
	Save(values ...*model.FailureReportSecond) error
	First() (*model.FailureReportSecond, error)
	Take() (*model.FailureReportSecond, error)
	Last() (*model.FailureReportSecond, error)
	Find() ([]*model.FailureReportSecond, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FailureReportSecond, err error)
	FindInBatches(result *[]*model.FailureReportSecond, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FailureReportSecond) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFailureReportSecondDo
	Assign(attrs ...field.AssignExpr) IFailureReportSecondDo
	Joins(fields ...field.RelationField) IFailureReportSecondDo
	Preload(fields ...field.RelationField) IFailureReportSecondDo
	FirstOrInit() (*model.FailureReportSecond, error)
	FirstOrCreate() (*model.FailureReportSecond, error)
	FindByPage(offset int, limit int) (result []*model.FailureReportSecond, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFailureReportSecondDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f failureReportSecondDo) Debug() IFailureReportSecondDo {
	return f.withDO(f.DO.Debug())
}

func (f failureReportSecondDo) WithContext(ctx context.Context) IFailureReportSecondDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f failureReportSecondDo) ReadDB() IFailureReportSecondDo {
	return f.Clauses(dbresolver.Read)
}

func (f failureReportSecondDo) WriteDB() IFailureReportSecondDo {
	return f.Clauses(dbresolver.Write)
}

func (f failureReportSecondDo) Session(config *gorm.Session) IFailureReportSecondDo {
	return f.withDO(f.DO.Session(config))
}

func (f failureReportSecondDo) Clauses(conds ...clause.Expression) IFailureReportSecondDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f failureReportSecondDo) Returning(value interface{}, columns ...string) IFailureReportSecondDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f failureReportSecondDo) Not(conds ...gen.Condition) IFailureReportSecondDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f failureReportSecondDo) Or(conds ...gen.Condition) IFailureReportSecondDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f failureReportSecondDo) Select(conds ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f failureReportSecondDo) Where(conds ...gen.Condition) IFailureReportSecondDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f failureReportSecondDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFailureReportSecondDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f failureReportSecondDo) Order(conds ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f failureReportSecondDo) Distinct(cols ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f failureReportSecondDo) Omit(cols ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f failureReportSecondDo) Join(table schema.Tabler, on ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f failureReportSecondDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f failureReportSecondDo) RightJoin(table schema.Tabler, on ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f failureReportSecondDo) Group(cols ...field.Expr) IFailureReportSecondDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f failureReportSecondDo) Having(conds ...gen.Condition) IFailureReportSecondDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f failureReportSecondDo) Limit(limit int) IFailureReportSecondDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f failureReportSecondDo) Offset(offset int) IFailureReportSecondDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f failureReportSecondDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFailureReportSecondDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f failureReportSecondDo) Unscoped() IFailureReportSecondDo {
	return f.withDO(f.DO.Unscoped())
}

func (f failureReportSecondDo) Create(values ...*model.FailureReportSecond) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f failureReportSecondDo) CreateInBatches(values []*model.FailureReportSecond, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f failureReportSecondDo) Save(values ...*model.FailureReportSecond) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f failureReportSecondDo) First() (*model.FailureReportSecond, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReportSecond), nil
	}
}

func (f failureReportSecondDo) Take() (*model.FailureReportSecond, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReportSecond), nil
	}
}

func (f failureReportSecondDo) Last() (*model.FailureReportSecond, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReportSecond), nil
	}
}

func (f failureReportSecondDo) Find() ([]*model.FailureReportSecond, error) {
	result, err := f.DO.Find()
	return result.([]*model.FailureReportSecond), err
}

func (f failureReportSecondDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FailureReportSecond, err error) {
	buf := make([]*model.FailureReportSecond, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f failureReportSecondDo) FindInBatches(result *[]*model.FailureReportSecond, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f failureReportSecondDo) Attrs(attrs ...field.AssignExpr) IFailureReportSecondDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f failureReportSecondDo) Assign(attrs ...field.AssignExpr) IFailureReportSecondDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f failureReportSecondDo) Joins(fields ...field.RelationField) IFailureReportSecondDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f failureReportSecondDo) Preload(fields ...field.RelationField) IFailureReportSecondDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f failureReportSecondDo) FirstOrInit() (*model.FailureReportSecond, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReportSecond), nil
	}
}

func (f failureReportSecondDo) FirstOrCreate() (*model.FailureReportSecond, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailureReportSecond), nil
	}
}

func (f failureReportSecondDo) FindByPage(offset int, limit int) (result []*model.FailureReportSecond, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f failureReportSecondDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f failureReportSecondDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f failureReportSecondDo) Delete(models ...*model.FailureReportSecond) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *failureReportSecondDo) withDO(do gen.Dao) *failureReportSecondDo {
	f.DO = *do.(*gen.DO)
	return f
}
