// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newFrExerecord(db *gorm.DB, opts ...gen.DOOption) frExerecord {
	_frExerecord := frExerecord{}

	_frExerecord.frExerecordDo.UseDB(db, opts...)
	_frExerecord.frExerecordDo.UseModel(&model.FrExerecord{})

	tableName := _frExerecord.frExerecordDo.TableName()
	_frExerecord.ALL = field.NewAsterisk(tableName)
	_frExerecord.ID = field.NewInt32(tableName, "id")
	_frExerecord.Tname = field.NewString(tableName, "tname")
	_frExerecord.Type = field.NewInt32(tableName, "type")
	_frExerecord.Param = field.NewString(tableName, "param")
	_frExerecord.Logtime = field.NewTime(tableName, "logtime")
	_frExerecord.Project = field.NewString(tableName, "project")
	_frExerecord.IP = field.NewString(tableName, "ip")
	_frExerecord.Username = field.NewString(tableName, "username")
	_frExerecord.Userrole = field.NewString(tableName, "userrole")
	_frExerecord.Time = field.NewInt32(tableName, "time")
	_frExerecord.Sql = field.NewString(tableName, "sql")
	_frExerecord.Browser = field.NewString(tableName, "browser")
	_frExerecord.Memory = field.NewFloat64(tableName, "memory")

	_frExerecord.fillFieldMap()

	return _frExerecord
}

type frExerecord struct {
	frExerecordDo

	ALL      field.Asterisk
	ID       field.Int32
	Tname    field.String
	Type     field.Int32
	Param    field.String
	Logtime  field.Time
	Project  field.String
	IP       field.String
	Username field.String
	Userrole field.String
	Time     field.Int32
	Sql      field.String
	Browser  field.String
	Memory   field.Float64

	fieldMap map[string]field.Expr
}

func (f frExerecord) Table(newTableName string) *frExerecord {
	f.frExerecordDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f frExerecord) As(alias string) *frExerecord {
	f.frExerecordDo.DO = *(f.frExerecordDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *frExerecord) updateTableName(table string) *frExerecord {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.Tname = field.NewString(table, "tname")
	f.Type = field.NewInt32(table, "type")
	f.Param = field.NewString(table, "param")
	f.Logtime = field.NewTime(table, "logtime")
	f.Project = field.NewString(table, "project")
	f.IP = field.NewString(table, "ip")
	f.Username = field.NewString(table, "username")
	f.Userrole = field.NewString(table, "userrole")
	f.Time = field.NewInt32(table, "time")
	f.Sql = field.NewString(table, "sql")
	f.Browser = field.NewString(table, "browser")
	f.Memory = field.NewFloat64(table, "memory")

	f.fillFieldMap()

	return f
}

func (f *frExerecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *frExerecord) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["id"] = f.ID
	f.fieldMap["tname"] = f.Tname
	f.fieldMap["type"] = f.Type
	f.fieldMap["param"] = f.Param
	f.fieldMap["logtime"] = f.Logtime
	f.fieldMap["project"] = f.Project
	f.fieldMap["ip"] = f.IP
	f.fieldMap["username"] = f.Username
	f.fieldMap["userrole"] = f.Userrole
	f.fieldMap["time"] = f.Time
	f.fieldMap["sql"] = f.Sql
	f.fieldMap["browser"] = f.Browser
	f.fieldMap["memory"] = f.Memory
}

func (f frExerecord) clone(db *gorm.DB) frExerecord {
	f.frExerecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f frExerecord) replaceDB(db *gorm.DB) frExerecord {
	f.frExerecordDo.ReplaceDB(db)
	return f
}

type frExerecordDo struct{ gen.DO }

type IFrExerecordDo interface {
	gen.SubQuery
	Debug() IFrExerecordDo
	WithContext(ctx context.Context) IFrExerecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFrExerecordDo
	WriteDB() IFrExerecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFrExerecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFrExerecordDo
	Not(conds ...gen.Condition) IFrExerecordDo
	Or(conds ...gen.Condition) IFrExerecordDo
	Select(conds ...field.Expr) IFrExerecordDo
	Where(conds ...gen.Condition) IFrExerecordDo
	Order(conds ...field.Expr) IFrExerecordDo
	Distinct(cols ...field.Expr) IFrExerecordDo
	Omit(cols ...field.Expr) IFrExerecordDo
	Join(table schema.Tabler, on ...field.Expr) IFrExerecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFrExerecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFrExerecordDo
	Group(cols ...field.Expr) IFrExerecordDo
	Having(conds ...gen.Condition) IFrExerecordDo
	Limit(limit int) IFrExerecordDo
	Offset(offset int) IFrExerecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFrExerecordDo
	Unscoped() IFrExerecordDo
	Create(values ...*model.FrExerecord) error
	CreateInBatches(values []*model.FrExerecord, batchSize int) error
	Save(values ...*model.FrExerecord) error
	First() (*model.FrExerecord, error)
	Take() (*model.FrExerecord, error)
	Last() (*model.FrExerecord, error)
	Find() ([]*model.FrExerecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FrExerecord, err error)
	FindInBatches(result *[]*model.FrExerecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FrExerecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFrExerecordDo
	Assign(attrs ...field.AssignExpr) IFrExerecordDo
	Joins(fields ...field.RelationField) IFrExerecordDo
	Preload(fields ...field.RelationField) IFrExerecordDo
	FirstOrInit() (*model.FrExerecord, error)
	FirstOrCreate() (*model.FrExerecord, error)
	FindByPage(offset int, limit int) (result []*model.FrExerecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFrExerecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f frExerecordDo) Debug() IFrExerecordDo {
	return f.withDO(f.DO.Debug())
}

func (f frExerecordDo) WithContext(ctx context.Context) IFrExerecordDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f frExerecordDo) ReadDB() IFrExerecordDo {
	return f.Clauses(dbresolver.Read)
}

func (f frExerecordDo) WriteDB() IFrExerecordDo {
	return f.Clauses(dbresolver.Write)
}

func (f frExerecordDo) Session(config *gorm.Session) IFrExerecordDo {
	return f.withDO(f.DO.Session(config))
}

func (f frExerecordDo) Clauses(conds ...clause.Expression) IFrExerecordDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f frExerecordDo) Returning(value interface{}, columns ...string) IFrExerecordDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f frExerecordDo) Not(conds ...gen.Condition) IFrExerecordDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f frExerecordDo) Or(conds ...gen.Condition) IFrExerecordDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f frExerecordDo) Select(conds ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f frExerecordDo) Where(conds ...gen.Condition) IFrExerecordDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f frExerecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFrExerecordDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f frExerecordDo) Order(conds ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f frExerecordDo) Distinct(cols ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f frExerecordDo) Omit(cols ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f frExerecordDo) Join(table schema.Tabler, on ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f frExerecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f frExerecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f frExerecordDo) Group(cols ...field.Expr) IFrExerecordDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f frExerecordDo) Having(conds ...gen.Condition) IFrExerecordDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f frExerecordDo) Limit(limit int) IFrExerecordDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f frExerecordDo) Offset(offset int) IFrExerecordDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f frExerecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFrExerecordDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f frExerecordDo) Unscoped() IFrExerecordDo {
	return f.withDO(f.DO.Unscoped())
}

func (f frExerecordDo) Create(values ...*model.FrExerecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f frExerecordDo) CreateInBatches(values []*model.FrExerecord, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f frExerecordDo) Save(values ...*model.FrExerecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f frExerecordDo) First() (*model.FrExerecord, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrExerecord), nil
	}
}

func (f frExerecordDo) Take() (*model.FrExerecord, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrExerecord), nil
	}
}

func (f frExerecordDo) Last() (*model.FrExerecord, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrExerecord), nil
	}
}

func (f frExerecordDo) Find() ([]*model.FrExerecord, error) {
	result, err := f.DO.Find()
	return result.([]*model.FrExerecord), err
}

func (f frExerecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FrExerecord, err error) {
	buf := make([]*model.FrExerecord, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f frExerecordDo) FindInBatches(result *[]*model.FrExerecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f frExerecordDo) Attrs(attrs ...field.AssignExpr) IFrExerecordDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f frExerecordDo) Assign(attrs ...field.AssignExpr) IFrExerecordDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f frExerecordDo) Joins(fields ...field.RelationField) IFrExerecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f frExerecordDo) Preload(fields ...field.RelationField) IFrExerecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f frExerecordDo) FirstOrInit() (*model.FrExerecord, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrExerecord), nil
	}
}

func (f frExerecordDo) FirstOrCreate() (*model.FrExerecord, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FrExerecord), nil
	}
}

func (f frExerecordDo) FindByPage(offset int, limit int) (result []*model.FrExerecord, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f frExerecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f frExerecordDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f frExerecordDo) Delete(models ...*model.FrExerecord) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *frExerecordDo) withDO(do gen.Dao) *frExerecordDo {
	f.DO = *do.(*gen.DO)
	return f
}
