// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	CollectDoc          *collectDoc
	CollectDocDemo      *collectDocDemo
	CollectDocImportant *collectDocImportant
	CollectDocParams    *collectDocParams
	CollectDocResult    *collectDocResult
	ConfigDetail        *configDetail
	ConfigGroup         *configGroup
	DocGroup            *docGroup
	Role                *role
	ServerEnv           *serverEnv
	ServerInstallSoft   *serverInstallSoft
	SysCode             *sysCode
	SysEnv              *sysEnv
	SysProjects         *sysProjects
	UserRole            *userRole
	UserRoleIDList      *userRoleIDList
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CollectDoc = &Q.CollectDoc
	CollectDocDemo = &Q.CollectDocDemo
	CollectDocImportant = &Q.CollectDocImportant
	CollectDocParams = &Q.CollectDocParams
	CollectDocResult = &Q.CollectDocResult
	ConfigDetail = &Q.ConfigDetail
	ConfigGroup = &Q.ConfigGroup
	DocGroup = &Q.DocGroup
	Role = &Q.Role
	ServerEnv = &Q.ServerEnv
	ServerInstallSoft = &Q.ServerInstallSoft
	SysCode = &Q.SysCode
	SysEnv = &Q.SysEnv
	SysProjects = &Q.SysProjects
	UserRole = &Q.UserRole
	UserRoleIDList = &Q.UserRoleIDList
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		CollectDoc:          newCollectDoc(db, opts...),
		CollectDocDemo:      newCollectDocDemo(db, opts...),
		CollectDocImportant: newCollectDocImportant(db, opts...),
		CollectDocParams:    newCollectDocParams(db, opts...),
		CollectDocResult:    newCollectDocResult(db, opts...),
		ConfigDetail:        newConfigDetail(db, opts...),
		ConfigGroup:         newConfigGroup(db, opts...),
		DocGroup:            newDocGroup(db, opts...),
		Role:                newRole(db, opts...),
		ServerEnv:           newServerEnv(db, opts...),
		ServerInstallSoft:   newServerInstallSoft(db, opts...),
		SysCode:             newSysCode(db, opts...),
		SysEnv:              newSysEnv(db, opts...),
		SysProjects:         newSysProjects(db, opts...),
		UserRole:            newUserRole(db, opts...),
		UserRoleIDList:      newUserRoleIDList(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CollectDoc          collectDoc
	CollectDocDemo      collectDocDemo
	CollectDocImportant collectDocImportant
	CollectDocParams    collectDocParams
	CollectDocResult    collectDocResult
	ConfigDetail        configDetail
	ConfigGroup         configGroup
	DocGroup            docGroup
	Role                role
	ServerEnv           serverEnv
	ServerInstallSoft   serverInstallSoft
	SysCode             sysCode
	SysEnv              sysEnv
	SysProjects         sysProjects
	UserRole            userRole
	UserRoleIDList      userRoleIDList
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CollectDoc:          q.CollectDoc.clone(db),
		CollectDocDemo:      q.CollectDocDemo.clone(db),
		CollectDocImportant: q.CollectDocImportant.clone(db),
		CollectDocParams:    q.CollectDocParams.clone(db),
		CollectDocResult:    q.CollectDocResult.clone(db),
		ConfigDetail:        q.ConfigDetail.clone(db),
		ConfigGroup:         q.ConfigGroup.clone(db),
		DocGroup:            q.DocGroup.clone(db),
		Role:                q.Role.clone(db),
		ServerEnv:           q.ServerEnv.clone(db),
		ServerInstallSoft:   q.ServerInstallSoft.clone(db),
		SysCode:             q.SysCode.clone(db),
		SysEnv:              q.SysEnv.clone(db),
		SysProjects:         q.SysProjects.clone(db),
		UserRole:            q.UserRole.clone(db),
		UserRoleIDList:      q.UserRoleIDList.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CollectDoc:          q.CollectDoc.replaceDB(db),
		CollectDocDemo:      q.CollectDocDemo.replaceDB(db),
		CollectDocImportant: q.CollectDocImportant.replaceDB(db),
		CollectDocParams:    q.CollectDocParams.replaceDB(db),
		CollectDocResult:    q.CollectDocResult.replaceDB(db),
		ConfigDetail:        q.ConfigDetail.replaceDB(db),
		ConfigGroup:         q.ConfigGroup.replaceDB(db),
		DocGroup:            q.DocGroup.replaceDB(db),
		Role:                q.Role.replaceDB(db),
		ServerEnv:           q.ServerEnv.replaceDB(db),
		ServerInstallSoft:   q.ServerInstallSoft.replaceDB(db),
		SysCode:             q.SysCode.replaceDB(db),
		SysEnv:              q.SysEnv.replaceDB(db),
		SysProjects:         q.SysProjects.replaceDB(db),
		UserRole:            q.UserRole.replaceDB(db),
		UserRoleIDList:      q.UserRoleIDList.replaceDB(db),
	}
}

type queryCtx struct {
	CollectDoc          ICollectDocDo
	CollectDocDemo      ICollectDocDemoDo
	CollectDocImportant ICollectDocImportantDo
	CollectDocParams    ICollectDocParamsDo
	CollectDocResult    ICollectDocResultDo
	ConfigDetail        IConfigDetailDo
	ConfigGroup         IConfigGroupDo
	DocGroup            IDocGroupDo
	Role                IRoleDo
	ServerEnv           IServerEnvDo
	ServerInstallSoft   IServerInstallSoftDo
	SysCode             ISysCodeDo
	SysEnv              ISysEnvDo
	SysProjects         ISysProjectsDo
	UserRole            IUserRoleDo
	UserRoleIDList      IUserRoleIDListDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CollectDoc:          q.CollectDoc.WithContext(ctx),
		CollectDocDemo:      q.CollectDocDemo.WithContext(ctx),
		CollectDocImportant: q.CollectDocImportant.WithContext(ctx),
		CollectDocParams:    q.CollectDocParams.WithContext(ctx),
		CollectDocResult:    q.CollectDocResult.WithContext(ctx),
		ConfigDetail:        q.ConfigDetail.WithContext(ctx),
		ConfigGroup:         q.ConfigGroup.WithContext(ctx),
		DocGroup:            q.DocGroup.WithContext(ctx),
		Role:                q.Role.WithContext(ctx),
		ServerEnv:           q.ServerEnv.WithContext(ctx),
		ServerInstallSoft:   q.ServerInstallSoft.WithContext(ctx),
		SysCode:             q.SysCode.WithContext(ctx),
		SysEnv:              q.SysEnv.WithContext(ctx),
		SysProjects:         q.SysProjects.WithContext(ctx),
		UserRole:            q.UserRole.WithContext(ctx),
		UserRoleIDList:      q.UserRoleIDList.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
