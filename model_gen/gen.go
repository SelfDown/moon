// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	CollectDoc          *collectDoc
	CollectDocDemo      *collectDocDemo
	CollectDocImportant *collectDocImportant
	CollectDocParams    *collectDocParams
	CollectDocResult    *collectDocResult
	ConfigDetail        *configDetail
	ConfigGroup         *configGroup
	DocGroup            *docGroup
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CollectDoc = &Q.CollectDoc
	CollectDocDemo = &Q.CollectDocDemo
	CollectDocImportant = &Q.CollectDocImportant
	CollectDocParams = &Q.CollectDocParams
	CollectDocResult = &Q.CollectDocResult
	ConfigDetail = &Q.ConfigDetail
	ConfigGroup = &Q.ConfigGroup
	DocGroup = &Q.DocGroup
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		CollectDoc:          newCollectDoc(db, opts...),
		CollectDocDemo:      newCollectDocDemo(db, opts...),
		CollectDocImportant: newCollectDocImportant(db, opts...),
		CollectDocParams:    newCollectDocParams(db, opts...),
		CollectDocResult:    newCollectDocResult(db, opts...),
		ConfigDetail:        newConfigDetail(db, opts...),
		ConfigGroup:         newConfigGroup(db, opts...),
		DocGroup:            newDocGroup(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CollectDoc          collectDoc
	CollectDocDemo      collectDocDemo
	CollectDocImportant collectDocImportant
	CollectDocParams    collectDocParams
	CollectDocResult    collectDocResult
	ConfigDetail        configDetail
	ConfigGroup         configGroup
	DocGroup            docGroup
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CollectDoc:          q.CollectDoc.clone(db),
		CollectDocDemo:      q.CollectDocDemo.clone(db),
		CollectDocImportant: q.CollectDocImportant.clone(db),
		CollectDocParams:    q.CollectDocParams.clone(db),
		CollectDocResult:    q.CollectDocResult.clone(db),
		ConfigDetail:        q.ConfigDetail.clone(db),
		ConfigGroup:         q.ConfigGroup.clone(db),
		DocGroup:            q.DocGroup.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		CollectDoc:          q.CollectDoc.replaceDB(db),
		CollectDocDemo:      q.CollectDocDemo.replaceDB(db),
		CollectDocImportant: q.CollectDocImportant.replaceDB(db),
		CollectDocParams:    q.CollectDocParams.replaceDB(db),
		CollectDocResult:    q.CollectDocResult.replaceDB(db),
		ConfigDetail:        q.ConfigDetail.replaceDB(db),
		ConfigGroup:         q.ConfigGroup.replaceDB(db),
		DocGroup:            q.DocGroup.replaceDB(db),
	}
}

type queryCtx struct {
	CollectDoc          ICollectDocDo
	CollectDocDemo      ICollectDocDemoDo
	CollectDocImportant ICollectDocImportantDo
	CollectDocParams    ICollectDocParamsDo
	CollectDocResult    ICollectDocResultDo
	ConfigDetail        IConfigDetailDo
	ConfigGroup         IConfigGroupDo
	DocGroup            IDocGroupDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CollectDoc:          q.CollectDoc.WithContext(ctx),
		CollectDocDemo:      q.CollectDocDemo.WithContext(ctx),
		CollectDocImportant: q.CollectDocImportant.WithContext(ctx),
		CollectDocParams:    q.CollectDocParams.WithContext(ctx),
		CollectDocResult:    q.CollectDocResult.WithContext(ctx),
		ConfigDetail:        q.ConfigDetail.WithContext(ctx),
		ConfigGroup:         q.ConfigGroup.WithContext(ctx),
		DocGroup:            q.DocGroup.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
