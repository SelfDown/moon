// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newGlobalConfDetails(db *gorm.DB, opts ...gen.DOOption) globalConfDetails {
	_globalConfDetails := globalConfDetails{}

	_globalConfDetails.globalConfDetailsDo.UseDB(db, opts...)
	_globalConfDetails.globalConfDetailsDo.UseModel(&model.GlobalConfDetails{})

	tableName := _globalConfDetails.globalConfDetailsDo.TableName()
	_globalConfDetails.ALL = field.NewAsterisk(tableName)
	_globalConfDetails.GlobalParamID = field.NewString(tableName, "global_param_id")
	_globalConfDetails.GlobalGroupID = field.NewString(tableName, "global_group_id")
	_globalConfDetails.ParamKey = field.NewString(tableName, "param_key")
	_globalConfDetails.ParamValue = field.NewString(tableName, "param_value")
	_globalConfDetails.ParamNotes = field.NewString(tableName, "param_notes")
	_globalConfDetails.ID = field.NewInt32(tableName, "id")
	_globalConfDetails.CreateTime = field.NewTime(tableName, "create_time")
	_globalConfDetails.ParamValuePass = field.NewString(tableName, "param_value_pass")
	_globalConfDetails.ModifyTime = field.NewTime(tableName, "modify_time")
	_globalConfDetails.Comments = field.NewString(tableName, "comments")

	_globalConfDetails.fillFieldMap()

	return _globalConfDetails
}

type globalConfDetails struct {
	globalConfDetailsDo

	ALL           field.Asterisk
	GlobalParamID field.String // gloab配置文件详细信息
	GlobalGroupID field.String // 关联组ID
	ParamKey      field.String // 参数key
	ParamValue    field.String // 参数值
	ParamNotes    field.String // 备注
	ID            field.Int32
	CreateTime    field.Time // 记录创建时间（数据库自动写入）
	/*
		参数值是否验证通过。1、通过；0或空、不通过 2、信任不检查

	*/
	ParamValuePass field.String
	ModifyTime     field.Time
	Comments       field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (g globalConfDetails) Table(newTableName string) *globalConfDetails {
	g.globalConfDetailsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalConfDetails) As(alias string) *globalConfDetails {
	g.globalConfDetailsDo.DO = *(g.globalConfDetailsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalConfDetails) updateTableName(table string) *globalConfDetails {
	g.ALL = field.NewAsterisk(table)
	g.GlobalParamID = field.NewString(table, "global_param_id")
	g.GlobalGroupID = field.NewString(table, "global_group_id")
	g.ParamKey = field.NewString(table, "param_key")
	g.ParamValue = field.NewString(table, "param_value")
	g.ParamNotes = field.NewString(table, "param_notes")
	g.ID = field.NewInt32(table, "id")
	g.CreateTime = field.NewTime(table, "create_time")
	g.ParamValuePass = field.NewString(table, "param_value_pass")
	g.ModifyTime = field.NewTime(table, "modify_time")
	g.Comments = field.NewString(table, "comments")

	g.fillFieldMap()

	return g
}

func (g *globalConfDetails) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalConfDetails) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["global_param_id"] = g.GlobalParamID
	g.fieldMap["global_group_id"] = g.GlobalGroupID
	g.fieldMap["param_key"] = g.ParamKey
	g.fieldMap["param_value"] = g.ParamValue
	g.fieldMap["param_notes"] = g.ParamNotes
	g.fieldMap["id"] = g.ID
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["param_value_pass"] = g.ParamValuePass
	g.fieldMap["modify_time"] = g.ModifyTime
	g.fieldMap["comments"] = g.Comments
}

func (g globalConfDetails) clone(db *gorm.DB) globalConfDetails {
	g.globalConfDetailsDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g globalConfDetails) replaceDB(db *gorm.DB) globalConfDetails {
	g.globalConfDetailsDo.ReplaceDB(db)
	return g
}

type globalConfDetailsDo struct{ gen.DO }

type IGlobalConfDetailsDo interface {
	gen.SubQuery
	Debug() IGlobalConfDetailsDo
	WithContext(ctx context.Context) IGlobalConfDetailsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlobalConfDetailsDo
	WriteDB() IGlobalConfDetailsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlobalConfDetailsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalConfDetailsDo
	Not(conds ...gen.Condition) IGlobalConfDetailsDo
	Or(conds ...gen.Condition) IGlobalConfDetailsDo
	Select(conds ...field.Expr) IGlobalConfDetailsDo
	Where(conds ...gen.Condition) IGlobalConfDetailsDo
	Order(conds ...field.Expr) IGlobalConfDetailsDo
	Distinct(cols ...field.Expr) IGlobalConfDetailsDo
	Omit(cols ...field.Expr) IGlobalConfDetailsDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalConfDetailsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDetailsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDetailsDo
	Group(cols ...field.Expr) IGlobalConfDetailsDo
	Having(conds ...gen.Condition) IGlobalConfDetailsDo
	Limit(limit int) IGlobalConfDetailsDo
	Offset(offset int) IGlobalConfDetailsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfDetailsDo
	Unscoped() IGlobalConfDetailsDo
	Create(values ...*model.GlobalConfDetails) error
	CreateInBatches(values []*model.GlobalConfDetails, batchSize int) error
	Save(values ...*model.GlobalConfDetails) error
	First() (*model.GlobalConfDetails, error)
	Take() (*model.GlobalConfDetails, error)
	Last() (*model.GlobalConfDetails, error)
	Find() ([]*model.GlobalConfDetails, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConfDetails, err error)
	FindInBatches(result *[]*model.GlobalConfDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GlobalConfDetails) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalConfDetailsDo
	Assign(attrs ...field.AssignExpr) IGlobalConfDetailsDo
	Joins(fields ...field.RelationField) IGlobalConfDetailsDo
	Preload(fields ...field.RelationField) IGlobalConfDetailsDo
	FirstOrInit() (*model.GlobalConfDetails, error)
	FirstOrCreate() (*model.GlobalConfDetails, error)
	FindByPage(offset int, limit int) (result []*model.GlobalConfDetails, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalConfDetailsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalConfDetailsDo) Debug() IGlobalConfDetailsDo {
	return g.withDO(g.DO.Debug())
}

func (g globalConfDetailsDo) WithContext(ctx context.Context) IGlobalConfDetailsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalConfDetailsDo) ReadDB() IGlobalConfDetailsDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalConfDetailsDo) WriteDB() IGlobalConfDetailsDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalConfDetailsDo) Session(config *gorm.Session) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalConfDetailsDo) Clauses(conds ...clause.Expression) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalConfDetailsDo) Returning(value interface{}, columns ...string) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalConfDetailsDo) Not(conds ...gen.Condition) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalConfDetailsDo) Or(conds ...gen.Condition) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalConfDetailsDo) Select(conds ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalConfDetailsDo) Where(conds ...gen.Condition) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalConfDetailsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalConfDetailsDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalConfDetailsDo) Order(conds ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalConfDetailsDo) Distinct(cols ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalConfDetailsDo) Omit(cols ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalConfDetailsDo) Join(table schema.Tabler, on ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalConfDetailsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalConfDetailsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalConfDetailsDo) Group(cols ...field.Expr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalConfDetailsDo) Having(conds ...gen.Condition) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalConfDetailsDo) Limit(limit int) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalConfDetailsDo) Offset(offset int) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalConfDetailsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalConfDetailsDo) Unscoped() IGlobalConfDetailsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalConfDetailsDo) Create(values ...*model.GlobalConfDetails) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalConfDetailsDo) CreateInBatches(values []*model.GlobalConfDetails, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalConfDetailsDo) Save(values ...*model.GlobalConfDetails) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalConfDetailsDo) First() (*model.GlobalConfDetails, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfDetails), nil
	}
}

func (g globalConfDetailsDo) Take() (*model.GlobalConfDetails, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfDetails), nil
	}
}

func (g globalConfDetailsDo) Last() (*model.GlobalConfDetails, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfDetails), nil
	}
}

func (g globalConfDetailsDo) Find() ([]*model.GlobalConfDetails, error) {
	result, err := g.DO.Find()
	return result.([]*model.GlobalConfDetails), err
}

func (g globalConfDetailsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConfDetails, err error) {
	buf := make([]*model.GlobalConfDetails, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalConfDetailsDo) FindInBatches(result *[]*model.GlobalConfDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalConfDetailsDo) Attrs(attrs ...field.AssignExpr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalConfDetailsDo) Assign(attrs ...field.AssignExpr) IGlobalConfDetailsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalConfDetailsDo) Joins(fields ...field.RelationField) IGlobalConfDetailsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalConfDetailsDo) Preload(fields ...field.RelationField) IGlobalConfDetailsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalConfDetailsDo) FirstOrInit() (*model.GlobalConfDetails, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfDetails), nil
	}
}

func (g globalConfDetailsDo) FirstOrCreate() (*model.GlobalConfDetails, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfDetails), nil
	}
}

func (g globalConfDetailsDo) FindByPage(offset int, limit int) (result []*model.GlobalConfDetails, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalConfDetailsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalConfDetailsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalConfDetailsDo) Delete(models ...*model.GlobalConfDetails) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalConfDetailsDo) withDO(do gen.Dao) *globalConfDetailsDo {
	g.DO = *do.(*gen.DO)
	return g
}
