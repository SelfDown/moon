// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newGlobalConfGroup(db *gorm.DB, opts ...gen.DOOption) globalConfGroup {
	_globalConfGroup := globalConfGroup{}

	_globalConfGroup.globalConfGroupDo.UseDB(db, opts...)
	_globalConfGroup.globalConfGroupDo.UseModel(&model.GlobalConfGroup{})

	tableName := _globalConfGroup.globalConfGroupDo.TableName()
	_globalConfGroup.ALL = field.NewAsterisk(tableName)
	_globalConfGroup.GlobalGroupID = field.NewString(tableName, "global_group_id")
	_globalConfGroup.GlobalGroupName = field.NewString(tableName, "global_group_name")
	_globalConfGroup.GlobalGroupNotes = field.NewString(tableName, "global_group_notes")
	_globalConfGroup.FlagDel = field.NewInt32(tableName, "flag_del")
	_globalConfGroup.ServerEnvID = field.NewString(tableName, "server_env_id")
	_globalConfGroup.CreateTime = field.NewTime(tableName, "create_time")
	_globalConfGroup.ModifyTime = field.NewTime(tableName, "modify_time")
	_globalConfGroup.Comments = field.NewString(tableName, "comments")

	_globalConfGroup.fillFieldMap()

	return _globalConfGroup
}

type globalConfGroup struct {
	globalConfGroupDo

	ALL              field.Asterisk
	GlobalGroupID    field.String // 服务器分组
	GlobalGroupName  field.String // 服务器分组
	GlobalGroupNotes field.String // 备注
	FlagDel          field.Int32  // 删除标记  1 已删除、0 未删除
	ServerEnvID      field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (g globalConfGroup) Table(newTableName string) *globalConfGroup {
	g.globalConfGroupDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalConfGroup) As(alias string) *globalConfGroup {
	g.globalConfGroupDo.DO = *(g.globalConfGroupDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalConfGroup) updateTableName(table string) *globalConfGroup {
	g.ALL = field.NewAsterisk(table)
	g.GlobalGroupID = field.NewString(table, "global_group_id")
	g.GlobalGroupName = field.NewString(table, "global_group_name")
	g.GlobalGroupNotes = field.NewString(table, "global_group_notes")
	g.FlagDel = field.NewInt32(table, "flag_del")
	g.ServerEnvID = field.NewString(table, "server_env_id")
	g.CreateTime = field.NewTime(table, "create_time")
	g.ModifyTime = field.NewTime(table, "modify_time")
	g.Comments = field.NewString(table, "comments")

	g.fillFieldMap()

	return g
}

func (g *globalConfGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalConfGroup) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["global_group_id"] = g.GlobalGroupID
	g.fieldMap["global_group_name"] = g.GlobalGroupName
	g.fieldMap["global_group_notes"] = g.GlobalGroupNotes
	g.fieldMap["flag_del"] = g.FlagDel
	g.fieldMap["server_env_id"] = g.ServerEnvID
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["modify_time"] = g.ModifyTime
	g.fieldMap["comments"] = g.Comments
}

func (g globalConfGroup) clone(db *gorm.DB) globalConfGroup {
	g.globalConfGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g globalConfGroup) replaceDB(db *gorm.DB) globalConfGroup {
	g.globalConfGroupDo.ReplaceDB(db)
	return g
}

type globalConfGroupDo struct{ gen.DO }

type IGlobalConfGroupDo interface {
	gen.SubQuery
	Debug() IGlobalConfGroupDo
	WithContext(ctx context.Context) IGlobalConfGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlobalConfGroupDo
	WriteDB() IGlobalConfGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlobalConfGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalConfGroupDo
	Not(conds ...gen.Condition) IGlobalConfGroupDo
	Or(conds ...gen.Condition) IGlobalConfGroupDo
	Select(conds ...field.Expr) IGlobalConfGroupDo
	Where(conds ...gen.Condition) IGlobalConfGroupDo
	Order(conds ...field.Expr) IGlobalConfGroupDo
	Distinct(cols ...field.Expr) IGlobalConfGroupDo
	Omit(cols ...field.Expr) IGlobalConfGroupDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalConfGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfGroupDo
	Group(cols ...field.Expr) IGlobalConfGroupDo
	Having(conds ...gen.Condition) IGlobalConfGroupDo
	Limit(limit int) IGlobalConfGroupDo
	Offset(offset int) IGlobalConfGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfGroupDo
	Unscoped() IGlobalConfGroupDo
	Create(values ...*model.GlobalConfGroup) error
	CreateInBatches(values []*model.GlobalConfGroup, batchSize int) error
	Save(values ...*model.GlobalConfGroup) error
	First() (*model.GlobalConfGroup, error)
	Take() (*model.GlobalConfGroup, error)
	Last() (*model.GlobalConfGroup, error)
	Find() ([]*model.GlobalConfGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConfGroup, err error)
	FindInBatches(result *[]*model.GlobalConfGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GlobalConfGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalConfGroupDo
	Assign(attrs ...field.AssignExpr) IGlobalConfGroupDo
	Joins(fields ...field.RelationField) IGlobalConfGroupDo
	Preload(fields ...field.RelationField) IGlobalConfGroupDo
	FirstOrInit() (*model.GlobalConfGroup, error)
	FirstOrCreate() (*model.GlobalConfGroup, error)
	FindByPage(offset int, limit int) (result []*model.GlobalConfGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalConfGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalConfGroupDo) Debug() IGlobalConfGroupDo {
	return g.withDO(g.DO.Debug())
}

func (g globalConfGroupDo) WithContext(ctx context.Context) IGlobalConfGroupDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalConfGroupDo) ReadDB() IGlobalConfGroupDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalConfGroupDo) WriteDB() IGlobalConfGroupDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalConfGroupDo) Session(config *gorm.Session) IGlobalConfGroupDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalConfGroupDo) Clauses(conds ...clause.Expression) IGlobalConfGroupDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalConfGroupDo) Returning(value interface{}, columns ...string) IGlobalConfGroupDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalConfGroupDo) Not(conds ...gen.Condition) IGlobalConfGroupDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalConfGroupDo) Or(conds ...gen.Condition) IGlobalConfGroupDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalConfGroupDo) Select(conds ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalConfGroupDo) Where(conds ...gen.Condition) IGlobalConfGroupDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalConfGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalConfGroupDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalConfGroupDo) Order(conds ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalConfGroupDo) Distinct(cols ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalConfGroupDo) Omit(cols ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalConfGroupDo) Join(table schema.Tabler, on ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalConfGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalConfGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalConfGroupDo) Group(cols ...field.Expr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalConfGroupDo) Having(conds ...gen.Condition) IGlobalConfGroupDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalConfGroupDo) Limit(limit int) IGlobalConfGroupDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalConfGroupDo) Offset(offset int) IGlobalConfGroupDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalConfGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfGroupDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalConfGroupDo) Unscoped() IGlobalConfGroupDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalConfGroupDo) Create(values ...*model.GlobalConfGroup) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalConfGroupDo) CreateInBatches(values []*model.GlobalConfGroup, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalConfGroupDo) Save(values ...*model.GlobalConfGroup) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalConfGroupDo) First() (*model.GlobalConfGroup, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfGroup), nil
	}
}

func (g globalConfGroupDo) Take() (*model.GlobalConfGroup, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfGroup), nil
	}
}

func (g globalConfGroupDo) Last() (*model.GlobalConfGroup, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfGroup), nil
	}
}

func (g globalConfGroupDo) Find() ([]*model.GlobalConfGroup, error) {
	result, err := g.DO.Find()
	return result.([]*model.GlobalConfGroup), err
}

func (g globalConfGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConfGroup, err error) {
	buf := make([]*model.GlobalConfGroup, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalConfGroupDo) FindInBatches(result *[]*model.GlobalConfGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalConfGroupDo) Attrs(attrs ...field.AssignExpr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalConfGroupDo) Assign(attrs ...field.AssignExpr) IGlobalConfGroupDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalConfGroupDo) Joins(fields ...field.RelationField) IGlobalConfGroupDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalConfGroupDo) Preload(fields ...field.RelationField) IGlobalConfGroupDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalConfGroupDo) FirstOrInit() (*model.GlobalConfGroup, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfGroup), nil
	}
}

func (g globalConfGroupDo) FirstOrCreate() (*model.GlobalConfGroup, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfGroup), nil
	}
}

func (g globalConfGroupDo) FindByPage(offset int, limit int) (result []*model.GlobalConfGroup, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalConfGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalConfGroupDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalConfGroupDo) Delete(models ...*model.GlobalConfGroup) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalConfGroupDo) withDO(do gen.Dao) *globalConfGroupDo {
	g.DO = *do.(*gen.DO)
	return g
}
