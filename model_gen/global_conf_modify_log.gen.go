// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newGlobalConfModifyLog(db *gorm.DB, opts ...gen.DOOption) globalConfModifyLog {
	_globalConfModifyLog := globalConfModifyLog{}

	_globalConfModifyLog.globalConfModifyLogDo.UseDB(db, opts...)
	_globalConfModifyLog.globalConfModifyLogDo.UseModel(&model.GlobalConfModifyLog{})

	tableName := _globalConfModifyLog.globalConfModifyLogDo.TableName()
	_globalConfModifyLog.ALL = field.NewAsterisk(tableName)
	_globalConfModifyLog.GlobalConfModifyLogID = field.NewString(tableName, "global_conf_modify_log_id")
	_globalConfModifyLog.GlobalGroupID = field.NewString(tableName, "global_group_id")
	_globalConfModifyLog.ModifyType = field.NewString(tableName, "modify_type")
	_globalConfModifyLog.ParamKey = field.NewString(tableName, "param_key")
	_globalConfModifyLog.ParamKeyNew = field.NewString(tableName, "param_key_new")
	_globalConfModifyLog.ParamValue = field.NewString(tableName, "param_value")
	_globalConfModifyLog.ParamValueNew = field.NewString(tableName, "param_value_new")
	_globalConfModifyLog.CreateTime = field.NewString(tableName, "create_time")
	_globalConfModifyLog.OpUser = field.NewString(tableName, "op_user")
	_globalConfModifyLog.Comments = field.NewString(tableName, "comments")

	_globalConfModifyLog.fillFieldMap()

	return _globalConfModifyLog
}

type globalConfModifyLog struct {
	globalConfModifyLogDo

	ALL                   field.Asterisk
	GlobalConfModifyLogID field.String
	GlobalGroupID         field.String
	ModifyType            field.String
	ParamKey              field.String
	ParamKeyNew           field.String
	ParamValue            field.String
	ParamValueNew         field.String
	CreateTime            field.String
	OpUser                field.String
	Comments              field.String

	fieldMap map[string]field.Expr
}

func (g globalConfModifyLog) Table(newTableName string) *globalConfModifyLog {
	g.globalConfModifyLogDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalConfModifyLog) As(alias string) *globalConfModifyLog {
	g.globalConfModifyLogDo.DO = *(g.globalConfModifyLogDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalConfModifyLog) updateTableName(table string) *globalConfModifyLog {
	g.ALL = field.NewAsterisk(table)
	g.GlobalConfModifyLogID = field.NewString(table, "global_conf_modify_log_id")
	g.GlobalGroupID = field.NewString(table, "global_group_id")
	g.ModifyType = field.NewString(table, "modify_type")
	g.ParamKey = field.NewString(table, "param_key")
	g.ParamKeyNew = field.NewString(table, "param_key_new")
	g.ParamValue = field.NewString(table, "param_value")
	g.ParamValueNew = field.NewString(table, "param_value_new")
	g.CreateTime = field.NewString(table, "create_time")
	g.OpUser = field.NewString(table, "op_user")
	g.Comments = field.NewString(table, "comments")

	g.fillFieldMap()

	return g
}

func (g *globalConfModifyLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalConfModifyLog) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["global_conf_modify_log_id"] = g.GlobalConfModifyLogID
	g.fieldMap["global_group_id"] = g.GlobalGroupID
	g.fieldMap["modify_type"] = g.ModifyType
	g.fieldMap["param_key"] = g.ParamKey
	g.fieldMap["param_key_new"] = g.ParamKeyNew
	g.fieldMap["param_value"] = g.ParamValue
	g.fieldMap["param_value_new"] = g.ParamValueNew
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["op_user"] = g.OpUser
	g.fieldMap["comments"] = g.Comments
}

func (g globalConfModifyLog) clone(db *gorm.DB) globalConfModifyLog {
	g.globalConfModifyLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g globalConfModifyLog) replaceDB(db *gorm.DB) globalConfModifyLog {
	g.globalConfModifyLogDo.ReplaceDB(db)
	return g
}

type globalConfModifyLogDo struct{ gen.DO }

type IGlobalConfModifyLogDo interface {
	gen.SubQuery
	Debug() IGlobalConfModifyLogDo
	WithContext(ctx context.Context) IGlobalConfModifyLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlobalConfModifyLogDo
	WriteDB() IGlobalConfModifyLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlobalConfModifyLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalConfModifyLogDo
	Not(conds ...gen.Condition) IGlobalConfModifyLogDo
	Or(conds ...gen.Condition) IGlobalConfModifyLogDo
	Select(conds ...field.Expr) IGlobalConfModifyLogDo
	Where(conds ...gen.Condition) IGlobalConfModifyLogDo
	Order(conds ...field.Expr) IGlobalConfModifyLogDo
	Distinct(cols ...field.Expr) IGlobalConfModifyLogDo
	Omit(cols ...field.Expr) IGlobalConfModifyLogDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalConfModifyLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfModifyLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfModifyLogDo
	Group(cols ...field.Expr) IGlobalConfModifyLogDo
	Having(conds ...gen.Condition) IGlobalConfModifyLogDo
	Limit(limit int) IGlobalConfModifyLogDo
	Offset(offset int) IGlobalConfModifyLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfModifyLogDo
	Unscoped() IGlobalConfModifyLogDo
	Create(values ...*model.GlobalConfModifyLog) error
	CreateInBatches(values []*model.GlobalConfModifyLog, batchSize int) error
	Save(values ...*model.GlobalConfModifyLog) error
	First() (*model.GlobalConfModifyLog, error)
	Take() (*model.GlobalConfModifyLog, error)
	Last() (*model.GlobalConfModifyLog, error)
	Find() ([]*model.GlobalConfModifyLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConfModifyLog, err error)
	FindInBatches(result *[]*model.GlobalConfModifyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GlobalConfModifyLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalConfModifyLogDo
	Assign(attrs ...field.AssignExpr) IGlobalConfModifyLogDo
	Joins(fields ...field.RelationField) IGlobalConfModifyLogDo
	Preload(fields ...field.RelationField) IGlobalConfModifyLogDo
	FirstOrInit() (*model.GlobalConfModifyLog, error)
	FirstOrCreate() (*model.GlobalConfModifyLog, error)
	FindByPage(offset int, limit int) (result []*model.GlobalConfModifyLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalConfModifyLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalConfModifyLogDo) Debug() IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Debug())
}

func (g globalConfModifyLogDo) WithContext(ctx context.Context) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalConfModifyLogDo) ReadDB() IGlobalConfModifyLogDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalConfModifyLogDo) WriteDB() IGlobalConfModifyLogDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalConfModifyLogDo) Session(config *gorm.Session) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalConfModifyLogDo) Clauses(conds ...clause.Expression) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalConfModifyLogDo) Returning(value interface{}, columns ...string) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalConfModifyLogDo) Not(conds ...gen.Condition) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalConfModifyLogDo) Or(conds ...gen.Condition) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalConfModifyLogDo) Select(conds ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalConfModifyLogDo) Where(conds ...gen.Condition) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalConfModifyLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalConfModifyLogDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalConfModifyLogDo) Order(conds ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalConfModifyLogDo) Distinct(cols ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalConfModifyLogDo) Omit(cols ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalConfModifyLogDo) Join(table schema.Tabler, on ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalConfModifyLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalConfModifyLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalConfModifyLogDo) Group(cols ...field.Expr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalConfModifyLogDo) Having(conds ...gen.Condition) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalConfModifyLogDo) Limit(limit int) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalConfModifyLogDo) Offset(offset int) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalConfModifyLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalConfModifyLogDo) Unscoped() IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalConfModifyLogDo) Create(values ...*model.GlobalConfModifyLog) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalConfModifyLogDo) CreateInBatches(values []*model.GlobalConfModifyLog, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalConfModifyLogDo) Save(values ...*model.GlobalConfModifyLog) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalConfModifyLogDo) First() (*model.GlobalConfModifyLog, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfModifyLog), nil
	}
}

func (g globalConfModifyLogDo) Take() (*model.GlobalConfModifyLog, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfModifyLog), nil
	}
}

func (g globalConfModifyLogDo) Last() (*model.GlobalConfModifyLog, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfModifyLog), nil
	}
}

func (g globalConfModifyLogDo) Find() ([]*model.GlobalConfModifyLog, error) {
	result, err := g.DO.Find()
	return result.([]*model.GlobalConfModifyLog), err
}

func (g globalConfModifyLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConfModifyLog, err error) {
	buf := make([]*model.GlobalConfModifyLog, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalConfModifyLogDo) FindInBatches(result *[]*model.GlobalConfModifyLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalConfModifyLogDo) Attrs(attrs ...field.AssignExpr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalConfModifyLogDo) Assign(attrs ...field.AssignExpr) IGlobalConfModifyLogDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalConfModifyLogDo) Joins(fields ...field.RelationField) IGlobalConfModifyLogDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalConfModifyLogDo) Preload(fields ...field.RelationField) IGlobalConfModifyLogDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalConfModifyLogDo) FirstOrInit() (*model.GlobalConfModifyLog, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfModifyLog), nil
	}
}

func (g globalConfModifyLogDo) FirstOrCreate() (*model.GlobalConfModifyLog, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConfModifyLog), nil
	}
}

func (g globalConfModifyLogDo) FindByPage(offset int, limit int) (result []*model.GlobalConfModifyLog, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalConfModifyLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalConfModifyLogDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalConfModifyLogDo) Delete(models ...*model.GlobalConfModifyLog) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalConfModifyLogDo) withDO(do gen.Dao) *globalConfModifyLogDo {
	g.DO = *do.(*gen.DO)
	return g
}
