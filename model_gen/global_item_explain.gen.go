// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newGlobalItemExplain(db *gorm.DB, opts ...gen.DOOption) globalItemExplain {
	_globalItemExplain := globalItemExplain{}

	_globalItemExplain.globalItemExplainDo.UseDB(db, opts...)
	_globalItemExplain.globalItemExplainDo.UseModel(&model.GlobalItemExplain{})

	tableName := _globalItemExplain.globalItemExplainDo.TableName()
	_globalItemExplain.ALL = field.NewAsterisk(tableName)
	_globalItemExplain.GlobalItemExplainID = field.NewString(tableName, "global_item_explain_id")
	_globalItemExplain.GlobalKey = field.NewString(tableName, "global_key")
	_globalItemExplain.SysProjectID = field.NewString(tableName, "sys_project_id")
	_globalItemExplain.ChangeEnvMod = field.NewString(tableName, "change_env_mod")
	_globalItemExplain.FlagDel = field.NewString(tableName, "flag_del")
	_globalItemExplain.GlobalKeyDesc = field.NewString(tableName, "global_key_desc")
	_globalItemExplain.CreateTime = field.NewTime(tableName, "create_time")
	_globalItemExplain.ModifyTime = field.NewTime(tableName, "modify_time")
	_globalItemExplain.OpUser = field.NewString(tableName, "op_user")
	_globalItemExplain.Note = field.NewString(tableName, "note")
	_globalItemExplain.Comments = field.NewString(tableName, "comments")

	_globalItemExplain.fillFieldMap()

	return _globalItemExplain
}

type globalItemExplain struct {
	globalItemExplainDo

	ALL                 field.Asterisk
	GlobalItemExplainID field.String
	GlobalKey           field.String
	SysProjectID        field.String // 所应用的项目点区域
	ChangeEnvMod        field.String // 在其他环境使用是否需要调整
	FlagDel             field.String
	GlobalKeyDesc       field.String // key 的描述
	CreateTime          field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime          field.Time
	OpUser              field.String
	Note                field.String
	Comments            field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (g globalItemExplain) Table(newTableName string) *globalItemExplain {
	g.globalItemExplainDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalItemExplain) As(alias string) *globalItemExplain {
	g.globalItemExplainDo.DO = *(g.globalItemExplainDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalItemExplain) updateTableName(table string) *globalItemExplain {
	g.ALL = field.NewAsterisk(table)
	g.GlobalItemExplainID = field.NewString(table, "global_item_explain_id")
	g.GlobalKey = field.NewString(table, "global_key")
	g.SysProjectID = field.NewString(table, "sys_project_id")
	g.ChangeEnvMod = field.NewString(table, "change_env_mod")
	g.FlagDel = field.NewString(table, "flag_del")
	g.GlobalKeyDesc = field.NewString(table, "global_key_desc")
	g.CreateTime = field.NewTime(table, "create_time")
	g.ModifyTime = field.NewTime(table, "modify_time")
	g.OpUser = field.NewString(table, "op_user")
	g.Note = field.NewString(table, "note")
	g.Comments = field.NewString(table, "comments")

	g.fillFieldMap()

	return g
}

func (g *globalItemExplain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalItemExplain) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["global_item_explain_id"] = g.GlobalItemExplainID
	g.fieldMap["global_key"] = g.GlobalKey
	g.fieldMap["sys_project_id"] = g.SysProjectID
	g.fieldMap["change_env_mod"] = g.ChangeEnvMod
	g.fieldMap["flag_del"] = g.FlagDel
	g.fieldMap["global_key_desc"] = g.GlobalKeyDesc
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["modify_time"] = g.ModifyTime
	g.fieldMap["op_user"] = g.OpUser
	g.fieldMap["note"] = g.Note
	g.fieldMap["comments"] = g.Comments
}

func (g globalItemExplain) clone(db *gorm.DB) globalItemExplain {
	g.globalItemExplainDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g globalItemExplain) replaceDB(db *gorm.DB) globalItemExplain {
	g.globalItemExplainDo.ReplaceDB(db)
	return g
}

type globalItemExplainDo struct{ gen.DO }

type IGlobalItemExplainDo interface {
	gen.SubQuery
	Debug() IGlobalItemExplainDo
	WithContext(ctx context.Context) IGlobalItemExplainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlobalItemExplainDo
	WriteDB() IGlobalItemExplainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlobalItemExplainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalItemExplainDo
	Not(conds ...gen.Condition) IGlobalItemExplainDo
	Or(conds ...gen.Condition) IGlobalItemExplainDo
	Select(conds ...field.Expr) IGlobalItemExplainDo
	Where(conds ...gen.Condition) IGlobalItemExplainDo
	Order(conds ...field.Expr) IGlobalItemExplainDo
	Distinct(cols ...field.Expr) IGlobalItemExplainDo
	Omit(cols ...field.Expr) IGlobalItemExplainDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalItemExplainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalItemExplainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalItemExplainDo
	Group(cols ...field.Expr) IGlobalItemExplainDo
	Having(conds ...gen.Condition) IGlobalItemExplainDo
	Limit(limit int) IGlobalItemExplainDo
	Offset(offset int) IGlobalItemExplainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalItemExplainDo
	Unscoped() IGlobalItemExplainDo
	Create(values ...*model.GlobalItemExplain) error
	CreateInBatches(values []*model.GlobalItemExplain, batchSize int) error
	Save(values ...*model.GlobalItemExplain) error
	First() (*model.GlobalItemExplain, error)
	Take() (*model.GlobalItemExplain, error)
	Last() (*model.GlobalItemExplain, error)
	Find() ([]*model.GlobalItemExplain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalItemExplain, err error)
	FindInBatches(result *[]*model.GlobalItemExplain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GlobalItemExplain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalItemExplainDo
	Assign(attrs ...field.AssignExpr) IGlobalItemExplainDo
	Joins(fields ...field.RelationField) IGlobalItemExplainDo
	Preload(fields ...field.RelationField) IGlobalItemExplainDo
	FirstOrInit() (*model.GlobalItemExplain, error)
	FirstOrCreate() (*model.GlobalItemExplain, error)
	FindByPage(offset int, limit int) (result []*model.GlobalItemExplain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalItemExplainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalItemExplainDo) Debug() IGlobalItemExplainDo {
	return g.withDO(g.DO.Debug())
}

func (g globalItemExplainDo) WithContext(ctx context.Context) IGlobalItemExplainDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalItemExplainDo) ReadDB() IGlobalItemExplainDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalItemExplainDo) WriteDB() IGlobalItemExplainDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalItemExplainDo) Session(config *gorm.Session) IGlobalItemExplainDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalItemExplainDo) Clauses(conds ...clause.Expression) IGlobalItemExplainDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalItemExplainDo) Returning(value interface{}, columns ...string) IGlobalItemExplainDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalItemExplainDo) Not(conds ...gen.Condition) IGlobalItemExplainDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalItemExplainDo) Or(conds ...gen.Condition) IGlobalItemExplainDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalItemExplainDo) Select(conds ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalItemExplainDo) Where(conds ...gen.Condition) IGlobalItemExplainDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalItemExplainDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalItemExplainDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalItemExplainDo) Order(conds ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalItemExplainDo) Distinct(cols ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalItemExplainDo) Omit(cols ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalItemExplainDo) Join(table schema.Tabler, on ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalItemExplainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalItemExplainDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalItemExplainDo) Group(cols ...field.Expr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalItemExplainDo) Having(conds ...gen.Condition) IGlobalItemExplainDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalItemExplainDo) Limit(limit int) IGlobalItemExplainDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalItemExplainDo) Offset(offset int) IGlobalItemExplainDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalItemExplainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalItemExplainDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalItemExplainDo) Unscoped() IGlobalItemExplainDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalItemExplainDo) Create(values ...*model.GlobalItemExplain) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalItemExplainDo) CreateInBatches(values []*model.GlobalItemExplain, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalItemExplainDo) Save(values ...*model.GlobalItemExplain) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalItemExplainDo) First() (*model.GlobalItemExplain, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalItemExplain), nil
	}
}

func (g globalItemExplainDo) Take() (*model.GlobalItemExplain, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalItemExplain), nil
	}
}

func (g globalItemExplainDo) Last() (*model.GlobalItemExplain, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalItemExplain), nil
	}
}

func (g globalItemExplainDo) Find() ([]*model.GlobalItemExplain, error) {
	result, err := g.DO.Find()
	return result.([]*model.GlobalItemExplain), err
}

func (g globalItemExplainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalItemExplain, err error) {
	buf := make([]*model.GlobalItemExplain, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalItemExplainDo) FindInBatches(result *[]*model.GlobalItemExplain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalItemExplainDo) Attrs(attrs ...field.AssignExpr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalItemExplainDo) Assign(attrs ...field.AssignExpr) IGlobalItemExplainDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalItemExplainDo) Joins(fields ...field.RelationField) IGlobalItemExplainDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalItemExplainDo) Preload(fields ...field.RelationField) IGlobalItemExplainDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalItemExplainDo) FirstOrInit() (*model.GlobalItemExplain, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalItemExplain), nil
	}
}

func (g globalItemExplainDo) FirstOrCreate() (*model.GlobalItemExplain, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalItemExplain), nil
	}
}

func (g globalItemExplainDo) FindByPage(offset int, limit int) (result []*model.GlobalItemExplain, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalItemExplainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalItemExplainDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalItemExplainDo) Delete(models ...*model.GlobalItemExplain) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalItemExplainDo) withDO(do gen.Dao) *globalItemExplainDo {
	g.DO = *do.(*gen.DO)
	return g
}
