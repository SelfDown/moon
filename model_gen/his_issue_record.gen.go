// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newHisIssueRecord(db *gorm.DB, opts ...gen.DOOption) hisIssueRecord {
	_hisIssueRecord := hisIssueRecord{}

	_hisIssueRecord.hisIssueRecordDo.UseDB(db, opts...)
	_hisIssueRecord.hisIssueRecordDo.UseModel(&model.HisIssueRecord{})

	tableName := _hisIssueRecord.hisIssueRecordDo.TableName()
	_hisIssueRecord.ALL = field.NewAsterisk(tableName)
	_hisIssueRecord.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_hisIssueRecord.Issues = field.NewString(tableName, "issues")
	_hisIssueRecord.SysProjectCode = field.NewString(tableName, "sys_project_code")
	_hisIssueRecord.IssueType = field.NewString(tableName, "issue_type")
	_hisIssueRecord.Area = field.NewString(tableName, "area")
	_hisIssueRecord.Module = field.NewString(tableName, "module")
	_hisIssueRecord.Presenter = field.NewString(tableName, "presenter")
	_hisIssueRecord.Room = field.NewString(tableName, "room")
	_hisIssueRecord.Tel = field.NewString(tableName, "tel")
	_hisIssueRecord.ProposalDate = field.NewString(tableName, "proposal_date")
	_hisIssueRecord.CreateUser = field.NewString(tableName, "create_user")
	_hisIssueRecord.Assignee = field.NewString(tableName, "assignee")
	_hisIssueRecord.Title = field.NewString(tableName, "title")
	_hisIssueRecord.Description = field.NewString(tableName, "description")
	_hisIssueRecord.RecordStatus = field.NewString(tableName, "record_status")
	_hisIssueRecord.BackendGround = field.NewString(tableName, "backend_ground")
	_hisIssueRecord.Target = field.NewString(tableName, "target")
	_hisIssueRecord.FixPlan = field.NewString(tableName, "fix_plan")
	_hisIssueRecord.Num = field.NewInt32(tableName, "num")
	_hisIssueRecord.CreateTime = field.NewString(tableName, "create_time")
	_hisIssueRecord.ModifyTime = field.NewString(tableName, "modify_time")
	_hisIssueRecord.IsDelete = field.NewString(tableName, "is_delete")
	_hisIssueRecord.Receiver = field.NewString(tableName, "receiver")
	_hisIssueRecord.ReceiverTel = field.NewString(tableName, "receiver_tel")
	_hisIssueRecord.IsEmergency = field.NewString(tableName, "is_emergency")
	_hisIssueRecord.EmergencyMsg = field.NewString(tableName, "emergency_msg")
	_hisIssueRecord.EmergencyTime = field.NewString(tableName, "emergency_time")
	_hisIssueRecord.WorkCode = field.NewString(tableName, "work_code")
	_hisIssueRecord.Duedate = field.NewString(tableName, "duedate")
	_hisIssueRecord.RoomCode = field.NewString(tableName, "room_code")
	_hisIssueRecord.AreaCode = field.NewString(tableName, "area_code")
	_hisIssueRecord.Priority = field.NewString(tableName, "priority")
	_hisIssueRecord.WorkStation = field.NewString(tableName, "work_station")
	_hisIssueRecord.WorkStationName = field.NewString(tableName, "work_station_name")
	_hisIssueRecord.ExpectFinishDate = field.NewString(tableName, "expect_finish_date")
	_hisIssueRecord.HisIsConfirm = field.NewString(tableName, "his_is_confirm")
	_hisIssueRecord.HisConfirmUser = field.NewString(tableName, "his_confirm_user")
	_hisIssueRecord.HisConfirmWorkCode = field.NewString(tableName, "his_confirm_work_code")
	_hisIssueRecord.HisConfirmPhone = field.NewString(tableName, "his_confirm_phone")
	_hisIssueRecord.HisConfirmComment = field.NewString(tableName, "his_confirm_comment")

	_hisIssueRecord.fillFieldMap()

	return _hisIssueRecord
}

type hisIssueRecord struct {
	hisIssueRecordDo

	ALL                field.Asterisk
	HisIssueRecordID   field.String
	Issues             field.String // 以逗号分割
	SysProjectCode     field.String
	IssueType          field.String
	Area               field.String
	Module             field.String
	Presenter          field.String
	Room               field.String
	Tel                field.String
	ProposalDate       field.String
	CreateUser         field.String
	Assignee           field.String
	Title              field.String
	Description        field.String
	RecordStatus       field.String
	BackendGround      field.String
	Target             field.String
	FixPlan            field.String
	Num                field.Int32
	CreateTime         field.String
	ModifyTime         field.String
	IsDelete           field.String
	Receiver           field.String
	ReceiverTel        field.String
	IsEmergency        field.String
	EmergencyMsg       field.String
	EmergencyTime      field.String
	WorkCode           field.String
	Duedate            field.String
	RoomCode           field.String
	AreaCode           field.String
	Priority           field.String
	WorkStation        field.String
	WorkStationName    field.String
	ExpectFinishDate   field.String
	HisIsConfirm       field.String
	HisConfirmUser     field.String
	HisConfirmWorkCode field.String
	HisConfirmPhone    field.String
	HisConfirmComment  field.String

	fieldMap map[string]field.Expr
}

func (h hisIssueRecord) Table(newTableName string) *hisIssueRecord {
	h.hisIssueRecordDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hisIssueRecord) As(alias string) *hisIssueRecord {
	h.hisIssueRecordDo.DO = *(h.hisIssueRecordDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hisIssueRecord) updateTableName(table string) *hisIssueRecord {
	h.ALL = field.NewAsterisk(table)
	h.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	h.Issues = field.NewString(table, "issues")
	h.SysProjectCode = field.NewString(table, "sys_project_code")
	h.IssueType = field.NewString(table, "issue_type")
	h.Area = field.NewString(table, "area")
	h.Module = field.NewString(table, "module")
	h.Presenter = field.NewString(table, "presenter")
	h.Room = field.NewString(table, "room")
	h.Tel = field.NewString(table, "tel")
	h.ProposalDate = field.NewString(table, "proposal_date")
	h.CreateUser = field.NewString(table, "create_user")
	h.Assignee = field.NewString(table, "assignee")
	h.Title = field.NewString(table, "title")
	h.Description = field.NewString(table, "description")
	h.RecordStatus = field.NewString(table, "record_status")
	h.BackendGround = field.NewString(table, "backend_ground")
	h.Target = field.NewString(table, "target")
	h.FixPlan = field.NewString(table, "fix_plan")
	h.Num = field.NewInt32(table, "num")
	h.CreateTime = field.NewString(table, "create_time")
	h.ModifyTime = field.NewString(table, "modify_time")
	h.IsDelete = field.NewString(table, "is_delete")
	h.Receiver = field.NewString(table, "receiver")
	h.ReceiverTel = field.NewString(table, "receiver_tel")
	h.IsEmergency = field.NewString(table, "is_emergency")
	h.EmergencyMsg = field.NewString(table, "emergency_msg")
	h.EmergencyTime = field.NewString(table, "emergency_time")
	h.WorkCode = field.NewString(table, "work_code")
	h.Duedate = field.NewString(table, "duedate")
	h.RoomCode = field.NewString(table, "room_code")
	h.AreaCode = field.NewString(table, "area_code")
	h.Priority = field.NewString(table, "priority")
	h.WorkStation = field.NewString(table, "work_station")
	h.WorkStationName = field.NewString(table, "work_station_name")
	h.ExpectFinishDate = field.NewString(table, "expect_finish_date")
	h.HisIsConfirm = field.NewString(table, "his_is_confirm")
	h.HisConfirmUser = field.NewString(table, "his_confirm_user")
	h.HisConfirmWorkCode = field.NewString(table, "his_confirm_work_code")
	h.HisConfirmPhone = field.NewString(table, "his_confirm_phone")
	h.HisConfirmComment = field.NewString(table, "his_confirm_comment")

	h.fillFieldMap()

	return h
}

func (h *hisIssueRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hisIssueRecord) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 40)
	h.fieldMap["his_issue_record_id"] = h.HisIssueRecordID
	h.fieldMap["issues"] = h.Issues
	h.fieldMap["sys_project_code"] = h.SysProjectCode
	h.fieldMap["issue_type"] = h.IssueType
	h.fieldMap["area"] = h.Area
	h.fieldMap["module"] = h.Module
	h.fieldMap["presenter"] = h.Presenter
	h.fieldMap["room"] = h.Room
	h.fieldMap["tel"] = h.Tel
	h.fieldMap["proposal_date"] = h.ProposalDate
	h.fieldMap["create_user"] = h.CreateUser
	h.fieldMap["assignee"] = h.Assignee
	h.fieldMap["title"] = h.Title
	h.fieldMap["description"] = h.Description
	h.fieldMap["record_status"] = h.RecordStatus
	h.fieldMap["backend_ground"] = h.BackendGround
	h.fieldMap["target"] = h.Target
	h.fieldMap["fix_plan"] = h.FixPlan
	h.fieldMap["num"] = h.Num
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["modify_time"] = h.ModifyTime
	h.fieldMap["is_delete"] = h.IsDelete
	h.fieldMap["receiver"] = h.Receiver
	h.fieldMap["receiver_tel"] = h.ReceiverTel
	h.fieldMap["is_emergency"] = h.IsEmergency
	h.fieldMap["emergency_msg"] = h.EmergencyMsg
	h.fieldMap["emergency_time"] = h.EmergencyTime
	h.fieldMap["work_code"] = h.WorkCode
	h.fieldMap["duedate"] = h.Duedate
	h.fieldMap["room_code"] = h.RoomCode
	h.fieldMap["area_code"] = h.AreaCode
	h.fieldMap["priority"] = h.Priority
	h.fieldMap["work_station"] = h.WorkStation
	h.fieldMap["work_station_name"] = h.WorkStationName
	h.fieldMap["expect_finish_date"] = h.ExpectFinishDate
	h.fieldMap["his_is_confirm"] = h.HisIsConfirm
	h.fieldMap["his_confirm_user"] = h.HisConfirmUser
	h.fieldMap["his_confirm_work_code"] = h.HisConfirmWorkCode
	h.fieldMap["his_confirm_phone"] = h.HisConfirmPhone
	h.fieldMap["his_confirm_comment"] = h.HisConfirmComment
}

func (h hisIssueRecord) clone(db *gorm.DB) hisIssueRecord {
	h.hisIssueRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hisIssueRecord) replaceDB(db *gorm.DB) hisIssueRecord {
	h.hisIssueRecordDo.ReplaceDB(db)
	return h
}

type hisIssueRecordDo struct{ gen.DO }

type IHisIssueRecordDo interface {
	gen.SubQuery
	Debug() IHisIssueRecordDo
	WithContext(ctx context.Context) IHisIssueRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHisIssueRecordDo
	WriteDB() IHisIssueRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHisIssueRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHisIssueRecordDo
	Not(conds ...gen.Condition) IHisIssueRecordDo
	Or(conds ...gen.Condition) IHisIssueRecordDo
	Select(conds ...field.Expr) IHisIssueRecordDo
	Where(conds ...gen.Condition) IHisIssueRecordDo
	Order(conds ...field.Expr) IHisIssueRecordDo
	Distinct(cols ...field.Expr) IHisIssueRecordDo
	Omit(cols ...field.Expr) IHisIssueRecordDo
	Join(table schema.Tabler, on ...field.Expr) IHisIssueRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordDo
	Group(cols ...field.Expr) IHisIssueRecordDo
	Having(conds ...gen.Condition) IHisIssueRecordDo
	Limit(limit int) IHisIssueRecordDo
	Offset(offset int) IHisIssueRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHisIssueRecordDo
	Unscoped() IHisIssueRecordDo
	Create(values ...*model.HisIssueRecord) error
	CreateInBatches(values []*model.HisIssueRecord, batchSize int) error
	Save(values ...*model.HisIssueRecord) error
	First() (*model.HisIssueRecord, error)
	Take() (*model.HisIssueRecord, error)
	Last() (*model.HisIssueRecord, error)
	Find() ([]*model.HisIssueRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HisIssueRecord, err error)
	FindInBatches(result *[]*model.HisIssueRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HisIssueRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHisIssueRecordDo
	Assign(attrs ...field.AssignExpr) IHisIssueRecordDo
	Joins(fields ...field.RelationField) IHisIssueRecordDo
	Preload(fields ...field.RelationField) IHisIssueRecordDo
	FirstOrInit() (*model.HisIssueRecord, error)
	FirstOrCreate() (*model.HisIssueRecord, error)
	FindByPage(offset int, limit int) (result []*model.HisIssueRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHisIssueRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hisIssueRecordDo) Debug() IHisIssueRecordDo {
	return h.withDO(h.DO.Debug())
}

func (h hisIssueRecordDo) WithContext(ctx context.Context) IHisIssueRecordDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hisIssueRecordDo) ReadDB() IHisIssueRecordDo {
	return h.Clauses(dbresolver.Read)
}

func (h hisIssueRecordDo) WriteDB() IHisIssueRecordDo {
	return h.Clauses(dbresolver.Write)
}

func (h hisIssueRecordDo) Session(config *gorm.Session) IHisIssueRecordDo {
	return h.withDO(h.DO.Session(config))
}

func (h hisIssueRecordDo) Clauses(conds ...clause.Expression) IHisIssueRecordDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hisIssueRecordDo) Returning(value interface{}, columns ...string) IHisIssueRecordDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hisIssueRecordDo) Not(conds ...gen.Condition) IHisIssueRecordDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hisIssueRecordDo) Or(conds ...gen.Condition) IHisIssueRecordDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hisIssueRecordDo) Select(conds ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hisIssueRecordDo) Where(conds ...gen.Condition) IHisIssueRecordDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hisIssueRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHisIssueRecordDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hisIssueRecordDo) Order(conds ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hisIssueRecordDo) Distinct(cols ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hisIssueRecordDo) Omit(cols ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hisIssueRecordDo) Join(table schema.Tabler, on ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hisIssueRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hisIssueRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hisIssueRecordDo) Group(cols ...field.Expr) IHisIssueRecordDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hisIssueRecordDo) Having(conds ...gen.Condition) IHisIssueRecordDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hisIssueRecordDo) Limit(limit int) IHisIssueRecordDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hisIssueRecordDo) Offset(offset int) IHisIssueRecordDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hisIssueRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHisIssueRecordDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hisIssueRecordDo) Unscoped() IHisIssueRecordDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hisIssueRecordDo) Create(values ...*model.HisIssueRecord) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hisIssueRecordDo) CreateInBatches(values []*model.HisIssueRecord, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hisIssueRecordDo) Save(values ...*model.HisIssueRecord) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hisIssueRecordDo) First() (*model.HisIssueRecord, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecord), nil
	}
}

func (h hisIssueRecordDo) Take() (*model.HisIssueRecord, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecord), nil
	}
}

func (h hisIssueRecordDo) Last() (*model.HisIssueRecord, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecord), nil
	}
}

func (h hisIssueRecordDo) Find() ([]*model.HisIssueRecord, error) {
	result, err := h.DO.Find()
	return result.([]*model.HisIssueRecord), err
}

func (h hisIssueRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HisIssueRecord, err error) {
	buf := make([]*model.HisIssueRecord, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hisIssueRecordDo) FindInBatches(result *[]*model.HisIssueRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hisIssueRecordDo) Attrs(attrs ...field.AssignExpr) IHisIssueRecordDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hisIssueRecordDo) Assign(attrs ...field.AssignExpr) IHisIssueRecordDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hisIssueRecordDo) Joins(fields ...field.RelationField) IHisIssueRecordDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hisIssueRecordDo) Preload(fields ...field.RelationField) IHisIssueRecordDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hisIssueRecordDo) FirstOrInit() (*model.HisIssueRecord, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecord), nil
	}
}

func (h hisIssueRecordDo) FirstOrCreate() (*model.HisIssueRecord, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecord), nil
	}
}

func (h hisIssueRecordDo) FindByPage(offset int, limit int) (result []*model.HisIssueRecord, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hisIssueRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hisIssueRecordDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hisIssueRecordDo) Delete(models ...*model.HisIssueRecord) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hisIssueRecordDo) withDO(do gen.Dao) *hisIssueRecordDo {
	h.DO = *do.(*gen.DO)
	return h
}
