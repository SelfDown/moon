// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newHisIssueRecordImg(db *gorm.DB, opts ...gen.DOOption) hisIssueRecordImg {
	_hisIssueRecordImg := hisIssueRecordImg{}

	_hisIssueRecordImg.hisIssueRecordImgDo.UseDB(db, opts...)
	_hisIssueRecordImg.hisIssueRecordImgDo.UseModel(&model.HisIssueRecordImg{})

	tableName := _hisIssueRecordImg.hisIssueRecordImgDo.TableName()
	_hisIssueRecordImg.ALL = field.NewAsterisk(tableName)
	_hisIssueRecordImg.HisIssueRecordImgID = field.NewString(tableName, "his_issue_record_img_id")
	_hisIssueRecordImg.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_hisIssueRecordImg.IssueRecordImgID = field.NewString(tableName, "issue_record_img_id")

	_hisIssueRecordImg.fillFieldMap()

	return _hisIssueRecordImg
}

type hisIssueRecordImg struct {
	hisIssueRecordImgDo

	ALL                 field.Asterisk
	HisIssueRecordImgID field.String
	HisIssueRecordID    field.String
	IssueRecordImgID    field.String

	fieldMap map[string]field.Expr
}

func (h hisIssueRecordImg) Table(newTableName string) *hisIssueRecordImg {
	h.hisIssueRecordImgDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hisIssueRecordImg) As(alias string) *hisIssueRecordImg {
	h.hisIssueRecordImgDo.DO = *(h.hisIssueRecordImgDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hisIssueRecordImg) updateTableName(table string) *hisIssueRecordImg {
	h.ALL = field.NewAsterisk(table)
	h.HisIssueRecordImgID = field.NewString(table, "his_issue_record_img_id")
	h.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	h.IssueRecordImgID = field.NewString(table, "issue_record_img_id")

	h.fillFieldMap()

	return h
}

func (h *hisIssueRecordImg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hisIssueRecordImg) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 3)
	h.fieldMap["his_issue_record_img_id"] = h.HisIssueRecordImgID
	h.fieldMap["his_issue_record_id"] = h.HisIssueRecordID
	h.fieldMap["issue_record_img_id"] = h.IssueRecordImgID
}

func (h hisIssueRecordImg) clone(db *gorm.DB) hisIssueRecordImg {
	h.hisIssueRecordImgDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hisIssueRecordImg) replaceDB(db *gorm.DB) hisIssueRecordImg {
	h.hisIssueRecordImgDo.ReplaceDB(db)
	return h
}

type hisIssueRecordImgDo struct{ gen.DO }

type IHisIssueRecordImgDo interface {
	gen.SubQuery
	Debug() IHisIssueRecordImgDo
	WithContext(ctx context.Context) IHisIssueRecordImgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHisIssueRecordImgDo
	WriteDB() IHisIssueRecordImgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHisIssueRecordImgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHisIssueRecordImgDo
	Not(conds ...gen.Condition) IHisIssueRecordImgDo
	Or(conds ...gen.Condition) IHisIssueRecordImgDo
	Select(conds ...field.Expr) IHisIssueRecordImgDo
	Where(conds ...gen.Condition) IHisIssueRecordImgDo
	Order(conds ...field.Expr) IHisIssueRecordImgDo
	Distinct(cols ...field.Expr) IHisIssueRecordImgDo
	Omit(cols ...field.Expr) IHisIssueRecordImgDo
	Join(table schema.Tabler, on ...field.Expr) IHisIssueRecordImgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordImgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordImgDo
	Group(cols ...field.Expr) IHisIssueRecordImgDo
	Having(conds ...gen.Condition) IHisIssueRecordImgDo
	Limit(limit int) IHisIssueRecordImgDo
	Offset(offset int) IHisIssueRecordImgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHisIssueRecordImgDo
	Unscoped() IHisIssueRecordImgDo
	Create(values ...*model.HisIssueRecordImg) error
	CreateInBatches(values []*model.HisIssueRecordImg, batchSize int) error
	Save(values ...*model.HisIssueRecordImg) error
	First() (*model.HisIssueRecordImg, error)
	Take() (*model.HisIssueRecordImg, error)
	Last() (*model.HisIssueRecordImg, error)
	Find() ([]*model.HisIssueRecordImg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HisIssueRecordImg, err error)
	FindInBatches(result *[]*model.HisIssueRecordImg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HisIssueRecordImg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHisIssueRecordImgDo
	Assign(attrs ...field.AssignExpr) IHisIssueRecordImgDo
	Joins(fields ...field.RelationField) IHisIssueRecordImgDo
	Preload(fields ...field.RelationField) IHisIssueRecordImgDo
	FirstOrInit() (*model.HisIssueRecordImg, error)
	FirstOrCreate() (*model.HisIssueRecordImg, error)
	FindByPage(offset int, limit int) (result []*model.HisIssueRecordImg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHisIssueRecordImgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hisIssueRecordImgDo) Debug() IHisIssueRecordImgDo {
	return h.withDO(h.DO.Debug())
}

func (h hisIssueRecordImgDo) WithContext(ctx context.Context) IHisIssueRecordImgDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hisIssueRecordImgDo) ReadDB() IHisIssueRecordImgDo {
	return h.Clauses(dbresolver.Read)
}

func (h hisIssueRecordImgDo) WriteDB() IHisIssueRecordImgDo {
	return h.Clauses(dbresolver.Write)
}

func (h hisIssueRecordImgDo) Session(config *gorm.Session) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Session(config))
}

func (h hisIssueRecordImgDo) Clauses(conds ...clause.Expression) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hisIssueRecordImgDo) Returning(value interface{}, columns ...string) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hisIssueRecordImgDo) Not(conds ...gen.Condition) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hisIssueRecordImgDo) Or(conds ...gen.Condition) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hisIssueRecordImgDo) Select(conds ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hisIssueRecordImgDo) Where(conds ...gen.Condition) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hisIssueRecordImgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHisIssueRecordImgDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hisIssueRecordImgDo) Order(conds ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hisIssueRecordImgDo) Distinct(cols ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hisIssueRecordImgDo) Omit(cols ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hisIssueRecordImgDo) Join(table schema.Tabler, on ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hisIssueRecordImgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hisIssueRecordImgDo) RightJoin(table schema.Tabler, on ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hisIssueRecordImgDo) Group(cols ...field.Expr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hisIssueRecordImgDo) Having(conds ...gen.Condition) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hisIssueRecordImgDo) Limit(limit int) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hisIssueRecordImgDo) Offset(offset int) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hisIssueRecordImgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hisIssueRecordImgDo) Unscoped() IHisIssueRecordImgDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hisIssueRecordImgDo) Create(values ...*model.HisIssueRecordImg) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hisIssueRecordImgDo) CreateInBatches(values []*model.HisIssueRecordImg, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hisIssueRecordImgDo) Save(values ...*model.HisIssueRecordImg) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hisIssueRecordImgDo) First() (*model.HisIssueRecordImg, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecordImg), nil
	}
}

func (h hisIssueRecordImgDo) Take() (*model.HisIssueRecordImg, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecordImg), nil
	}
}

func (h hisIssueRecordImgDo) Last() (*model.HisIssueRecordImg, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecordImg), nil
	}
}

func (h hisIssueRecordImgDo) Find() ([]*model.HisIssueRecordImg, error) {
	result, err := h.DO.Find()
	return result.([]*model.HisIssueRecordImg), err
}

func (h hisIssueRecordImgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HisIssueRecordImg, err error) {
	buf := make([]*model.HisIssueRecordImg, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hisIssueRecordImgDo) FindInBatches(result *[]*model.HisIssueRecordImg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hisIssueRecordImgDo) Attrs(attrs ...field.AssignExpr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hisIssueRecordImgDo) Assign(attrs ...field.AssignExpr) IHisIssueRecordImgDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hisIssueRecordImgDo) Joins(fields ...field.RelationField) IHisIssueRecordImgDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hisIssueRecordImgDo) Preload(fields ...field.RelationField) IHisIssueRecordImgDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hisIssueRecordImgDo) FirstOrInit() (*model.HisIssueRecordImg, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecordImg), nil
	}
}

func (h hisIssueRecordImgDo) FirstOrCreate() (*model.HisIssueRecordImg, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisIssueRecordImg), nil
	}
}

func (h hisIssueRecordImgDo) FindByPage(offset int, limit int) (result []*model.HisIssueRecordImg, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hisIssueRecordImgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hisIssueRecordImgDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hisIssueRecordImgDo) Delete(models ...*model.HisIssueRecordImg) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hisIssueRecordImgDo) withDO(do gen.Dao) *hisIssueRecordImgDo {
	h.DO = *do.(*gen.DO)
	return h
}
