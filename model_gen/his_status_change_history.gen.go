// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newHisStatusChangeHistory(db *gorm.DB, opts ...gen.DOOption) hisStatusChangeHistory {
	_hisStatusChangeHistory := hisStatusChangeHistory{}

	_hisStatusChangeHistory.hisStatusChangeHistoryDo.UseDB(db, opts...)
	_hisStatusChangeHistory.hisStatusChangeHistoryDo.UseModel(&model.HisStatusChangeHistory{})

	tableName := _hisStatusChangeHistory.hisStatusChangeHistoryDo.TableName()
	_hisStatusChangeHistory.ALL = field.NewAsterisk(tableName)
	_hisStatusChangeHistory.HisStatusChangeHistoryID = field.NewString(tableName, "his_status_change_history_id")
	_hisStatusChangeHistory.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_hisStatusChangeHistory.RecordStatus = field.NewString(tableName, "record_status")
	_hisStatusChangeHistory.OpUser = field.NewString(tableName, "op_user")
	_hisStatusChangeHistory.Receiver = field.NewString(tableName, "receiver")
	_hisStatusChangeHistory.CreateTime = field.NewString(tableName, "create_time")
	_hisStatusChangeHistory.ModifyTime = field.NewString(tableName, "modify_time")
	_hisStatusChangeHistory.Comments = field.NewString(tableName, "comments")
	_hisStatusChangeHistory.ReceiverTel = field.NewString(tableName, "receiver_tel")
	_hisStatusChangeHistory.IsOuterUser = field.NewString(tableName, "is_outer_user")
	_hisStatusChangeHistory.HisConfirmWorkCode = field.NewString(tableName, "his_confirm_work_code")
	_hisStatusChangeHistory.HisConfirmPhone = field.NewString(tableName, "his_confirm_phone")
	_hisStatusChangeHistory.HisConfirmUser = field.NewString(tableName, "his_confirm_user")

	_hisStatusChangeHistory.fillFieldMap()

	return _hisStatusChangeHistory
}

type hisStatusChangeHistory struct {
	hisStatusChangeHistoryDo

	ALL                      field.Asterisk
	HisStatusChangeHistoryID field.String // 主键，UUID
	HisIssueRecordID         field.String
	RecordStatus             field.String
	OpUser                   field.String // 状态修改人
	Receiver                 field.String
	CreateTime               field.String
	ModifyTime               field.String
	Comments                 field.String // 备注说明,记录调整备注说明
	ReceiverTel              field.String
	IsOuterUser              field.String
	HisConfirmWorkCode       field.String
	HisConfirmPhone          field.String
	HisConfirmUser           field.String

	fieldMap map[string]field.Expr
}

func (h hisStatusChangeHistory) Table(newTableName string) *hisStatusChangeHistory {
	h.hisStatusChangeHistoryDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hisStatusChangeHistory) As(alias string) *hisStatusChangeHistory {
	h.hisStatusChangeHistoryDo.DO = *(h.hisStatusChangeHistoryDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hisStatusChangeHistory) updateTableName(table string) *hisStatusChangeHistory {
	h.ALL = field.NewAsterisk(table)
	h.HisStatusChangeHistoryID = field.NewString(table, "his_status_change_history_id")
	h.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	h.RecordStatus = field.NewString(table, "record_status")
	h.OpUser = field.NewString(table, "op_user")
	h.Receiver = field.NewString(table, "receiver")
	h.CreateTime = field.NewString(table, "create_time")
	h.ModifyTime = field.NewString(table, "modify_time")
	h.Comments = field.NewString(table, "comments")
	h.ReceiverTel = field.NewString(table, "receiver_tel")
	h.IsOuterUser = field.NewString(table, "is_outer_user")
	h.HisConfirmWorkCode = field.NewString(table, "his_confirm_work_code")
	h.HisConfirmPhone = field.NewString(table, "his_confirm_phone")
	h.HisConfirmUser = field.NewString(table, "his_confirm_user")

	h.fillFieldMap()

	return h
}

func (h *hisStatusChangeHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hisStatusChangeHistory) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 13)
	h.fieldMap["his_status_change_history_id"] = h.HisStatusChangeHistoryID
	h.fieldMap["his_issue_record_id"] = h.HisIssueRecordID
	h.fieldMap["record_status"] = h.RecordStatus
	h.fieldMap["op_user"] = h.OpUser
	h.fieldMap["receiver"] = h.Receiver
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["modify_time"] = h.ModifyTime
	h.fieldMap["comments"] = h.Comments
	h.fieldMap["receiver_tel"] = h.ReceiverTel
	h.fieldMap["is_outer_user"] = h.IsOuterUser
	h.fieldMap["his_confirm_work_code"] = h.HisConfirmWorkCode
	h.fieldMap["his_confirm_phone"] = h.HisConfirmPhone
	h.fieldMap["his_confirm_user"] = h.HisConfirmUser
}

func (h hisStatusChangeHistory) clone(db *gorm.DB) hisStatusChangeHistory {
	h.hisStatusChangeHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hisStatusChangeHistory) replaceDB(db *gorm.DB) hisStatusChangeHistory {
	h.hisStatusChangeHistoryDo.ReplaceDB(db)
	return h
}

type hisStatusChangeHistoryDo struct{ gen.DO }

type IHisStatusChangeHistoryDo interface {
	gen.SubQuery
	Debug() IHisStatusChangeHistoryDo
	WithContext(ctx context.Context) IHisStatusChangeHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHisStatusChangeHistoryDo
	WriteDB() IHisStatusChangeHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHisStatusChangeHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHisStatusChangeHistoryDo
	Not(conds ...gen.Condition) IHisStatusChangeHistoryDo
	Or(conds ...gen.Condition) IHisStatusChangeHistoryDo
	Select(conds ...field.Expr) IHisStatusChangeHistoryDo
	Where(conds ...gen.Condition) IHisStatusChangeHistoryDo
	Order(conds ...field.Expr) IHisStatusChangeHistoryDo
	Distinct(cols ...field.Expr) IHisStatusChangeHistoryDo
	Omit(cols ...field.Expr) IHisStatusChangeHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IHisStatusChangeHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHisStatusChangeHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHisStatusChangeHistoryDo
	Group(cols ...field.Expr) IHisStatusChangeHistoryDo
	Having(conds ...gen.Condition) IHisStatusChangeHistoryDo
	Limit(limit int) IHisStatusChangeHistoryDo
	Offset(offset int) IHisStatusChangeHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHisStatusChangeHistoryDo
	Unscoped() IHisStatusChangeHistoryDo
	Create(values ...*model.HisStatusChangeHistory) error
	CreateInBatches(values []*model.HisStatusChangeHistory, batchSize int) error
	Save(values ...*model.HisStatusChangeHistory) error
	First() (*model.HisStatusChangeHistory, error)
	Take() (*model.HisStatusChangeHistory, error)
	Last() (*model.HisStatusChangeHistory, error)
	Find() ([]*model.HisStatusChangeHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HisStatusChangeHistory, err error)
	FindInBatches(result *[]*model.HisStatusChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HisStatusChangeHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHisStatusChangeHistoryDo
	Assign(attrs ...field.AssignExpr) IHisStatusChangeHistoryDo
	Joins(fields ...field.RelationField) IHisStatusChangeHistoryDo
	Preload(fields ...field.RelationField) IHisStatusChangeHistoryDo
	FirstOrInit() (*model.HisStatusChangeHistory, error)
	FirstOrCreate() (*model.HisStatusChangeHistory, error)
	FindByPage(offset int, limit int) (result []*model.HisStatusChangeHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHisStatusChangeHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hisStatusChangeHistoryDo) Debug() IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Debug())
}

func (h hisStatusChangeHistoryDo) WithContext(ctx context.Context) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hisStatusChangeHistoryDo) ReadDB() IHisStatusChangeHistoryDo {
	return h.Clauses(dbresolver.Read)
}

func (h hisStatusChangeHistoryDo) WriteDB() IHisStatusChangeHistoryDo {
	return h.Clauses(dbresolver.Write)
}

func (h hisStatusChangeHistoryDo) Session(config *gorm.Session) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Session(config))
}

func (h hisStatusChangeHistoryDo) Clauses(conds ...clause.Expression) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hisStatusChangeHistoryDo) Returning(value interface{}, columns ...string) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hisStatusChangeHistoryDo) Not(conds ...gen.Condition) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hisStatusChangeHistoryDo) Or(conds ...gen.Condition) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hisStatusChangeHistoryDo) Select(conds ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hisStatusChangeHistoryDo) Where(conds ...gen.Condition) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hisStatusChangeHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHisStatusChangeHistoryDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h hisStatusChangeHistoryDo) Order(conds ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hisStatusChangeHistoryDo) Distinct(cols ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hisStatusChangeHistoryDo) Omit(cols ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hisStatusChangeHistoryDo) Join(table schema.Tabler, on ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hisStatusChangeHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hisStatusChangeHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hisStatusChangeHistoryDo) Group(cols ...field.Expr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hisStatusChangeHistoryDo) Having(conds ...gen.Condition) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hisStatusChangeHistoryDo) Limit(limit int) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hisStatusChangeHistoryDo) Offset(offset int) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hisStatusChangeHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hisStatusChangeHistoryDo) Unscoped() IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hisStatusChangeHistoryDo) Create(values ...*model.HisStatusChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hisStatusChangeHistoryDo) CreateInBatches(values []*model.HisStatusChangeHistory, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hisStatusChangeHistoryDo) Save(values ...*model.HisStatusChangeHistory) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hisStatusChangeHistoryDo) First() (*model.HisStatusChangeHistory, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisStatusChangeHistory), nil
	}
}

func (h hisStatusChangeHistoryDo) Take() (*model.HisStatusChangeHistory, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisStatusChangeHistory), nil
	}
}

func (h hisStatusChangeHistoryDo) Last() (*model.HisStatusChangeHistory, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisStatusChangeHistory), nil
	}
}

func (h hisStatusChangeHistoryDo) Find() ([]*model.HisStatusChangeHistory, error) {
	result, err := h.DO.Find()
	return result.([]*model.HisStatusChangeHistory), err
}

func (h hisStatusChangeHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HisStatusChangeHistory, err error) {
	buf := make([]*model.HisStatusChangeHistory, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hisStatusChangeHistoryDo) FindInBatches(result *[]*model.HisStatusChangeHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hisStatusChangeHistoryDo) Attrs(attrs ...field.AssignExpr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hisStatusChangeHistoryDo) Assign(attrs ...field.AssignExpr) IHisStatusChangeHistoryDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hisStatusChangeHistoryDo) Joins(fields ...field.RelationField) IHisStatusChangeHistoryDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hisStatusChangeHistoryDo) Preload(fields ...field.RelationField) IHisStatusChangeHistoryDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hisStatusChangeHistoryDo) FirstOrInit() (*model.HisStatusChangeHistory, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisStatusChangeHistory), nil
	}
}

func (h hisStatusChangeHistoryDo) FirstOrCreate() (*model.HisStatusChangeHistory, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HisStatusChangeHistory), nil
	}
}

func (h hisStatusChangeHistoryDo) FindByPage(offset int, limit int) (result []*model.HisStatusChangeHistory, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hisStatusChangeHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hisStatusChangeHistoryDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hisStatusChangeHistoryDo) Delete(models ...*model.HisStatusChangeHistory) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hisStatusChangeHistoryDo) withDO(do gen.Dao) *hisStatusChangeHistoryDo {
	h.DO = *do.(*gen.DO)
	return h
}
