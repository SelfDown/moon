// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIconData(db *gorm.DB, opts ...gen.DOOption) iconData {
	_iconData := iconData{}

	_iconData.iconDataDo.UseDB(db, opts...)
	_iconData.iconDataDo.UseModel(&model.IconData{})

	tableName := _iconData.iconDataDo.TableName()
	_iconData.ALL = field.NewAsterisk(tableName)
	_iconData.IconDataID = field.NewString(tableName, "icon_data_id")
	_iconData.IconGroupID = field.NewString(tableName, "icon_group_id")
	_iconData.IconProjectID = field.NewString(tableName, "icon_project_id")
	_iconData.DataType = field.NewString(tableName, "data_type")
	_iconData.Name = field.NewString(tableName, "name")
	_iconData.Pinyin = field.NewString(tableName, "pinyin")
	_iconData.Data = field.NewString(tableName, "data")
	_iconData.Status = field.NewString(tableName, "status")
	_iconData.CreateTime = field.NewString(tableName, "create_time")
	_iconData.CreateUser = field.NewString(tableName, "create_user")
	_iconData.IsDelete = field.NewString(tableName, "is_delete")

	_iconData.fillFieldMap()

	return _iconData
}

type iconData struct {
	iconDataDo

	ALL           field.Asterisk
	IconDataID    field.String
	IconGroupID   field.String
	IconProjectID field.String
	DataType      field.String
	Name          field.String
	Pinyin        field.String
	Data          field.String
	Status        field.String
	CreateTime    field.String
	CreateUser    field.String
	IsDelete      field.String

	fieldMap map[string]field.Expr
}

func (i iconData) Table(newTableName string) *iconData {
	i.iconDataDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iconData) As(alias string) *iconData {
	i.iconDataDo.DO = *(i.iconDataDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iconData) updateTableName(table string) *iconData {
	i.ALL = field.NewAsterisk(table)
	i.IconDataID = field.NewString(table, "icon_data_id")
	i.IconGroupID = field.NewString(table, "icon_group_id")
	i.IconProjectID = field.NewString(table, "icon_project_id")
	i.DataType = field.NewString(table, "data_type")
	i.Name = field.NewString(table, "name")
	i.Pinyin = field.NewString(table, "pinyin")
	i.Data = field.NewString(table, "data")
	i.Status = field.NewString(table, "status")
	i.CreateTime = field.NewString(table, "create_time")
	i.CreateUser = field.NewString(table, "create_user")
	i.IsDelete = field.NewString(table, "is_delete")

	i.fillFieldMap()

	return i
}

func (i *iconData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iconData) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["icon_data_id"] = i.IconDataID
	i.fieldMap["icon_group_id"] = i.IconGroupID
	i.fieldMap["icon_project_id"] = i.IconProjectID
	i.fieldMap["data_type"] = i.DataType
	i.fieldMap["name"] = i.Name
	i.fieldMap["pinyin"] = i.Pinyin
	i.fieldMap["data"] = i.Data
	i.fieldMap["status"] = i.Status
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["create_user"] = i.CreateUser
	i.fieldMap["is_delete"] = i.IsDelete
}

func (i iconData) clone(db *gorm.DB) iconData {
	i.iconDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iconData) replaceDB(db *gorm.DB) iconData {
	i.iconDataDo.ReplaceDB(db)
	return i
}

type iconDataDo struct{ gen.DO }

type IIconDataDo interface {
	gen.SubQuery
	Debug() IIconDataDo
	WithContext(ctx context.Context) IIconDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIconDataDo
	WriteDB() IIconDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIconDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIconDataDo
	Not(conds ...gen.Condition) IIconDataDo
	Or(conds ...gen.Condition) IIconDataDo
	Select(conds ...field.Expr) IIconDataDo
	Where(conds ...gen.Condition) IIconDataDo
	Order(conds ...field.Expr) IIconDataDo
	Distinct(cols ...field.Expr) IIconDataDo
	Omit(cols ...field.Expr) IIconDataDo
	Join(table schema.Tabler, on ...field.Expr) IIconDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIconDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIconDataDo
	Group(cols ...field.Expr) IIconDataDo
	Having(conds ...gen.Condition) IIconDataDo
	Limit(limit int) IIconDataDo
	Offset(offset int) IIconDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIconDataDo
	Unscoped() IIconDataDo
	Create(values ...*model.IconData) error
	CreateInBatches(values []*model.IconData, batchSize int) error
	Save(values ...*model.IconData) error
	First() (*model.IconData, error)
	Take() (*model.IconData, error)
	Last() (*model.IconData, error)
	Find() ([]*model.IconData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconData, err error)
	FindInBatches(result *[]*model.IconData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IconData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIconDataDo
	Assign(attrs ...field.AssignExpr) IIconDataDo
	Joins(fields ...field.RelationField) IIconDataDo
	Preload(fields ...field.RelationField) IIconDataDo
	FirstOrInit() (*model.IconData, error)
	FirstOrCreate() (*model.IconData, error)
	FindByPage(offset int, limit int) (result []*model.IconData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIconDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iconDataDo) Debug() IIconDataDo {
	return i.withDO(i.DO.Debug())
}

func (i iconDataDo) WithContext(ctx context.Context) IIconDataDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iconDataDo) ReadDB() IIconDataDo {
	return i.Clauses(dbresolver.Read)
}

func (i iconDataDo) WriteDB() IIconDataDo {
	return i.Clauses(dbresolver.Write)
}

func (i iconDataDo) Session(config *gorm.Session) IIconDataDo {
	return i.withDO(i.DO.Session(config))
}

func (i iconDataDo) Clauses(conds ...clause.Expression) IIconDataDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iconDataDo) Returning(value interface{}, columns ...string) IIconDataDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iconDataDo) Not(conds ...gen.Condition) IIconDataDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iconDataDo) Or(conds ...gen.Condition) IIconDataDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iconDataDo) Select(conds ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iconDataDo) Where(conds ...gen.Condition) IIconDataDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iconDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIconDataDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iconDataDo) Order(conds ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iconDataDo) Distinct(cols ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iconDataDo) Omit(cols ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iconDataDo) Join(table schema.Tabler, on ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iconDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iconDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iconDataDo) Group(cols ...field.Expr) IIconDataDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iconDataDo) Having(conds ...gen.Condition) IIconDataDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iconDataDo) Limit(limit int) IIconDataDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iconDataDo) Offset(offset int) IIconDataDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iconDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIconDataDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iconDataDo) Unscoped() IIconDataDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iconDataDo) Create(values ...*model.IconData) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iconDataDo) CreateInBatches(values []*model.IconData, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iconDataDo) Save(values ...*model.IconData) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iconDataDo) First() (*model.IconData, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconData), nil
	}
}

func (i iconDataDo) Take() (*model.IconData, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconData), nil
	}
}

func (i iconDataDo) Last() (*model.IconData, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconData), nil
	}
}

func (i iconDataDo) Find() ([]*model.IconData, error) {
	result, err := i.DO.Find()
	return result.([]*model.IconData), err
}

func (i iconDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconData, err error) {
	buf := make([]*model.IconData, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iconDataDo) FindInBatches(result *[]*model.IconData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iconDataDo) Attrs(attrs ...field.AssignExpr) IIconDataDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iconDataDo) Assign(attrs ...field.AssignExpr) IIconDataDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iconDataDo) Joins(fields ...field.RelationField) IIconDataDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iconDataDo) Preload(fields ...field.RelationField) IIconDataDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iconDataDo) FirstOrInit() (*model.IconData, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconData), nil
	}
}

func (i iconDataDo) FirstOrCreate() (*model.IconData, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconData), nil
	}
}

func (i iconDataDo) FindByPage(offset int, limit int) (result []*model.IconData, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iconDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iconDataDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iconDataDo) Delete(models ...*model.IconData) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iconDataDo) withDO(do gen.Dao) *iconDataDo {
	i.DO = *do.(*gen.DO)
	return i
}
