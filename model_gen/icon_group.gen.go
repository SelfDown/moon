// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIconGroup(db *gorm.DB, opts ...gen.DOOption) iconGroup {
	_iconGroup := iconGroup{}

	_iconGroup.iconGroupDo.UseDB(db, opts...)
	_iconGroup.iconGroupDo.UseModel(&model.IconGroup{})

	tableName := _iconGroup.iconGroupDo.TableName()
	_iconGroup.ALL = field.NewAsterisk(tableName)
	_iconGroup.IconGroupID = field.NewString(tableName, "icon_group_id")
	_iconGroup.IconProjectID = field.NewString(tableName, "icon_project_id")
	_iconGroup.GroupName = field.NewString(tableName, "group_name")
	_iconGroup.CreateTime = field.NewString(tableName, "create_time")

	_iconGroup.fillFieldMap()

	return _iconGroup
}

type iconGroup struct {
	iconGroupDo

	ALL           field.Asterisk
	IconGroupID   field.String
	IconProjectID field.String
	GroupName     field.String
	CreateTime    field.String

	fieldMap map[string]field.Expr
}

func (i iconGroup) Table(newTableName string) *iconGroup {
	i.iconGroupDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iconGroup) As(alias string) *iconGroup {
	i.iconGroupDo.DO = *(i.iconGroupDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iconGroup) updateTableName(table string) *iconGroup {
	i.ALL = field.NewAsterisk(table)
	i.IconGroupID = field.NewString(table, "icon_group_id")
	i.IconProjectID = field.NewString(table, "icon_project_id")
	i.GroupName = field.NewString(table, "group_name")
	i.CreateTime = field.NewString(table, "create_time")

	i.fillFieldMap()

	return i
}

func (i *iconGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iconGroup) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["icon_group_id"] = i.IconGroupID
	i.fieldMap["icon_project_id"] = i.IconProjectID
	i.fieldMap["group_name"] = i.GroupName
	i.fieldMap["create_time"] = i.CreateTime
}

func (i iconGroup) clone(db *gorm.DB) iconGroup {
	i.iconGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iconGroup) replaceDB(db *gorm.DB) iconGroup {
	i.iconGroupDo.ReplaceDB(db)
	return i
}

type iconGroupDo struct{ gen.DO }

type IIconGroupDo interface {
	gen.SubQuery
	Debug() IIconGroupDo
	WithContext(ctx context.Context) IIconGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIconGroupDo
	WriteDB() IIconGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIconGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIconGroupDo
	Not(conds ...gen.Condition) IIconGroupDo
	Or(conds ...gen.Condition) IIconGroupDo
	Select(conds ...field.Expr) IIconGroupDo
	Where(conds ...gen.Condition) IIconGroupDo
	Order(conds ...field.Expr) IIconGroupDo
	Distinct(cols ...field.Expr) IIconGroupDo
	Omit(cols ...field.Expr) IIconGroupDo
	Join(table schema.Tabler, on ...field.Expr) IIconGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIconGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIconGroupDo
	Group(cols ...field.Expr) IIconGroupDo
	Having(conds ...gen.Condition) IIconGroupDo
	Limit(limit int) IIconGroupDo
	Offset(offset int) IIconGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIconGroupDo
	Unscoped() IIconGroupDo
	Create(values ...*model.IconGroup) error
	CreateInBatches(values []*model.IconGroup, batchSize int) error
	Save(values ...*model.IconGroup) error
	First() (*model.IconGroup, error)
	Take() (*model.IconGroup, error)
	Last() (*model.IconGroup, error)
	Find() ([]*model.IconGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconGroup, err error)
	FindInBatches(result *[]*model.IconGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IconGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIconGroupDo
	Assign(attrs ...field.AssignExpr) IIconGroupDo
	Joins(fields ...field.RelationField) IIconGroupDo
	Preload(fields ...field.RelationField) IIconGroupDo
	FirstOrInit() (*model.IconGroup, error)
	FirstOrCreate() (*model.IconGroup, error)
	FindByPage(offset int, limit int) (result []*model.IconGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIconGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iconGroupDo) Debug() IIconGroupDo {
	return i.withDO(i.DO.Debug())
}

func (i iconGroupDo) WithContext(ctx context.Context) IIconGroupDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iconGroupDo) ReadDB() IIconGroupDo {
	return i.Clauses(dbresolver.Read)
}

func (i iconGroupDo) WriteDB() IIconGroupDo {
	return i.Clauses(dbresolver.Write)
}

func (i iconGroupDo) Session(config *gorm.Session) IIconGroupDo {
	return i.withDO(i.DO.Session(config))
}

func (i iconGroupDo) Clauses(conds ...clause.Expression) IIconGroupDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iconGroupDo) Returning(value interface{}, columns ...string) IIconGroupDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iconGroupDo) Not(conds ...gen.Condition) IIconGroupDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iconGroupDo) Or(conds ...gen.Condition) IIconGroupDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iconGroupDo) Select(conds ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iconGroupDo) Where(conds ...gen.Condition) IIconGroupDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iconGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIconGroupDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iconGroupDo) Order(conds ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iconGroupDo) Distinct(cols ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iconGroupDo) Omit(cols ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iconGroupDo) Join(table schema.Tabler, on ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iconGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iconGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iconGroupDo) Group(cols ...field.Expr) IIconGroupDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iconGroupDo) Having(conds ...gen.Condition) IIconGroupDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iconGroupDo) Limit(limit int) IIconGroupDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iconGroupDo) Offset(offset int) IIconGroupDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iconGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIconGroupDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iconGroupDo) Unscoped() IIconGroupDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iconGroupDo) Create(values ...*model.IconGroup) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iconGroupDo) CreateInBatches(values []*model.IconGroup, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iconGroupDo) Save(values ...*model.IconGroup) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iconGroupDo) First() (*model.IconGroup, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconGroup), nil
	}
}

func (i iconGroupDo) Take() (*model.IconGroup, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconGroup), nil
	}
}

func (i iconGroupDo) Last() (*model.IconGroup, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconGroup), nil
	}
}

func (i iconGroupDo) Find() ([]*model.IconGroup, error) {
	result, err := i.DO.Find()
	return result.([]*model.IconGroup), err
}

func (i iconGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconGroup, err error) {
	buf := make([]*model.IconGroup, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iconGroupDo) FindInBatches(result *[]*model.IconGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iconGroupDo) Attrs(attrs ...field.AssignExpr) IIconGroupDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iconGroupDo) Assign(attrs ...field.AssignExpr) IIconGroupDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iconGroupDo) Joins(fields ...field.RelationField) IIconGroupDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iconGroupDo) Preload(fields ...field.RelationField) IIconGroupDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iconGroupDo) FirstOrInit() (*model.IconGroup, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconGroup), nil
	}
}

func (i iconGroupDo) FirstOrCreate() (*model.IconGroup, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconGroup), nil
	}
}

func (i iconGroupDo) FindByPage(offset int, limit int) (result []*model.IconGroup, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iconGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iconGroupDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iconGroupDo) Delete(models ...*model.IconGroup) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iconGroupDo) withDO(do gen.Dao) *iconGroupDo {
	i.DO = *do.(*gen.DO)
	return i
}
