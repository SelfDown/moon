// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIconProject(db *gorm.DB, opts ...gen.DOOption) iconProject {
	_iconProject := iconProject{}

	_iconProject.iconProjectDo.UseDB(db, opts...)
	_iconProject.iconProjectDo.UseModel(&model.IconProject{})

	tableName := _iconProject.iconProjectDo.TableName()
	_iconProject.ALL = field.NewAsterisk(tableName)
	_iconProject.IconProjectID = field.NewString(tableName, "icon_project_id")
	_iconProject.ProjectName = field.NewString(tableName, "project_name")
	_iconProject.CreateTime = field.NewString(tableName, "create_time")
	_iconProject.CreateUser = field.NewString(tableName, "create_user")
	_iconProject.IsDelete = field.NewString(tableName, "is_delete")
	_iconProject.BuildPath = field.NewString(tableName, "build_path")
	_iconProject.LastBuildTime = field.NewString(tableName, "last_build_time")
	_iconProject.Prefix = field.NewString(tableName, "prefix")

	_iconProject.fillFieldMap()

	return _iconProject
}

type iconProject struct {
	iconProjectDo

	ALL           field.Asterisk
	IconProjectID field.String
	ProjectName   field.String
	CreateTime    field.String
	CreateUser    field.String
	IsDelete      field.String
	BuildPath     field.String
	LastBuildTime field.String
	Prefix        field.String

	fieldMap map[string]field.Expr
}

func (i iconProject) Table(newTableName string) *iconProject {
	i.iconProjectDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iconProject) As(alias string) *iconProject {
	i.iconProjectDo.DO = *(i.iconProjectDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iconProject) updateTableName(table string) *iconProject {
	i.ALL = field.NewAsterisk(table)
	i.IconProjectID = field.NewString(table, "icon_project_id")
	i.ProjectName = field.NewString(table, "project_name")
	i.CreateTime = field.NewString(table, "create_time")
	i.CreateUser = field.NewString(table, "create_user")
	i.IsDelete = field.NewString(table, "is_delete")
	i.BuildPath = field.NewString(table, "build_path")
	i.LastBuildTime = field.NewString(table, "last_build_time")
	i.Prefix = field.NewString(table, "prefix")

	i.fillFieldMap()

	return i
}

func (i *iconProject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iconProject) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["icon_project_id"] = i.IconProjectID
	i.fieldMap["project_name"] = i.ProjectName
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["create_user"] = i.CreateUser
	i.fieldMap["is_delete"] = i.IsDelete
	i.fieldMap["build_path"] = i.BuildPath
	i.fieldMap["last_build_time"] = i.LastBuildTime
	i.fieldMap["prefix"] = i.Prefix
}

func (i iconProject) clone(db *gorm.DB) iconProject {
	i.iconProjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iconProject) replaceDB(db *gorm.DB) iconProject {
	i.iconProjectDo.ReplaceDB(db)
	return i
}

type iconProjectDo struct{ gen.DO }

type IIconProjectDo interface {
	gen.SubQuery
	Debug() IIconProjectDo
	WithContext(ctx context.Context) IIconProjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIconProjectDo
	WriteDB() IIconProjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIconProjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIconProjectDo
	Not(conds ...gen.Condition) IIconProjectDo
	Or(conds ...gen.Condition) IIconProjectDo
	Select(conds ...field.Expr) IIconProjectDo
	Where(conds ...gen.Condition) IIconProjectDo
	Order(conds ...field.Expr) IIconProjectDo
	Distinct(cols ...field.Expr) IIconProjectDo
	Omit(cols ...field.Expr) IIconProjectDo
	Join(table schema.Tabler, on ...field.Expr) IIconProjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIconProjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIconProjectDo
	Group(cols ...field.Expr) IIconProjectDo
	Having(conds ...gen.Condition) IIconProjectDo
	Limit(limit int) IIconProjectDo
	Offset(offset int) IIconProjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIconProjectDo
	Unscoped() IIconProjectDo
	Create(values ...*model.IconProject) error
	CreateInBatches(values []*model.IconProject, batchSize int) error
	Save(values ...*model.IconProject) error
	First() (*model.IconProject, error)
	Take() (*model.IconProject, error)
	Last() (*model.IconProject, error)
	Find() ([]*model.IconProject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconProject, err error)
	FindInBatches(result *[]*model.IconProject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IconProject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIconProjectDo
	Assign(attrs ...field.AssignExpr) IIconProjectDo
	Joins(fields ...field.RelationField) IIconProjectDo
	Preload(fields ...field.RelationField) IIconProjectDo
	FirstOrInit() (*model.IconProject, error)
	FirstOrCreate() (*model.IconProject, error)
	FindByPage(offset int, limit int) (result []*model.IconProject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIconProjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iconProjectDo) Debug() IIconProjectDo {
	return i.withDO(i.DO.Debug())
}

func (i iconProjectDo) WithContext(ctx context.Context) IIconProjectDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iconProjectDo) ReadDB() IIconProjectDo {
	return i.Clauses(dbresolver.Read)
}

func (i iconProjectDo) WriteDB() IIconProjectDo {
	return i.Clauses(dbresolver.Write)
}

func (i iconProjectDo) Session(config *gorm.Session) IIconProjectDo {
	return i.withDO(i.DO.Session(config))
}

func (i iconProjectDo) Clauses(conds ...clause.Expression) IIconProjectDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iconProjectDo) Returning(value interface{}, columns ...string) IIconProjectDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iconProjectDo) Not(conds ...gen.Condition) IIconProjectDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iconProjectDo) Or(conds ...gen.Condition) IIconProjectDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iconProjectDo) Select(conds ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iconProjectDo) Where(conds ...gen.Condition) IIconProjectDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iconProjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIconProjectDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iconProjectDo) Order(conds ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iconProjectDo) Distinct(cols ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iconProjectDo) Omit(cols ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iconProjectDo) Join(table schema.Tabler, on ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iconProjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iconProjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iconProjectDo) Group(cols ...field.Expr) IIconProjectDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iconProjectDo) Having(conds ...gen.Condition) IIconProjectDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iconProjectDo) Limit(limit int) IIconProjectDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iconProjectDo) Offset(offset int) IIconProjectDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iconProjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIconProjectDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iconProjectDo) Unscoped() IIconProjectDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iconProjectDo) Create(values ...*model.IconProject) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iconProjectDo) CreateInBatches(values []*model.IconProject, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iconProjectDo) Save(values ...*model.IconProject) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iconProjectDo) First() (*model.IconProject, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconProject), nil
	}
}

func (i iconProjectDo) Take() (*model.IconProject, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconProject), nil
	}
}

func (i iconProjectDo) Last() (*model.IconProject, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconProject), nil
	}
}

func (i iconProjectDo) Find() ([]*model.IconProject, error) {
	result, err := i.DO.Find()
	return result.([]*model.IconProject), err
}

func (i iconProjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconProject, err error) {
	buf := make([]*model.IconProject, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iconProjectDo) FindInBatches(result *[]*model.IconProject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iconProjectDo) Attrs(attrs ...field.AssignExpr) IIconProjectDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iconProjectDo) Assign(attrs ...field.AssignExpr) IIconProjectDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iconProjectDo) Joins(fields ...field.RelationField) IIconProjectDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iconProjectDo) Preload(fields ...field.RelationField) IIconProjectDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iconProjectDo) FirstOrInit() (*model.IconProject, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconProject), nil
	}
}

func (i iconProjectDo) FirstOrCreate() (*model.IconProject, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconProject), nil
	}
}

func (i iconProjectDo) FindByPage(offset int, limit int) (result []*model.IconProject, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iconProjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iconProjectDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iconProjectDo) Delete(models ...*model.IconProject) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iconProjectDo) withDO(do gen.Dao) *iconProjectDo {
	i.DO = *do.(*gen.DO)
	return i
}
