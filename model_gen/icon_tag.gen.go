// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIconTag(db *gorm.DB, opts ...gen.DOOption) iconTag {
	_iconTag := iconTag{}

	_iconTag.iconTagDo.UseDB(db, opts...)
	_iconTag.iconTagDo.UseModel(&model.IconTag{})

	tableName := _iconTag.iconTagDo.TableName()
	_iconTag.ALL = field.NewAsterisk(tableName)
	_iconTag.IconTagID = field.NewString(tableName, "icon_tag_id")
	_iconTag.Tag = field.NewString(tableName, "tag")
	_iconTag.IconDataID = field.NewString(tableName, "icon_data_id")

	_iconTag.fillFieldMap()

	return _iconTag
}

type iconTag struct {
	iconTagDo

	ALL        field.Asterisk
	IconTagID  field.String
	Tag        field.String
	IconDataID field.String

	fieldMap map[string]field.Expr
}

func (i iconTag) Table(newTableName string) *iconTag {
	i.iconTagDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iconTag) As(alias string) *iconTag {
	i.iconTagDo.DO = *(i.iconTagDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iconTag) updateTableName(table string) *iconTag {
	i.ALL = field.NewAsterisk(table)
	i.IconTagID = field.NewString(table, "icon_tag_id")
	i.Tag = field.NewString(table, "tag")
	i.IconDataID = field.NewString(table, "icon_data_id")

	i.fillFieldMap()

	return i
}

func (i *iconTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iconTag) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["icon_tag_id"] = i.IconTagID
	i.fieldMap["tag"] = i.Tag
	i.fieldMap["icon_data_id"] = i.IconDataID
}

func (i iconTag) clone(db *gorm.DB) iconTag {
	i.iconTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iconTag) replaceDB(db *gorm.DB) iconTag {
	i.iconTagDo.ReplaceDB(db)
	return i
}

type iconTagDo struct{ gen.DO }

type IIconTagDo interface {
	gen.SubQuery
	Debug() IIconTagDo
	WithContext(ctx context.Context) IIconTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIconTagDo
	WriteDB() IIconTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIconTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIconTagDo
	Not(conds ...gen.Condition) IIconTagDo
	Or(conds ...gen.Condition) IIconTagDo
	Select(conds ...field.Expr) IIconTagDo
	Where(conds ...gen.Condition) IIconTagDo
	Order(conds ...field.Expr) IIconTagDo
	Distinct(cols ...field.Expr) IIconTagDo
	Omit(cols ...field.Expr) IIconTagDo
	Join(table schema.Tabler, on ...field.Expr) IIconTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIconTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIconTagDo
	Group(cols ...field.Expr) IIconTagDo
	Having(conds ...gen.Condition) IIconTagDo
	Limit(limit int) IIconTagDo
	Offset(offset int) IIconTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIconTagDo
	Unscoped() IIconTagDo
	Create(values ...*model.IconTag) error
	CreateInBatches(values []*model.IconTag, batchSize int) error
	Save(values ...*model.IconTag) error
	First() (*model.IconTag, error)
	Take() (*model.IconTag, error)
	Last() (*model.IconTag, error)
	Find() ([]*model.IconTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconTag, err error)
	FindInBatches(result *[]*model.IconTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IconTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIconTagDo
	Assign(attrs ...field.AssignExpr) IIconTagDo
	Joins(fields ...field.RelationField) IIconTagDo
	Preload(fields ...field.RelationField) IIconTagDo
	FirstOrInit() (*model.IconTag, error)
	FirstOrCreate() (*model.IconTag, error)
	FindByPage(offset int, limit int) (result []*model.IconTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIconTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iconTagDo) Debug() IIconTagDo {
	return i.withDO(i.DO.Debug())
}

func (i iconTagDo) WithContext(ctx context.Context) IIconTagDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iconTagDo) ReadDB() IIconTagDo {
	return i.Clauses(dbresolver.Read)
}

func (i iconTagDo) WriteDB() IIconTagDo {
	return i.Clauses(dbresolver.Write)
}

func (i iconTagDo) Session(config *gorm.Session) IIconTagDo {
	return i.withDO(i.DO.Session(config))
}

func (i iconTagDo) Clauses(conds ...clause.Expression) IIconTagDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iconTagDo) Returning(value interface{}, columns ...string) IIconTagDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iconTagDo) Not(conds ...gen.Condition) IIconTagDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iconTagDo) Or(conds ...gen.Condition) IIconTagDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iconTagDo) Select(conds ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iconTagDo) Where(conds ...gen.Condition) IIconTagDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iconTagDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIconTagDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iconTagDo) Order(conds ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iconTagDo) Distinct(cols ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iconTagDo) Omit(cols ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iconTagDo) Join(table schema.Tabler, on ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iconTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iconTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iconTagDo) Group(cols ...field.Expr) IIconTagDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iconTagDo) Having(conds ...gen.Condition) IIconTagDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iconTagDo) Limit(limit int) IIconTagDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iconTagDo) Offset(offset int) IIconTagDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iconTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIconTagDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iconTagDo) Unscoped() IIconTagDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iconTagDo) Create(values ...*model.IconTag) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iconTagDo) CreateInBatches(values []*model.IconTag, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iconTagDo) Save(values ...*model.IconTag) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iconTagDo) First() (*model.IconTag, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconTag), nil
	}
}

func (i iconTagDo) Take() (*model.IconTag, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconTag), nil
	}
}

func (i iconTagDo) Last() (*model.IconTag, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconTag), nil
	}
}

func (i iconTagDo) Find() ([]*model.IconTag, error) {
	result, err := i.DO.Find()
	return result.([]*model.IconTag), err
}

func (i iconTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IconTag, err error) {
	buf := make([]*model.IconTag, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iconTagDo) FindInBatches(result *[]*model.IconTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iconTagDo) Attrs(attrs ...field.AssignExpr) IIconTagDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iconTagDo) Assign(attrs ...field.AssignExpr) IIconTagDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iconTagDo) Joins(fields ...field.RelationField) IIconTagDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iconTagDo) Preload(fields ...field.RelationField) IIconTagDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iconTagDo) FirstOrInit() (*model.IconTag, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconTag), nil
	}
}

func (i iconTagDo) FirstOrCreate() (*model.IconTag, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IconTag), nil
	}
}

func (i iconTagDo) FindByPage(offset int, limit int) (result []*model.IconTag, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iconTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iconTagDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iconTagDo) Delete(models ...*model.IconTag) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iconTagDo) withDO(do gen.Dao) *iconTagDo {
	i.DO = *do.(*gen.DO)
	return i
}
