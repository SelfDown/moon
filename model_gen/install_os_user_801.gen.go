// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newInstallOsUser801(db *gorm.DB, opts ...gen.DOOption) installOsUser801 {
	_installOsUser801 := installOsUser801{}

	_installOsUser801.installOsUser801Do.UseDB(db, opts...)
	_installOsUser801.installOsUser801Do.UseModel(&model.InstallOsUser801{})

	tableName := _installOsUser801.installOsUser801Do.TableName()
	_installOsUser801.ALL = field.NewAsterisk(tableName)
	_installOsUser801.Softid = field.NewString(tableName, "softid")
	_installOsUser801.Userosid = field.NewString(tableName, "userosid")

	_installOsUser801.fillFieldMap()

	return _installOsUser801
}

type installOsUser801 struct {
	installOsUser801Do

	ALL      field.Asterisk
	Softid   field.String
	Userosid field.String

	fieldMap map[string]field.Expr
}

func (i installOsUser801) Table(newTableName string) *installOsUser801 {
	i.installOsUser801Do.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i installOsUser801) As(alias string) *installOsUser801 {
	i.installOsUser801Do.DO = *(i.installOsUser801Do.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *installOsUser801) updateTableName(table string) *installOsUser801 {
	i.ALL = field.NewAsterisk(table)
	i.Softid = field.NewString(table, "softid")
	i.Userosid = field.NewString(table, "userosid")

	i.fillFieldMap()

	return i
}

func (i *installOsUser801) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *installOsUser801) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 2)
	i.fieldMap["softid"] = i.Softid
	i.fieldMap["userosid"] = i.Userosid
}

func (i installOsUser801) clone(db *gorm.DB) installOsUser801 {
	i.installOsUser801Do.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i installOsUser801) replaceDB(db *gorm.DB) installOsUser801 {
	i.installOsUser801Do.ReplaceDB(db)
	return i
}

type installOsUser801Do struct{ gen.DO }

type IInstallOsUser801Do interface {
	gen.SubQuery
	Debug() IInstallOsUser801Do
	WithContext(ctx context.Context) IInstallOsUser801Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInstallOsUser801Do
	WriteDB() IInstallOsUser801Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInstallOsUser801Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInstallOsUser801Do
	Not(conds ...gen.Condition) IInstallOsUser801Do
	Or(conds ...gen.Condition) IInstallOsUser801Do
	Select(conds ...field.Expr) IInstallOsUser801Do
	Where(conds ...gen.Condition) IInstallOsUser801Do
	Order(conds ...field.Expr) IInstallOsUser801Do
	Distinct(cols ...field.Expr) IInstallOsUser801Do
	Omit(cols ...field.Expr) IInstallOsUser801Do
	Join(table schema.Tabler, on ...field.Expr) IInstallOsUser801Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IInstallOsUser801Do
	RightJoin(table schema.Tabler, on ...field.Expr) IInstallOsUser801Do
	Group(cols ...field.Expr) IInstallOsUser801Do
	Having(conds ...gen.Condition) IInstallOsUser801Do
	Limit(limit int) IInstallOsUser801Do
	Offset(offset int) IInstallOsUser801Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInstallOsUser801Do
	Unscoped() IInstallOsUser801Do
	Create(values ...*model.InstallOsUser801) error
	CreateInBatches(values []*model.InstallOsUser801, batchSize int) error
	Save(values ...*model.InstallOsUser801) error
	First() (*model.InstallOsUser801, error)
	Take() (*model.InstallOsUser801, error)
	Last() (*model.InstallOsUser801, error)
	Find() ([]*model.InstallOsUser801, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstallOsUser801, err error)
	FindInBatches(result *[]*model.InstallOsUser801, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InstallOsUser801) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInstallOsUser801Do
	Assign(attrs ...field.AssignExpr) IInstallOsUser801Do
	Joins(fields ...field.RelationField) IInstallOsUser801Do
	Preload(fields ...field.RelationField) IInstallOsUser801Do
	FirstOrInit() (*model.InstallOsUser801, error)
	FirstOrCreate() (*model.InstallOsUser801, error)
	FindByPage(offset int, limit int) (result []*model.InstallOsUser801, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInstallOsUser801Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i installOsUser801Do) Debug() IInstallOsUser801Do {
	return i.withDO(i.DO.Debug())
}

func (i installOsUser801Do) WithContext(ctx context.Context) IInstallOsUser801Do {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i installOsUser801Do) ReadDB() IInstallOsUser801Do {
	return i.Clauses(dbresolver.Read)
}

func (i installOsUser801Do) WriteDB() IInstallOsUser801Do {
	return i.Clauses(dbresolver.Write)
}

func (i installOsUser801Do) Session(config *gorm.Session) IInstallOsUser801Do {
	return i.withDO(i.DO.Session(config))
}

func (i installOsUser801Do) Clauses(conds ...clause.Expression) IInstallOsUser801Do {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i installOsUser801Do) Returning(value interface{}, columns ...string) IInstallOsUser801Do {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i installOsUser801Do) Not(conds ...gen.Condition) IInstallOsUser801Do {
	return i.withDO(i.DO.Not(conds...))
}

func (i installOsUser801Do) Or(conds ...gen.Condition) IInstallOsUser801Do {
	return i.withDO(i.DO.Or(conds...))
}

func (i installOsUser801Do) Select(conds ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.Select(conds...))
}

func (i installOsUser801Do) Where(conds ...gen.Condition) IInstallOsUser801Do {
	return i.withDO(i.DO.Where(conds...))
}

func (i installOsUser801Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IInstallOsUser801Do {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i installOsUser801Do) Order(conds ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.Order(conds...))
}

func (i installOsUser801Do) Distinct(cols ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i installOsUser801Do) Omit(cols ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.Omit(cols...))
}

func (i installOsUser801Do) Join(table schema.Tabler, on ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.Join(table, on...))
}

func (i installOsUser801Do) LeftJoin(table schema.Tabler, on ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i installOsUser801Do) RightJoin(table schema.Tabler, on ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i installOsUser801Do) Group(cols ...field.Expr) IInstallOsUser801Do {
	return i.withDO(i.DO.Group(cols...))
}

func (i installOsUser801Do) Having(conds ...gen.Condition) IInstallOsUser801Do {
	return i.withDO(i.DO.Having(conds...))
}

func (i installOsUser801Do) Limit(limit int) IInstallOsUser801Do {
	return i.withDO(i.DO.Limit(limit))
}

func (i installOsUser801Do) Offset(offset int) IInstallOsUser801Do {
	return i.withDO(i.DO.Offset(offset))
}

func (i installOsUser801Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IInstallOsUser801Do {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i installOsUser801Do) Unscoped() IInstallOsUser801Do {
	return i.withDO(i.DO.Unscoped())
}

func (i installOsUser801Do) Create(values ...*model.InstallOsUser801) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i installOsUser801Do) CreateInBatches(values []*model.InstallOsUser801, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i installOsUser801Do) Save(values ...*model.InstallOsUser801) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i installOsUser801Do) First() (*model.InstallOsUser801, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstallOsUser801), nil
	}
}

func (i installOsUser801Do) Take() (*model.InstallOsUser801, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstallOsUser801), nil
	}
}

func (i installOsUser801Do) Last() (*model.InstallOsUser801, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstallOsUser801), nil
	}
}

func (i installOsUser801Do) Find() ([]*model.InstallOsUser801, error) {
	result, err := i.DO.Find()
	return result.([]*model.InstallOsUser801), err
}

func (i installOsUser801Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InstallOsUser801, err error) {
	buf := make([]*model.InstallOsUser801, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i installOsUser801Do) FindInBatches(result *[]*model.InstallOsUser801, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i installOsUser801Do) Attrs(attrs ...field.AssignExpr) IInstallOsUser801Do {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i installOsUser801Do) Assign(attrs ...field.AssignExpr) IInstallOsUser801Do {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i installOsUser801Do) Joins(fields ...field.RelationField) IInstallOsUser801Do {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i installOsUser801Do) Preload(fields ...field.RelationField) IInstallOsUser801Do {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i installOsUser801Do) FirstOrInit() (*model.InstallOsUser801, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstallOsUser801), nil
	}
}

func (i installOsUser801Do) FirstOrCreate() (*model.InstallOsUser801, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InstallOsUser801), nil
	}
}

func (i installOsUser801Do) FindByPage(offset int, limit int) (result []*model.InstallOsUser801, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i installOsUser801Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i installOsUser801Do) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i installOsUser801Do) Delete(models ...*model.InstallOsUser801) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *installOsUser801Do) withDO(do gen.Dao) *installOsUser801Do {
	i.DO = *do.(*gen.DO)
	return i
}
