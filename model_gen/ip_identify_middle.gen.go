// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIPIdentifyMiddle(db *gorm.DB, opts ...gen.DOOption) iPIdentifyMiddle {
	_iPIdentifyMiddle := iPIdentifyMiddle{}

	_iPIdentifyMiddle.iPIdentifyMiddleDo.UseDB(db, opts...)
	_iPIdentifyMiddle.iPIdentifyMiddleDo.UseModel(&model.IPIdentifyMiddle{})

	tableName := _iPIdentifyMiddle.iPIdentifyMiddleDo.TableName()
	_iPIdentifyMiddle.ALL = field.NewAsterisk(tableName)
	_iPIdentifyMiddle.IPIdentifyMiddleID = field.NewInt32(tableName, "ip_identify_middle_id")
	_iPIdentifyMiddle.BackupIP = field.NewString(tableName, "backup_ip")
	_iPIdentifyMiddle.Identify = field.NewString(tableName, "identify")
	_iPIdentifyMiddle.SourceIP = field.NewString(tableName, "source_ip")

	_iPIdentifyMiddle.fillFieldMap()

	return _iPIdentifyMiddle
}

type iPIdentifyMiddle struct {
	iPIdentifyMiddleDo

	ALL                field.Asterisk
	IPIdentifyMiddleID field.Int32
	BackupIP           field.String
	Identify           field.String
	SourceIP           field.String

	fieldMap map[string]field.Expr
}

func (i iPIdentifyMiddle) Table(newTableName string) *iPIdentifyMiddle {
	i.iPIdentifyMiddleDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iPIdentifyMiddle) As(alias string) *iPIdentifyMiddle {
	i.iPIdentifyMiddleDo.DO = *(i.iPIdentifyMiddleDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iPIdentifyMiddle) updateTableName(table string) *iPIdentifyMiddle {
	i.ALL = field.NewAsterisk(table)
	i.IPIdentifyMiddleID = field.NewInt32(table, "ip_identify_middle_id")
	i.BackupIP = field.NewString(table, "backup_ip")
	i.Identify = field.NewString(table, "identify")
	i.SourceIP = field.NewString(table, "source_ip")

	i.fillFieldMap()

	return i
}

func (i *iPIdentifyMiddle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iPIdentifyMiddle) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["ip_identify_middle_id"] = i.IPIdentifyMiddleID
	i.fieldMap["backup_ip"] = i.BackupIP
	i.fieldMap["identify"] = i.Identify
	i.fieldMap["source_ip"] = i.SourceIP
}

func (i iPIdentifyMiddle) clone(db *gorm.DB) iPIdentifyMiddle {
	i.iPIdentifyMiddleDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i iPIdentifyMiddle) replaceDB(db *gorm.DB) iPIdentifyMiddle {
	i.iPIdentifyMiddleDo.ReplaceDB(db)
	return i
}

type iPIdentifyMiddleDo struct{ gen.DO }

type IIPIdentifyMiddleDo interface {
	gen.SubQuery
	Debug() IIPIdentifyMiddleDo
	WithContext(ctx context.Context) IIPIdentifyMiddleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIPIdentifyMiddleDo
	WriteDB() IIPIdentifyMiddleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIPIdentifyMiddleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIPIdentifyMiddleDo
	Not(conds ...gen.Condition) IIPIdentifyMiddleDo
	Or(conds ...gen.Condition) IIPIdentifyMiddleDo
	Select(conds ...field.Expr) IIPIdentifyMiddleDo
	Where(conds ...gen.Condition) IIPIdentifyMiddleDo
	Order(conds ...field.Expr) IIPIdentifyMiddleDo
	Distinct(cols ...field.Expr) IIPIdentifyMiddleDo
	Omit(cols ...field.Expr) IIPIdentifyMiddleDo
	Join(table schema.Tabler, on ...field.Expr) IIPIdentifyMiddleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIPIdentifyMiddleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIPIdentifyMiddleDo
	Group(cols ...field.Expr) IIPIdentifyMiddleDo
	Having(conds ...gen.Condition) IIPIdentifyMiddleDo
	Limit(limit int) IIPIdentifyMiddleDo
	Offset(offset int) IIPIdentifyMiddleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIPIdentifyMiddleDo
	Unscoped() IIPIdentifyMiddleDo
	Create(values ...*model.IPIdentifyMiddle) error
	CreateInBatches(values []*model.IPIdentifyMiddle, batchSize int) error
	Save(values ...*model.IPIdentifyMiddle) error
	First() (*model.IPIdentifyMiddle, error)
	Take() (*model.IPIdentifyMiddle, error)
	Last() (*model.IPIdentifyMiddle, error)
	Find() ([]*model.IPIdentifyMiddle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IPIdentifyMiddle, err error)
	FindInBatches(result *[]*model.IPIdentifyMiddle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IPIdentifyMiddle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIPIdentifyMiddleDo
	Assign(attrs ...field.AssignExpr) IIPIdentifyMiddleDo
	Joins(fields ...field.RelationField) IIPIdentifyMiddleDo
	Preload(fields ...field.RelationField) IIPIdentifyMiddleDo
	FirstOrInit() (*model.IPIdentifyMiddle, error)
	FirstOrCreate() (*model.IPIdentifyMiddle, error)
	FindByPage(offset int, limit int) (result []*model.IPIdentifyMiddle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIPIdentifyMiddleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i iPIdentifyMiddleDo) Debug() IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Debug())
}

func (i iPIdentifyMiddleDo) WithContext(ctx context.Context) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iPIdentifyMiddleDo) ReadDB() IIPIdentifyMiddleDo {
	return i.Clauses(dbresolver.Read)
}

func (i iPIdentifyMiddleDo) WriteDB() IIPIdentifyMiddleDo {
	return i.Clauses(dbresolver.Write)
}

func (i iPIdentifyMiddleDo) Session(config *gorm.Session) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Session(config))
}

func (i iPIdentifyMiddleDo) Clauses(conds ...clause.Expression) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iPIdentifyMiddleDo) Returning(value interface{}, columns ...string) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iPIdentifyMiddleDo) Not(conds ...gen.Condition) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iPIdentifyMiddleDo) Or(conds ...gen.Condition) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iPIdentifyMiddleDo) Select(conds ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iPIdentifyMiddleDo) Where(conds ...gen.Condition) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iPIdentifyMiddleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIPIdentifyMiddleDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iPIdentifyMiddleDo) Order(conds ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iPIdentifyMiddleDo) Distinct(cols ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iPIdentifyMiddleDo) Omit(cols ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iPIdentifyMiddleDo) Join(table schema.Tabler, on ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iPIdentifyMiddleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iPIdentifyMiddleDo) RightJoin(table schema.Tabler, on ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iPIdentifyMiddleDo) Group(cols ...field.Expr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iPIdentifyMiddleDo) Having(conds ...gen.Condition) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iPIdentifyMiddleDo) Limit(limit int) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iPIdentifyMiddleDo) Offset(offset int) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iPIdentifyMiddleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iPIdentifyMiddleDo) Unscoped() IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iPIdentifyMiddleDo) Create(values ...*model.IPIdentifyMiddle) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iPIdentifyMiddleDo) CreateInBatches(values []*model.IPIdentifyMiddle, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iPIdentifyMiddleDo) Save(values ...*model.IPIdentifyMiddle) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iPIdentifyMiddleDo) First() (*model.IPIdentifyMiddle, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPIdentifyMiddle), nil
	}
}

func (i iPIdentifyMiddleDo) Take() (*model.IPIdentifyMiddle, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPIdentifyMiddle), nil
	}
}

func (i iPIdentifyMiddleDo) Last() (*model.IPIdentifyMiddle, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPIdentifyMiddle), nil
	}
}

func (i iPIdentifyMiddleDo) Find() ([]*model.IPIdentifyMiddle, error) {
	result, err := i.DO.Find()
	return result.([]*model.IPIdentifyMiddle), err
}

func (i iPIdentifyMiddleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IPIdentifyMiddle, err error) {
	buf := make([]*model.IPIdentifyMiddle, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iPIdentifyMiddleDo) FindInBatches(result *[]*model.IPIdentifyMiddle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iPIdentifyMiddleDo) Attrs(attrs ...field.AssignExpr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iPIdentifyMiddleDo) Assign(attrs ...field.AssignExpr) IIPIdentifyMiddleDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iPIdentifyMiddleDo) Joins(fields ...field.RelationField) IIPIdentifyMiddleDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iPIdentifyMiddleDo) Preload(fields ...field.RelationField) IIPIdentifyMiddleDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iPIdentifyMiddleDo) FirstOrInit() (*model.IPIdentifyMiddle, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPIdentifyMiddle), nil
	}
}

func (i iPIdentifyMiddleDo) FirstOrCreate() (*model.IPIdentifyMiddle, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IPIdentifyMiddle), nil
	}
}

func (i iPIdentifyMiddleDo) FindByPage(offset int, limit int) (result []*model.IPIdentifyMiddle, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iPIdentifyMiddleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iPIdentifyMiddleDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iPIdentifyMiddleDo) Delete(models ...*model.IPIdentifyMiddle) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iPIdentifyMiddleDo) withDO(do gen.Dao) *iPIdentifyMiddleDo {
	i.DO = *do.(*gen.DO)
	return i
}
