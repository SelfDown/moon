// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIssueCommit(db *gorm.DB, opts ...gen.DOOption) issueCommit {
	_issueCommit := issueCommit{}

	_issueCommit.issueCommitDo.UseDB(db, opts...)
	_issueCommit.issueCommitDo.UseModel(&model.IssueCommit{})

	tableName := _issueCommit.issueCommitDo.TableName()
	_issueCommit.ALL = field.NewAsterisk(tableName)
	_issueCommit.CommitIssueID = field.NewString(tableName, "commit_issue_id")
	_issueCommit.ProjectURL = field.NewString(tableName, "project_url")
	_issueCommit.ProjectName = field.NewString(tableName, "project_name")
	_issueCommit.IssueKey = field.NewString(tableName, "issue_key")
	_issueCommit.Created = field.NewString(tableName, "created")
	_issueCommit.Commit = field.NewString(tableName, "commit")
	_issueCommit.Body = field.NewString(tableName, "body")
	_issueCommit.Username = field.NewString(tableName, "username")

	_issueCommit.fillFieldMap()

	return _issueCommit
}

type issueCommit struct {
	issueCommitDo

	ALL           field.Asterisk
	CommitIssueID field.String
	ProjectURL    field.String
	ProjectName   field.String
	IssueKey      field.String
	Created       field.String
	Commit        field.String
	Body          field.String
	Username      field.String

	fieldMap map[string]field.Expr
}

func (i issueCommit) Table(newTableName string) *issueCommit {
	i.issueCommitDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i issueCommit) As(alias string) *issueCommit {
	i.issueCommitDo.DO = *(i.issueCommitDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *issueCommit) updateTableName(table string) *issueCommit {
	i.ALL = field.NewAsterisk(table)
	i.CommitIssueID = field.NewString(table, "commit_issue_id")
	i.ProjectURL = field.NewString(table, "project_url")
	i.ProjectName = field.NewString(table, "project_name")
	i.IssueKey = field.NewString(table, "issue_key")
	i.Created = field.NewString(table, "created")
	i.Commit = field.NewString(table, "commit")
	i.Body = field.NewString(table, "body")
	i.Username = field.NewString(table, "username")

	i.fillFieldMap()

	return i
}

func (i *issueCommit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *issueCommit) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["commit_issue_id"] = i.CommitIssueID
	i.fieldMap["project_url"] = i.ProjectURL
	i.fieldMap["project_name"] = i.ProjectName
	i.fieldMap["issue_key"] = i.IssueKey
	i.fieldMap["created"] = i.Created
	i.fieldMap["commit"] = i.Commit
	i.fieldMap["body"] = i.Body
	i.fieldMap["username"] = i.Username
}

func (i issueCommit) clone(db *gorm.DB) issueCommit {
	i.issueCommitDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i issueCommit) replaceDB(db *gorm.DB) issueCommit {
	i.issueCommitDo.ReplaceDB(db)
	return i
}

type issueCommitDo struct{ gen.DO }

type IIssueCommitDo interface {
	gen.SubQuery
	Debug() IIssueCommitDo
	WithContext(ctx context.Context) IIssueCommitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIssueCommitDo
	WriteDB() IIssueCommitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIssueCommitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIssueCommitDo
	Not(conds ...gen.Condition) IIssueCommitDo
	Or(conds ...gen.Condition) IIssueCommitDo
	Select(conds ...field.Expr) IIssueCommitDo
	Where(conds ...gen.Condition) IIssueCommitDo
	Order(conds ...field.Expr) IIssueCommitDo
	Distinct(cols ...field.Expr) IIssueCommitDo
	Omit(cols ...field.Expr) IIssueCommitDo
	Join(table schema.Tabler, on ...field.Expr) IIssueCommitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIssueCommitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIssueCommitDo
	Group(cols ...field.Expr) IIssueCommitDo
	Having(conds ...gen.Condition) IIssueCommitDo
	Limit(limit int) IIssueCommitDo
	Offset(offset int) IIssueCommitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIssueCommitDo
	Unscoped() IIssueCommitDo
	Create(values ...*model.IssueCommit) error
	CreateInBatches(values []*model.IssueCommit, batchSize int) error
	Save(values ...*model.IssueCommit) error
	First() (*model.IssueCommit, error)
	Take() (*model.IssueCommit, error)
	Last() (*model.IssueCommit, error)
	Find() ([]*model.IssueCommit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IssueCommit, err error)
	FindInBatches(result *[]*model.IssueCommit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IssueCommit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIssueCommitDo
	Assign(attrs ...field.AssignExpr) IIssueCommitDo
	Joins(fields ...field.RelationField) IIssueCommitDo
	Preload(fields ...field.RelationField) IIssueCommitDo
	FirstOrInit() (*model.IssueCommit, error)
	FirstOrCreate() (*model.IssueCommit, error)
	FindByPage(offset int, limit int) (result []*model.IssueCommit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIssueCommitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i issueCommitDo) Debug() IIssueCommitDo {
	return i.withDO(i.DO.Debug())
}

func (i issueCommitDo) WithContext(ctx context.Context) IIssueCommitDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i issueCommitDo) ReadDB() IIssueCommitDo {
	return i.Clauses(dbresolver.Read)
}

func (i issueCommitDo) WriteDB() IIssueCommitDo {
	return i.Clauses(dbresolver.Write)
}

func (i issueCommitDo) Session(config *gorm.Session) IIssueCommitDo {
	return i.withDO(i.DO.Session(config))
}

func (i issueCommitDo) Clauses(conds ...clause.Expression) IIssueCommitDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i issueCommitDo) Returning(value interface{}, columns ...string) IIssueCommitDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i issueCommitDo) Not(conds ...gen.Condition) IIssueCommitDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i issueCommitDo) Or(conds ...gen.Condition) IIssueCommitDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i issueCommitDo) Select(conds ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i issueCommitDo) Where(conds ...gen.Condition) IIssueCommitDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i issueCommitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIssueCommitDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i issueCommitDo) Order(conds ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i issueCommitDo) Distinct(cols ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i issueCommitDo) Omit(cols ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i issueCommitDo) Join(table schema.Tabler, on ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i issueCommitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i issueCommitDo) RightJoin(table schema.Tabler, on ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i issueCommitDo) Group(cols ...field.Expr) IIssueCommitDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i issueCommitDo) Having(conds ...gen.Condition) IIssueCommitDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i issueCommitDo) Limit(limit int) IIssueCommitDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i issueCommitDo) Offset(offset int) IIssueCommitDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i issueCommitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIssueCommitDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i issueCommitDo) Unscoped() IIssueCommitDo {
	return i.withDO(i.DO.Unscoped())
}

func (i issueCommitDo) Create(values ...*model.IssueCommit) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i issueCommitDo) CreateInBatches(values []*model.IssueCommit, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i issueCommitDo) Save(values ...*model.IssueCommit) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i issueCommitDo) First() (*model.IssueCommit, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueCommit), nil
	}
}

func (i issueCommitDo) Take() (*model.IssueCommit, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueCommit), nil
	}
}

func (i issueCommitDo) Last() (*model.IssueCommit, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueCommit), nil
	}
}

func (i issueCommitDo) Find() ([]*model.IssueCommit, error) {
	result, err := i.DO.Find()
	return result.([]*model.IssueCommit), err
}

func (i issueCommitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IssueCommit, err error) {
	buf := make([]*model.IssueCommit, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i issueCommitDo) FindInBatches(result *[]*model.IssueCommit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i issueCommitDo) Attrs(attrs ...field.AssignExpr) IIssueCommitDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i issueCommitDo) Assign(attrs ...field.AssignExpr) IIssueCommitDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i issueCommitDo) Joins(fields ...field.RelationField) IIssueCommitDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i issueCommitDo) Preload(fields ...field.RelationField) IIssueCommitDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i issueCommitDo) FirstOrInit() (*model.IssueCommit, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueCommit), nil
	}
}

func (i issueCommitDo) FirstOrCreate() (*model.IssueCommit, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueCommit), nil
	}
}

func (i issueCommitDo) FindByPage(offset int, limit int) (result []*model.IssueCommit, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i issueCommitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i issueCommitDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i issueCommitDo) Delete(models ...*model.IssueCommit) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *issueCommitDo) withDO(do gen.Dao) *issueCommitDo {
	i.DO = *do.(*gen.DO)
	return i
}
