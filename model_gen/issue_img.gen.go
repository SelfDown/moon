// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newIssueImg(db *gorm.DB, opts ...gen.DOOption) issueImg {
	_issueImg := issueImg{}

	_issueImg.issueImgDo.UseDB(db, opts...)
	_issueImg.issueImgDo.UseModel(&model.IssueImg{})

	tableName := _issueImg.issueImgDo.TableName()
	_issueImg.ALL = field.NewAsterisk(tableName)
	_issueImg.IssueImgID = field.NewString(tableName, "issue_img_id")
	_issueImg.Data = field.NewString(tableName, "data")
	_issueImg.AddTime = field.NewString(tableName, "add_time")
	_issueImg.OpUser = field.NewString(tableName, "op_user")

	_issueImg.fillFieldMap()

	return _issueImg
}

type issueImg struct {
	issueImgDo

	ALL        field.Asterisk
	IssueImgID field.String
	Data       field.String // 文件内容
	AddTime    field.String
	OpUser     field.String

	fieldMap map[string]field.Expr
}

func (i issueImg) Table(newTableName string) *issueImg {
	i.issueImgDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i issueImg) As(alias string) *issueImg {
	i.issueImgDo.DO = *(i.issueImgDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *issueImg) updateTableName(table string) *issueImg {
	i.ALL = field.NewAsterisk(table)
	i.IssueImgID = field.NewString(table, "issue_img_id")
	i.Data = field.NewString(table, "data")
	i.AddTime = field.NewString(table, "add_time")
	i.OpUser = field.NewString(table, "op_user")

	i.fillFieldMap()

	return i
}

func (i *issueImg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *issueImg) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["issue_img_id"] = i.IssueImgID
	i.fieldMap["data"] = i.Data
	i.fieldMap["add_time"] = i.AddTime
	i.fieldMap["op_user"] = i.OpUser
}

func (i issueImg) clone(db *gorm.DB) issueImg {
	i.issueImgDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i issueImg) replaceDB(db *gorm.DB) issueImg {
	i.issueImgDo.ReplaceDB(db)
	return i
}

type issueImgDo struct{ gen.DO }

type IIssueImgDo interface {
	gen.SubQuery
	Debug() IIssueImgDo
	WithContext(ctx context.Context) IIssueImgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIssueImgDo
	WriteDB() IIssueImgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIssueImgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIssueImgDo
	Not(conds ...gen.Condition) IIssueImgDo
	Or(conds ...gen.Condition) IIssueImgDo
	Select(conds ...field.Expr) IIssueImgDo
	Where(conds ...gen.Condition) IIssueImgDo
	Order(conds ...field.Expr) IIssueImgDo
	Distinct(cols ...field.Expr) IIssueImgDo
	Omit(cols ...field.Expr) IIssueImgDo
	Join(table schema.Tabler, on ...field.Expr) IIssueImgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIssueImgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIssueImgDo
	Group(cols ...field.Expr) IIssueImgDo
	Having(conds ...gen.Condition) IIssueImgDo
	Limit(limit int) IIssueImgDo
	Offset(offset int) IIssueImgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIssueImgDo
	Unscoped() IIssueImgDo
	Create(values ...*model.IssueImg) error
	CreateInBatches(values []*model.IssueImg, batchSize int) error
	Save(values ...*model.IssueImg) error
	First() (*model.IssueImg, error)
	Take() (*model.IssueImg, error)
	Last() (*model.IssueImg, error)
	Find() ([]*model.IssueImg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IssueImg, err error)
	FindInBatches(result *[]*model.IssueImg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IssueImg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIssueImgDo
	Assign(attrs ...field.AssignExpr) IIssueImgDo
	Joins(fields ...field.RelationField) IIssueImgDo
	Preload(fields ...field.RelationField) IIssueImgDo
	FirstOrInit() (*model.IssueImg, error)
	FirstOrCreate() (*model.IssueImg, error)
	FindByPage(offset int, limit int) (result []*model.IssueImg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIssueImgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i issueImgDo) Debug() IIssueImgDo {
	return i.withDO(i.DO.Debug())
}

func (i issueImgDo) WithContext(ctx context.Context) IIssueImgDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i issueImgDo) ReadDB() IIssueImgDo {
	return i.Clauses(dbresolver.Read)
}

func (i issueImgDo) WriteDB() IIssueImgDo {
	return i.Clauses(dbresolver.Write)
}

func (i issueImgDo) Session(config *gorm.Session) IIssueImgDo {
	return i.withDO(i.DO.Session(config))
}

func (i issueImgDo) Clauses(conds ...clause.Expression) IIssueImgDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i issueImgDo) Returning(value interface{}, columns ...string) IIssueImgDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i issueImgDo) Not(conds ...gen.Condition) IIssueImgDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i issueImgDo) Or(conds ...gen.Condition) IIssueImgDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i issueImgDo) Select(conds ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i issueImgDo) Where(conds ...gen.Condition) IIssueImgDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i issueImgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IIssueImgDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i issueImgDo) Order(conds ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i issueImgDo) Distinct(cols ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i issueImgDo) Omit(cols ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i issueImgDo) Join(table schema.Tabler, on ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i issueImgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i issueImgDo) RightJoin(table schema.Tabler, on ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i issueImgDo) Group(cols ...field.Expr) IIssueImgDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i issueImgDo) Having(conds ...gen.Condition) IIssueImgDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i issueImgDo) Limit(limit int) IIssueImgDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i issueImgDo) Offset(offset int) IIssueImgDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i issueImgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIssueImgDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i issueImgDo) Unscoped() IIssueImgDo {
	return i.withDO(i.DO.Unscoped())
}

func (i issueImgDo) Create(values ...*model.IssueImg) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i issueImgDo) CreateInBatches(values []*model.IssueImg, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i issueImgDo) Save(values ...*model.IssueImg) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i issueImgDo) First() (*model.IssueImg, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueImg), nil
	}
}

func (i issueImgDo) Take() (*model.IssueImg, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueImg), nil
	}
}

func (i issueImgDo) Last() (*model.IssueImg, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueImg), nil
	}
}

func (i issueImgDo) Find() ([]*model.IssueImg, error) {
	result, err := i.DO.Find()
	return result.([]*model.IssueImg), err
}

func (i issueImgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IssueImg, err error) {
	buf := make([]*model.IssueImg, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i issueImgDo) FindInBatches(result *[]*model.IssueImg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i issueImgDo) Attrs(attrs ...field.AssignExpr) IIssueImgDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i issueImgDo) Assign(attrs ...field.AssignExpr) IIssueImgDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i issueImgDo) Joins(fields ...field.RelationField) IIssueImgDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i issueImgDo) Preload(fields ...field.RelationField) IIssueImgDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i issueImgDo) FirstOrInit() (*model.IssueImg, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueImg), nil
	}
}

func (i issueImgDo) FirstOrCreate() (*model.IssueImg, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IssueImg), nil
	}
}

func (i issueImgDo) FindByPage(offset int, limit int) (result []*model.IssueImg, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i issueImgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i issueImgDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i issueImgDo) Delete(models ...*model.IssueImg) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *issueImgDo) withDO(do gen.Dao) *issueImgDo {
	i.DO = *do.(*gen.DO)
	return i
}
