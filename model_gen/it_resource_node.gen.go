// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newItResourceNode(db *gorm.DB, opts ...gen.DOOption) itResourceNode {
	_itResourceNode := itResourceNode{}

	_itResourceNode.itResourceNodeDo.UseDB(db, opts...)
	_itResourceNode.itResourceNodeDo.UseModel(&model.ItResourceNode{})

	tableName := _itResourceNode.itResourceNodeDo.TableName()
	_itResourceNode.ALL = field.NewAsterisk(tableName)
	_itResourceNode.NodeID = field.NewInt32(tableName, "node_id")
	_itResourceNode.NodeType = field.NewString(tableName, "node_type")
	_itResourceNode.NodePid = field.NewString(tableName, "node_pid")
	_itResourceNode.NodeBusiID = field.NewString(tableName, "node_busi_id")
	_itResourceNode.NodeText = field.NewString(tableName, "node_text")
	_itResourceNode.NodeState = field.NewString(tableName, "node_state")
	_itResourceNode.NodeURL = field.NewString(tableName, "node_url")
	_itResourceNode.NodeIconCls = field.NewString(tableName, "node_iconCls")
	_itResourceNode.CreateTime = field.NewTime(tableName, "create_time")
	_itResourceNode.ModifyTime = field.NewTime(tableName, "modify_time")
	_itResourceNode.Comments = field.NewString(tableName, "comments")

	_itResourceNode.fillFieldMap()

	return _itResourceNode
}

type itResourceNode struct {
	itResourceNodeDo

	ALL        field.Asterisk
	NodeID     field.Int32
	NodeType   field.String // 节点类型
	NodePid    field.String // 节点父ID
	NodeBusiID field.String // 节点对应的业务类型的主键
	NodeText   field.String // 节点描述
	/*
		节点状态
		open
		closed
	*/
	NodeState   field.String
	NodeURL     field.String // 节点超链接
	NodeIconCls field.String // 节点图标
	CreateTime  field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime  field.Time   // 记录修改时间（数据库自动写入）
	Comments    field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (i itResourceNode) Table(newTableName string) *itResourceNode {
	i.itResourceNodeDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itResourceNode) As(alias string) *itResourceNode {
	i.itResourceNodeDo.DO = *(i.itResourceNodeDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itResourceNode) updateTableName(table string) *itResourceNode {
	i.ALL = field.NewAsterisk(table)
	i.NodeID = field.NewInt32(table, "node_id")
	i.NodeType = field.NewString(table, "node_type")
	i.NodePid = field.NewString(table, "node_pid")
	i.NodeBusiID = field.NewString(table, "node_busi_id")
	i.NodeText = field.NewString(table, "node_text")
	i.NodeState = field.NewString(table, "node_state")
	i.NodeURL = field.NewString(table, "node_url")
	i.NodeIconCls = field.NewString(table, "node_iconCls")
	i.CreateTime = field.NewTime(table, "create_time")
	i.ModifyTime = field.NewTime(table, "modify_time")
	i.Comments = field.NewString(table, "comments")

	i.fillFieldMap()

	return i
}

func (i *itResourceNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itResourceNode) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["node_id"] = i.NodeID
	i.fieldMap["node_type"] = i.NodeType
	i.fieldMap["node_pid"] = i.NodePid
	i.fieldMap["node_busi_id"] = i.NodeBusiID
	i.fieldMap["node_text"] = i.NodeText
	i.fieldMap["node_state"] = i.NodeState
	i.fieldMap["node_url"] = i.NodeURL
	i.fieldMap["node_iconCls"] = i.NodeIconCls
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["modify_time"] = i.ModifyTime
	i.fieldMap["comments"] = i.Comments
}

func (i itResourceNode) clone(db *gorm.DB) itResourceNode {
	i.itResourceNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itResourceNode) replaceDB(db *gorm.DB) itResourceNode {
	i.itResourceNodeDo.ReplaceDB(db)
	return i
}

type itResourceNodeDo struct{ gen.DO }

type IItResourceNodeDo interface {
	gen.SubQuery
	Debug() IItResourceNodeDo
	WithContext(ctx context.Context) IItResourceNodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IItResourceNodeDo
	WriteDB() IItResourceNodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IItResourceNodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IItResourceNodeDo
	Not(conds ...gen.Condition) IItResourceNodeDo
	Or(conds ...gen.Condition) IItResourceNodeDo
	Select(conds ...field.Expr) IItResourceNodeDo
	Where(conds ...gen.Condition) IItResourceNodeDo
	Order(conds ...field.Expr) IItResourceNodeDo
	Distinct(cols ...field.Expr) IItResourceNodeDo
	Omit(cols ...field.Expr) IItResourceNodeDo
	Join(table schema.Tabler, on ...field.Expr) IItResourceNodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IItResourceNodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IItResourceNodeDo
	Group(cols ...field.Expr) IItResourceNodeDo
	Having(conds ...gen.Condition) IItResourceNodeDo
	Limit(limit int) IItResourceNodeDo
	Offset(offset int) IItResourceNodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IItResourceNodeDo
	Unscoped() IItResourceNodeDo
	Create(values ...*model.ItResourceNode) error
	CreateInBatches(values []*model.ItResourceNode, batchSize int) error
	Save(values ...*model.ItResourceNode) error
	First() (*model.ItResourceNode, error)
	Take() (*model.ItResourceNode, error)
	Last() (*model.ItResourceNode, error)
	Find() ([]*model.ItResourceNode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItResourceNode, err error)
	FindInBatches(result *[]*model.ItResourceNode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ItResourceNode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IItResourceNodeDo
	Assign(attrs ...field.AssignExpr) IItResourceNodeDo
	Joins(fields ...field.RelationField) IItResourceNodeDo
	Preload(fields ...field.RelationField) IItResourceNodeDo
	FirstOrInit() (*model.ItResourceNode, error)
	FirstOrCreate() (*model.ItResourceNode, error)
	FindByPage(offset int, limit int) (result []*model.ItResourceNode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IItResourceNodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i itResourceNodeDo) Debug() IItResourceNodeDo {
	return i.withDO(i.DO.Debug())
}

func (i itResourceNodeDo) WithContext(ctx context.Context) IItResourceNodeDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itResourceNodeDo) ReadDB() IItResourceNodeDo {
	return i.Clauses(dbresolver.Read)
}

func (i itResourceNodeDo) WriteDB() IItResourceNodeDo {
	return i.Clauses(dbresolver.Write)
}

func (i itResourceNodeDo) Session(config *gorm.Session) IItResourceNodeDo {
	return i.withDO(i.DO.Session(config))
}

func (i itResourceNodeDo) Clauses(conds ...clause.Expression) IItResourceNodeDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itResourceNodeDo) Returning(value interface{}, columns ...string) IItResourceNodeDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itResourceNodeDo) Not(conds ...gen.Condition) IItResourceNodeDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itResourceNodeDo) Or(conds ...gen.Condition) IItResourceNodeDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itResourceNodeDo) Select(conds ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itResourceNodeDo) Where(conds ...gen.Condition) IItResourceNodeDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itResourceNodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IItResourceNodeDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i itResourceNodeDo) Order(conds ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itResourceNodeDo) Distinct(cols ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itResourceNodeDo) Omit(cols ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itResourceNodeDo) Join(table schema.Tabler, on ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itResourceNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itResourceNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itResourceNodeDo) Group(cols ...field.Expr) IItResourceNodeDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itResourceNodeDo) Having(conds ...gen.Condition) IItResourceNodeDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itResourceNodeDo) Limit(limit int) IItResourceNodeDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itResourceNodeDo) Offset(offset int) IItResourceNodeDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itResourceNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IItResourceNodeDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itResourceNodeDo) Unscoped() IItResourceNodeDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itResourceNodeDo) Create(values ...*model.ItResourceNode) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itResourceNodeDo) CreateInBatches(values []*model.ItResourceNode, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itResourceNodeDo) Save(values ...*model.ItResourceNode) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itResourceNodeDo) First() (*model.ItResourceNode, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItResourceNode), nil
	}
}

func (i itResourceNodeDo) Take() (*model.ItResourceNode, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItResourceNode), nil
	}
}

func (i itResourceNodeDo) Last() (*model.ItResourceNode, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItResourceNode), nil
	}
}

func (i itResourceNodeDo) Find() ([]*model.ItResourceNode, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItResourceNode), err
}

func (i itResourceNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItResourceNode, err error) {
	buf := make([]*model.ItResourceNode, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itResourceNodeDo) FindInBatches(result *[]*model.ItResourceNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itResourceNodeDo) Attrs(attrs ...field.AssignExpr) IItResourceNodeDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itResourceNodeDo) Assign(attrs ...field.AssignExpr) IItResourceNodeDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itResourceNodeDo) Joins(fields ...field.RelationField) IItResourceNodeDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itResourceNodeDo) Preload(fields ...field.RelationField) IItResourceNodeDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itResourceNodeDo) FirstOrInit() (*model.ItResourceNode, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItResourceNode), nil
	}
}

func (i itResourceNodeDo) FirstOrCreate() (*model.ItResourceNode, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItResourceNode), nil
	}
}

func (i itResourceNodeDo) FindByPage(offset int, limit int) (result []*model.ItResourceNode, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itResourceNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itResourceNodeDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itResourceNodeDo) Delete(models ...*model.ItResourceNode) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itResourceNodeDo) withDO(do gen.Dao) *itResourceNodeDo {
	i.DO = *do.(*gen.DO)
	return i
}
