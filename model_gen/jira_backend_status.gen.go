// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newJiraBackendStatus(db *gorm.DB, opts ...gen.DOOption) jiraBackendStatus {
	_jiraBackendStatus := jiraBackendStatus{}

	_jiraBackendStatus.jiraBackendStatusDo.UseDB(db, opts...)
	_jiraBackendStatus.jiraBackendStatusDo.UseModel(&model.JiraBackendStatus{})

	tableName := _jiraBackendStatus.jiraBackendStatusDo.TableName()
	_jiraBackendStatus.ALL = field.NewAsterisk(tableName)
	_jiraBackendStatus.ID = field.NewString(tableName, "id")
	_jiraBackendStatus.Pname = field.NewString(tableName, "pname")

	_jiraBackendStatus.fillFieldMap()

	return _jiraBackendStatus
}

type jiraBackendStatus struct {
	jiraBackendStatusDo

	ALL   field.Asterisk
	ID    field.String // ID
	Pname field.String // 中文释义

	fieldMap map[string]field.Expr
}

func (j jiraBackendStatus) Table(newTableName string) *jiraBackendStatus {
	j.jiraBackendStatusDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jiraBackendStatus) As(alias string) *jiraBackendStatus {
	j.jiraBackendStatusDo.DO = *(j.jiraBackendStatusDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jiraBackendStatus) updateTableName(table string) *jiraBackendStatus {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewString(table, "id")
	j.Pname = field.NewString(table, "pname")

	j.fillFieldMap()

	return j
}

func (j *jiraBackendStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jiraBackendStatus) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 2)
	j.fieldMap["id"] = j.ID
	j.fieldMap["pname"] = j.Pname
}

func (j jiraBackendStatus) clone(db *gorm.DB) jiraBackendStatus {
	j.jiraBackendStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jiraBackendStatus) replaceDB(db *gorm.DB) jiraBackendStatus {
	j.jiraBackendStatusDo.ReplaceDB(db)
	return j
}

type jiraBackendStatusDo struct{ gen.DO }

type IJiraBackendStatusDo interface {
	gen.SubQuery
	Debug() IJiraBackendStatusDo
	WithContext(ctx context.Context) IJiraBackendStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJiraBackendStatusDo
	WriteDB() IJiraBackendStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJiraBackendStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJiraBackendStatusDo
	Not(conds ...gen.Condition) IJiraBackendStatusDo
	Or(conds ...gen.Condition) IJiraBackendStatusDo
	Select(conds ...field.Expr) IJiraBackendStatusDo
	Where(conds ...gen.Condition) IJiraBackendStatusDo
	Order(conds ...field.Expr) IJiraBackendStatusDo
	Distinct(cols ...field.Expr) IJiraBackendStatusDo
	Omit(cols ...field.Expr) IJiraBackendStatusDo
	Join(table schema.Tabler, on ...field.Expr) IJiraBackendStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJiraBackendStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJiraBackendStatusDo
	Group(cols ...field.Expr) IJiraBackendStatusDo
	Having(conds ...gen.Condition) IJiraBackendStatusDo
	Limit(limit int) IJiraBackendStatusDo
	Offset(offset int) IJiraBackendStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJiraBackendStatusDo
	Unscoped() IJiraBackendStatusDo
	Create(values ...*model.JiraBackendStatus) error
	CreateInBatches(values []*model.JiraBackendStatus, batchSize int) error
	Save(values ...*model.JiraBackendStatus) error
	First() (*model.JiraBackendStatus, error)
	Take() (*model.JiraBackendStatus, error)
	Last() (*model.JiraBackendStatus, error)
	Find() ([]*model.JiraBackendStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JiraBackendStatus, err error)
	FindInBatches(result *[]*model.JiraBackendStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JiraBackendStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJiraBackendStatusDo
	Assign(attrs ...field.AssignExpr) IJiraBackendStatusDo
	Joins(fields ...field.RelationField) IJiraBackendStatusDo
	Preload(fields ...field.RelationField) IJiraBackendStatusDo
	FirstOrInit() (*model.JiraBackendStatus, error)
	FirstOrCreate() (*model.JiraBackendStatus, error)
	FindByPage(offset int, limit int) (result []*model.JiraBackendStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJiraBackendStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jiraBackendStatusDo) Debug() IJiraBackendStatusDo {
	return j.withDO(j.DO.Debug())
}

func (j jiraBackendStatusDo) WithContext(ctx context.Context) IJiraBackendStatusDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jiraBackendStatusDo) ReadDB() IJiraBackendStatusDo {
	return j.Clauses(dbresolver.Read)
}

func (j jiraBackendStatusDo) WriteDB() IJiraBackendStatusDo {
	return j.Clauses(dbresolver.Write)
}

func (j jiraBackendStatusDo) Session(config *gorm.Session) IJiraBackendStatusDo {
	return j.withDO(j.DO.Session(config))
}

func (j jiraBackendStatusDo) Clauses(conds ...clause.Expression) IJiraBackendStatusDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jiraBackendStatusDo) Returning(value interface{}, columns ...string) IJiraBackendStatusDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jiraBackendStatusDo) Not(conds ...gen.Condition) IJiraBackendStatusDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jiraBackendStatusDo) Or(conds ...gen.Condition) IJiraBackendStatusDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jiraBackendStatusDo) Select(conds ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jiraBackendStatusDo) Where(conds ...gen.Condition) IJiraBackendStatusDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jiraBackendStatusDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IJiraBackendStatusDo {
	return j.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (j jiraBackendStatusDo) Order(conds ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jiraBackendStatusDo) Distinct(cols ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jiraBackendStatusDo) Omit(cols ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jiraBackendStatusDo) Join(table schema.Tabler, on ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jiraBackendStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jiraBackendStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jiraBackendStatusDo) Group(cols ...field.Expr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jiraBackendStatusDo) Having(conds ...gen.Condition) IJiraBackendStatusDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jiraBackendStatusDo) Limit(limit int) IJiraBackendStatusDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jiraBackendStatusDo) Offset(offset int) IJiraBackendStatusDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jiraBackendStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJiraBackendStatusDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jiraBackendStatusDo) Unscoped() IJiraBackendStatusDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jiraBackendStatusDo) Create(values ...*model.JiraBackendStatus) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jiraBackendStatusDo) CreateInBatches(values []*model.JiraBackendStatus, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jiraBackendStatusDo) Save(values ...*model.JiraBackendStatus) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jiraBackendStatusDo) First() (*model.JiraBackendStatus, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraBackendStatus), nil
	}
}

func (j jiraBackendStatusDo) Take() (*model.JiraBackendStatus, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraBackendStatus), nil
	}
}

func (j jiraBackendStatusDo) Last() (*model.JiraBackendStatus, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraBackendStatus), nil
	}
}

func (j jiraBackendStatusDo) Find() ([]*model.JiraBackendStatus, error) {
	result, err := j.DO.Find()
	return result.([]*model.JiraBackendStatus), err
}

func (j jiraBackendStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JiraBackendStatus, err error) {
	buf := make([]*model.JiraBackendStatus, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jiraBackendStatusDo) FindInBatches(result *[]*model.JiraBackendStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jiraBackendStatusDo) Attrs(attrs ...field.AssignExpr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jiraBackendStatusDo) Assign(attrs ...field.AssignExpr) IJiraBackendStatusDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jiraBackendStatusDo) Joins(fields ...field.RelationField) IJiraBackendStatusDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jiraBackendStatusDo) Preload(fields ...field.RelationField) IJiraBackendStatusDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jiraBackendStatusDo) FirstOrInit() (*model.JiraBackendStatus, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraBackendStatus), nil
	}
}

func (j jiraBackendStatusDo) FirstOrCreate() (*model.JiraBackendStatus, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraBackendStatus), nil
	}
}

func (j jiraBackendStatusDo) FindByPage(offset int, limit int) (result []*model.JiraBackendStatus, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jiraBackendStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jiraBackendStatusDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jiraBackendStatusDo) Delete(models ...*model.JiraBackendStatus) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jiraBackendStatusDo) withDO(do gen.Dao) *jiraBackendStatusDo {
	j.DO = *do.(*gen.DO)
	return j
}
