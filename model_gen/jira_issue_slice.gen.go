// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newJiraIssueSlice(db *gorm.DB, opts ...gen.DOOption) jiraIssueSlice {
	_jiraIssueSlice := jiraIssueSlice{}

	_jiraIssueSlice.jiraIssueSliceDo.UseDB(db, opts...)
	_jiraIssueSlice.jiraIssueSliceDo.UseModel(&model.JiraIssueSlice{})

	tableName := _jiraIssueSlice.jiraIssueSliceDo.TableName()
	_jiraIssueSlice.ALL = field.NewAsterisk(tableName)
	_jiraIssueSlice.IssueKey = field.NewString(tableName, "issue_key")
	_jiraIssueSlice.IssueStatu = field.NewString(tableName, "issue_statu")
	_jiraIssueSlice.IssueTitle = field.NewString(tableName, "issue_title")
	_jiraIssueSlice.Updated = field.NewString(tableName, "updated")
	_jiraIssueSlice.IssueType = field.NewString(tableName, "issue_type")

	_jiraIssueSlice.fillFieldMap()

	return _jiraIssueSlice
}

type jiraIssueSlice struct {
	jiraIssueSliceDo

	ALL        field.Asterisk
	IssueKey   field.String
	IssueStatu field.String
	IssueTitle field.String
	Updated    field.String
	IssueType  field.String

	fieldMap map[string]field.Expr
}

func (j jiraIssueSlice) Table(newTableName string) *jiraIssueSlice {
	j.jiraIssueSliceDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jiraIssueSlice) As(alias string) *jiraIssueSlice {
	j.jiraIssueSliceDo.DO = *(j.jiraIssueSliceDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jiraIssueSlice) updateTableName(table string) *jiraIssueSlice {
	j.ALL = field.NewAsterisk(table)
	j.IssueKey = field.NewString(table, "issue_key")
	j.IssueStatu = field.NewString(table, "issue_statu")
	j.IssueTitle = field.NewString(table, "issue_title")
	j.Updated = field.NewString(table, "updated")
	j.IssueType = field.NewString(table, "issue_type")

	j.fillFieldMap()

	return j
}

func (j *jiraIssueSlice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jiraIssueSlice) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 5)
	j.fieldMap["issue_key"] = j.IssueKey
	j.fieldMap["issue_statu"] = j.IssueStatu
	j.fieldMap["issue_title"] = j.IssueTitle
	j.fieldMap["updated"] = j.Updated
	j.fieldMap["issue_type"] = j.IssueType
}

func (j jiraIssueSlice) clone(db *gorm.DB) jiraIssueSlice {
	j.jiraIssueSliceDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jiraIssueSlice) replaceDB(db *gorm.DB) jiraIssueSlice {
	j.jiraIssueSliceDo.ReplaceDB(db)
	return j
}

type jiraIssueSliceDo struct{ gen.DO }

type IJiraIssueSliceDo interface {
	gen.SubQuery
	Debug() IJiraIssueSliceDo
	WithContext(ctx context.Context) IJiraIssueSliceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJiraIssueSliceDo
	WriteDB() IJiraIssueSliceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJiraIssueSliceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJiraIssueSliceDo
	Not(conds ...gen.Condition) IJiraIssueSliceDo
	Or(conds ...gen.Condition) IJiraIssueSliceDo
	Select(conds ...field.Expr) IJiraIssueSliceDo
	Where(conds ...gen.Condition) IJiraIssueSliceDo
	Order(conds ...field.Expr) IJiraIssueSliceDo
	Distinct(cols ...field.Expr) IJiraIssueSliceDo
	Omit(cols ...field.Expr) IJiraIssueSliceDo
	Join(table schema.Tabler, on ...field.Expr) IJiraIssueSliceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJiraIssueSliceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJiraIssueSliceDo
	Group(cols ...field.Expr) IJiraIssueSliceDo
	Having(conds ...gen.Condition) IJiraIssueSliceDo
	Limit(limit int) IJiraIssueSliceDo
	Offset(offset int) IJiraIssueSliceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJiraIssueSliceDo
	Unscoped() IJiraIssueSliceDo
	Create(values ...*model.JiraIssueSlice) error
	CreateInBatches(values []*model.JiraIssueSlice, batchSize int) error
	Save(values ...*model.JiraIssueSlice) error
	First() (*model.JiraIssueSlice, error)
	Take() (*model.JiraIssueSlice, error)
	Last() (*model.JiraIssueSlice, error)
	Find() ([]*model.JiraIssueSlice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JiraIssueSlice, err error)
	FindInBatches(result *[]*model.JiraIssueSlice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JiraIssueSlice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJiraIssueSliceDo
	Assign(attrs ...field.AssignExpr) IJiraIssueSliceDo
	Joins(fields ...field.RelationField) IJiraIssueSliceDo
	Preload(fields ...field.RelationField) IJiraIssueSliceDo
	FirstOrInit() (*model.JiraIssueSlice, error)
	FirstOrCreate() (*model.JiraIssueSlice, error)
	FindByPage(offset int, limit int) (result []*model.JiraIssueSlice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJiraIssueSliceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jiraIssueSliceDo) Debug() IJiraIssueSliceDo {
	return j.withDO(j.DO.Debug())
}

func (j jiraIssueSliceDo) WithContext(ctx context.Context) IJiraIssueSliceDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jiraIssueSliceDo) ReadDB() IJiraIssueSliceDo {
	return j.Clauses(dbresolver.Read)
}

func (j jiraIssueSliceDo) WriteDB() IJiraIssueSliceDo {
	return j.Clauses(dbresolver.Write)
}

func (j jiraIssueSliceDo) Session(config *gorm.Session) IJiraIssueSliceDo {
	return j.withDO(j.DO.Session(config))
}

func (j jiraIssueSliceDo) Clauses(conds ...clause.Expression) IJiraIssueSliceDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jiraIssueSliceDo) Returning(value interface{}, columns ...string) IJiraIssueSliceDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jiraIssueSliceDo) Not(conds ...gen.Condition) IJiraIssueSliceDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jiraIssueSliceDo) Or(conds ...gen.Condition) IJiraIssueSliceDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jiraIssueSliceDo) Select(conds ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jiraIssueSliceDo) Where(conds ...gen.Condition) IJiraIssueSliceDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jiraIssueSliceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IJiraIssueSliceDo {
	return j.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (j jiraIssueSliceDo) Order(conds ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jiraIssueSliceDo) Distinct(cols ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jiraIssueSliceDo) Omit(cols ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jiraIssueSliceDo) Join(table schema.Tabler, on ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jiraIssueSliceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jiraIssueSliceDo) RightJoin(table schema.Tabler, on ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jiraIssueSliceDo) Group(cols ...field.Expr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jiraIssueSliceDo) Having(conds ...gen.Condition) IJiraIssueSliceDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jiraIssueSliceDo) Limit(limit int) IJiraIssueSliceDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jiraIssueSliceDo) Offset(offset int) IJiraIssueSliceDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jiraIssueSliceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJiraIssueSliceDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jiraIssueSliceDo) Unscoped() IJiraIssueSliceDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jiraIssueSliceDo) Create(values ...*model.JiraIssueSlice) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jiraIssueSliceDo) CreateInBatches(values []*model.JiraIssueSlice, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jiraIssueSliceDo) Save(values ...*model.JiraIssueSlice) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jiraIssueSliceDo) First() (*model.JiraIssueSlice, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraIssueSlice), nil
	}
}

func (j jiraIssueSliceDo) Take() (*model.JiraIssueSlice, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraIssueSlice), nil
	}
}

func (j jiraIssueSliceDo) Last() (*model.JiraIssueSlice, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraIssueSlice), nil
	}
}

func (j jiraIssueSliceDo) Find() ([]*model.JiraIssueSlice, error) {
	result, err := j.DO.Find()
	return result.([]*model.JiraIssueSlice), err
}

func (j jiraIssueSliceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JiraIssueSlice, err error) {
	buf := make([]*model.JiraIssueSlice, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jiraIssueSliceDo) FindInBatches(result *[]*model.JiraIssueSlice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jiraIssueSliceDo) Attrs(attrs ...field.AssignExpr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jiraIssueSliceDo) Assign(attrs ...field.AssignExpr) IJiraIssueSliceDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jiraIssueSliceDo) Joins(fields ...field.RelationField) IJiraIssueSliceDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jiraIssueSliceDo) Preload(fields ...field.RelationField) IJiraIssueSliceDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jiraIssueSliceDo) FirstOrInit() (*model.JiraIssueSlice, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraIssueSlice), nil
	}
}

func (j jiraIssueSliceDo) FirstOrCreate() (*model.JiraIssueSlice, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JiraIssueSlice), nil
	}
}

func (j jiraIssueSliceDo) FindByPage(offset int, limit int) (result []*model.JiraIssueSlice, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jiraIssueSliceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jiraIssueSliceDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jiraIssueSliceDo) Delete(models ...*model.JiraIssueSlice) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jiraIssueSliceDo) withDO(do gen.Dao) *jiraIssueSliceDo {
	j.DO = *do.(*gen.DO)
	return j
}
