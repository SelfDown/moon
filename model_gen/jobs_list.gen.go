// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newJobsList(db *gorm.DB, opts ...gen.DOOption) jobsList {
	_jobsList := jobsList{}

	_jobsList.jobsListDo.UseDB(db, opts...)
	_jobsList.jobsListDo.UseModel(&model.JobsList{})

	tableName := _jobsList.jobsListDo.TableName()
	_jobsList.ALL = field.NewAsterisk(tableName)
	_jobsList.ID = field.NewInt32(tableName, "id")
	_jobsList.JobSummary = field.NewString(tableName, "job_summary")
	_jobsList.JobType = field.NewString(tableName, "job_type")
	_jobsList.LogUser = field.NewString(tableName, "log_user")
	_jobsList.OpUser = field.NewString(tableName, "op_user")
	_jobsList.CreateTime = field.NewTime(tableName, "create_time")
	_jobsList.ModifyTime = field.NewTime(tableName, "modify_time")
	_jobsList.LastDate = field.NewString(tableName, "last_date")
	_jobsList.NextDate = field.NewString(tableName, "next_date")
	_jobsList.TotalTime = field.NewString(tableName, "total_time")
	_jobsList.Intervals = field.NewString(tableName, "intervals")
	_jobsList.Failures = field.NewString(tableName, "failures")
	_jobsList.What = field.NewString(tableName, "what")
	_jobsList.Statu = field.NewString(tableName, "statu")
	_jobsList.Note = field.NewString(tableName, "note")
	_jobsList.DeliveryNum = field.NewString(tableName, "delivery_num")
	_jobsList.JobID = field.NewString(tableName, "job_id")
	_jobsList.SysProjectID = field.NewString(tableName, "sys_project_id")
	_jobsList.CronFilePath = field.NewString(tableName, "cron_file_path")
	_jobsList.FlagDel = field.NewString(tableName, "flag_del")
	_jobsList.Comments = field.NewString(tableName, "comments")

	_jobsList.fillFieldMap()

	return _jobsList
}

type jobsList struct {
	jobsListDo

	ALL        field.Asterisk
	ID         field.Int32
	JobSummary field.String // 任务标题
	/*
		任务类型（job_type）
		0、linux任务
		1、SRMC任务
	*/
	JobType    field.String
	LogUser    field.String // 任务执行用户
	OpUser     field.String // 操作人
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 任务修改时间
	LastDate   field.String // 上次执行时间
	NextDate   field.String // 下次执行时间
	TotalTime  field.String // 总执行次数
	Intervals  field.String // 执行周期
	Failures   field.String // 失败次数
	What       field.String // 执行内容
	/*
		状态(statu)
		0-禁用
		1-启用
	*/
	Statu        field.String
	Note         field.String // 备注
	DeliveryNum  field.String // linux任务投放到的主机数量
	JobID        field.String // uuid
	SysProjectID field.String
	CronFilePath field.String // 任务文件路径
	FlagDel      field.String
	Comments     field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (j jobsList) Table(newTableName string) *jobsList {
	j.jobsListDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobsList) As(alias string) *jobsList {
	j.jobsListDo.DO = *(j.jobsListDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobsList) updateTableName(table string) *jobsList {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt32(table, "id")
	j.JobSummary = field.NewString(table, "job_summary")
	j.JobType = field.NewString(table, "job_type")
	j.LogUser = field.NewString(table, "log_user")
	j.OpUser = field.NewString(table, "op_user")
	j.CreateTime = field.NewTime(table, "create_time")
	j.ModifyTime = field.NewTime(table, "modify_time")
	j.LastDate = field.NewString(table, "last_date")
	j.NextDate = field.NewString(table, "next_date")
	j.TotalTime = field.NewString(table, "total_time")
	j.Intervals = field.NewString(table, "intervals")
	j.Failures = field.NewString(table, "failures")
	j.What = field.NewString(table, "what")
	j.Statu = field.NewString(table, "statu")
	j.Note = field.NewString(table, "note")
	j.DeliveryNum = field.NewString(table, "delivery_num")
	j.JobID = field.NewString(table, "job_id")
	j.SysProjectID = field.NewString(table, "sys_project_id")
	j.CronFilePath = field.NewString(table, "cron_file_path")
	j.FlagDel = field.NewString(table, "flag_del")
	j.Comments = field.NewString(table, "comments")

	j.fillFieldMap()

	return j
}

func (j *jobsList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobsList) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 21)
	j.fieldMap["id"] = j.ID
	j.fieldMap["job_summary"] = j.JobSummary
	j.fieldMap["job_type"] = j.JobType
	j.fieldMap["log_user"] = j.LogUser
	j.fieldMap["op_user"] = j.OpUser
	j.fieldMap["create_time"] = j.CreateTime
	j.fieldMap["modify_time"] = j.ModifyTime
	j.fieldMap["last_date"] = j.LastDate
	j.fieldMap["next_date"] = j.NextDate
	j.fieldMap["total_time"] = j.TotalTime
	j.fieldMap["intervals"] = j.Intervals
	j.fieldMap["failures"] = j.Failures
	j.fieldMap["what"] = j.What
	j.fieldMap["statu"] = j.Statu
	j.fieldMap["note"] = j.Note
	j.fieldMap["delivery_num"] = j.DeliveryNum
	j.fieldMap["job_id"] = j.JobID
	j.fieldMap["sys_project_id"] = j.SysProjectID
	j.fieldMap["cron_file_path"] = j.CronFilePath
	j.fieldMap["flag_del"] = j.FlagDel
	j.fieldMap["comments"] = j.Comments
}

func (j jobsList) clone(db *gorm.DB) jobsList {
	j.jobsListDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobsList) replaceDB(db *gorm.DB) jobsList {
	j.jobsListDo.ReplaceDB(db)
	return j
}

type jobsListDo struct{ gen.DO }

type IJobsListDo interface {
	gen.SubQuery
	Debug() IJobsListDo
	WithContext(ctx context.Context) IJobsListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobsListDo
	WriteDB() IJobsListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobsListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobsListDo
	Not(conds ...gen.Condition) IJobsListDo
	Or(conds ...gen.Condition) IJobsListDo
	Select(conds ...field.Expr) IJobsListDo
	Where(conds ...gen.Condition) IJobsListDo
	Order(conds ...field.Expr) IJobsListDo
	Distinct(cols ...field.Expr) IJobsListDo
	Omit(cols ...field.Expr) IJobsListDo
	Join(table schema.Tabler, on ...field.Expr) IJobsListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobsListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobsListDo
	Group(cols ...field.Expr) IJobsListDo
	Having(conds ...gen.Condition) IJobsListDo
	Limit(limit int) IJobsListDo
	Offset(offset int) IJobsListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobsListDo
	Unscoped() IJobsListDo
	Create(values ...*model.JobsList) error
	CreateInBatches(values []*model.JobsList, batchSize int) error
	Save(values ...*model.JobsList) error
	First() (*model.JobsList, error)
	Take() (*model.JobsList, error)
	Last() (*model.JobsList, error)
	Find() ([]*model.JobsList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobsList, err error)
	FindInBatches(result *[]*model.JobsList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JobsList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobsListDo
	Assign(attrs ...field.AssignExpr) IJobsListDo
	Joins(fields ...field.RelationField) IJobsListDo
	Preload(fields ...field.RelationField) IJobsListDo
	FirstOrInit() (*model.JobsList, error)
	FirstOrCreate() (*model.JobsList, error)
	FindByPage(offset int, limit int) (result []*model.JobsList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobsListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobsListDo) Debug() IJobsListDo {
	return j.withDO(j.DO.Debug())
}

func (j jobsListDo) WithContext(ctx context.Context) IJobsListDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobsListDo) ReadDB() IJobsListDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobsListDo) WriteDB() IJobsListDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobsListDo) Session(config *gorm.Session) IJobsListDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobsListDo) Clauses(conds ...clause.Expression) IJobsListDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobsListDo) Returning(value interface{}, columns ...string) IJobsListDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobsListDo) Not(conds ...gen.Condition) IJobsListDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobsListDo) Or(conds ...gen.Condition) IJobsListDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobsListDo) Select(conds ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobsListDo) Where(conds ...gen.Condition) IJobsListDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobsListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IJobsListDo {
	return j.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (j jobsListDo) Order(conds ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobsListDo) Distinct(cols ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobsListDo) Omit(cols ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobsListDo) Join(table schema.Tabler, on ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobsListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobsListDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobsListDo) Group(cols ...field.Expr) IJobsListDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobsListDo) Having(conds ...gen.Condition) IJobsListDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobsListDo) Limit(limit int) IJobsListDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobsListDo) Offset(offset int) IJobsListDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobsListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobsListDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobsListDo) Unscoped() IJobsListDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobsListDo) Create(values ...*model.JobsList) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobsListDo) CreateInBatches(values []*model.JobsList, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobsListDo) Save(values ...*model.JobsList) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobsListDo) First() (*model.JobsList, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobsList), nil
	}
}

func (j jobsListDo) Take() (*model.JobsList, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobsList), nil
	}
}

func (j jobsListDo) Last() (*model.JobsList, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobsList), nil
	}
}

func (j jobsListDo) Find() ([]*model.JobsList, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobsList), err
}

func (j jobsListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobsList, err error) {
	buf := make([]*model.JobsList, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobsListDo) FindInBatches(result *[]*model.JobsList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobsListDo) Attrs(attrs ...field.AssignExpr) IJobsListDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobsListDo) Assign(attrs ...field.AssignExpr) IJobsListDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobsListDo) Joins(fields ...field.RelationField) IJobsListDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobsListDo) Preload(fields ...field.RelationField) IJobsListDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobsListDo) FirstOrInit() (*model.JobsList, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobsList), nil
	}
}

func (j jobsListDo) FirstOrCreate() (*model.JobsList, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobsList), nil
	}
}

func (j jobsListDo) FindByPage(offset int, limit int) (result []*model.JobsList, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobsListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobsListDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobsListDo) Delete(models ...*model.JobsList) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobsListDo) withDO(do gen.Dao) *jobsListDo {
	j.DO = *do.(*gen.DO)
	return j
}
