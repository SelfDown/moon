// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newLdapGroup(db *gorm.DB, opts ...gen.DOOption) ldapGroup {
	_ldapGroup := ldapGroup{}

	_ldapGroup.ldapGroupDo.UseDB(db, opts...)
	_ldapGroup.ldapGroupDo.UseModel(&model.LdapGroup{})

	tableName := _ldapGroup.ldapGroupDo.TableName()
	_ldapGroup.ALL = field.NewAsterisk(tableName)
	_ldapGroup.LdapGroupID = field.NewString(tableName, "ldap_group_id")
	_ldapGroup.Name = field.NewString(tableName, "name")

	_ldapGroup.fillFieldMap()

	return _ldapGroup
}

type ldapGroup struct {
	ldapGroupDo

	ALL         field.Asterisk
	LdapGroupID field.String
	Name        field.String

	fieldMap map[string]field.Expr
}

func (l ldapGroup) Table(newTableName string) *ldapGroup {
	l.ldapGroupDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l ldapGroup) As(alias string) *ldapGroup {
	l.ldapGroupDo.DO = *(l.ldapGroupDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *ldapGroup) updateTableName(table string) *ldapGroup {
	l.ALL = field.NewAsterisk(table)
	l.LdapGroupID = field.NewString(table, "ldap_group_id")
	l.Name = field.NewString(table, "name")

	l.fillFieldMap()

	return l
}

func (l *ldapGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *ldapGroup) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["ldap_group_id"] = l.LdapGroupID
	l.fieldMap["name"] = l.Name
}

func (l ldapGroup) clone(db *gorm.DB) ldapGroup {
	l.ldapGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l ldapGroup) replaceDB(db *gorm.DB) ldapGroup {
	l.ldapGroupDo.ReplaceDB(db)
	return l
}

type ldapGroupDo struct{ gen.DO }

type ILdapGroupDo interface {
	gen.SubQuery
	Debug() ILdapGroupDo
	WithContext(ctx context.Context) ILdapGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILdapGroupDo
	WriteDB() ILdapGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILdapGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILdapGroupDo
	Not(conds ...gen.Condition) ILdapGroupDo
	Or(conds ...gen.Condition) ILdapGroupDo
	Select(conds ...field.Expr) ILdapGroupDo
	Where(conds ...gen.Condition) ILdapGroupDo
	Order(conds ...field.Expr) ILdapGroupDo
	Distinct(cols ...field.Expr) ILdapGroupDo
	Omit(cols ...field.Expr) ILdapGroupDo
	Join(table schema.Tabler, on ...field.Expr) ILdapGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILdapGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILdapGroupDo
	Group(cols ...field.Expr) ILdapGroupDo
	Having(conds ...gen.Condition) ILdapGroupDo
	Limit(limit int) ILdapGroupDo
	Offset(offset int) ILdapGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILdapGroupDo
	Unscoped() ILdapGroupDo
	Create(values ...*model.LdapGroup) error
	CreateInBatches(values []*model.LdapGroup, batchSize int) error
	Save(values ...*model.LdapGroup) error
	First() (*model.LdapGroup, error)
	Take() (*model.LdapGroup, error)
	Last() (*model.LdapGroup, error)
	Find() ([]*model.LdapGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LdapGroup, err error)
	FindInBatches(result *[]*model.LdapGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LdapGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILdapGroupDo
	Assign(attrs ...field.AssignExpr) ILdapGroupDo
	Joins(fields ...field.RelationField) ILdapGroupDo
	Preload(fields ...field.RelationField) ILdapGroupDo
	FirstOrInit() (*model.LdapGroup, error)
	FirstOrCreate() (*model.LdapGroup, error)
	FindByPage(offset int, limit int) (result []*model.LdapGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILdapGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l ldapGroupDo) Debug() ILdapGroupDo {
	return l.withDO(l.DO.Debug())
}

func (l ldapGroupDo) WithContext(ctx context.Context) ILdapGroupDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l ldapGroupDo) ReadDB() ILdapGroupDo {
	return l.Clauses(dbresolver.Read)
}

func (l ldapGroupDo) WriteDB() ILdapGroupDo {
	return l.Clauses(dbresolver.Write)
}

func (l ldapGroupDo) Session(config *gorm.Session) ILdapGroupDo {
	return l.withDO(l.DO.Session(config))
}

func (l ldapGroupDo) Clauses(conds ...clause.Expression) ILdapGroupDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l ldapGroupDo) Returning(value interface{}, columns ...string) ILdapGroupDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l ldapGroupDo) Not(conds ...gen.Condition) ILdapGroupDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l ldapGroupDo) Or(conds ...gen.Condition) ILdapGroupDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l ldapGroupDo) Select(conds ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l ldapGroupDo) Where(conds ...gen.Condition) ILdapGroupDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l ldapGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILdapGroupDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l ldapGroupDo) Order(conds ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l ldapGroupDo) Distinct(cols ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l ldapGroupDo) Omit(cols ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l ldapGroupDo) Join(table schema.Tabler, on ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l ldapGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l ldapGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l ldapGroupDo) Group(cols ...field.Expr) ILdapGroupDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l ldapGroupDo) Having(conds ...gen.Condition) ILdapGroupDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l ldapGroupDo) Limit(limit int) ILdapGroupDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l ldapGroupDo) Offset(offset int) ILdapGroupDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l ldapGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILdapGroupDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l ldapGroupDo) Unscoped() ILdapGroupDo {
	return l.withDO(l.DO.Unscoped())
}

func (l ldapGroupDo) Create(values ...*model.LdapGroup) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l ldapGroupDo) CreateInBatches(values []*model.LdapGroup, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l ldapGroupDo) Save(values ...*model.LdapGroup) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l ldapGroupDo) First() (*model.LdapGroup, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LdapGroup), nil
	}
}

func (l ldapGroupDo) Take() (*model.LdapGroup, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LdapGroup), nil
	}
}

func (l ldapGroupDo) Last() (*model.LdapGroup, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LdapGroup), nil
	}
}

func (l ldapGroupDo) Find() ([]*model.LdapGroup, error) {
	result, err := l.DO.Find()
	return result.([]*model.LdapGroup), err
}

func (l ldapGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LdapGroup, err error) {
	buf := make([]*model.LdapGroup, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l ldapGroupDo) FindInBatches(result *[]*model.LdapGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l ldapGroupDo) Attrs(attrs ...field.AssignExpr) ILdapGroupDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l ldapGroupDo) Assign(attrs ...field.AssignExpr) ILdapGroupDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l ldapGroupDo) Joins(fields ...field.RelationField) ILdapGroupDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l ldapGroupDo) Preload(fields ...field.RelationField) ILdapGroupDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l ldapGroupDo) FirstOrInit() (*model.LdapGroup, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LdapGroup), nil
	}
}

func (l ldapGroupDo) FirstOrCreate() (*model.LdapGroup, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LdapGroup), nil
	}
}

func (l ldapGroupDo) FindByPage(offset int, limit int) (result []*model.LdapGroup, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l ldapGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l ldapGroupDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l ldapGroupDo) Delete(models ...*model.LdapGroup) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *ldapGroupDo) withDO(do gen.Dao) *ldapGroupDo {
	l.DO = *do.(*gen.DO)
	return l
}
