// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMTest1(db *gorm.DB, opts ...gen.DOOption) mTest1 {
	_mTest1 := mTest1{}

	_mTest1.mTest1Do.UseDB(db, opts...)
	_mTest1.mTest1Do.UseModel(&model.MTest1{})

	tableName := _mTest1.mTest1Do.TableName()
	_mTest1.ALL = field.NewAsterisk(tableName)
	_mTest1.OWNER = field.NewString(tableName, "OWNER")
	_mTest1.TABLENAME = field.NewString(tableName, "TABLE_NAME")
	_mTest1.QUERY = field.NewString(tableName, "QUERY")
	_mTest1.COMMENTS = field.NewString(tableName, "COMMENTS")

	_mTest1.fillFieldMap()

	return _mTest1
}

type mTest1 struct {
	mTest1Do

	ALL       field.Asterisk
	OWNER     field.String // 骤编码名称
	TABLENAME field.String // 步骤需执行脚本,时间变量占位符表示
	QUERY     field.String // 导出步骤编码名称顺序
	COMMENTS  field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (m mTest1) Table(newTableName string) *mTest1 {
	m.mTest1Do.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mTest1) As(alias string) *mTest1 {
	m.mTest1Do.DO = *(m.mTest1Do.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mTest1) updateTableName(table string) *mTest1 {
	m.ALL = field.NewAsterisk(table)
	m.OWNER = field.NewString(table, "OWNER")
	m.TABLENAME = field.NewString(table, "TABLE_NAME")
	m.QUERY = field.NewString(table, "QUERY")
	m.COMMENTS = field.NewString(table, "COMMENTS")

	m.fillFieldMap()

	return m
}

func (m *mTest1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mTest1) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["OWNER"] = m.OWNER
	m.fieldMap["TABLE_NAME"] = m.TABLENAME
	m.fieldMap["QUERY"] = m.QUERY
	m.fieldMap["COMMENTS"] = m.COMMENTS
}

func (m mTest1) clone(db *gorm.DB) mTest1 {
	m.mTest1Do.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mTest1) replaceDB(db *gorm.DB) mTest1 {
	m.mTest1Do.ReplaceDB(db)
	return m
}

type mTest1Do struct{ gen.DO }

type IMTest1Do interface {
	gen.SubQuery
	Debug() IMTest1Do
	WithContext(ctx context.Context) IMTest1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMTest1Do
	WriteDB() IMTest1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMTest1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMTest1Do
	Not(conds ...gen.Condition) IMTest1Do
	Or(conds ...gen.Condition) IMTest1Do
	Select(conds ...field.Expr) IMTest1Do
	Where(conds ...gen.Condition) IMTest1Do
	Order(conds ...field.Expr) IMTest1Do
	Distinct(cols ...field.Expr) IMTest1Do
	Omit(cols ...field.Expr) IMTest1Do
	Join(table schema.Tabler, on ...field.Expr) IMTest1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IMTest1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IMTest1Do
	Group(cols ...field.Expr) IMTest1Do
	Having(conds ...gen.Condition) IMTest1Do
	Limit(limit int) IMTest1Do
	Offset(offset int) IMTest1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMTest1Do
	Unscoped() IMTest1Do
	Create(values ...*model.MTest1) error
	CreateInBatches(values []*model.MTest1, batchSize int) error
	Save(values ...*model.MTest1) error
	First() (*model.MTest1, error)
	Take() (*model.MTest1, error)
	Last() (*model.MTest1, error)
	Find() ([]*model.MTest1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MTest1, err error)
	FindInBatches(result *[]*model.MTest1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MTest1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMTest1Do
	Assign(attrs ...field.AssignExpr) IMTest1Do
	Joins(fields ...field.RelationField) IMTest1Do
	Preload(fields ...field.RelationField) IMTest1Do
	FirstOrInit() (*model.MTest1, error)
	FirstOrCreate() (*model.MTest1, error)
	FindByPage(offset int, limit int) (result []*model.MTest1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMTest1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mTest1Do) Debug() IMTest1Do {
	return m.withDO(m.DO.Debug())
}

func (m mTest1Do) WithContext(ctx context.Context) IMTest1Do {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mTest1Do) ReadDB() IMTest1Do {
	return m.Clauses(dbresolver.Read)
}

func (m mTest1Do) WriteDB() IMTest1Do {
	return m.Clauses(dbresolver.Write)
}

func (m mTest1Do) Session(config *gorm.Session) IMTest1Do {
	return m.withDO(m.DO.Session(config))
}

func (m mTest1Do) Clauses(conds ...clause.Expression) IMTest1Do {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mTest1Do) Returning(value interface{}, columns ...string) IMTest1Do {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mTest1Do) Not(conds ...gen.Condition) IMTest1Do {
	return m.withDO(m.DO.Not(conds...))
}

func (m mTest1Do) Or(conds ...gen.Condition) IMTest1Do {
	return m.withDO(m.DO.Or(conds...))
}

func (m mTest1Do) Select(conds ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.Select(conds...))
}

func (m mTest1Do) Where(conds ...gen.Condition) IMTest1Do {
	return m.withDO(m.DO.Where(conds...))
}

func (m mTest1Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMTest1Do {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mTest1Do) Order(conds ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.Order(conds...))
}

func (m mTest1Do) Distinct(cols ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mTest1Do) Omit(cols ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mTest1Do) Join(table schema.Tabler, on ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mTest1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mTest1Do) RightJoin(table schema.Tabler, on ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mTest1Do) Group(cols ...field.Expr) IMTest1Do {
	return m.withDO(m.DO.Group(cols...))
}

func (m mTest1Do) Having(conds ...gen.Condition) IMTest1Do {
	return m.withDO(m.DO.Having(conds...))
}

func (m mTest1Do) Limit(limit int) IMTest1Do {
	return m.withDO(m.DO.Limit(limit))
}

func (m mTest1Do) Offset(offset int) IMTest1Do {
	return m.withDO(m.DO.Offset(offset))
}

func (m mTest1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IMTest1Do {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mTest1Do) Unscoped() IMTest1Do {
	return m.withDO(m.DO.Unscoped())
}

func (m mTest1Do) Create(values ...*model.MTest1) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mTest1Do) CreateInBatches(values []*model.MTest1, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mTest1Do) Save(values ...*model.MTest1) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mTest1Do) First() (*model.MTest1, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MTest1), nil
	}
}

func (m mTest1Do) Take() (*model.MTest1, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MTest1), nil
	}
}

func (m mTest1Do) Last() (*model.MTest1, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MTest1), nil
	}
}

func (m mTest1Do) Find() ([]*model.MTest1, error) {
	result, err := m.DO.Find()
	return result.([]*model.MTest1), err
}

func (m mTest1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MTest1, err error) {
	buf := make([]*model.MTest1, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mTest1Do) FindInBatches(result *[]*model.MTest1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mTest1Do) Attrs(attrs ...field.AssignExpr) IMTest1Do {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mTest1Do) Assign(attrs ...field.AssignExpr) IMTest1Do {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mTest1Do) Joins(fields ...field.RelationField) IMTest1Do {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mTest1Do) Preload(fields ...field.RelationField) IMTest1Do {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mTest1Do) FirstOrInit() (*model.MTest1, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MTest1), nil
	}
}

func (m mTest1Do) FirstOrCreate() (*model.MTest1, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MTest1), nil
	}
}

func (m mTest1Do) FindByPage(offset int, limit int) (result []*model.MTest1, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mTest1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mTest1Do) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mTest1Do) Delete(models ...*model.MTest1) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mTest1Do) withDO(do gen.Dao) *mTest1Do {
	m.DO = *do.(*gen.DO)
	return m
}
