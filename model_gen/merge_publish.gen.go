// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMergePublish(db *gorm.DB, opts ...gen.DOOption) mergePublish {
	_mergePublish := mergePublish{}

	_mergePublish.mergePublishDo.UseDB(db, opts...)
	_mergePublish.mergePublishDo.UseModel(&model.MergePublish{})

	tableName := _mergePublish.mergePublishDo.TableName()
	_mergePublish.ALL = field.NewAsterisk(tableName)
	_mergePublish.MergePublishID = field.NewString(tableName, "merge_publish_id")
	_mergePublish.MergeVersion = field.NewString(tableName, "merge_version")
	_mergePublish.MergeName = field.NewString(tableName, "merge_name")
	_mergePublish.PublishStatus = field.NewString(tableName, "publish_status")
	_mergePublish.Comments = field.NewString(tableName, "comments")
	_mergePublish.CreateUser = field.NewString(tableName, "create_user")
	_mergePublish.CreateTime = field.NewString(tableName, "create_time")
	_mergePublish.IsDelete = field.NewString(tableName, "is_delete")

	_mergePublish.fillFieldMap()

	return _mergePublish
}

type mergePublish struct {
	mergePublishDo

	ALL            field.Asterisk
	MergePublishID field.String
	MergeVersion   field.String
	MergeName      field.String
	PublishStatus  field.String
	Comments       field.String
	CreateUser     field.String
	CreateTime     field.String
	IsDelete       field.String

	fieldMap map[string]field.Expr
}

func (m mergePublish) Table(newTableName string) *mergePublish {
	m.mergePublishDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergePublish) As(alias string) *mergePublish {
	m.mergePublishDo.DO = *(m.mergePublishDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergePublish) updateTableName(table string) *mergePublish {
	m.ALL = field.NewAsterisk(table)
	m.MergePublishID = field.NewString(table, "merge_publish_id")
	m.MergeVersion = field.NewString(table, "merge_version")
	m.MergeName = field.NewString(table, "merge_name")
	m.PublishStatus = field.NewString(table, "publish_status")
	m.Comments = field.NewString(table, "comments")
	m.CreateUser = field.NewString(table, "create_user")
	m.CreateTime = field.NewString(table, "create_time")
	m.IsDelete = field.NewString(table, "is_delete")

	m.fillFieldMap()

	return m
}

func (m *mergePublish) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergePublish) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["merge_publish_id"] = m.MergePublishID
	m.fieldMap["merge_version"] = m.MergeVersion
	m.fieldMap["merge_name"] = m.MergeName
	m.fieldMap["publish_status"] = m.PublishStatus
	m.fieldMap["comments"] = m.Comments
	m.fieldMap["create_user"] = m.CreateUser
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["is_delete"] = m.IsDelete
}

func (m mergePublish) clone(db *gorm.DB) mergePublish {
	m.mergePublishDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergePublish) replaceDB(db *gorm.DB) mergePublish {
	m.mergePublishDo.ReplaceDB(db)
	return m
}

type mergePublishDo struct{ gen.DO }

type IMergePublishDo interface {
	gen.SubQuery
	Debug() IMergePublishDo
	WithContext(ctx context.Context) IMergePublishDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergePublishDo
	WriteDB() IMergePublishDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergePublishDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergePublishDo
	Not(conds ...gen.Condition) IMergePublishDo
	Or(conds ...gen.Condition) IMergePublishDo
	Select(conds ...field.Expr) IMergePublishDo
	Where(conds ...gen.Condition) IMergePublishDo
	Order(conds ...field.Expr) IMergePublishDo
	Distinct(cols ...field.Expr) IMergePublishDo
	Omit(cols ...field.Expr) IMergePublishDo
	Join(table schema.Tabler, on ...field.Expr) IMergePublishDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergePublishDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergePublishDo
	Group(cols ...field.Expr) IMergePublishDo
	Having(conds ...gen.Condition) IMergePublishDo
	Limit(limit int) IMergePublishDo
	Offset(offset int) IMergePublishDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergePublishDo
	Unscoped() IMergePublishDo
	Create(values ...*model.MergePublish) error
	CreateInBatches(values []*model.MergePublish, batchSize int) error
	Save(values ...*model.MergePublish) error
	First() (*model.MergePublish, error)
	Take() (*model.MergePublish, error)
	Last() (*model.MergePublish, error)
	Find() ([]*model.MergePublish, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergePublish, err error)
	FindInBatches(result *[]*model.MergePublish, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MergePublish) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergePublishDo
	Assign(attrs ...field.AssignExpr) IMergePublishDo
	Joins(fields ...field.RelationField) IMergePublishDo
	Preload(fields ...field.RelationField) IMergePublishDo
	FirstOrInit() (*model.MergePublish, error)
	FirstOrCreate() (*model.MergePublish, error)
	FindByPage(offset int, limit int) (result []*model.MergePublish, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergePublishDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mergePublishDo) Debug() IMergePublishDo {
	return m.withDO(m.DO.Debug())
}

func (m mergePublishDo) WithContext(ctx context.Context) IMergePublishDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergePublishDo) ReadDB() IMergePublishDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergePublishDo) WriteDB() IMergePublishDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergePublishDo) Session(config *gorm.Session) IMergePublishDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergePublishDo) Clauses(conds ...clause.Expression) IMergePublishDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergePublishDo) Returning(value interface{}, columns ...string) IMergePublishDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergePublishDo) Not(conds ...gen.Condition) IMergePublishDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergePublishDo) Or(conds ...gen.Condition) IMergePublishDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergePublishDo) Select(conds ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergePublishDo) Where(conds ...gen.Condition) IMergePublishDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergePublishDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMergePublishDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mergePublishDo) Order(conds ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergePublishDo) Distinct(cols ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergePublishDo) Omit(cols ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergePublishDo) Join(table schema.Tabler, on ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergePublishDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergePublishDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergePublishDo) Group(cols ...field.Expr) IMergePublishDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergePublishDo) Having(conds ...gen.Condition) IMergePublishDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergePublishDo) Limit(limit int) IMergePublishDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergePublishDo) Offset(offset int) IMergePublishDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergePublishDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergePublishDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergePublishDo) Unscoped() IMergePublishDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergePublishDo) Create(values ...*model.MergePublish) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergePublishDo) CreateInBatches(values []*model.MergePublish, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergePublishDo) Save(values ...*model.MergePublish) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergePublishDo) First() (*model.MergePublish, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublish), nil
	}
}

func (m mergePublishDo) Take() (*model.MergePublish, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublish), nil
	}
}

func (m mergePublishDo) Last() (*model.MergePublish, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublish), nil
	}
}

func (m mergePublishDo) Find() ([]*model.MergePublish, error) {
	result, err := m.DO.Find()
	return result.([]*model.MergePublish), err
}

func (m mergePublishDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergePublish, err error) {
	buf := make([]*model.MergePublish, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergePublishDo) FindInBatches(result *[]*model.MergePublish, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergePublishDo) Attrs(attrs ...field.AssignExpr) IMergePublishDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergePublishDo) Assign(attrs ...field.AssignExpr) IMergePublishDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergePublishDo) Joins(fields ...field.RelationField) IMergePublishDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergePublishDo) Preload(fields ...field.RelationField) IMergePublishDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergePublishDo) FirstOrInit() (*model.MergePublish, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublish), nil
	}
}

func (m mergePublishDo) FirstOrCreate() (*model.MergePublish, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublish), nil
	}
}

func (m mergePublishDo) FindByPage(offset int, limit int) (result []*model.MergePublish, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergePublishDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergePublishDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergePublishDo) Delete(models ...*model.MergePublish) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergePublishDo) withDO(do gen.Dao) *mergePublishDo {
	m.DO = *do.(*gen.DO)
	return m
}
