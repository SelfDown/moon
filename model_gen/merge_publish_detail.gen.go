// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMergePublishDetail(db *gorm.DB, opts ...gen.DOOption) mergePublishDetail {
	_mergePublishDetail := mergePublishDetail{}

	_mergePublishDetail.mergePublishDetailDo.UseDB(db, opts...)
	_mergePublishDetail.mergePublishDetailDo.UseModel(&model.MergePublishDetail{})

	tableName := _mergePublishDetail.mergePublishDetailDo.TableName()
	_mergePublishDetail.ALL = field.NewAsterisk(tableName)
	_mergePublishDetail.MergePublishDetailID = field.NewString(tableName, "merge_publish_detail_id")
	_mergePublishDetail.MergePublishID = field.NewString(tableName, "merge_publish_id")
	_mergePublishDetail.PublishVersion = field.NewString(tableName, "publish_version")
	_mergePublishDetail.CreateUser = field.NewString(tableName, "create_user")
	_mergePublishDetail.CreateTime = field.NewString(tableName, "create_time")

	_mergePublishDetail.fillFieldMap()

	return _mergePublishDetail
}

type mergePublishDetail struct {
	mergePublishDetailDo

	ALL                  field.Asterisk
	MergePublishDetailID field.String
	MergePublishID       field.String
	PublishVersion       field.String
	CreateUser           field.String
	CreateTime           field.String

	fieldMap map[string]field.Expr
}

func (m mergePublishDetail) Table(newTableName string) *mergePublishDetail {
	m.mergePublishDetailDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergePublishDetail) As(alias string) *mergePublishDetail {
	m.mergePublishDetailDo.DO = *(m.mergePublishDetailDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergePublishDetail) updateTableName(table string) *mergePublishDetail {
	m.ALL = field.NewAsterisk(table)
	m.MergePublishDetailID = field.NewString(table, "merge_publish_detail_id")
	m.MergePublishID = field.NewString(table, "merge_publish_id")
	m.PublishVersion = field.NewString(table, "publish_version")
	m.CreateUser = field.NewString(table, "create_user")
	m.CreateTime = field.NewString(table, "create_time")

	m.fillFieldMap()

	return m
}

func (m *mergePublishDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergePublishDetail) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["merge_publish_detail_id"] = m.MergePublishDetailID
	m.fieldMap["merge_publish_id"] = m.MergePublishID
	m.fieldMap["publish_version"] = m.PublishVersion
	m.fieldMap["create_user"] = m.CreateUser
	m.fieldMap["create_time"] = m.CreateTime
}

func (m mergePublishDetail) clone(db *gorm.DB) mergePublishDetail {
	m.mergePublishDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergePublishDetail) replaceDB(db *gorm.DB) mergePublishDetail {
	m.mergePublishDetailDo.ReplaceDB(db)
	return m
}

type mergePublishDetailDo struct{ gen.DO }

type IMergePublishDetailDo interface {
	gen.SubQuery
	Debug() IMergePublishDetailDo
	WithContext(ctx context.Context) IMergePublishDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergePublishDetailDo
	WriteDB() IMergePublishDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergePublishDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergePublishDetailDo
	Not(conds ...gen.Condition) IMergePublishDetailDo
	Or(conds ...gen.Condition) IMergePublishDetailDo
	Select(conds ...field.Expr) IMergePublishDetailDo
	Where(conds ...gen.Condition) IMergePublishDetailDo
	Order(conds ...field.Expr) IMergePublishDetailDo
	Distinct(cols ...field.Expr) IMergePublishDetailDo
	Omit(cols ...field.Expr) IMergePublishDetailDo
	Join(table schema.Tabler, on ...field.Expr) IMergePublishDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergePublishDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergePublishDetailDo
	Group(cols ...field.Expr) IMergePublishDetailDo
	Having(conds ...gen.Condition) IMergePublishDetailDo
	Limit(limit int) IMergePublishDetailDo
	Offset(offset int) IMergePublishDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergePublishDetailDo
	Unscoped() IMergePublishDetailDo
	Create(values ...*model.MergePublishDetail) error
	CreateInBatches(values []*model.MergePublishDetail, batchSize int) error
	Save(values ...*model.MergePublishDetail) error
	First() (*model.MergePublishDetail, error)
	Take() (*model.MergePublishDetail, error)
	Last() (*model.MergePublishDetail, error)
	Find() ([]*model.MergePublishDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergePublishDetail, err error)
	FindInBatches(result *[]*model.MergePublishDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MergePublishDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergePublishDetailDo
	Assign(attrs ...field.AssignExpr) IMergePublishDetailDo
	Joins(fields ...field.RelationField) IMergePublishDetailDo
	Preload(fields ...field.RelationField) IMergePublishDetailDo
	FirstOrInit() (*model.MergePublishDetail, error)
	FirstOrCreate() (*model.MergePublishDetail, error)
	FindByPage(offset int, limit int) (result []*model.MergePublishDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergePublishDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mergePublishDetailDo) Debug() IMergePublishDetailDo {
	return m.withDO(m.DO.Debug())
}

func (m mergePublishDetailDo) WithContext(ctx context.Context) IMergePublishDetailDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergePublishDetailDo) ReadDB() IMergePublishDetailDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergePublishDetailDo) WriteDB() IMergePublishDetailDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergePublishDetailDo) Session(config *gorm.Session) IMergePublishDetailDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergePublishDetailDo) Clauses(conds ...clause.Expression) IMergePublishDetailDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergePublishDetailDo) Returning(value interface{}, columns ...string) IMergePublishDetailDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergePublishDetailDo) Not(conds ...gen.Condition) IMergePublishDetailDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergePublishDetailDo) Or(conds ...gen.Condition) IMergePublishDetailDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergePublishDetailDo) Select(conds ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergePublishDetailDo) Where(conds ...gen.Condition) IMergePublishDetailDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergePublishDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMergePublishDetailDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mergePublishDetailDo) Order(conds ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergePublishDetailDo) Distinct(cols ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergePublishDetailDo) Omit(cols ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergePublishDetailDo) Join(table schema.Tabler, on ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergePublishDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergePublishDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergePublishDetailDo) Group(cols ...field.Expr) IMergePublishDetailDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergePublishDetailDo) Having(conds ...gen.Condition) IMergePublishDetailDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergePublishDetailDo) Limit(limit int) IMergePublishDetailDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergePublishDetailDo) Offset(offset int) IMergePublishDetailDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergePublishDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergePublishDetailDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergePublishDetailDo) Unscoped() IMergePublishDetailDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergePublishDetailDo) Create(values ...*model.MergePublishDetail) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergePublishDetailDo) CreateInBatches(values []*model.MergePublishDetail, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergePublishDetailDo) Save(values ...*model.MergePublishDetail) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergePublishDetailDo) First() (*model.MergePublishDetail, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishDetail), nil
	}
}

func (m mergePublishDetailDo) Take() (*model.MergePublishDetail, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishDetail), nil
	}
}

func (m mergePublishDetailDo) Last() (*model.MergePublishDetail, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishDetail), nil
	}
}

func (m mergePublishDetailDo) Find() ([]*model.MergePublishDetail, error) {
	result, err := m.DO.Find()
	return result.([]*model.MergePublishDetail), err
}

func (m mergePublishDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergePublishDetail, err error) {
	buf := make([]*model.MergePublishDetail, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergePublishDetailDo) FindInBatches(result *[]*model.MergePublishDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergePublishDetailDo) Attrs(attrs ...field.AssignExpr) IMergePublishDetailDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergePublishDetailDo) Assign(attrs ...field.AssignExpr) IMergePublishDetailDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergePublishDetailDo) Joins(fields ...field.RelationField) IMergePublishDetailDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergePublishDetailDo) Preload(fields ...field.RelationField) IMergePublishDetailDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergePublishDetailDo) FirstOrInit() (*model.MergePublishDetail, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishDetail), nil
	}
}

func (m mergePublishDetailDo) FirstOrCreate() (*model.MergePublishDetail, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishDetail), nil
	}
}

func (m mergePublishDetailDo) FindByPage(offset int, limit int) (result []*model.MergePublishDetail, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergePublishDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergePublishDetailDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergePublishDetailDo) Delete(models ...*model.MergePublishDetail) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergePublishDetailDo) withDO(do gen.Dao) *mergePublishDetailDo {
	m.DO = *do.(*gen.DO)
	return m
}
