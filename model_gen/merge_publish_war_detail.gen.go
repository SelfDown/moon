// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMergePublishWarDetail(db *gorm.DB, opts ...gen.DOOption) mergePublishWarDetail {
	_mergePublishWarDetail := mergePublishWarDetail{}

	_mergePublishWarDetail.mergePublishWarDetailDo.UseDB(db, opts...)
	_mergePublishWarDetail.mergePublishWarDetailDo.UseModel(&model.MergePublishWarDetail{})

	tableName := _mergePublishWarDetail.mergePublishWarDetailDo.TableName()
	_mergePublishWarDetail.ALL = field.NewAsterisk(tableName)
	_mergePublishWarDetail.MergePublishWarDetailID = field.NewString(tableName, "merge_publish_war_detail_id")
	_mergePublishWarDetail.MergePublishID = field.NewString(tableName, "merge_publish_id")
	_mergePublishWarDetail.PublishVersion = field.NewString(tableName, "publish_version")
	_mergePublishWarDetail.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_mergePublishWarDetail.WarGroupid = field.NewString(tableName, "war_groupid")
	_mergePublishWarDetail.WarVersion = field.NewString(tableName, "war_version")
	_mergePublishWarDetail.CreateUser = field.NewString(tableName, "create_user")
	_mergePublishWarDetail.CreateTime = field.NewString(tableName, "create_time")

	_mergePublishWarDetail.fillFieldMap()

	return _mergePublishWarDetail
}

type mergePublishWarDetail struct {
	mergePublishWarDetailDo

	ALL                     field.Asterisk
	MergePublishWarDetailID field.String
	MergePublishID          field.String
	PublishVersion          field.String
	WarArtifactid           field.String
	WarGroupid              field.String
	WarVersion              field.String
	CreateUser              field.String
	CreateTime              field.String

	fieldMap map[string]field.Expr
}

func (m mergePublishWarDetail) Table(newTableName string) *mergePublishWarDetail {
	m.mergePublishWarDetailDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergePublishWarDetail) As(alias string) *mergePublishWarDetail {
	m.mergePublishWarDetailDo.DO = *(m.mergePublishWarDetailDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergePublishWarDetail) updateTableName(table string) *mergePublishWarDetail {
	m.ALL = field.NewAsterisk(table)
	m.MergePublishWarDetailID = field.NewString(table, "merge_publish_war_detail_id")
	m.MergePublishID = field.NewString(table, "merge_publish_id")
	m.PublishVersion = field.NewString(table, "publish_version")
	m.WarArtifactid = field.NewString(table, "war_artifactid")
	m.WarGroupid = field.NewString(table, "war_groupid")
	m.WarVersion = field.NewString(table, "war_version")
	m.CreateUser = field.NewString(table, "create_user")
	m.CreateTime = field.NewString(table, "create_time")

	m.fillFieldMap()

	return m
}

func (m *mergePublishWarDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergePublishWarDetail) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["merge_publish_war_detail_id"] = m.MergePublishWarDetailID
	m.fieldMap["merge_publish_id"] = m.MergePublishID
	m.fieldMap["publish_version"] = m.PublishVersion
	m.fieldMap["war_artifactid"] = m.WarArtifactid
	m.fieldMap["war_groupid"] = m.WarGroupid
	m.fieldMap["war_version"] = m.WarVersion
	m.fieldMap["create_user"] = m.CreateUser
	m.fieldMap["create_time"] = m.CreateTime
}

func (m mergePublishWarDetail) clone(db *gorm.DB) mergePublishWarDetail {
	m.mergePublishWarDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergePublishWarDetail) replaceDB(db *gorm.DB) mergePublishWarDetail {
	m.mergePublishWarDetailDo.ReplaceDB(db)
	return m
}

type mergePublishWarDetailDo struct{ gen.DO }

type IMergePublishWarDetailDo interface {
	gen.SubQuery
	Debug() IMergePublishWarDetailDo
	WithContext(ctx context.Context) IMergePublishWarDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergePublishWarDetailDo
	WriteDB() IMergePublishWarDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergePublishWarDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergePublishWarDetailDo
	Not(conds ...gen.Condition) IMergePublishWarDetailDo
	Or(conds ...gen.Condition) IMergePublishWarDetailDo
	Select(conds ...field.Expr) IMergePublishWarDetailDo
	Where(conds ...gen.Condition) IMergePublishWarDetailDo
	Order(conds ...field.Expr) IMergePublishWarDetailDo
	Distinct(cols ...field.Expr) IMergePublishWarDetailDo
	Omit(cols ...field.Expr) IMergePublishWarDetailDo
	Join(table schema.Tabler, on ...field.Expr) IMergePublishWarDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergePublishWarDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergePublishWarDetailDo
	Group(cols ...field.Expr) IMergePublishWarDetailDo
	Having(conds ...gen.Condition) IMergePublishWarDetailDo
	Limit(limit int) IMergePublishWarDetailDo
	Offset(offset int) IMergePublishWarDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergePublishWarDetailDo
	Unscoped() IMergePublishWarDetailDo
	Create(values ...*model.MergePublishWarDetail) error
	CreateInBatches(values []*model.MergePublishWarDetail, batchSize int) error
	Save(values ...*model.MergePublishWarDetail) error
	First() (*model.MergePublishWarDetail, error)
	Take() (*model.MergePublishWarDetail, error)
	Last() (*model.MergePublishWarDetail, error)
	Find() ([]*model.MergePublishWarDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergePublishWarDetail, err error)
	FindInBatches(result *[]*model.MergePublishWarDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MergePublishWarDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergePublishWarDetailDo
	Assign(attrs ...field.AssignExpr) IMergePublishWarDetailDo
	Joins(fields ...field.RelationField) IMergePublishWarDetailDo
	Preload(fields ...field.RelationField) IMergePublishWarDetailDo
	FirstOrInit() (*model.MergePublishWarDetail, error)
	FirstOrCreate() (*model.MergePublishWarDetail, error)
	FindByPage(offset int, limit int) (result []*model.MergePublishWarDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergePublishWarDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mergePublishWarDetailDo) Debug() IMergePublishWarDetailDo {
	return m.withDO(m.DO.Debug())
}

func (m mergePublishWarDetailDo) WithContext(ctx context.Context) IMergePublishWarDetailDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergePublishWarDetailDo) ReadDB() IMergePublishWarDetailDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergePublishWarDetailDo) WriteDB() IMergePublishWarDetailDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergePublishWarDetailDo) Session(config *gorm.Session) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergePublishWarDetailDo) Clauses(conds ...clause.Expression) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergePublishWarDetailDo) Returning(value interface{}, columns ...string) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergePublishWarDetailDo) Not(conds ...gen.Condition) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergePublishWarDetailDo) Or(conds ...gen.Condition) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergePublishWarDetailDo) Select(conds ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergePublishWarDetailDo) Where(conds ...gen.Condition) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergePublishWarDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMergePublishWarDetailDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mergePublishWarDetailDo) Order(conds ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergePublishWarDetailDo) Distinct(cols ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergePublishWarDetailDo) Omit(cols ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergePublishWarDetailDo) Join(table schema.Tabler, on ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergePublishWarDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergePublishWarDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergePublishWarDetailDo) Group(cols ...field.Expr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergePublishWarDetailDo) Having(conds ...gen.Condition) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergePublishWarDetailDo) Limit(limit int) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergePublishWarDetailDo) Offset(offset int) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergePublishWarDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergePublishWarDetailDo) Unscoped() IMergePublishWarDetailDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergePublishWarDetailDo) Create(values ...*model.MergePublishWarDetail) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergePublishWarDetailDo) CreateInBatches(values []*model.MergePublishWarDetail, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergePublishWarDetailDo) Save(values ...*model.MergePublishWarDetail) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergePublishWarDetailDo) First() (*model.MergePublishWarDetail, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishWarDetail), nil
	}
}

func (m mergePublishWarDetailDo) Take() (*model.MergePublishWarDetail, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishWarDetail), nil
	}
}

func (m mergePublishWarDetailDo) Last() (*model.MergePublishWarDetail, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishWarDetail), nil
	}
}

func (m mergePublishWarDetailDo) Find() ([]*model.MergePublishWarDetail, error) {
	result, err := m.DO.Find()
	return result.([]*model.MergePublishWarDetail), err
}

func (m mergePublishWarDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergePublishWarDetail, err error) {
	buf := make([]*model.MergePublishWarDetail, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergePublishWarDetailDo) FindInBatches(result *[]*model.MergePublishWarDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergePublishWarDetailDo) Attrs(attrs ...field.AssignExpr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergePublishWarDetailDo) Assign(attrs ...field.AssignExpr) IMergePublishWarDetailDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergePublishWarDetailDo) Joins(fields ...field.RelationField) IMergePublishWarDetailDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergePublishWarDetailDo) Preload(fields ...field.RelationField) IMergePublishWarDetailDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergePublishWarDetailDo) FirstOrInit() (*model.MergePublishWarDetail, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishWarDetail), nil
	}
}

func (m mergePublishWarDetailDo) FirstOrCreate() (*model.MergePublishWarDetail, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergePublishWarDetail), nil
	}
}

func (m mergePublishWarDetailDo) FindByPage(offset int, limit int) (result []*model.MergePublishWarDetail, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergePublishWarDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergePublishWarDetailDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergePublishWarDetailDo) Delete(models ...*model.MergePublishWarDetail) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergePublishWarDetailDo) withDO(do gen.Dao) *mergePublishWarDetailDo {
	m.DO = *do.(*gen.DO)
	return m
}
