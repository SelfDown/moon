// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMergeRequestHistory(db *gorm.DB, opts ...gen.DOOption) mergeRequestHistory {
	_mergeRequestHistory := mergeRequestHistory{}

	_mergeRequestHistory.mergeRequestHistoryDo.UseDB(db, opts...)
	_mergeRequestHistory.mergeRequestHistoryDo.UseModel(&model.MergeRequestHistory{})

	tableName := _mergeRequestHistory.mergeRequestHistoryDo.TableName()
	_mergeRequestHistory.ALL = field.NewAsterisk(tableName)
	_mergeRequestHistory.MergeRequestHistoryID = field.NewString(tableName, "merge_request_history_id")
	_mergeRequestHistory.GitlabURL = field.NewString(tableName, "gitlab_url")
	_mergeRequestHistory.ProjectID = field.NewString(tableName, "project_id")
	_mergeRequestHistory.FromBranch = field.NewString(tableName, "from_branch")
	_mergeRequestHistory.ToBranch = field.NewString(tableName, "to_branch")
	_mergeRequestHistory.MergeRequestID = field.NewString(tableName, "merge_request_id")
	_mergeRequestHistory.Status = field.NewString(tableName, "status")
	_mergeRequestHistory.Message = field.NewString(tableName, "message")
	_mergeRequestHistory.CreateUser = field.NewString(tableName, "create_user")
	_mergeRequestHistory.CreateTime = field.NewString(tableName, "create_time")

	_mergeRequestHistory.fillFieldMap()

	return _mergeRequestHistory
}

type mergeRequestHistory struct {
	mergeRequestHistoryDo

	ALL                   field.Asterisk
	MergeRequestHistoryID field.String
	GitlabURL             field.String
	ProjectID             field.String
	FromBranch            field.String
	ToBranch              field.String
	MergeRequestID        field.String // mr 的id
	Status                field.String // 状态
	Message               field.String // 日志
	CreateUser            field.String // 用户ID
	CreateTime            field.String

	fieldMap map[string]field.Expr
}

func (m mergeRequestHistory) Table(newTableName string) *mergeRequestHistory {
	m.mergeRequestHistoryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mergeRequestHistory) As(alias string) *mergeRequestHistory {
	m.mergeRequestHistoryDo.DO = *(m.mergeRequestHistoryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mergeRequestHistory) updateTableName(table string) *mergeRequestHistory {
	m.ALL = field.NewAsterisk(table)
	m.MergeRequestHistoryID = field.NewString(table, "merge_request_history_id")
	m.GitlabURL = field.NewString(table, "gitlab_url")
	m.ProjectID = field.NewString(table, "project_id")
	m.FromBranch = field.NewString(table, "from_branch")
	m.ToBranch = field.NewString(table, "to_branch")
	m.MergeRequestID = field.NewString(table, "merge_request_id")
	m.Status = field.NewString(table, "status")
	m.Message = field.NewString(table, "message")
	m.CreateUser = field.NewString(table, "create_user")
	m.CreateTime = field.NewString(table, "create_time")

	m.fillFieldMap()

	return m
}

func (m *mergeRequestHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mergeRequestHistory) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["merge_request_history_id"] = m.MergeRequestHistoryID
	m.fieldMap["gitlab_url"] = m.GitlabURL
	m.fieldMap["project_id"] = m.ProjectID
	m.fieldMap["from_branch"] = m.FromBranch
	m.fieldMap["to_branch"] = m.ToBranch
	m.fieldMap["merge_request_id"] = m.MergeRequestID
	m.fieldMap["status"] = m.Status
	m.fieldMap["message"] = m.Message
	m.fieldMap["create_user"] = m.CreateUser
	m.fieldMap["create_time"] = m.CreateTime
}

func (m mergeRequestHistory) clone(db *gorm.DB) mergeRequestHistory {
	m.mergeRequestHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mergeRequestHistory) replaceDB(db *gorm.DB) mergeRequestHistory {
	m.mergeRequestHistoryDo.ReplaceDB(db)
	return m
}

type mergeRequestHistoryDo struct{ gen.DO }

type IMergeRequestHistoryDo interface {
	gen.SubQuery
	Debug() IMergeRequestHistoryDo
	WithContext(ctx context.Context) IMergeRequestHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMergeRequestHistoryDo
	WriteDB() IMergeRequestHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMergeRequestHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMergeRequestHistoryDo
	Not(conds ...gen.Condition) IMergeRequestHistoryDo
	Or(conds ...gen.Condition) IMergeRequestHistoryDo
	Select(conds ...field.Expr) IMergeRequestHistoryDo
	Where(conds ...gen.Condition) IMergeRequestHistoryDo
	Order(conds ...field.Expr) IMergeRequestHistoryDo
	Distinct(cols ...field.Expr) IMergeRequestHistoryDo
	Omit(cols ...field.Expr) IMergeRequestHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IMergeRequestHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMergeRequestHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMergeRequestHistoryDo
	Group(cols ...field.Expr) IMergeRequestHistoryDo
	Having(conds ...gen.Condition) IMergeRequestHistoryDo
	Limit(limit int) IMergeRequestHistoryDo
	Offset(offset int) IMergeRequestHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeRequestHistoryDo
	Unscoped() IMergeRequestHistoryDo
	Create(values ...*model.MergeRequestHistory) error
	CreateInBatches(values []*model.MergeRequestHistory, batchSize int) error
	Save(values ...*model.MergeRequestHistory) error
	First() (*model.MergeRequestHistory, error)
	Take() (*model.MergeRequestHistory, error)
	Last() (*model.MergeRequestHistory, error)
	Find() ([]*model.MergeRequestHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergeRequestHistory, err error)
	FindInBatches(result *[]*model.MergeRequestHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MergeRequestHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMergeRequestHistoryDo
	Assign(attrs ...field.AssignExpr) IMergeRequestHistoryDo
	Joins(fields ...field.RelationField) IMergeRequestHistoryDo
	Preload(fields ...field.RelationField) IMergeRequestHistoryDo
	FirstOrInit() (*model.MergeRequestHistory, error)
	FirstOrCreate() (*model.MergeRequestHistory, error)
	FindByPage(offset int, limit int) (result []*model.MergeRequestHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMergeRequestHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mergeRequestHistoryDo) Debug() IMergeRequestHistoryDo {
	return m.withDO(m.DO.Debug())
}

func (m mergeRequestHistoryDo) WithContext(ctx context.Context) IMergeRequestHistoryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mergeRequestHistoryDo) ReadDB() IMergeRequestHistoryDo {
	return m.Clauses(dbresolver.Read)
}

func (m mergeRequestHistoryDo) WriteDB() IMergeRequestHistoryDo {
	return m.Clauses(dbresolver.Write)
}

func (m mergeRequestHistoryDo) Session(config *gorm.Session) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Session(config))
}

func (m mergeRequestHistoryDo) Clauses(conds ...clause.Expression) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mergeRequestHistoryDo) Returning(value interface{}, columns ...string) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mergeRequestHistoryDo) Not(conds ...gen.Condition) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mergeRequestHistoryDo) Or(conds ...gen.Condition) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mergeRequestHistoryDo) Select(conds ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mergeRequestHistoryDo) Where(conds ...gen.Condition) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mergeRequestHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMergeRequestHistoryDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mergeRequestHistoryDo) Order(conds ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mergeRequestHistoryDo) Distinct(cols ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mergeRequestHistoryDo) Omit(cols ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mergeRequestHistoryDo) Join(table schema.Tabler, on ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mergeRequestHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mergeRequestHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mergeRequestHistoryDo) Group(cols ...field.Expr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mergeRequestHistoryDo) Having(conds ...gen.Condition) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mergeRequestHistoryDo) Limit(limit int) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mergeRequestHistoryDo) Offset(offset int) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mergeRequestHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mergeRequestHistoryDo) Unscoped() IMergeRequestHistoryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mergeRequestHistoryDo) Create(values ...*model.MergeRequestHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mergeRequestHistoryDo) CreateInBatches(values []*model.MergeRequestHistory, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mergeRequestHistoryDo) Save(values ...*model.MergeRequestHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mergeRequestHistoryDo) First() (*model.MergeRequestHistory, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergeRequestHistory), nil
	}
}

func (m mergeRequestHistoryDo) Take() (*model.MergeRequestHistory, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergeRequestHistory), nil
	}
}

func (m mergeRequestHistoryDo) Last() (*model.MergeRequestHistory, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergeRequestHistory), nil
	}
}

func (m mergeRequestHistoryDo) Find() ([]*model.MergeRequestHistory, error) {
	result, err := m.DO.Find()
	return result.([]*model.MergeRequestHistory), err
}

func (m mergeRequestHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MergeRequestHistory, err error) {
	buf := make([]*model.MergeRequestHistory, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mergeRequestHistoryDo) FindInBatches(result *[]*model.MergeRequestHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mergeRequestHistoryDo) Attrs(attrs ...field.AssignExpr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mergeRequestHistoryDo) Assign(attrs ...field.AssignExpr) IMergeRequestHistoryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mergeRequestHistoryDo) Joins(fields ...field.RelationField) IMergeRequestHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mergeRequestHistoryDo) Preload(fields ...field.RelationField) IMergeRequestHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mergeRequestHistoryDo) FirstOrInit() (*model.MergeRequestHistory, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergeRequestHistory), nil
	}
}

func (m mergeRequestHistoryDo) FirstOrCreate() (*model.MergeRequestHistory, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MergeRequestHistory), nil
	}
}

func (m mergeRequestHistoryDo) FindByPage(offset int, limit int) (result []*model.MergeRequestHistory, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mergeRequestHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mergeRequestHistoryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mergeRequestHistoryDo) Delete(models ...*model.MergeRequestHistory) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mergeRequestHistoryDo) withDO(do gen.Dao) *mergeRequestHistoryDo {
	m.DO = *do.(*gen.DO)
	return m
}
