// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMessageSendLog(db *gorm.DB, opts ...gen.DOOption) messageSendLog {
	_messageSendLog := messageSendLog{}

	_messageSendLog.messageSendLogDo.UseDB(db, opts...)
	_messageSendLog.messageSendLogDo.UseModel(&model.MessageSendLog{})

	tableName := _messageSendLog.messageSendLogDo.TableName()
	_messageSendLog.ALL = field.NewAsterisk(tableName)
	_messageSendLog.MessageSendLogID = field.NewString(tableName, "message_send_log_id")
	_messageSendLog.SendTime = field.NewTime(tableName, "send_time")
	_messageSendLog.SendUserid = field.NewString(tableName, "send_userid")
	_messageSendLog.SendContent = field.NewString(tableName, "send_content")
	_messageSendLog.MessageTargetID = field.NewString(tableName, "message_target_id")
	_messageSendLog.SendStatu = field.NewString(tableName, "send_statu")
	_messageSendLog.CreateTime = field.NewTime(tableName, "create_time")
	_messageSendLog.ModifyTime = field.NewTime(tableName, "modify_time")
	_messageSendLog.Comments = field.NewString(tableName, "comments")

	_messageSendLog.fillFieldMap()

	return _messageSendLog
}

type messageSendLog struct {
	messageSendLogDo

	ALL              field.Asterisk
	MessageSendLogID field.String
	SendTime         field.Time   // 发送消息时间
	SendUserid       field.String // 执行发送消息的用户ID
	SendContent      field.String // 发送消息的内容
	MessageTargetID  field.String // 发送对象ID
	SendStatu        field.String // 1 已发送 0未发送
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (m messageSendLog) Table(newTableName string) *messageSendLog {
	m.messageSendLogDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageSendLog) As(alias string) *messageSendLog {
	m.messageSendLogDo.DO = *(m.messageSendLogDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageSendLog) updateTableName(table string) *messageSendLog {
	m.ALL = field.NewAsterisk(table)
	m.MessageSendLogID = field.NewString(table, "message_send_log_id")
	m.SendTime = field.NewTime(table, "send_time")
	m.SendUserid = field.NewString(table, "send_userid")
	m.SendContent = field.NewString(table, "send_content")
	m.MessageTargetID = field.NewString(table, "message_target_id")
	m.SendStatu = field.NewString(table, "send_statu")
	m.CreateTime = field.NewTime(table, "create_time")
	m.ModifyTime = field.NewTime(table, "modify_time")
	m.Comments = field.NewString(table, "comments")

	m.fillFieldMap()

	return m
}

func (m *messageSendLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageSendLog) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["message_send_log_id"] = m.MessageSendLogID
	m.fieldMap["send_time"] = m.SendTime
	m.fieldMap["send_userid"] = m.SendUserid
	m.fieldMap["send_content"] = m.SendContent
	m.fieldMap["message_target_id"] = m.MessageTargetID
	m.fieldMap["send_statu"] = m.SendStatu
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["modify_time"] = m.ModifyTime
	m.fieldMap["comments"] = m.Comments
}

func (m messageSendLog) clone(db *gorm.DB) messageSendLog {
	m.messageSendLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageSendLog) replaceDB(db *gorm.DB) messageSendLog {
	m.messageSendLogDo.ReplaceDB(db)
	return m
}

type messageSendLogDo struct{ gen.DO }

type IMessageSendLogDo interface {
	gen.SubQuery
	Debug() IMessageSendLogDo
	WithContext(ctx context.Context) IMessageSendLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageSendLogDo
	WriteDB() IMessageSendLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageSendLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageSendLogDo
	Not(conds ...gen.Condition) IMessageSendLogDo
	Or(conds ...gen.Condition) IMessageSendLogDo
	Select(conds ...field.Expr) IMessageSendLogDo
	Where(conds ...gen.Condition) IMessageSendLogDo
	Order(conds ...field.Expr) IMessageSendLogDo
	Distinct(cols ...field.Expr) IMessageSendLogDo
	Omit(cols ...field.Expr) IMessageSendLogDo
	Join(table schema.Tabler, on ...field.Expr) IMessageSendLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageSendLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageSendLogDo
	Group(cols ...field.Expr) IMessageSendLogDo
	Having(conds ...gen.Condition) IMessageSendLogDo
	Limit(limit int) IMessageSendLogDo
	Offset(offset int) IMessageSendLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageSendLogDo
	Unscoped() IMessageSendLogDo
	Create(values ...*model.MessageSendLog) error
	CreateInBatches(values []*model.MessageSendLog, batchSize int) error
	Save(values ...*model.MessageSendLog) error
	First() (*model.MessageSendLog, error)
	Take() (*model.MessageSendLog, error)
	Last() (*model.MessageSendLog, error)
	Find() ([]*model.MessageSendLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageSendLog, err error)
	FindInBatches(result *[]*model.MessageSendLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageSendLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageSendLogDo
	Assign(attrs ...field.AssignExpr) IMessageSendLogDo
	Joins(fields ...field.RelationField) IMessageSendLogDo
	Preload(fields ...field.RelationField) IMessageSendLogDo
	FirstOrInit() (*model.MessageSendLog, error)
	FirstOrCreate() (*model.MessageSendLog, error)
	FindByPage(offset int, limit int) (result []*model.MessageSendLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageSendLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageSendLogDo) Debug() IMessageSendLogDo {
	return m.withDO(m.DO.Debug())
}

func (m messageSendLogDo) WithContext(ctx context.Context) IMessageSendLogDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageSendLogDo) ReadDB() IMessageSendLogDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageSendLogDo) WriteDB() IMessageSendLogDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageSendLogDo) Session(config *gorm.Session) IMessageSendLogDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageSendLogDo) Clauses(conds ...clause.Expression) IMessageSendLogDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageSendLogDo) Returning(value interface{}, columns ...string) IMessageSendLogDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageSendLogDo) Not(conds ...gen.Condition) IMessageSendLogDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageSendLogDo) Or(conds ...gen.Condition) IMessageSendLogDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageSendLogDo) Select(conds ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageSendLogDo) Where(conds ...gen.Condition) IMessageSendLogDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageSendLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMessageSendLogDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m messageSendLogDo) Order(conds ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageSendLogDo) Distinct(cols ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageSendLogDo) Omit(cols ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageSendLogDo) Join(table schema.Tabler, on ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageSendLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageSendLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageSendLogDo) Group(cols ...field.Expr) IMessageSendLogDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageSendLogDo) Having(conds ...gen.Condition) IMessageSendLogDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageSendLogDo) Limit(limit int) IMessageSendLogDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageSendLogDo) Offset(offset int) IMessageSendLogDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageSendLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageSendLogDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageSendLogDo) Unscoped() IMessageSendLogDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageSendLogDo) Create(values ...*model.MessageSendLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageSendLogDo) CreateInBatches(values []*model.MessageSendLog, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageSendLogDo) Save(values ...*model.MessageSendLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageSendLogDo) First() (*model.MessageSendLog, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSendLog), nil
	}
}

func (m messageSendLogDo) Take() (*model.MessageSendLog, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSendLog), nil
	}
}

func (m messageSendLogDo) Last() (*model.MessageSendLog, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSendLog), nil
	}
}

func (m messageSendLogDo) Find() ([]*model.MessageSendLog, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageSendLog), err
}

func (m messageSendLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageSendLog, err error) {
	buf := make([]*model.MessageSendLog, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageSendLogDo) FindInBatches(result *[]*model.MessageSendLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageSendLogDo) Attrs(attrs ...field.AssignExpr) IMessageSendLogDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageSendLogDo) Assign(attrs ...field.AssignExpr) IMessageSendLogDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageSendLogDo) Joins(fields ...field.RelationField) IMessageSendLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageSendLogDo) Preload(fields ...field.RelationField) IMessageSendLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageSendLogDo) FirstOrInit() (*model.MessageSendLog, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSendLog), nil
	}
}

func (m messageSendLogDo) FirstOrCreate() (*model.MessageSendLog, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSendLog), nil
	}
}

func (m messageSendLogDo) FindByPage(offset int, limit int) (result []*model.MessageSendLog, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageSendLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageSendLogDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageSendLogDo) Delete(models ...*model.MessageSendLog) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageSendLogDo) withDO(do gen.Dao) *messageSendLogDo {
	m.DO = *do.(*gen.DO)
	return m
}
