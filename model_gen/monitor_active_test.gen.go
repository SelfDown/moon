// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorActiveTest(db *gorm.DB, opts ...gen.DOOption) monitorActiveTest {
	_monitorActiveTest := monitorActiveTest{}

	_monitorActiveTest.monitorActiveTestDo.UseDB(db, opts...)
	_monitorActiveTest.monitorActiveTestDo.UseModel(&model.MonitorActiveTest{})

	tableName := _monitorActiveTest.monitorActiveTestDo.TableName()
	_monitorActiveTest.ALL = field.NewAsterisk(tableName)
	_monitorActiveTest.ActiveTestID = field.NewString(tableName, "active_test_id")
	_monitorActiveTest.HostID = field.NewString(tableName, "host_id")
	_monitorActiveTest.HostName = field.NewString(tableName, "host_name")
	_monitorActiveTest.ActiveTestName = field.NewString(tableName, "active_test_name")
	_monitorActiveTest.TestIP = field.NewString(tableName, "test_ip")
	_monitorActiveTest.TestPort = field.NewString(tableName, "test_port")
	_monitorActiveTest.TestURL = field.NewString(tableName, "test_url")
	_monitorActiveTest.TestSql = field.NewString(tableName, "test_sql")
	_monitorActiveTest.TestType = field.NewString(tableName, "test_type")
	_monitorActiveTest.AddTime = field.NewTime(tableName, "add_time")
	_monitorActiveTest.Applications = field.NewString(tableName, "applications")
	_monitorActiveTest.Delay = field.NewString(tableName, "delay")
	_monitorActiveTest.ValueType = field.NewString(tableName, "value_type")
	_monitorActiveTest.TriggerID = field.NewString(tableName, "trigger_id")
	_monitorActiveTest.RequestMethod = field.NewString(tableName, "request_method")
	_monitorActiveTest.TriggerName = field.NewString(tableName, "trigger_name")
	_monitorActiveTest.Key = field.NewString(tableName, "key_")
	_monitorActiveTest.OutputFormat = field.NewString(tableName, "output_format")
	_monitorActiveTest.ItemID = field.NewString(tableName, "item_id")
	_monitorActiveTest.TestInstallSoftID = field.NewString(tableName, "test_install_soft_id")
	_monitorActiveTest.TestProxyParam = field.NewString(tableName, "test_proxy_param")
	_monitorActiveTest.TestSqlCode = field.NewString(tableName, "test_sql_code")
	_monitorActiveTest.TestSqlDbuser = field.NewString(tableName, "test_sql_dbuser")
	_monitorActiveTest.TestSqlDbpwd = field.NewString(tableName, "test_sql_dbpwd")
	_monitorActiveTest.SoftUserID = field.NewString(tableName, "soft_user_id")
	_monitorActiveTest.ProjectCode = field.NewString(tableName, "project_code")
	_monitorActiveTest.ActiveTestTarget = field.NewString(tableName, "active_test_target")
	_monitorActiveTest.AlertitemCode = field.NewString(tableName, "alertitem_code")

	_monitorActiveTest.fillFieldMap()

	return _monitorActiveTest
}

type monitorActiveTest struct {
	monitorActiveTestDo

	ALL               field.Asterisk
	ActiveTestID      field.String
	HostID            field.String
	HostName          field.String
	ActiveTestName    field.String
	TestIP            field.String
	TestPort          field.String
	TestURL           field.String
	TestSql           field.String
	TestType          field.String
	AddTime           field.Time
	Applications      field.String
	Delay             field.String
	ValueType         field.String
	TriggerID         field.String
	RequestMethod     field.String
	TriggerName       field.String
	Key               field.String
	OutputFormat      field.String
	ItemID            field.String
	TestInstallSoftID field.String
	TestProxyParam    field.String
	TestSqlCode       field.String
	TestSqlDbuser     field.String
	TestSqlDbpwd      field.String
	SoftUserID        field.String
	ProjectCode       field.String
	ActiveTestTarget  field.String
	AlertitemCode     field.String

	fieldMap map[string]field.Expr
}

func (m monitorActiveTest) Table(newTableName string) *monitorActiveTest {
	m.monitorActiveTestDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorActiveTest) As(alias string) *monitorActiveTest {
	m.monitorActiveTestDo.DO = *(m.monitorActiveTestDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorActiveTest) updateTableName(table string) *monitorActiveTest {
	m.ALL = field.NewAsterisk(table)
	m.ActiveTestID = field.NewString(table, "active_test_id")
	m.HostID = field.NewString(table, "host_id")
	m.HostName = field.NewString(table, "host_name")
	m.ActiveTestName = field.NewString(table, "active_test_name")
	m.TestIP = field.NewString(table, "test_ip")
	m.TestPort = field.NewString(table, "test_port")
	m.TestURL = field.NewString(table, "test_url")
	m.TestSql = field.NewString(table, "test_sql")
	m.TestType = field.NewString(table, "test_type")
	m.AddTime = field.NewTime(table, "add_time")
	m.Applications = field.NewString(table, "applications")
	m.Delay = field.NewString(table, "delay")
	m.ValueType = field.NewString(table, "value_type")
	m.TriggerID = field.NewString(table, "trigger_id")
	m.RequestMethod = field.NewString(table, "request_method")
	m.TriggerName = field.NewString(table, "trigger_name")
	m.Key = field.NewString(table, "key_")
	m.OutputFormat = field.NewString(table, "output_format")
	m.ItemID = field.NewString(table, "item_id")
	m.TestInstallSoftID = field.NewString(table, "test_install_soft_id")
	m.TestProxyParam = field.NewString(table, "test_proxy_param")
	m.TestSqlCode = field.NewString(table, "test_sql_code")
	m.TestSqlDbuser = field.NewString(table, "test_sql_dbuser")
	m.TestSqlDbpwd = field.NewString(table, "test_sql_dbpwd")
	m.SoftUserID = field.NewString(table, "soft_user_id")
	m.ProjectCode = field.NewString(table, "project_code")
	m.ActiveTestTarget = field.NewString(table, "active_test_target")
	m.AlertitemCode = field.NewString(table, "alertitem_code")

	m.fillFieldMap()

	return m
}

func (m *monitorActiveTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorActiveTest) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 28)
	m.fieldMap["active_test_id"] = m.ActiveTestID
	m.fieldMap["host_id"] = m.HostID
	m.fieldMap["host_name"] = m.HostName
	m.fieldMap["active_test_name"] = m.ActiveTestName
	m.fieldMap["test_ip"] = m.TestIP
	m.fieldMap["test_port"] = m.TestPort
	m.fieldMap["test_url"] = m.TestURL
	m.fieldMap["test_sql"] = m.TestSql
	m.fieldMap["test_type"] = m.TestType
	m.fieldMap["add_time"] = m.AddTime
	m.fieldMap["applications"] = m.Applications
	m.fieldMap["delay"] = m.Delay
	m.fieldMap["value_type"] = m.ValueType
	m.fieldMap["trigger_id"] = m.TriggerID
	m.fieldMap["request_method"] = m.RequestMethod
	m.fieldMap["trigger_name"] = m.TriggerName
	m.fieldMap["key_"] = m.Key
	m.fieldMap["output_format"] = m.OutputFormat
	m.fieldMap["item_id"] = m.ItemID
	m.fieldMap["test_install_soft_id"] = m.TestInstallSoftID
	m.fieldMap["test_proxy_param"] = m.TestProxyParam
	m.fieldMap["test_sql_code"] = m.TestSqlCode
	m.fieldMap["test_sql_dbuser"] = m.TestSqlDbuser
	m.fieldMap["test_sql_dbpwd"] = m.TestSqlDbpwd
	m.fieldMap["soft_user_id"] = m.SoftUserID
	m.fieldMap["project_code"] = m.ProjectCode
	m.fieldMap["active_test_target"] = m.ActiveTestTarget
	m.fieldMap["alertitem_code"] = m.AlertitemCode
}

func (m monitorActiveTest) clone(db *gorm.DB) monitorActiveTest {
	m.monitorActiveTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorActiveTest) replaceDB(db *gorm.DB) monitorActiveTest {
	m.monitorActiveTestDo.ReplaceDB(db)
	return m
}

type monitorActiveTestDo struct{ gen.DO }

type IMonitorActiveTestDo interface {
	gen.SubQuery
	Debug() IMonitorActiveTestDo
	WithContext(ctx context.Context) IMonitorActiveTestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorActiveTestDo
	WriteDB() IMonitorActiveTestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorActiveTestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorActiveTestDo
	Not(conds ...gen.Condition) IMonitorActiveTestDo
	Or(conds ...gen.Condition) IMonitorActiveTestDo
	Select(conds ...field.Expr) IMonitorActiveTestDo
	Where(conds ...gen.Condition) IMonitorActiveTestDo
	Order(conds ...field.Expr) IMonitorActiveTestDo
	Distinct(cols ...field.Expr) IMonitorActiveTestDo
	Omit(cols ...field.Expr) IMonitorActiveTestDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorActiveTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorActiveTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorActiveTestDo
	Group(cols ...field.Expr) IMonitorActiveTestDo
	Having(conds ...gen.Condition) IMonitorActiveTestDo
	Limit(limit int) IMonitorActiveTestDo
	Offset(offset int) IMonitorActiveTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorActiveTestDo
	Unscoped() IMonitorActiveTestDo
	Create(values ...*model.MonitorActiveTest) error
	CreateInBatches(values []*model.MonitorActiveTest, batchSize int) error
	Save(values ...*model.MonitorActiveTest) error
	First() (*model.MonitorActiveTest, error)
	Take() (*model.MonitorActiveTest, error)
	Last() (*model.MonitorActiveTest, error)
	Find() ([]*model.MonitorActiveTest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorActiveTest, err error)
	FindInBatches(result *[]*model.MonitorActiveTest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorActiveTest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorActiveTestDo
	Assign(attrs ...field.AssignExpr) IMonitorActiveTestDo
	Joins(fields ...field.RelationField) IMonitorActiveTestDo
	Preload(fields ...field.RelationField) IMonitorActiveTestDo
	FirstOrInit() (*model.MonitorActiveTest, error)
	FirstOrCreate() (*model.MonitorActiveTest, error)
	FindByPage(offset int, limit int) (result []*model.MonitorActiveTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorActiveTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorActiveTestDo) Debug() IMonitorActiveTestDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorActiveTestDo) WithContext(ctx context.Context) IMonitorActiveTestDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorActiveTestDo) ReadDB() IMonitorActiveTestDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorActiveTestDo) WriteDB() IMonitorActiveTestDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorActiveTestDo) Session(config *gorm.Session) IMonitorActiveTestDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorActiveTestDo) Clauses(conds ...clause.Expression) IMonitorActiveTestDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorActiveTestDo) Returning(value interface{}, columns ...string) IMonitorActiveTestDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorActiveTestDo) Not(conds ...gen.Condition) IMonitorActiveTestDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorActiveTestDo) Or(conds ...gen.Condition) IMonitorActiveTestDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorActiveTestDo) Select(conds ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorActiveTestDo) Where(conds ...gen.Condition) IMonitorActiveTestDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorActiveTestDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorActiveTestDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorActiveTestDo) Order(conds ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorActiveTestDo) Distinct(cols ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorActiveTestDo) Omit(cols ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorActiveTestDo) Join(table schema.Tabler, on ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorActiveTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorActiveTestDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorActiveTestDo) Group(cols ...field.Expr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorActiveTestDo) Having(conds ...gen.Condition) IMonitorActiveTestDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorActiveTestDo) Limit(limit int) IMonitorActiveTestDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorActiveTestDo) Offset(offset int) IMonitorActiveTestDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorActiveTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorActiveTestDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorActiveTestDo) Unscoped() IMonitorActiveTestDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorActiveTestDo) Create(values ...*model.MonitorActiveTest) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorActiveTestDo) CreateInBatches(values []*model.MonitorActiveTest, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorActiveTestDo) Save(values ...*model.MonitorActiveTest) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorActiveTestDo) First() (*model.MonitorActiveTest, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorActiveTest), nil
	}
}

func (m monitorActiveTestDo) Take() (*model.MonitorActiveTest, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorActiveTest), nil
	}
}

func (m monitorActiveTestDo) Last() (*model.MonitorActiveTest, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorActiveTest), nil
	}
}

func (m monitorActiveTestDo) Find() ([]*model.MonitorActiveTest, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorActiveTest), err
}

func (m monitorActiveTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorActiveTest, err error) {
	buf := make([]*model.MonitorActiveTest, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorActiveTestDo) FindInBatches(result *[]*model.MonitorActiveTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorActiveTestDo) Attrs(attrs ...field.AssignExpr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorActiveTestDo) Assign(attrs ...field.AssignExpr) IMonitorActiveTestDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorActiveTestDo) Joins(fields ...field.RelationField) IMonitorActiveTestDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorActiveTestDo) Preload(fields ...field.RelationField) IMonitorActiveTestDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorActiveTestDo) FirstOrInit() (*model.MonitorActiveTest, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorActiveTest), nil
	}
}

func (m monitorActiveTestDo) FirstOrCreate() (*model.MonitorActiveTest, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorActiveTest), nil
	}
}

func (m monitorActiveTestDo) FindByPage(offset int, limit int) (result []*model.MonitorActiveTest, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorActiveTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorActiveTestDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorActiveTestDo) Delete(models ...*model.MonitorActiveTest) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorActiveTestDo) withDO(do gen.Dao) *monitorActiveTestDo {
	m.DO = *do.(*gen.DO)
	return m
}
