// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorAgent(db *gorm.DB, opts ...gen.DOOption) monitorAgent {
	_monitorAgent := monitorAgent{}

	_monitorAgent.monitorAgentDo.UseDB(db, opts...)
	_monitorAgent.monitorAgentDo.UseModel(&model.MonitorAgent{})

	tableName := _monitorAgent.monitorAgentDo.TableName()
	_monitorAgent.ALL = field.NewAsterisk(tableName)
	_monitorAgent.AgentID = field.NewString(tableName, "agent_id")
	_monitorAgent.ServerID = field.NewString(tableName, "server_id")
	_monitorAgent.AgentStatus = field.NewString(tableName, "agent_status")
	_monitorAgent.MonitorAgentID = field.NewString(tableName, "monitor_agent_id")
	_monitorAgent.OperateTime = field.NewTime(tableName, "operate_time")
	_monitorAgent.OperateUser = field.NewString(tableName, "operate_user")
	_monitorAgent.CreateTime = field.NewTime(tableName, "create_time")
	_monitorAgent.MonitorAgentGroup = field.NewString(tableName, "monitor_agent_group")
	_monitorAgent.Hostid = field.NewString(tableName, "hostid")
	_monitorAgent.IuLog = field.NewString(tableName, "iu_log")

	_monitorAgent.fillFieldMap()

	return _monitorAgent
}

type monitorAgent struct {
	monitorAgentDo

	ALL               field.Asterisk
	AgentID           field.String
	ServerID          field.String
	AgentStatus       field.String
	MonitorAgentID    field.String
	OperateTime       field.Time
	OperateUser       field.String
	CreateTime        field.Time
	MonitorAgentGroup field.String
	Hostid            field.String
	IuLog             field.String

	fieldMap map[string]field.Expr
}

func (m monitorAgent) Table(newTableName string) *monitorAgent {
	m.monitorAgentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorAgent) As(alias string) *monitorAgent {
	m.monitorAgentDo.DO = *(m.monitorAgentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorAgent) updateTableName(table string) *monitorAgent {
	m.ALL = field.NewAsterisk(table)
	m.AgentID = field.NewString(table, "agent_id")
	m.ServerID = field.NewString(table, "server_id")
	m.AgentStatus = field.NewString(table, "agent_status")
	m.MonitorAgentID = field.NewString(table, "monitor_agent_id")
	m.OperateTime = field.NewTime(table, "operate_time")
	m.OperateUser = field.NewString(table, "operate_user")
	m.CreateTime = field.NewTime(table, "create_time")
	m.MonitorAgentGroup = field.NewString(table, "monitor_agent_group")
	m.Hostid = field.NewString(table, "hostid")
	m.IuLog = field.NewString(table, "iu_log")

	m.fillFieldMap()

	return m
}

func (m *monitorAgent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorAgent) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["agent_id"] = m.AgentID
	m.fieldMap["server_id"] = m.ServerID
	m.fieldMap["agent_status"] = m.AgentStatus
	m.fieldMap["monitor_agent_id"] = m.MonitorAgentID
	m.fieldMap["operate_time"] = m.OperateTime
	m.fieldMap["operate_user"] = m.OperateUser
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["monitor_agent_group"] = m.MonitorAgentGroup
	m.fieldMap["hostid"] = m.Hostid
	m.fieldMap["iu_log"] = m.IuLog
}

func (m monitorAgent) clone(db *gorm.DB) monitorAgent {
	m.monitorAgentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorAgent) replaceDB(db *gorm.DB) monitorAgent {
	m.monitorAgentDo.ReplaceDB(db)
	return m
}

type monitorAgentDo struct{ gen.DO }

type IMonitorAgentDo interface {
	gen.SubQuery
	Debug() IMonitorAgentDo
	WithContext(ctx context.Context) IMonitorAgentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorAgentDo
	WriteDB() IMonitorAgentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorAgentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorAgentDo
	Not(conds ...gen.Condition) IMonitorAgentDo
	Or(conds ...gen.Condition) IMonitorAgentDo
	Select(conds ...field.Expr) IMonitorAgentDo
	Where(conds ...gen.Condition) IMonitorAgentDo
	Order(conds ...field.Expr) IMonitorAgentDo
	Distinct(cols ...field.Expr) IMonitorAgentDo
	Omit(cols ...field.Expr) IMonitorAgentDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorAgentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAgentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAgentDo
	Group(cols ...field.Expr) IMonitorAgentDo
	Having(conds ...gen.Condition) IMonitorAgentDo
	Limit(limit int) IMonitorAgentDo
	Offset(offset int) IMonitorAgentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAgentDo
	Unscoped() IMonitorAgentDo
	Create(values ...*model.MonitorAgent) error
	CreateInBatches(values []*model.MonitorAgent, batchSize int) error
	Save(values ...*model.MonitorAgent) error
	First() (*model.MonitorAgent, error)
	Take() (*model.MonitorAgent, error)
	Last() (*model.MonitorAgent, error)
	Find() ([]*model.MonitorAgent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAgent, err error)
	FindInBatches(result *[]*model.MonitorAgent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorAgent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorAgentDo
	Assign(attrs ...field.AssignExpr) IMonitorAgentDo
	Joins(fields ...field.RelationField) IMonitorAgentDo
	Preload(fields ...field.RelationField) IMonitorAgentDo
	FirstOrInit() (*model.MonitorAgent, error)
	FirstOrCreate() (*model.MonitorAgent, error)
	FindByPage(offset int, limit int) (result []*model.MonitorAgent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorAgentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorAgentDo) Debug() IMonitorAgentDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorAgentDo) WithContext(ctx context.Context) IMonitorAgentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorAgentDo) ReadDB() IMonitorAgentDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorAgentDo) WriteDB() IMonitorAgentDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorAgentDo) Session(config *gorm.Session) IMonitorAgentDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorAgentDo) Clauses(conds ...clause.Expression) IMonitorAgentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorAgentDo) Returning(value interface{}, columns ...string) IMonitorAgentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorAgentDo) Not(conds ...gen.Condition) IMonitorAgentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorAgentDo) Or(conds ...gen.Condition) IMonitorAgentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorAgentDo) Select(conds ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorAgentDo) Where(conds ...gen.Condition) IMonitorAgentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorAgentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorAgentDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorAgentDo) Order(conds ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorAgentDo) Distinct(cols ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorAgentDo) Omit(cols ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorAgentDo) Join(table schema.Tabler, on ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorAgentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorAgentDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorAgentDo) Group(cols ...field.Expr) IMonitorAgentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorAgentDo) Having(conds ...gen.Condition) IMonitorAgentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorAgentDo) Limit(limit int) IMonitorAgentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorAgentDo) Offset(offset int) IMonitorAgentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorAgentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAgentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorAgentDo) Unscoped() IMonitorAgentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorAgentDo) Create(values ...*model.MonitorAgent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorAgentDo) CreateInBatches(values []*model.MonitorAgent, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorAgentDo) Save(values ...*model.MonitorAgent) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorAgentDo) First() (*model.MonitorAgent, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAgent), nil
	}
}

func (m monitorAgentDo) Take() (*model.MonitorAgent, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAgent), nil
	}
}

func (m monitorAgentDo) Last() (*model.MonitorAgent, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAgent), nil
	}
}

func (m monitorAgentDo) Find() ([]*model.MonitorAgent, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorAgent), err
}

func (m monitorAgentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAgent, err error) {
	buf := make([]*model.MonitorAgent, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorAgentDo) FindInBatches(result *[]*model.MonitorAgent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorAgentDo) Attrs(attrs ...field.AssignExpr) IMonitorAgentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorAgentDo) Assign(attrs ...field.AssignExpr) IMonitorAgentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorAgentDo) Joins(fields ...field.RelationField) IMonitorAgentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorAgentDo) Preload(fields ...field.RelationField) IMonitorAgentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorAgentDo) FirstOrInit() (*model.MonitorAgent, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAgent), nil
	}
}

func (m monitorAgentDo) FirstOrCreate() (*model.MonitorAgent, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAgent), nil
	}
}

func (m monitorAgentDo) FindByPage(offset int, limit int) (result []*model.MonitorAgent, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorAgentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorAgentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorAgentDo) Delete(models ...*model.MonitorAgent) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorAgentDo) withDO(do gen.Dao) *monitorAgentDo {
	m.DO = *do.(*gen.DO)
	return m
}
