// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorAlertitemConfirm(db *gorm.DB, opts ...gen.DOOption) monitorAlertitemConfirm {
	_monitorAlertitemConfirm := monitorAlertitemConfirm{}

	_monitorAlertitemConfirm.monitorAlertitemConfirmDo.UseDB(db, opts...)
	_monitorAlertitemConfirm.monitorAlertitemConfirmDo.UseModel(&model.MonitorAlertitemConfirm{})

	tableName := _monitorAlertitemConfirm.monitorAlertitemConfirmDo.TableName()
	_monitorAlertitemConfirm.ALL = field.NewAsterisk(tableName)
	_monitorAlertitemConfirm.AlertitemRecordID = field.NewString(tableName, "alertitem_record_id")
	_monitorAlertitemConfirm.AlertitemConfirmID = field.NewString(tableName, "alertitem_confirm_id")
	_monitorAlertitemConfirm.AlertitemPid = field.NewString(tableName, "alertitem_pid")
	_monitorAlertitemConfirm.ConfirmUser = field.NewString(tableName, "confirm_user")
	_monitorAlertitemConfirm.ConfirmTime = field.NewTime(tableName, "confirm_time")
	_monitorAlertitemConfirm.ConfirmMessage = field.NewString(tableName, "confirm_message")
	_monitorAlertitemConfirm.IsClose = field.NewString(tableName, "is_close")
	_monitorAlertitemConfirm.AgentID = field.NewString(tableName, "agent_id")
	_monitorAlertitemConfirm.ServerID = field.NewString(tableName, "server_id")
	_monitorAlertitemConfirm.ServerIP = field.NewString(tableName, "server_ip")
	_monitorAlertitemConfirm.ConfirmStatu = field.NewString(tableName, "confirm_statu")
	_monitorAlertitemConfirm.Eventid = field.NewString(tableName, "eventid")

	_monitorAlertitemConfirm.fillFieldMap()

	return _monitorAlertitemConfirm
}

type monitorAlertitemConfirm struct {
	monitorAlertitemConfirmDo

	ALL                field.Asterisk
	AlertitemRecordID  field.String
	AlertitemConfirmID field.String
	AlertitemPid       field.String
	ConfirmUser        field.String
	ConfirmTime        field.Time
	ConfirmMessage     field.String
	IsClose            field.String
	AgentID            field.String
	ServerID           field.String
	ServerIP           field.String
	ConfirmStatu       field.String
	Eventid            field.String

	fieldMap map[string]field.Expr
}

func (m monitorAlertitemConfirm) Table(newTableName string) *monitorAlertitemConfirm {
	m.monitorAlertitemConfirmDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorAlertitemConfirm) As(alias string) *monitorAlertitemConfirm {
	m.monitorAlertitemConfirmDo.DO = *(m.monitorAlertitemConfirmDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorAlertitemConfirm) updateTableName(table string) *monitorAlertitemConfirm {
	m.ALL = field.NewAsterisk(table)
	m.AlertitemRecordID = field.NewString(table, "alertitem_record_id")
	m.AlertitemConfirmID = field.NewString(table, "alertitem_confirm_id")
	m.AlertitemPid = field.NewString(table, "alertitem_pid")
	m.ConfirmUser = field.NewString(table, "confirm_user")
	m.ConfirmTime = field.NewTime(table, "confirm_time")
	m.ConfirmMessage = field.NewString(table, "confirm_message")
	m.IsClose = field.NewString(table, "is_close")
	m.AgentID = field.NewString(table, "agent_id")
	m.ServerID = field.NewString(table, "server_id")
	m.ServerIP = field.NewString(table, "server_ip")
	m.ConfirmStatu = field.NewString(table, "confirm_statu")
	m.Eventid = field.NewString(table, "eventid")

	m.fillFieldMap()

	return m
}

func (m *monitorAlertitemConfirm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorAlertitemConfirm) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["alertitem_record_id"] = m.AlertitemRecordID
	m.fieldMap["alertitem_confirm_id"] = m.AlertitemConfirmID
	m.fieldMap["alertitem_pid"] = m.AlertitemPid
	m.fieldMap["confirm_user"] = m.ConfirmUser
	m.fieldMap["confirm_time"] = m.ConfirmTime
	m.fieldMap["confirm_message"] = m.ConfirmMessage
	m.fieldMap["is_close"] = m.IsClose
	m.fieldMap["agent_id"] = m.AgentID
	m.fieldMap["server_id"] = m.ServerID
	m.fieldMap["server_ip"] = m.ServerIP
	m.fieldMap["confirm_statu"] = m.ConfirmStatu
	m.fieldMap["eventid"] = m.Eventid
}

func (m monitorAlertitemConfirm) clone(db *gorm.DB) monitorAlertitemConfirm {
	m.monitorAlertitemConfirmDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorAlertitemConfirm) replaceDB(db *gorm.DB) monitorAlertitemConfirm {
	m.monitorAlertitemConfirmDo.ReplaceDB(db)
	return m
}

type monitorAlertitemConfirmDo struct{ gen.DO }

type IMonitorAlertitemConfirmDo interface {
	gen.SubQuery
	Debug() IMonitorAlertitemConfirmDo
	WithContext(ctx context.Context) IMonitorAlertitemConfirmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorAlertitemConfirmDo
	WriteDB() IMonitorAlertitemConfirmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorAlertitemConfirmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorAlertitemConfirmDo
	Not(conds ...gen.Condition) IMonitorAlertitemConfirmDo
	Or(conds ...gen.Condition) IMonitorAlertitemConfirmDo
	Select(conds ...field.Expr) IMonitorAlertitemConfirmDo
	Where(conds ...gen.Condition) IMonitorAlertitemConfirmDo
	Order(conds ...field.Expr) IMonitorAlertitemConfirmDo
	Distinct(cols ...field.Expr) IMonitorAlertitemConfirmDo
	Omit(cols ...field.Expr) IMonitorAlertitemConfirmDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorAlertitemConfirmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemConfirmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemConfirmDo
	Group(cols ...field.Expr) IMonitorAlertitemConfirmDo
	Having(conds ...gen.Condition) IMonitorAlertitemConfirmDo
	Limit(limit int) IMonitorAlertitemConfirmDo
	Offset(offset int) IMonitorAlertitemConfirmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAlertitemConfirmDo
	Unscoped() IMonitorAlertitemConfirmDo
	Create(values ...*model.MonitorAlertitemConfirm) error
	CreateInBatches(values []*model.MonitorAlertitemConfirm, batchSize int) error
	Save(values ...*model.MonitorAlertitemConfirm) error
	First() (*model.MonitorAlertitemConfirm, error)
	Take() (*model.MonitorAlertitemConfirm, error)
	Last() (*model.MonitorAlertitemConfirm, error)
	Find() ([]*model.MonitorAlertitemConfirm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAlertitemConfirm, err error)
	FindInBatches(result *[]*model.MonitorAlertitemConfirm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorAlertitemConfirm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorAlertitemConfirmDo
	Assign(attrs ...field.AssignExpr) IMonitorAlertitemConfirmDo
	Joins(fields ...field.RelationField) IMonitorAlertitemConfirmDo
	Preload(fields ...field.RelationField) IMonitorAlertitemConfirmDo
	FirstOrInit() (*model.MonitorAlertitemConfirm, error)
	FirstOrCreate() (*model.MonitorAlertitemConfirm, error)
	FindByPage(offset int, limit int) (result []*model.MonitorAlertitemConfirm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorAlertitemConfirmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorAlertitemConfirmDo) Debug() IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorAlertitemConfirmDo) WithContext(ctx context.Context) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorAlertitemConfirmDo) ReadDB() IMonitorAlertitemConfirmDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorAlertitemConfirmDo) WriteDB() IMonitorAlertitemConfirmDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorAlertitemConfirmDo) Session(config *gorm.Session) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorAlertitemConfirmDo) Clauses(conds ...clause.Expression) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorAlertitemConfirmDo) Returning(value interface{}, columns ...string) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorAlertitemConfirmDo) Not(conds ...gen.Condition) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorAlertitemConfirmDo) Or(conds ...gen.Condition) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorAlertitemConfirmDo) Select(conds ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorAlertitemConfirmDo) Where(conds ...gen.Condition) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorAlertitemConfirmDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorAlertitemConfirmDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorAlertitemConfirmDo) Order(conds ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorAlertitemConfirmDo) Distinct(cols ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorAlertitemConfirmDo) Omit(cols ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorAlertitemConfirmDo) Join(table schema.Tabler, on ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorAlertitemConfirmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorAlertitemConfirmDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorAlertitemConfirmDo) Group(cols ...field.Expr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorAlertitemConfirmDo) Having(conds ...gen.Condition) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorAlertitemConfirmDo) Limit(limit int) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorAlertitemConfirmDo) Offset(offset int) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorAlertitemConfirmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorAlertitemConfirmDo) Unscoped() IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorAlertitemConfirmDo) Create(values ...*model.MonitorAlertitemConfirm) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorAlertitemConfirmDo) CreateInBatches(values []*model.MonitorAlertitemConfirm, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorAlertitemConfirmDo) Save(values ...*model.MonitorAlertitemConfirm) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorAlertitemConfirmDo) First() (*model.MonitorAlertitemConfirm, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemConfirm), nil
	}
}

func (m monitorAlertitemConfirmDo) Take() (*model.MonitorAlertitemConfirm, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemConfirm), nil
	}
}

func (m monitorAlertitemConfirmDo) Last() (*model.MonitorAlertitemConfirm, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemConfirm), nil
	}
}

func (m monitorAlertitemConfirmDo) Find() ([]*model.MonitorAlertitemConfirm, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorAlertitemConfirm), err
}

func (m monitorAlertitemConfirmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAlertitemConfirm, err error) {
	buf := make([]*model.MonitorAlertitemConfirm, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorAlertitemConfirmDo) FindInBatches(result *[]*model.MonitorAlertitemConfirm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorAlertitemConfirmDo) Attrs(attrs ...field.AssignExpr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorAlertitemConfirmDo) Assign(attrs ...field.AssignExpr) IMonitorAlertitemConfirmDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorAlertitemConfirmDo) Joins(fields ...field.RelationField) IMonitorAlertitemConfirmDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorAlertitemConfirmDo) Preload(fields ...field.RelationField) IMonitorAlertitemConfirmDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorAlertitemConfirmDo) FirstOrInit() (*model.MonitorAlertitemConfirm, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemConfirm), nil
	}
}

func (m monitorAlertitemConfirmDo) FirstOrCreate() (*model.MonitorAlertitemConfirm, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemConfirm), nil
	}
}

func (m monitorAlertitemConfirmDo) FindByPage(offset int, limit int) (result []*model.MonitorAlertitemConfirm, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorAlertitemConfirmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorAlertitemConfirmDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorAlertitemConfirmDo) Delete(models ...*model.MonitorAlertitemConfirm) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorAlertitemConfirmDo) withDO(do gen.Dao) *monitorAlertitemConfirmDo {
	m.DO = *do.(*gen.DO)
	return m
}
