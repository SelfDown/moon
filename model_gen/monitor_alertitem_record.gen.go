// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorAlertitemRecord(db *gorm.DB, opts ...gen.DOOption) monitorAlertitemRecord {
	_monitorAlertitemRecord := monitorAlertitemRecord{}

	_monitorAlertitemRecord.monitorAlertitemRecordDo.UseDB(db, opts...)
	_monitorAlertitemRecord.monitorAlertitemRecordDo.UseModel(&model.MonitorAlertitemRecord{})

	tableName := _monitorAlertitemRecord.monitorAlertitemRecordDo.TableName()
	_monitorAlertitemRecord.ALL = field.NewAsterisk(tableName)
	_monitorAlertitemRecord.AlertitemRecordID = field.NewString(tableName, "alertitem_record_id")
	_monitorAlertitemRecord.EventID = field.NewString(tableName, "event_id")
	_monitorAlertitemRecord.AlertTime = field.NewTime(tableName, "alert_time")
	_monitorAlertitemRecord.RecoverTime = field.NewTime(tableName, "recover_time")
	_monitorAlertitemRecord.Hostname = field.NewString(tableName, "hostname")
	_monitorAlertitemRecord.Hostip = field.NewString(tableName, "hostip")
	_monitorAlertitemRecord.AlertitemCode = field.NewString(tableName, "alertitem_code")
	_monitorAlertitemRecord.EventType = field.NewString(tableName, "event_type")
	_monitorAlertitemRecord.EventName = field.NewString(tableName, "event_name")
	_monitorAlertitemRecord.AddTime = field.NewTime(tableName, "add_time")
	_monitorAlertitemRecord.AlertSource = field.NewString(tableName, "alert_source")
	_monitorAlertitemRecord.IsConfirm = field.NewString(tableName, "is_confirm")
	_monitorAlertitemRecord.Comments = field.NewString(tableName, "comments")
	_monitorAlertitemRecord.RecordStatu = field.NewString(tableName, "record_statu")
	_monitorAlertitemRecord.AlertMsg = field.NewString(tableName, "alert_msg")
	_monitorAlertitemRecord.AlertMsgOrg = field.NewString(tableName, "alert_msg_org")
	_monitorAlertitemRecord.AlertLevel = field.NewString(tableName, "alert_level")
	_monitorAlertitemRecord.AlertitemNotshow = field.NewInt32(tableName, "alertitem_notshow")
	_monitorAlertitemRecord.ServerID = field.NewString(tableName, "server_id")
	_monitorAlertitemRecord.IsRecover = field.NewString(tableName, "is_recover")
	_monitorAlertitemRecord.Project = field.NewString(tableName, "project")

	_monitorAlertitemRecord.fillFieldMap()

	return _monitorAlertitemRecord
}

type monitorAlertitemRecord struct {
	monitorAlertitemRecordDo

	ALL               field.Asterisk
	AlertitemRecordID field.String
	EventID           field.String
	AlertTime         field.Time
	RecoverTime       field.Time
	Hostname          field.String
	Hostip            field.String
	AlertitemCode     field.String
	EventType         field.String
	EventName         field.String
	AddTime           field.Time
	AlertSource       field.String
	IsConfirm         field.String
	Comments          field.String
	RecordStatu       field.String
	AlertMsg          field.String
	AlertMsgOrg       field.String
	AlertLevel        field.String
	AlertitemNotshow  field.Int32
	ServerID          field.String
	IsRecover         field.String
	Project           field.String

	fieldMap map[string]field.Expr
}

func (m monitorAlertitemRecord) Table(newTableName string) *monitorAlertitemRecord {
	m.monitorAlertitemRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorAlertitemRecord) As(alias string) *monitorAlertitemRecord {
	m.monitorAlertitemRecordDo.DO = *(m.monitorAlertitemRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorAlertitemRecord) updateTableName(table string) *monitorAlertitemRecord {
	m.ALL = field.NewAsterisk(table)
	m.AlertitemRecordID = field.NewString(table, "alertitem_record_id")
	m.EventID = field.NewString(table, "event_id")
	m.AlertTime = field.NewTime(table, "alert_time")
	m.RecoverTime = field.NewTime(table, "recover_time")
	m.Hostname = field.NewString(table, "hostname")
	m.Hostip = field.NewString(table, "hostip")
	m.AlertitemCode = field.NewString(table, "alertitem_code")
	m.EventType = field.NewString(table, "event_type")
	m.EventName = field.NewString(table, "event_name")
	m.AddTime = field.NewTime(table, "add_time")
	m.AlertSource = field.NewString(table, "alert_source")
	m.IsConfirm = field.NewString(table, "is_confirm")
	m.Comments = field.NewString(table, "comments")
	m.RecordStatu = field.NewString(table, "record_statu")
	m.AlertMsg = field.NewString(table, "alert_msg")
	m.AlertMsgOrg = field.NewString(table, "alert_msg_org")
	m.AlertLevel = field.NewString(table, "alert_level")
	m.AlertitemNotshow = field.NewInt32(table, "alertitem_notshow")
	m.ServerID = field.NewString(table, "server_id")
	m.IsRecover = field.NewString(table, "is_recover")
	m.Project = field.NewString(table, "project")

	m.fillFieldMap()

	return m
}

func (m *monitorAlertitemRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorAlertitemRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 21)
	m.fieldMap["alertitem_record_id"] = m.AlertitemRecordID
	m.fieldMap["event_id"] = m.EventID
	m.fieldMap["alert_time"] = m.AlertTime
	m.fieldMap["recover_time"] = m.RecoverTime
	m.fieldMap["hostname"] = m.Hostname
	m.fieldMap["hostip"] = m.Hostip
	m.fieldMap["alertitem_code"] = m.AlertitemCode
	m.fieldMap["event_type"] = m.EventType
	m.fieldMap["event_name"] = m.EventName
	m.fieldMap["add_time"] = m.AddTime
	m.fieldMap["alert_source"] = m.AlertSource
	m.fieldMap["is_confirm"] = m.IsConfirm
	m.fieldMap["comments"] = m.Comments
	m.fieldMap["record_statu"] = m.RecordStatu
	m.fieldMap["alert_msg"] = m.AlertMsg
	m.fieldMap["alert_msg_org"] = m.AlertMsgOrg
	m.fieldMap["alert_level"] = m.AlertLevel
	m.fieldMap["alertitem_notshow"] = m.AlertitemNotshow
	m.fieldMap["server_id"] = m.ServerID
	m.fieldMap["is_recover"] = m.IsRecover
	m.fieldMap["project"] = m.Project
}

func (m monitorAlertitemRecord) clone(db *gorm.DB) monitorAlertitemRecord {
	m.monitorAlertitemRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorAlertitemRecord) replaceDB(db *gorm.DB) monitorAlertitemRecord {
	m.monitorAlertitemRecordDo.ReplaceDB(db)
	return m
}

type monitorAlertitemRecordDo struct{ gen.DO }

type IMonitorAlertitemRecordDo interface {
	gen.SubQuery
	Debug() IMonitorAlertitemRecordDo
	WithContext(ctx context.Context) IMonitorAlertitemRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorAlertitemRecordDo
	WriteDB() IMonitorAlertitemRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorAlertitemRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorAlertitemRecordDo
	Not(conds ...gen.Condition) IMonitorAlertitemRecordDo
	Or(conds ...gen.Condition) IMonitorAlertitemRecordDo
	Select(conds ...field.Expr) IMonitorAlertitemRecordDo
	Where(conds ...gen.Condition) IMonitorAlertitemRecordDo
	Order(conds ...field.Expr) IMonitorAlertitemRecordDo
	Distinct(cols ...field.Expr) IMonitorAlertitemRecordDo
	Omit(cols ...field.Expr) IMonitorAlertitemRecordDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorAlertitemRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemRecordDo
	Group(cols ...field.Expr) IMonitorAlertitemRecordDo
	Having(conds ...gen.Condition) IMonitorAlertitemRecordDo
	Limit(limit int) IMonitorAlertitemRecordDo
	Offset(offset int) IMonitorAlertitemRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAlertitemRecordDo
	Unscoped() IMonitorAlertitemRecordDo
	Create(values ...*model.MonitorAlertitemRecord) error
	CreateInBatches(values []*model.MonitorAlertitemRecord, batchSize int) error
	Save(values ...*model.MonitorAlertitemRecord) error
	First() (*model.MonitorAlertitemRecord, error)
	Take() (*model.MonitorAlertitemRecord, error)
	Last() (*model.MonitorAlertitemRecord, error)
	Find() ([]*model.MonitorAlertitemRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAlertitemRecord, err error)
	FindInBatches(result *[]*model.MonitorAlertitemRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorAlertitemRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorAlertitemRecordDo
	Assign(attrs ...field.AssignExpr) IMonitorAlertitemRecordDo
	Joins(fields ...field.RelationField) IMonitorAlertitemRecordDo
	Preload(fields ...field.RelationField) IMonitorAlertitemRecordDo
	FirstOrInit() (*model.MonitorAlertitemRecord, error)
	FirstOrCreate() (*model.MonitorAlertitemRecord, error)
	FindByPage(offset int, limit int) (result []*model.MonitorAlertitemRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorAlertitemRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorAlertitemRecordDo) Debug() IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorAlertitemRecordDo) WithContext(ctx context.Context) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorAlertitemRecordDo) ReadDB() IMonitorAlertitemRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorAlertitemRecordDo) WriteDB() IMonitorAlertitemRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorAlertitemRecordDo) Session(config *gorm.Session) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorAlertitemRecordDo) Clauses(conds ...clause.Expression) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorAlertitemRecordDo) Returning(value interface{}, columns ...string) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorAlertitemRecordDo) Not(conds ...gen.Condition) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorAlertitemRecordDo) Or(conds ...gen.Condition) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorAlertitemRecordDo) Select(conds ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorAlertitemRecordDo) Where(conds ...gen.Condition) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorAlertitemRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorAlertitemRecordDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorAlertitemRecordDo) Order(conds ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorAlertitemRecordDo) Distinct(cols ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorAlertitemRecordDo) Omit(cols ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorAlertitemRecordDo) Join(table schema.Tabler, on ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorAlertitemRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorAlertitemRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorAlertitemRecordDo) Group(cols ...field.Expr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorAlertitemRecordDo) Having(conds ...gen.Condition) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorAlertitemRecordDo) Limit(limit int) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorAlertitemRecordDo) Offset(offset int) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorAlertitemRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorAlertitemRecordDo) Unscoped() IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorAlertitemRecordDo) Create(values ...*model.MonitorAlertitemRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorAlertitemRecordDo) CreateInBatches(values []*model.MonitorAlertitemRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorAlertitemRecordDo) Save(values ...*model.MonitorAlertitemRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorAlertitemRecordDo) First() (*model.MonitorAlertitemRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemRecord), nil
	}
}

func (m monitorAlertitemRecordDo) Take() (*model.MonitorAlertitemRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemRecord), nil
	}
}

func (m monitorAlertitemRecordDo) Last() (*model.MonitorAlertitemRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemRecord), nil
	}
}

func (m monitorAlertitemRecordDo) Find() ([]*model.MonitorAlertitemRecord, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorAlertitemRecord), err
}

func (m monitorAlertitemRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAlertitemRecord, err error) {
	buf := make([]*model.MonitorAlertitemRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorAlertitemRecordDo) FindInBatches(result *[]*model.MonitorAlertitemRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorAlertitemRecordDo) Attrs(attrs ...field.AssignExpr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorAlertitemRecordDo) Assign(attrs ...field.AssignExpr) IMonitorAlertitemRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorAlertitemRecordDo) Joins(fields ...field.RelationField) IMonitorAlertitemRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorAlertitemRecordDo) Preload(fields ...field.RelationField) IMonitorAlertitemRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorAlertitemRecordDo) FirstOrInit() (*model.MonitorAlertitemRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemRecord), nil
	}
}

func (m monitorAlertitemRecordDo) FirstOrCreate() (*model.MonitorAlertitemRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemRecord), nil
	}
}

func (m monitorAlertitemRecordDo) FindByPage(offset int, limit int) (result []*model.MonitorAlertitemRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorAlertitemRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorAlertitemRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorAlertitemRecordDo) Delete(models ...*model.MonitorAlertitemRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorAlertitemRecordDo) withDO(do gen.Dao) *monitorAlertitemRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
