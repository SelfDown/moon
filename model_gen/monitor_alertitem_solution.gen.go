// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorAlertitemSolution(db *gorm.DB, opts ...gen.DOOption) monitorAlertitemSolution {
	_monitorAlertitemSolution := monitorAlertitemSolution{}

	_monitorAlertitemSolution.monitorAlertitemSolutionDo.UseDB(db, opts...)
	_monitorAlertitemSolution.monitorAlertitemSolutionDo.UseModel(&model.MonitorAlertitemSolution{})

	tableName := _monitorAlertitemSolution.monitorAlertitemSolutionDo.TableName()
	_monitorAlertitemSolution.ALL = field.NewAsterisk(tableName)
	_monitorAlertitemSolution.AlertitemCode = field.NewString(tableName, "alertitem_code")
	_monitorAlertitemSolution.AlertitemDesc = field.NewString(tableName, "alertitem_desc")
	_monitorAlertitemSolution.AlertitemSolution = field.NewString(tableName, "alertitem_solution")
	_monitorAlertitemSolution.AlertitemLevel = field.NewString(tableName, "alertitem_level")
	_monitorAlertitemSolution.AlertitemGroup = field.NewString(tableName, "alertitem_group")
	_monitorAlertitemSolution.Note = field.NewString(tableName, "note")

	_monitorAlertitemSolution.fillFieldMap()

	return _monitorAlertitemSolution
}

type monitorAlertitemSolution struct {
	monitorAlertitemSolutionDo

	ALL               field.Asterisk
	AlertitemCode     field.String
	AlertitemDesc     field.String
	AlertitemSolution field.String
	AlertitemLevel    field.String
	AlertitemGroup    field.String
	Note              field.String

	fieldMap map[string]field.Expr
}

func (m monitorAlertitemSolution) Table(newTableName string) *monitorAlertitemSolution {
	m.monitorAlertitemSolutionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorAlertitemSolution) As(alias string) *monitorAlertitemSolution {
	m.monitorAlertitemSolutionDo.DO = *(m.monitorAlertitemSolutionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorAlertitemSolution) updateTableName(table string) *monitorAlertitemSolution {
	m.ALL = field.NewAsterisk(table)
	m.AlertitemCode = field.NewString(table, "alertitem_code")
	m.AlertitemDesc = field.NewString(table, "alertitem_desc")
	m.AlertitemSolution = field.NewString(table, "alertitem_solution")
	m.AlertitemLevel = field.NewString(table, "alertitem_level")
	m.AlertitemGroup = field.NewString(table, "alertitem_group")
	m.Note = field.NewString(table, "note")

	m.fillFieldMap()

	return m
}

func (m *monitorAlertitemSolution) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorAlertitemSolution) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["alertitem_code"] = m.AlertitemCode
	m.fieldMap["alertitem_desc"] = m.AlertitemDesc
	m.fieldMap["alertitem_solution"] = m.AlertitemSolution
	m.fieldMap["alertitem_level"] = m.AlertitemLevel
	m.fieldMap["alertitem_group"] = m.AlertitemGroup
	m.fieldMap["note"] = m.Note
}

func (m monitorAlertitemSolution) clone(db *gorm.DB) monitorAlertitemSolution {
	m.monitorAlertitemSolutionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorAlertitemSolution) replaceDB(db *gorm.DB) monitorAlertitemSolution {
	m.monitorAlertitemSolutionDo.ReplaceDB(db)
	return m
}

type monitorAlertitemSolutionDo struct{ gen.DO }

type IMonitorAlertitemSolutionDo interface {
	gen.SubQuery
	Debug() IMonitorAlertitemSolutionDo
	WithContext(ctx context.Context) IMonitorAlertitemSolutionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorAlertitemSolutionDo
	WriteDB() IMonitorAlertitemSolutionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorAlertitemSolutionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorAlertitemSolutionDo
	Not(conds ...gen.Condition) IMonitorAlertitemSolutionDo
	Or(conds ...gen.Condition) IMonitorAlertitemSolutionDo
	Select(conds ...field.Expr) IMonitorAlertitemSolutionDo
	Where(conds ...gen.Condition) IMonitorAlertitemSolutionDo
	Order(conds ...field.Expr) IMonitorAlertitemSolutionDo
	Distinct(cols ...field.Expr) IMonitorAlertitemSolutionDo
	Omit(cols ...field.Expr) IMonitorAlertitemSolutionDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorAlertitemSolutionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemSolutionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemSolutionDo
	Group(cols ...field.Expr) IMonitorAlertitemSolutionDo
	Having(conds ...gen.Condition) IMonitorAlertitemSolutionDo
	Limit(limit int) IMonitorAlertitemSolutionDo
	Offset(offset int) IMonitorAlertitemSolutionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAlertitemSolutionDo
	Unscoped() IMonitorAlertitemSolutionDo
	Create(values ...*model.MonitorAlertitemSolution) error
	CreateInBatches(values []*model.MonitorAlertitemSolution, batchSize int) error
	Save(values ...*model.MonitorAlertitemSolution) error
	First() (*model.MonitorAlertitemSolution, error)
	Take() (*model.MonitorAlertitemSolution, error)
	Last() (*model.MonitorAlertitemSolution, error)
	Find() ([]*model.MonitorAlertitemSolution, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAlertitemSolution, err error)
	FindInBatches(result *[]*model.MonitorAlertitemSolution, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorAlertitemSolution) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorAlertitemSolutionDo
	Assign(attrs ...field.AssignExpr) IMonitorAlertitemSolutionDo
	Joins(fields ...field.RelationField) IMonitorAlertitemSolutionDo
	Preload(fields ...field.RelationField) IMonitorAlertitemSolutionDo
	FirstOrInit() (*model.MonitorAlertitemSolution, error)
	FirstOrCreate() (*model.MonitorAlertitemSolution, error)
	FindByPage(offset int, limit int) (result []*model.MonitorAlertitemSolution, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorAlertitemSolutionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorAlertitemSolutionDo) Debug() IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorAlertitemSolutionDo) WithContext(ctx context.Context) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorAlertitemSolutionDo) ReadDB() IMonitorAlertitemSolutionDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorAlertitemSolutionDo) WriteDB() IMonitorAlertitemSolutionDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorAlertitemSolutionDo) Session(config *gorm.Session) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorAlertitemSolutionDo) Clauses(conds ...clause.Expression) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorAlertitemSolutionDo) Returning(value interface{}, columns ...string) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorAlertitemSolutionDo) Not(conds ...gen.Condition) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorAlertitemSolutionDo) Or(conds ...gen.Condition) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorAlertitemSolutionDo) Select(conds ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorAlertitemSolutionDo) Where(conds ...gen.Condition) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorAlertitemSolutionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorAlertitemSolutionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorAlertitemSolutionDo) Order(conds ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorAlertitemSolutionDo) Distinct(cols ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorAlertitemSolutionDo) Omit(cols ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorAlertitemSolutionDo) Join(table schema.Tabler, on ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorAlertitemSolutionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorAlertitemSolutionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorAlertitemSolutionDo) Group(cols ...field.Expr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorAlertitemSolutionDo) Having(conds ...gen.Condition) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorAlertitemSolutionDo) Limit(limit int) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorAlertitemSolutionDo) Offset(offset int) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorAlertitemSolutionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorAlertitemSolutionDo) Unscoped() IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorAlertitemSolutionDo) Create(values ...*model.MonitorAlertitemSolution) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorAlertitemSolutionDo) CreateInBatches(values []*model.MonitorAlertitemSolution, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorAlertitemSolutionDo) Save(values ...*model.MonitorAlertitemSolution) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorAlertitemSolutionDo) First() (*model.MonitorAlertitemSolution, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemSolution), nil
	}
}

func (m monitorAlertitemSolutionDo) Take() (*model.MonitorAlertitemSolution, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemSolution), nil
	}
}

func (m monitorAlertitemSolutionDo) Last() (*model.MonitorAlertitemSolution, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemSolution), nil
	}
}

func (m monitorAlertitemSolutionDo) Find() ([]*model.MonitorAlertitemSolution, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorAlertitemSolution), err
}

func (m monitorAlertitemSolutionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorAlertitemSolution, err error) {
	buf := make([]*model.MonitorAlertitemSolution, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorAlertitemSolutionDo) FindInBatches(result *[]*model.MonitorAlertitemSolution, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorAlertitemSolutionDo) Attrs(attrs ...field.AssignExpr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorAlertitemSolutionDo) Assign(attrs ...field.AssignExpr) IMonitorAlertitemSolutionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorAlertitemSolutionDo) Joins(fields ...field.RelationField) IMonitorAlertitemSolutionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorAlertitemSolutionDo) Preload(fields ...field.RelationField) IMonitorAlertitemSolutionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorAlertitemSolutionDo) FirstOrInit() (*model.MonitorAlertitemSolution, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemSolution), nil
	}
}

func (m monitorAlertitemSolutionDo) FirstOrCreate() (*model.MonitorAlertitemSolution, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorAlertitemSolution), nil
	}
}

func (m monitorAlertitemSolutionDo) FindByPage(offset int, limit int) (result []*model.MonitorAlertitemSolution, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorAlertitemSolutionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorAlertitemSolutionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorAlertitemSolutionDo) Delete(models ...*model.MonitorAlertitemSolution) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorAlertitemSolutionDo) withDO(do gen.Dao) *monitorAlertitemSolutionDo {
	m.DO = *do.(*gen.DO)
	return m
}
