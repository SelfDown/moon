// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorItemRecordData(db *gorm.DB, opts ...gen.DOOption) monitorItemRecordData {
	_monitorItemRecordData := monitorItemRecordData{}

	_monitorItemRecordData.monitorItemRecordDataDo.UseDB(db, opts...)
	_monitorItemRecordData.monitorItemRecordDataDo.UseModel(&model.MonitorItemRecordData{})

	tableName := _monitorItemRecordData.monitorItemRecordDataDo.TableName()
	_monitorItemRecordData.ALL = field.NewAsterisk(tableName)
	_monitorItemRecordData.ItemRecordDataID = field.NewString(tableName, "item_record_data_id")
	_monitorItemRecordData.IP = field.NewString(tableName, "ip")
	_monitorItemRecordData.ItemKey = field.NewString(tableName, "item_key")
	_monitorItemRecordData.AddTime = field.NewTime(tableName, "add_time")
	_monitorItemRecordData.ItemValue = field.NewString(tableName, "item_value")
	_monitorItemRecordData.Identify = field.NewString(tableName, "identify")

	_monitorItemRecordData.fillFieldMap()

	return _monitorItemRecordData
}

type monitorItemRecordData struct {
	monitorItemRecordDataDo

	ALL              field.Asterisk
	ItemRecordDataID field.String // ID
	IP               field.String // 服务器IP
	ItemKey          field.String // 记录监控指标
	AddTime          field.Time   // 添加时间
	ItemValue        field.String // 记录值
	Identify         field.String // 唯一数据业务标记

	fieldMap map[string]field.Expr
}

func (m monitorItemRecordData) Table(newTableName string) *monitorItemRecordData {
	m.monitorItemRecordDataDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorItemRecordData) As(alias string) *monitorItemRecordData {
	m.monitorItemRecordDataDo.DO = *(m.monitorItemRecordDataDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorItemRecordData) updateTableName(table string) *monitorItemRecordData {
	m.ALL = field.NewAsterisk(table)
	m.ItemRecordDataID = field.NewString(table, "item_record_data_id")
	m.IP = field.NewString(table, "ip")
	m.ItemKey = field.NewString(table, "item_key")
	m.AddTime = field.NewTime(table, "add_time")
	m.ItemValue = field.NewString(table, "item_value")
	m.Identify = field.NewString(table, "identify")

	m.fillFieldMap()

	return m
}

func (m *monitorItemRecordData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorItemRecordData) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["item_record_data_id"] = m.ItemRecordDataID
	m.fieldMap["ip"] = m.IP
	m.fieldMap["item_key"] = m.ItemKey
	m.fieldMap["add_time"] = m.AddTime
	m.fieldMap["item_value"] = m.ItemValue
	m.fieldMap["identify"] = m.Identify
}

func (m monitorItemRecordData) clone(db *gorm.DB) monitorItemRecordData {
	m.monitorItemRecordDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorItemRecordData) replaceDB(db *gorm.DB) monitorItemRecordData {
	m.monitorItemRecordDataDo.ReplaceDB(db)
	return m
}

type monitorItemRecordDataDo struct{ gen.DO }

type IMonitorItemRecordDataDo interface {
	gen.SubQuery
	Debug() IMonitorItemRecordDataDo
	WithContext(ctx context.Context) IMonitorItemRecordDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorItemRecordDataDo
	WriteDB() IMonitorItemRecordDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorItemRecordDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorItemRecordDataDo
	Not(conds ...gen.Condition) IMonitorItemRecordDataDo
	Or(conds ...gen.Condition) IMonitorItemRecordDataDo
	Select(conds ...field.Expr) IMonitorItemRecordDataDo
	Where(conds ...gen.Condition) IMonitorItemRecordDataDo
	Order(conds ...field.Expr) IMonitorItemRecordDataDo
	Distinct(cols ...field.Expr) IMonitorItemRecordDataDo
	Omit(cols ...field.Expr) IMonitorItemRecordDataDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorItemRecordDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorItemRecordDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorItemRecordDataDo
	Group(cols ...field.Expr) IMonitorItemRecordDataDo
	Having(conds ...gen.Condition) IMonitorItemRecordDataDo
	Limit(limit int) IMonitorItemRecordDataDo
	Offset(offset int) IMonitorItemRecordDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorItemRecordDataDo
	Unscoped() IMonitorItemRecordDataDo
	Create(values ...*model.MonitorItemRecordData) error
	CreateInBatches(values []*model.MonitorItemRecordData, batchSize int) error
	Save(values ...*model.MonitorItemRecordData) error
	First() (*model.MonitorItemRecordData, error)
	Take() (*model.MonitorItemRecordData, error)
	Last() (*model.MonitorItemRecordData, error)
	Find() ([]*model.MonitorItemRecordData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorItemRecordData, err error)
	FindInBatches(result *[]*model.MonitorItemRecordData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorItemRecordData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorItemRecordDataDo
	Assign(attrs ...field.AssignExpr) IMonitorItemRecordDataDo
	Joins(fields ...field.RelationField) IMonitorItemRecordDataDo
	Preload(fields ...field.RelationField) IMonitorItemRecordDataDo
	FirstOrInit() (*model.MonitorItemRecordData, error)
	FirstOrCreate() (*model.MonitorItemRecordData, error)
	FindByPage(offset int, limit int) (result []*model.MonitorItemRecordData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorItemRecordDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorItemRecordDataDo) Debug() IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorItemRecordDataDo) WithContext(ctx context.Context) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorItemRecordDataDo) ReadDB() IMonitorItemRecordDataDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorItemRecordDataDo) WriteDB() IMonitorItemRecordDataDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorItemRecordDataDo) Session(config *gorm.Session) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorItemRecordDataDo) Clauses(conds ...clause.Expression) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorItemRecordDataDo) Returning(value interface{}, columns ...string) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorItemRecordDataDo) Not(conds ...gen.Condition) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorItemRecordDataDo) Or(conds ...gen.Condition) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorItemRecordDataDo) Select(conds ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorItemRecordDataDo) Where(conds ...gen.Condition) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorItemRecordDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorItemRecordDataDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorItemRecordDataDo) Order(conds ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorItemRecordDataDo) Distinct(cols ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorItemRecordDataDo) Omit(cols ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorItemRecordDataDo) Join(table schema.Tabler, on ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorItemRecordDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorItemRecordDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorItemRecordDataDo) Group(cols ...field.Expr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorItemRecordDataDo) Having(conds ...gen.Condition) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorItemRecordDataDo) Limit(limit int) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorItemRecordDataDo) Offset(offset int) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorItemRecordDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorItemRecordDataDo) Unscoped() IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorItemRecordDataDo) Create(values ...*model.MonitorItemRecordData) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorItemRecordDataDo) CreateInBatches(values []*model.MonitorItemRecordData, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorItemRecordDataDo) Save(values ...*model.MonitorItemRecordData) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorItemRecordDataDo) First() (*model.MonitorItemRecordData, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemRecordData), nil
	}
}

func (m monitorItemRecordDataDo) Take() (*model.MonitorItemRecordData, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemRecordData), nil
	}
}

func (m monitorItemRecordDataDo) Last() (*model.MonitorItemRecordData, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemRecordData), nil
	}
}

func (m monitorItemRecordDataDo) Find() ([]*model.MonitorItemRecordData, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorItemRecordData), err
}

func (m monitorItemRecordDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorItemRecordData, err error) {
	buf := make([]*model.MonitorItemRecordData, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorItemRecordDataDo) FindInBatches(result *[]*model.MonitorItemRecordData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorItemRecordDataDo) Attrs(attrs ...field.AssignExpr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorItemRecordDataDo) Assign(attrs ...field.AssignExpr) IMonitorItemRecordDataDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorItemRecordDataDo) Joins(fields ...field.RelationField) IMonitorItemRecordDataDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorItemRecordDataDo) Preload(fields ...field.RelationField) IMonitorItemRecordDataDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorItemRecordDataDo) FirstOrInit() (*model.MonitorItemRecordData, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemRecordData), nil
	}
}

func (m monitorItemRecordDataDo) FirstOrCreate() (*model.MonitorItemRecordData, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemRecordData), nil
	}
}

func (m monitorItemRecordDataDo) FindByPage(offset int, limit int) (result []*model.MonitorItemRecordData, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorItemRecordDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorItemRecordDataDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorItemRecordDataDo) Delete(models ...*model.MonitorItemRecordData) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorItemRecordDataDo) withDO(do gen.Dao) *monitorItemRecordDataDo {
	m.DO = *do.(*gen.DO)
	return m
}
