// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorItemkeyDesc(db *gorm.DB, opts ...gen.DOOption) monitorItemkeyDesc {
	_monitorItemkeyDesc := monitorItemkeyDesc{}

	_monitorItemkeyDesc.monitorItemkeyDescDo.UseDB(db, opts...)
	_monitorItemkeyDesc.monitorItemkeyDescDo.UseModel(&model.MonitorItemkeyDesc{})

	tableName := _monitorItemkeyDesc.monitorItemkeyDescDo.TableName()
	_monitorItemkeyDesc.ALL = field.NewAsterisk(tableName)
	_monitorItemkeyDesc.MonitorItemkeyDescID = field.NewString(tableName, "monitor_itemkey_desc_id")
	_monitorItemkeyDesc.Itemkey = field.NewString(tableName, "itemkey")
	_monitorItemkeyDesc.ItemkeyDesc = field.NewString(tableName, "itemkey_desc")

	_monitorItemkeyDesc.fillFieldMap()

	return _monitorItemkeyDesc
}

type monitorItemkeyDesc struct {
	monitorItemkeyDescDo

	ALL                  field.Asterisk
	MonitorItemkeyDescID field.String
	Itemkey              field.String
	ItemkeyDesc          field.String

	fieldMap map[string]field.Expr
}

func (m monitorItemkeyDesc) Table(newTableName string) *monitorItemkeyDesc {
	m.monitorItemkeyDescDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorItemkeyDesc) As(alias string) *monitorItemkeyDesc {
	m.monitorItemkeyDescDo.DO = *(m.monitorItemkeyDescDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorItemkeyDesc) updateTableName(table string) *monitorItemkeyDesc {
	m.ALL = field.NewAsterisk(table)
	m.MonitorItemkeyDescID = field.NewString(table, "monitor_itemkey_desc_id")
	m.Itemkey = field.NewString(table, "itemkey")
	m.ItemkeyDesc = field.NewString(table, "itemkey_desc")

	m.fillFieldMap()

	return m
}

func (m *monitorItemkeyDesc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorItemkeyDesc) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["monitor_itemkey_desc_id"] = m.MonitorItemkeyDescID
	m.fieldMap["itemkey"] = m.Itemkey
	m.fieldMap["itemkey_desc"] = m.ItemkeyDesc
}

func (m monitorItemkeyDesc) clone(db *gorm.DB) monitorItemkeyDesc {
	m.monitorItemkeyDescDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorItemkeyDesc) replaceDB(db *gorm.DB) monitorItemkeyDesc {
	m.monitorItemkeyDescDo.ReplaceDB(db)
	return m
}

type monitorItemkeyDescDo struct{ gen.DO }

type IMonitorItemkeyDescDo interface {
	gen.SubQuery
	Debug() IMonitorItemkeyDescDo
	WithContext(ctx context.Context) IMonitorItemkeyDescDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorItemkeyDescDo
	WriteDB() IMonitorItemkeyDescDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorItemkeyDescDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorItemkeyDescDo
	Not(conds ...gen.Condition) IMonitorItemkeyDescDo
	Or(conds ...gen.Condition) IMonitorItemkeyDescDo
	Select(conds ...field.Expr) IMonitorItemkeyDescDo
	Where(conds ...gen.Condition) IMonitorItemkeyDescDo
	Order(conds ...field.Expr) IMonitorItemkeyDescDo
	Distinct(cols ...field.Expr) IMonitorItemkeyDescDo
	Omit(cols ...field.Expr) IMonitorItemkeyDescDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorItemkeyDescDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorItemkeyDescDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorItemkeyDescDo
	Group(cols ...field.Expr) IMonitorItemkeyDescDo
	Having(conds ...gen.Condition) IMonitorItemkeyDescDo
	Limit(limit int) IMonitorItemkeyDescDo
	Offset(offset int) IMonitorItemkeyDescDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorItemkeyDescDo
	Unscoped() IMonitorItemkeyDescDo
	Create(values ...*model.MonitorItemkeyDesc) error
	CreateInBatches(values []*model.MonitorItemkeyDesc, batchSize int) error
	Save(values ...*model.MonitorItemkeyDesc) error
	First() (*model.MonitorItemkeyDesc, error)
	Take() (*model.MonitorItemkeyDesc, error)
	Last() (*model.MonitorItemkeyDesc, error)
	Find() ([]*model.MonitorItemkeyDesc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorItemkeyDesc, err error)
	FindInBatches(result *[]*model.MonitorItemkeyDesc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorItemkeyDesc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorItemkeyDescDo
	Assign(attrs ...field.AssignExpr) IMonitorItemkeyDescDo
	Joins(fields ...field.RelationField) IMonitorItemkeyDescDo
	Preload(fields ...field.RelationField) IMonitorItemkeyDescDo
	FirstOrInit() (*model.MonitorItemkeyDesc, error)
	FirstOrCreate() (*model.MonitorItemkeyDesc, error)
	FindByPage(offset int, limit int) (result []*model.MonitorItemkeyDesc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorItemkeyDescDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorItemkeyDescDo) Debug() IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorItemkeyDescDo) WithContext(ctx context.Context) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorItemkeyDescDo) ReadDB() IMonitorItemkeyDescDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorItemkeyDescDo) WriteDB() IMonitorItemkeyDescDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorItemkeyDescDo) Session(config *gorm.Session) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorItemkeyDescDo) Clauses(conds ...clause.Expression) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorItemkeyDescDo) Returning(value interface{}, columns ...string) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorItemkeyDescDo) Not(conds ...gen.Condition) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorItemkeyDescDo) Or(conds ...gen.Condition) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorItemkeyDescDo) Select(conds ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorItemkeyDescDo) Where(conds ...gen.Condition) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorItemkeyDescDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorItemkeyDescDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorItemkeyDescDo) Order(conds ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorItemkeyDescDo) Distinct(cols ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorItemkeyDescDo) Omit(cols ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorItemkeyDescDo) Join(table schema.Tabler, on ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorItemkeyDescDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorItemkeyDescDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorItemkeyDescDo) Group(cols ...field.Expr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorItemkeyDescDo) Having(conds ...gen.Condition) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorItemkeyDescDo) Limit(limit int) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorItemkeyDescDo) Offset(offset int) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorItemkeyDescDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorItemkeyDescDo) Unscoped() IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorItemkeyDescDo) Create(values ...*model.MonitorItemkeyDesc) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorItemkeyDescDo) CreateInBatches(values []*model.MonitorItemkeyDesc, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorItemkeyDescDo) Save(values ...*model.MonitorItemkeyDesc) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorItemkeyDescDo) First() (*model.MonitorItemkeyDesc, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemkeyDesc), nil
	}
}

func (m monitorItemkeyDescDo) Take() (*model.MonitorItemkeyDesc, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemkeyDesc), nil
	}
}

func (m monitorItemkeyDescDo) Last() (*model.MonitorItemkeyDesc, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemkeyDesc), nil
	}
}

func (m monitorItemkeyDescDo) Find() ([]*model.MonitorItemkeyDesc, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorItemkeyDesc), err
}

func (m monitorItemkeyDescDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorItemkeyDesc, err error) {
	buf := make([]*model.MonitorItemkeyDesc, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorItemkeyDescDo) FindInBatches(result *[]*model.MonitorItemkeyDesc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorItemkeyDescDo) Attrs(attrs ...field.AssignExpr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorItemkeyDescDo) Assign(attrs ...field.AssignExpr) IMonitorItemkeyDescDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorItemkeyDescDo) Joins(fields ...field.RelationField) IMonitorItemkeyDescDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorItemkeyDescDo) Preload(fields ...field.RelationField) IMonitorItemkeyDescDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorItemkeyDescDo) FirstOrInit() (*model.MonitorItemkeyDesc, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemkeyDesc), nil
	}
}

func (m monitorItemkeyDescDo) FirstOrCreate() (*model.MonitorItemkeyDesc, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorItemkeyDesc), nil
	}
}

func (m monitorItemkeyDescDo) FindByPage(offset int, limit int) (result []*model.MonitorItemkeyDesc, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorItemkeyDescDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorItemkeyDescDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorItemkeyDescDo) Delete(models ...*model.MonitorItemkeyDesc) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorItemkeyDescDo) withDO(do gen.Dao) *monitorItemkeyDescDo {
	m.DO = *do.(*gen.DO)
	return m
}
