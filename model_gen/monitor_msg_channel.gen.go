// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorMsgChannel(db *gorm.DB, opts ...gen.DOOption) monitorMsgChannel {
	_monitorMsgChannel := monitorMsgChannel{}

	_monitorMsgChannel.monitorMsgChannelDo.UseDB(db, opts...)
	_monitorMsgChannel.monitorMsgChannelDo.UseModel(&model.MonitorMsgChannel{})

	tableName := _monitorMsgChannel.monitorMsgChannelDo.TableName()
	_monitorMsgChannel.ALL = field.NewAsterisk(tableName)
	_monitorMsgChannel.ChannelID = field.NewString(tableName, "channel_id")
	_monitorMsgChannel.MsgSendProviderID = field.NewString(tableName, "msg_send_provider_id")
	_monitorMsgChannel.ChannelName = field.NewString(tableName, "channel_name")
	_monitorMsgChannel.ChannelType = field.NewString(tableName, "channel_type")
	_monitorMsgChannel.IsInvalid = field.NewString(tableName, "is_invalid")
	_monitorMsgChannel.ForbidType = field.NewString(tableName, "forbid_type")
	_monitorMsgChannel.ForbidBegintime = field.NewString(tableName, "forbid_begintime")
	_monitorMsgChannel.ForbidEndtime = field.NewString(tableName, "forbid_endtime")
	_monitorMsgChannel.Note = field.NewString(tableName, "note")
	_monitorMsgChannel.SendRate = field.NewInt32(tableName, "send_rate")
	_monitorMsgChannel.MsgFormat = field.NewString(tableName, "msg_format")
	_monitorMsgChannel.OperateUser = field.NewString(tableName, "operate_user")
	_monitorMsgChannel.OperateTime = field.NewTime(tableName, "operate_time")
	_monitorMsgChannel.IsDel = field.NewString(tableName, "is_del")
	_monitorMsgChannel.MapperMonitorGroup = field.NewString(tableName, "mapper_monitor_group")

	_monitorMsgChannel.fillFieldMap()

	return _monitorMsgChannel
}

type monitorMsgChannel struct {
	monitorMsgChannelDo

	ALL                field.Asterisk
	ChannelID          field.String
	MsgSendProviderID  field.String
	ChannelName        field.String
	ChannelType        field.String
	IsInvalid          field.String
	ForbidType         field.String
	ForbidBegintime    field.String
	ForbidEndtime      field.String
	Note               field.String
	SendRate           field.Int32
	MsgFormat          field.String
	OperateUser        field.String
	OperateTime        field.Time
	IsDel              field.String
	MapperMonitorGroup field.String

	fieldMap map[string]field.Expr
}

func (m monitorMsgChannel) Table(newTableName string) *monitorMsgChannel {
	m.monitorMsgChannelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorMsgChannel) As(alias string) *monitorMsgChannel {
	m.monitorMsgChannelDo.DO = *(m.monitorMsgChannelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorMsgChannel) updateTableName(table string) *monitorMsgChannel {
	m.ALL = field.NewAsterisk(table)
	m.ChannelID = field.NewString(table, "channel_id")
	m.MsgSendProviderID = field.NewString(table, "msg_send_provider_id")
	m.ChannelName = field.NewString(table, "channel_name")
	m.ChannelType = field.NewString(table, "channel_type")
	m.IsInvalid = field.NewString(table, "is_invalid")
	m.ForbidType = field.NewString(table, "forbid_type")
	m.ForbidBegintime = field.NewString(table, "forbid_begintime")
	m.ForbidEndtime = field.NewString(table, "forbid_endtime")
	m.Note = field.NewString(table, "note")
	m.SendRate = field.NewInt32(table, "send_rate")
	m.MsgFormat = field.NewString(table, "msg_format")
	m.OperateUser = field.NewString(table, "operate_user")
	m.OperateTime = field.NewTime(table, "operate_time")
	m.IsDel = field.NewString(table, "is_del")
	m.MapperMonitorGroup = field.NewString(table, "mapper_monitor_group")

	m.fillFieldMap()

	return m
}

func (m *monitorMsgChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorMsgChannel) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["channel_id"] = m.ChannelID
	m.fieldMap["msg_send_provider_id"] = m.MsgSendProviderID
	m.fieldMap["channel_name"] = m.ChannelName
	m.fieldMap["channel_type"] = m.ChannelType
	m.fieldMap["is_invalid"] = m.IsInvalid
	m.fieldMap["forbid_type"] = m.ForbidType
	m.fieldMap["forbid_begintime"] = m.ForbidBegintime
	m.fieldMap["forbid_endtime"] = m.ForbidEndtime
	m.fieldMap["note"] = m.Note
	m.fieldMap["send_rate"] = m.SendRate
	m.fieldMap["msg_format"] = m.MsgFormat
	m.fieldMap["operate_user"] = m.OperateUser
	m.fieldMap["operate_time"] = m.OperateTime
	m.fieldMap["is_del"] = m.IsDel
	m.fieldMap["mapper_monitor_group"] = m.MapperMonitorGroup
}

func (m monitorMsgChannel) clone(db *gorm.DB) monitorMsgChannel {
	m.monitorMsgChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorMsgChannel) replaceDB(db *gorm.DB) monitorMsgChannel {
	m.monitorMsgChannelDo.ReplaceDB(db)
	return m
}

type monitorMsgChannelDo struct{ gen.DO }

type IMonitorMsgChannelDo interface {
	gen.SubQuery
	Debug() IMonitorMsgChannelDo
	WithContext(ctx context.Context) IMonitorMsgChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorMsgChannelDo
	WriteDB() IMonitorMsgChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorMsgChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorMsgChannelDo
	Not(conds ...gen.Condition) IMonitorMsgChannelDo
	Or(conds ...gen.Condition) IMonitorMsgChannelDo
	Select(conds ...field.Expr) IMonitorMsgChannelDo
	Where(conds ...gen.Condition) IMonitorMsgChannelDo
	Order(conds ...field.Expr) IMonitorMsgChannelDo
	Distinct(cols ...field.Expr) IMonitorMsgChannelDo
	Omit(cols ...field.Expr) IMonitorMsgChannelDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorMsgChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorMsgChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorMsgChannelDo
	Group(cols ...field.Expr) IMonitorMsgChannelDo
	Having(conds ...gen.Condition) IMonitorMsgChannelDo
	Limit(limit int) IMonitorMsgChannelDo
	Offset(offset int) IMonitorMsgChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorMsgChannelDo
	Unscoped() IMonitorMsgChannelDo
	Create(values ...*model.MonitorMsgChannel) error
	CreateInBatches(values []*model.MonitorMsgChannel, batchSize int) error
	Save(values ...*model.MonitorMsgChannel) error
	First() (*model.MonitorMsgChannel, error)
	Take() (*model.MonitorMsgChannel, error)
	Last() (*model.MonitorMsgChannel, error)
	Find() ([]*model.MonitorMsgChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorMsgChannel, err error)
	FindInBatches(result *[]*model.MonitorMsgChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorMsgChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorMsgChannelDo
	Assign(attrs ...field.AssignExpr) IMonitorMsgChannelDo
	Joins(fields ...field.RelationField) IMonitorMsgChannelDo
	Preload(fields ...field.RelationField) IMonitorMsgChannelDo
	FirstOrInit() (*model.MonitorMsgChannel, error)
	FirstOrCreate() (*model.MonitorMsgChannel, error)
	FindByPage(offset int, limit int) (result []*model.MonitorMsgChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorMsgChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorMsgChannelDo) Debug() IMonitorMsgChannelDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorMsgChannelDo) WithContext(ctx context.Context) IMonitorMsgChannelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorMsgChannelDo) ReadDB() IMonitorMsgChannelDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorMsgChannelDo) WriteDB() IMonitorMsgChannelDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorMsgChannelDo) Session(config *gorm.Session) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorMsgChannelDo) Clauses(conds ...clause.Expression) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorMsgChannelDo) Returning(value interface{}, columns ...string) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorMsgChannelDo) Not(conds ...gen.Condition) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorMsgChannelDo) Or(conds ...gen.Condition) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorMsgChannelDo) Select(conds ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorMsgChannelDo) Where(conds ...gen.Condition) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorMsgChannelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorMsgChannelDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorMsgChannelDo) Order(conds ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorMsgChannelDo) Distinct(cols ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorMsgChannelDo) Omit(cols ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorMsgChannelDo) Join(table schema.Tabler, on ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorMsgChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorMsgChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorMsgChannelDo) Group(cols ...field.Expr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorMsgChannelDo) Having(conds ...gen.Condition) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorMsgChannelDo) Limit(limit int) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorMsgChannelDo) Offset(offset int) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorMsgChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorMsgChannelDo) Unscoped() IMonitorMsgChannelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorMsgChannelDo) Create(values ...*model.MonitorMsgChannel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorMsgChannelDo) CreateInBatches(values []*model.MonitorMsgChannel, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorMsgChannelDo) Save(values ...*model.MonitorMsgChannel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorMsgChannelDo) First() (*model.MonitorMsgChannel, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorMsgChannel), nil
	}
}

func (m monitorMsgChannelDo) Take() (*model.MonitorMsgChannel, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorMsgChannel), nil
	}
}

func (m monitorMsgChannelDo) Last() (*model.MonitorMsgChannel, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorMsgChannel), nil
	}
}

func (m monitorMsgChannelDo) Find() ([]*model.MonitorMsgChannel, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorMsgChannel), err
}

func (m monitorMsgChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorMsgChannel, err error) {
	buf := make([]*model.MonitorMsgChannel, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorMsgChannelDo) FindInBatches(result *[]*model.MonitorMsgChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorMsgChannelDo) Attrs(attrs ...field.AssignExpr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorMsgChannelDo) Assign(attrs ...field.AssignExpr) IMonitorMsgChannelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorMsgChannelDo) Joins(fields ...field.RelationField) IMonitorMsgChannelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorMsgChannelDo) Preload(fields ...field.RelationField) IMonitorMsgChannelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorMsgChannelDo) FirstOrInit() (*model.MonitorMsgChannel, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorMsgChannel), nil
	}
}

func (m monitorMsgChannelDo) FirstOrCreate() (*model.MonitorMsgChannel, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorMsgChannel), nil
	}
}

func (m monitorMsgChannelDo) FindByPage(offset int, limit int) (result []*model.MonitorMsgChannel, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorMsgChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorMsgChannelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorMsgChannelDo) Delete(models ...*model.MonitorMsgChannel) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorMsgChannelDo) withDO(do gen.Dao) *monitorMsgChannelDo {
	m.DO = *do.(*gen.DO)
	return m
}
