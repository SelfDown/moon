// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorNameCode(db *gorm.DB, opts ...gen.DOOption) monitorNameCode {
	_monitorNameCode := monitorNameCode{}

	_monitorNameCode.monitorNameCodeDo.UseDB(db, opts...)
	_monitorNameCode.monitorNameCodeDo.UseModel(&model.MonitorNameCode{})

	tableName := _monitorNameCode.monitorNameCodeDo.TableName()
	_monitorNameCode.ALL = field.NewAsterisk(tableName)
	_monitorNameCode.ID = field.NewInt32(tableName, "id")
	_monitorNameCode.Containname = field.NewString(tableName, "containname")
	_monitorNameCode.Parsename = field.NewString(tableName, "parsename")
	_monitorNameCode.Other = field.NewString(tableName, "other")

	_monitorNameCode.fillFieldMap()

	return _monitorNameCode
}

type monitorNameCode struct {
	monitorNameCodeDo

	ALL         field.Asterisk
	ID          field.Int32
	Containname field.String
	Parsename   field.String
	Other       field.String

	fieldMap map[string]field.Expr
}

func (m monitorNameCode) Table(newTableName string) *monitorNameCode {
	m.monitorNameCodeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorNameCode) As(alias string) *monitorNameCode {
	m.monitorNameCodeDo.DO = *(m.monitorNameCodeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorNameCode) updateTableName(table string) *monitorNameCode {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Containname = field.NewString(table, "containname")
	m.Parsename = field.NewString(table, "parsename")
	m.Other = field.NewString(table, "other")

	m.fillFieldMap()

	return m
}

func (m *monitorNameCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorNameCode) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["containname"] = m.Containname
	m.fieldMap["parsename"] = m.Parsename
	m.fieldMap["other"] = m.Other
}

func (m monitorNameCode) clone(db *gorm.DB) monitorNameCode {
	m.monitorNameCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorNameCode) replaceDB(db *gorm.DB) monitorNameCode {
	m.monitorNameCodeDo.ReplaceDB(db)
	return m
}

type monitorNameCodeDo struct{ gen.DO }

type IMonitorNameCodeDo interface {
	gen.SubQuery
	Debug() IMonitorNameCodeDo
	WithContext(ctx context.Context) IMonitorNameCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorNameCodeDo
	WriteDB() IMonitorNameCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorNameCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorNameCodeDo
	Not(conds ...gen.Condition) IMonitorNameCodeDo
	Or(conds ...gen.Condition) IMonitorNameCodeDo
	Select(conds ...field.Expr) IMonitorNameCodeDo
	Where(conds ...gen.Condition) IMonitorNameCodeDo
	Order(conds ...field.Expr) IMonitorNameCodeDo
	Distinct(cols ...field.Expr) IMonitorNameCodeDo
	Omit(cols ...field.Expr) IMonitorNameCodeDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorNameCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorNameCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorNameCodeDo
	Group(cols ...field.Expr) IMonitorNameCodeDo
	Having(conds ...gen.Condition) IMonitorNameCodeDo
	Limit(limit int) IMonitorNameCodeDo
	Offset(offset int) IMonitorNameCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorNameCodeDo
	Unscoped() IMonitorNameCodeDo
	Create(values ...*model.MonitorNameCode) error
	CreateInBatches(values []*model.MonitorNameCode, batchSize int) error
	Save(values ...*model.MonitorNameCode) error
	First() (*model.MonitorNameCode, error)
	Take() (*model.MonitorNameCode, error)
	Last() (*model.MonitorNameCode, error)
	Find() ([]*model.MonitorNameCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorNameCode, err error)
	FindInBatches(result *[]*model.MonitorNameCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorNameCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorNameCodeDo
	Assign(attrs ...field.AssignExpr) IMonitorNameCodeDo
	Joins(fields ...field.RelationField) IMonitorNameCodeDo
	Preload(fields ...field.RelationField) IMonitorNameCodeDo
	FirstOrInit() (*model.MonitorNameCode, error)
	FirstOrCreate() (*model.MonitorNameCode, error)
	FindByPage(offset int, limit int) (result []*model.MonitorNameCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorNameCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorNameCodeDo) Debug() IMonitorNameCodeDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorNameCodeDo) WithContext(ctx context.Context) IMonitorNameCodeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorNameCodeDo) ReadDB() IMonitorNameCodeDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorNameCodeDo) WriteDB() IMonitorNameCodeDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorNameCodeDo) Session(config *gorm.Session) IMonitorNameCodeDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorNameCodeDo) Clauses(conds ...clause.Expression) IMonitorNameCodeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorNameCodeDo) Returning(value interface{}, columns ...string) IMonitorNameCodeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorNameCodeDo) Not(conds ...gen.Condition) IMonitorNameCodeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorNameCodeDo) Or(conds ...gen.Condition) IMonitorNameCodeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorNameCodeDo) Select(conds ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorNameCodeDo) Where(conds ...gen.Condition) IMonitorNameCodeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorNameCodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorNameCodeDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorNameCodeDo) Order(conds ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorNameCodeDo) Distinct(cols ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorNameCodeDo) Omit(cols ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorNameCodeDo) Join(table schema.Tabler, on ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorNameCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorNameCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorNameCodeDo) Group(cols ...field.Expr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorNameCodeDo) Having(conds ...gen.Condition) IMonitorNameCodeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorNameCodeDo) Limit(limit int) IMonitorNameCodeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorNameCodeDo) Offset(offset int) IMonitorNameCodeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorNameCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorNameCodeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorNameCodeDo) Unscoped() IMonitorNameCodeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorNameCodeDo) Create(values ...*model.MonitorNameCode) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorNameCodeDo) CreateInBatches(values []*model.MonitorNameCode, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorNameCodeDo) Save(values ...*model.MonitorNameCode) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorNameCodeDo) First() (*model.MonitorNameCode, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorNameCode), nil
	}
}

func (m monitorNameCodeDo) Take() (*model.MonitorNameCode, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorNameCode), nil
	}
}

func (m monitorNameCodeDo) Last() (*model.MonitorNameCode, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorNameCode), nil
	}
}

func (m monitorNameCodeDo) Find() ([]*model.MonitorNameCode, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorNameCode), err
}

func (m monitorNameCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorNameCode, err error) {
	buf := make([]*model.MonitorNameCode, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorNameCodeDo) FindInBatches(result *[]*model.MonitorNameCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorNameCodeDo) Attrs(attrs ...field.AssignExpr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorNameCodeDo) Assign(attrs ...field.AssignExpr) IMonitorNameCodeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorNameCodeDo) Joins(fields ...field.RelationField) IMonitorNameCodeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorNameCodeDo) Preload(fields ...field.RelationField) IMonitorNameCodeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorNameCodeDo) FirstOrInit() (*model.MonitorNameCode, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorNameCode), nil
	}
}

func (m monitorNameCodeDo) FirstOrCreate() (*model.MonitorNameCode, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorNameCode), nil
	}
}

func (m monitorNameCodeDo) FindByPage(offset int, limit int) (result []*model.MonitorNameCode, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorNameCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorNameCodeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorNameCodeDo) Delete(models ...*model.MonitorNameCode) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorNameCodeDo) withDO(do gen.Dao) *monitorNameCodeDo {
	m.DO = *do.(*gen.DO)
	return m
}
