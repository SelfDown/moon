// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorRecoveryAccess(db *gorm.DB, opts ...gen.DOOption) monitorRecoveryAccess {
	_monitorRecoveryAccess := monitorRecoveryAccess{}

	_monitorRecoveryAccess.monitorRecoveryAccessDo.UseDB(db, opts...)
	_monitorRecoveryAccess.monitorRecoveryAccessDo.UseModel(&model.MonitorRecoveryAccess{})

	tableName := _monitorRecoveryAccess.monitorRecoveryAccessDo.TableName()
	_monitorRecoveryAccess.ALL = field.NewAsterisk(tableName)
	_monitorRecoveryAccess.MonitorRecoveryAccessID = field.NewString(tableName, "monitor_recovery_access_id")
	_monitorRecoveryAccess.Project = field.NewString(tableName, "project")
	_monitorRecoveryAccess.ApplyZones = field.NewString(tableName, "apply_zones")
	_monitorRecoveryAccess.ApplyIps = field.NewString(tableName, "apply_ips")
	_monitorRecoveryAccess.IsForbid = field.NewString(tableName, "is_forbid")
	_monitorRecoveryAccess.MonitorRecoveryAccessName = field.NewString(tableName, "monitor_recovery_access_name")

	_monitorRecoveryAccess.fillFieldMap()

	return _monitorRecoveryAccess
}

type monitorRecoveryAccess struct {
	monitorRecoveryAccessDo

	ALL                       field.Asterisk
	MonitorRecoveryAccessID   field.String // ID
	Project                   field.String // 项目，只能存储一个
	ApplyZones                field.String // 限定区域，多个逗号分隔
	ApplyIps                  field.String // 限定IP，多个逗号分隔，可星号匹配
	IsForbid                  field.String // 是否禁用， 1禁用，0启用
	MonitorRecoveryAccessName field.String // 接入名称

	fieldMap map[string]field.Expr
}

func (m monitorRecoveryAccess) Table(newTableName string) *monitorRecoveryAccess {
	m.monitorRecoveryAccessDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorRecoveryAccess) As(alias string) *monitorRecoveryAccess {
	m.monitorRecoveryAccessDo.DO = *(m.monitorRecoveryAccessDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorRecoveryAccess) updateTableName(table string) *monitorRecoveryAccess {
	m.ALL = field.NewAsterisk(table)
	m.MonitorRecoveryAccessID = field.NewString(table, "monitor_recovery_access_id")
	m.Project = field.NewString(table, "project")
	m.ApplyZones = field.NewString(table, "apply_zones")
	m.ApplyIps = field.NewString(table, "apply_ips")
	m.IsForbid = field.NewString(table, "is_forbid")
	m.MonitorRecoveryAccessName = field.NewString(table, "monitor_recovery_access_name")

	m.fillFieldMap()

	return m
}

func (m *monitorRecoveryAccess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorRecoveryAccess) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["monitor_recovery_access_id"] = m.MonitorRecoveryAccessID
	m.fieldMap["project"] = m.Project
	m.fieldMap["apply_zones"] = m.ApplyZones
	m.fieldMap["apply_ips"] = m.ApplyIps
	m.fieldMap["is_forbid"] = m.IsForbid
	m.fieldMap["monitor_recovery_access_name"] = m.MonitorRecoveryAccessName
}

func (m monitorRecoveryAccess) clone(db *gorm.DB) monitorRecoveryAccess {
	m.monitorRecoveryAccessDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorRecoveryAccess) replaceDB(db *gorm.DB) monitorRecoveryAccess {
	m.monitorRecoveryAccessDo.ReplaceDB(db)
	return m
}

type monitorRecoveryAccessDo struct{ gen.DO }

type IMonitorRecoveryAccessDo interface {
	gen.SubQuery
	Debug() IMonitorRecoveryAccessDo
	WithContext(ctx context.Context) IMonitorRecoveryAccessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorRecoveryAccessDo
	WriteDB() IMonitorRecoveryAccessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorRecoveryAccessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorRecoveryAccessDo
	Not(conds ...gen.Condition) IMonitorRecoveryAccessDo
	Or(conds ...gen.Condition) IMonitorRecoveryAccessDo
	Select(conds ...field.Expr) IMonitorRecoveryAccessDo
	Where(conds ...gen.Condition) IMonitorRecoveryAccessDo
	Order(conds ...field.Expr) IMonitorRecoveryAccessDo
	Distinct(cols ...field.Expr) IMonitorRecoveryAccessDo
	Omit(cols ...field.Expr) IMonitorRecoveryAccessDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessDo
	Group(cols ...field.Expr) IMonitorRecoveryAccessDo
	Having(conds ...gen.Condition) IMonitorRecoveryAccessDo
	Limit(limit int) IMonitorRecoveryAccessDo
	Offset(offset int) IMonitorRecoveryAccessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorRecoveryAccessDo
	Unscoped() IMonitorRecoveryAccessDo
	Create(values ...*model.MonitorRecoveryAccess) error
	CreateInBatches(values []*model.MonitorRecoveryAccess, batchSize int) error
	Save(values ...*model.MonitorRecoveryAccess) error
	First() (*model.MonitorRecoveryAccess, error)
	Take() (*model.MonitorRecoveryAccess, error)
	Last() (*model.MonitorRecoveryAccess, error)
	Find() ([]*model.MonitorRecoveryAccess, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorRecoveryAccess, err error)
	FindInBatches(result *[]*model.MonitorRecoveryAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorRecoveryAccess) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorRecoveryAccessDo
	Assign(attrs ...field.AssignExpr) IMonitorRecoveryAccessDo
	Joins(fields ...field.RelationField) IMonitorRecoveryAccessDo
	Preload(fields ...field.RelationField) IMonitorRecoveryAccessDo
	FirstOrInit() (*model.MonitorRecoveryAccess, error)
	FirstOrCreate() (*model.MonitorRecoveryAccess, error)
	FindByPage(offset int, limit int) (result []*model.MonitorRecoveryAccess, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorRecoveryAccessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorRecoveryAccessDo) Debug() IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorRecoveryAccessDo) WithContext(ctx context.Context) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorRecoveryAccessDo) ReadDB() IMonitorRecoveryAccessDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorRecoveryAccessDo) WriteDB() IMonitorRecoveryAccessDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorRecoveryAccessDo) Session(config *gorm.Session) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorRecoveryAccessDo) Clauses(conds ...clause.Expression) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorRecoveryAccessDo) Returning(value interface{}, columns ...string) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorRecoveryAccessDo) Not(conds ...gen.Condition) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorRecoveryAccessDo) Or(conds ...gen.Condition) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorRecoveryAccessDo) Select(conds ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorRecoveryAccessDo) Where(conds ...gen.Condition) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorRecoveryAccessDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorRecoveryAccessDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorRecoveryAccessDo) Order(conds ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorRecoveryAccessDo) Distinct(cols ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorRecoveryAccessDo) Omit(cols ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorRecoveryAccessDo) Join(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorRecoveryAccessDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorRecoveryAccessDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorRecoveryAccessDo) Group(cols ...field.Expr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorRecoveryAccessDo) Having(conds ...gen.Condition) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorRecoveryAccessDo) Limit(limit int) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorRecoveryAccessDo) Offset(offset int) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorRecoveryAccessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorRecoveryAccessDo) Unscoped() IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorRecoveryAccessDo) Create(values ...*model.MonitorRecoveryAccess) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorRecoveryAccessDo) CreateInBatches(values []*model.MonitorRecoveryAccess, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorRecoveryAccessDo) Save(values ...*model.MonitorRecoveryAccess) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorRecoveryAccessDo) First() (*model.MonitorRecoveryAccess, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccess), nil
	}
}

func (m monitorRecoveryAccessDo) Take() (*model.MonitorRecoveryAccess, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccess), nil
	}
}

func (m monitorRecoveryAccessDo) Last() (*model.MonitorRecoveryAccess, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccess), nil
	}
}

func (m monitorRecoveryAccessDo) Find() ([]*model.MonitorRecoveryAccess, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorRecoveryAccess), err
}

func (m monitorRecoveryAccessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorRecoveryAccess, err error) {
	buf := make([]*model.MonitorRecoveryAccess, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorRecoveryAccessDo) FindInBatches(result *[]*model.MonitorRecoveryAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorRecoveryAccessDo) Attrs(attrs ...field.AssignExpr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorRecoveryAccessDo) Assign(attrs ...field.AssignExpr) IMonitorRecoveryAccessDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorRecoveryAccessDo) Joins(fields ...field.RelationField) IMonitorRecoveryAccessDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorRecoveryAccessDo) Preload(fields ...field.RelationField) IMonitorRecoveryAccessDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorRecoveryAccessDo) FirstOrInit() (*model.MonitorRecoveryAccess, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccess), nil
	}
}

func (m monitorRecoveryAccessDo) FirstOrCreate() (*model.MonitorRecoveryAccess, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccess), nil
	}
}

func (m monitorRecoveryAccessDo) FindByPage(offset int, limit int) (result []*model.MonitorRecoveryAccess, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorRecoveryAccessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorRecoveryAccessDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorRecoveryAccessDo) Delete(models ...*model.MonitorRecoveryAccess) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorRecoveryAccessDo) withDO(do gen.Dao) *monitorRecoveryAccessDo {
	m.DO = *do.(*gen.DO)
	return m
}
