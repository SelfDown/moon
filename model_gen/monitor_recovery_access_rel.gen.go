// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorRecoveryAccessRel(db *gorm.DB, opts ...gen.DOOption) monitorRecoveryAccessRel {
	_monitorRecoveryAccessRel := monitorRecoveryAccessRel{}

	_monitorRecoveryAccessRel.monitorRecoveryAccessRelDo.UseDB(db, opts...)
	_monitorRecoveryAccessRel.monitorRecoveryAccessRelDo.UseModel(&model.MonitorRecoveryAccessRel{})

	tableName := _monitorRecoveryAccessRel.monitorRecoveryAccessRelDo.TableName()
	_monitorRecoveryAccessRel.ALL = field.NewAsterisk(tableName)
	_monitorRecoveryAccessRel.MonitorRecoveryAccessRelID = field.NewString(tableName, "monitor_recovery_access_rel_id")
	_monitorRecoveryAccessRel.RecoveryStrategyID = field.NewString(tableName, "recovery_strategy_id")
	_monitorRecoveryAccessRel.MonitorRecoveryAccessID = field.NewString(tableName, "monitor_recovery_access_id")

	_monitorRecoveryAccessRel.fillFieldMap()

	return _monitorRecoveryAccessRel
}

type monitorRecoveryAccessRel struct {
	monitorRecoveryAccessRelDo

	ALL                        field.Asterisk
	MonitorRecoveryAccessRelID field.String // ID
	RecoveryStrategyID         field.String // ID
	MonitorRecoveryAccessID    field.String // ID

	fieldMap map[string]field.Expr
}

func (m monitorRecoveryAccessRel) Table(newTableName string) *monitorRecoveryAccessRel {
	m.monitorRecoveryAccessRelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorRecoveryAccessRel) As(alias string) *monitorRecoveryAccessRel {
	m.monitorRecoveryAccessRelDo.DO = *(m.monitorRecoveryAccessRelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorRecoveryAccessRel) updateTableName(table string) *monitorRecoveryAccessRel {
	m.ALL = field.NewAsterisk(table)
	m.MonitorRecoveryAccessRelID = field.NewString(table, "monitor_recovery_access_rel_id")
	m.RecoveryStrategyID = field.NewString(table, "recovery_strategy_id")
	m.MonitorRecoveryAccessID = field.NewString(table, "monitor_recovery_access_id")

	m.fillFieldMap()

	return m
}

func (m *monitorRecoveryAccessRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorRecoveryAccessRel) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["monitor_recovery_access_rel_id"] = m.MonitorRecoveryAccessRelID
	m.fieldMap["recovery_strategy_id"] = m.RecoveryStrategyID
	m.fieldMap["monitor_recovery_access_id"] = m.MonitorRecoveryAccessID
}

func (m monitorRecoveryAccessRel) clone(db *gorm.DB) monitorRecoveryAccessRel {
	m.monitorRecoveryAccessRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorRecoveryAccessRel) replaceDB(db *gorm.DB) monitorRecoveryAccessRel {
	m.monitorRecoveryAccessRelDo.ReplaceDB(db)
	return m
}

type monitorRecoveryAccessRelDo struct{ gen.DO }

type IMonitorRecoveryAccessRelDo interface {
	gen.SubQuery
	Debug() IMonitorRecoveryAccessRelDo
	WithContext(ctx context.Context) IMonitorRecoveryAccessRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorRecoveryAccessRelDo
	WriteDB() IMonitorRecoveryAccessRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorRecoveryAccessRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorRecoveryAccessRelDo
	Not(conds ...gen.Condition) IMonitorRecoveryAccessRelDo
	Or(conds ...gen.Condition) IMonitorRecoveryAccessRelDo
	Select(conds ...field.Expr) IMonitorRecoveryAccessRelDo
	Where(conds ...gen.Condition) IMonitorRecoveryAccessRelDo
	Order(conds ...field.Expr) IMonitorRecoveryAccessRelDo
	Distinct(cols ...field.Expr) IMonitorRecoveryAccessRelDo
	Omit(cols ...field.Expr) IMonitorRecoveryAccessRelDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessRelDo
	Group(cols ...field.Expr) IMonitorRecoveryAccessRelDo
	Having(conds ...gen.Condition) IMonitorRecoveryAccessRelDo
	Limit(limit int) IMonitorRecoveryAccessRelDo
	Offset(offset int) IMonitorRecoveryAccessRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorRecoveryAccessRelDo
	Unscoped() IMonitorRecoveryAccessRelDo
	Create(values ...*model.MonitorRecoveryAccessRel) error
	CreateInBatches(values []*model.MonitorRecoveryAccessRel, batchSize int) error
	Save(values ...*model.MonitorRecoveryAccessRel) error
	First() (*model.MonitorRecoveryAccessRel, error)
	Take() (*model.MonitorRecoveryAccessRel, error)
	Last() (*model.MonitorRecoveryAccessRel, error)
	Find() ([]*model.MonitorRecoveryAccessRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorRecoveryAccessRel, err error)
	FindInBatches(result *[]*model.MonitorRecoveryAccessRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorRecoveryAccessRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorRecoveryAccessRelDo
	Assign(attrs ...field.AssignExpr) IMonitorRecoveryAccessRelDo
	Joins(fields ...field.RelationField) IMonitorRecoveryAccessRelDo
	Preload(fields ...field.RelationField) IMonitorRecoveryAccessRelDo
	FirstOrInit() (*model.MonitorRecoveryAccessRel, error)
	FirstOrCreate() (*model.MonitorRecoveryAccessRel, error)
	FindByPage(offset int, limit int) (result []*model.MonitorRecoveryAccessRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorRecoveryAccessRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorRecoveryAccessRelDo) Debug() IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorRecoveryAccessRelDo) WithContext(ctx context.Context) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorRecoveryAccessRelDo) ReadDB() IMonitorRecoveryAccessRelDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorRecoveryAccessRelDo) WriteDB() IMonitorRecoveryAccessRelDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorRecoveryAccessRelDo) Session(config *gorm.Session) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorRecoveryAccessRelDo) Clauses(conds ...clause.Expression) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorRecoveryAccessRelDo) Returning(value interface{}, columns ...string) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorRecoveryAccessRelDo) Not(conds ...gen.Condition) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorRecoveryAccessRelDo) Or(conds ...gen.Condition) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorRecoveryAccessRelDo) Select(conds ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorRecoveryAccessRelDo) Where(conds ...gen.Condition) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorRecoveryAccessRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorRecoveryAccessRelDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorRecoveryAccessRelDo) Order(conds ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorRecoveryAccessRelDo) Distinct(cols ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorRecoveryAccessRelDo) Omit(cols ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorRecoveryAccessRelDo) Join(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorRecoveryAccessRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorRecoveryAccessRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorRecoveryAccessRelDo) Group(cols ...field.Expr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorRecoveryAccessRelDo) Having(conds ...gen.Condition) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorRecoveryAccessRelDo) Limit(limit int) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorRecoveryAccessRelDo) Offset(offset int) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorRecoveryAccessRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorRecoveryAccessRelDo) Unscoped() IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorRecoveryAccessRelDo) Create(values ...*model.MonitorRecoveryAccessRel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorRecoveryAccessRelDo) CreateInBatches(values []*model.MonitorRecoveryAccessRel, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorRecoveryAccessRelDo) Save(values ...*model.MonitorRecoveryAccessRel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorRecoveryAccessRelDo) First() (*model.MonitorRecoveryAccessRel, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccessRel), nil
	}
}

func (m monitorRecoveryAccessRelDo) Take() (*model.MonitorRecoveryAccessRel, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccessRel), nil
	}
}

func (m monitorRecoveryAccessRelDo) Last() (*model.MonitorRecoveryAccessRel, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccessRel), nil
	}
}

func (m monitorRecoveryAccessRelDo) Find() ([]*model.MonitorRecoveryAccessRel, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorRecoveryAccessRel), err
}

func (m monitorRecoveryAccessRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorRecoveryAccessRel, err error) {
	buf := make([]*model.MonitorRecoveryAccessRel, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorRecoveryAccessRelDo) FindInBatches(result *[]*model.MonitorRecoveryAccessRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorRecoveryAccessRelDo) Attrs(attrs ...field.AssignExpr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorRecoveryAccessRelDo) Assign(attrs ...field.AssignExpr) IMonitorRecoveryAccessRelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorRecoveryAccessRelDo) Joins(fields ...field.RelationField) IMonitorRecoveryAccessRelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorRecoveryAccessRelDo) Preload(fields ...field.RelationField) IMonitorRecoveryAccessRelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorRecoveryAccessRelDo) FirstOrInit() (*model.MonitorRecoveryAccessRel, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccessRel), nil
	}
}

func (m monitorRecoveryAccessRelDo) FirstOrCreate() (*model.MonitorRecoveryAccessRel, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorRecoveryAccessRel), nil
	}
}

func (m monitorRecoveryAccessRelDo) FindByPage(offset int, limit int) (result []*model.MonitorRecoveryAccessRel, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorRecoveryAccessRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorRecoveryAccessRelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorRecoveryAccessRelDo) Delete(models ...*model.MonitorRecoveryAccessRel) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorRecoveryAccessRelDo) withDO(do gen.Dao) *monitorRecoveryAccessRelDo {
	m.DO = *do.(*gen.DO)
	return m
}
