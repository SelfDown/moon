// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMonitorServerDashboard(db *gorm.DB, opts ...gen.DOOption) monitorServerDashboard {
	_monitorServerDashboard := monitorServerDashboard{}

	_monitorServerDashboard.monitorServerDashboardDo.UseDB(db, opts...)
	_monitorServerDashboard.monitorServerDashboardDo.UseModel(&model.MonitorServerDashboard{})

	tableName := _monitorServerDashboard.monitorServerDashboardDo.TableName()
	_monitorServerDashboard.ALL = field.NewAsterisk(tableName)
	_monitorServerDashboard.DashboardID = field.NewString(tableName, "dashboard_id")
	_monitorServerDashboard.ServerID = field.NewString(tableName, "server_id")
	_monitorServerDashboard.Title = field.NewString(tableName, "title")
	_monitorServerDashboard.URL = field.NewString(tableName, "url")
	_monitorServerDashboard.Folderuid = field.NewString(tableName, "folderuid")
	_monitorServerDashboard.Foldertitle = field.NewString(tableName, "foldertitle")
	_monitorServerDashboard.Folderurl = field.NewString(tableName, "folderurl")
	_monitorServerDashboard.ID = field.NewString(tableName, "id")
	_monitorServerDashboard.Tags = field.NewString(tableName, "tags")
	_monitorServerDashboard.IsRelServer = field.NewString(tableName, "is_rel_server")
	_monitorServerDashboard.DashboardType = field.NewString(tableName, "dashboard_type")
	_monitorServerDashboard.IsDisable = field.NewString(tableName, "is_disable")
	_monitorServerDashboard.ProjectCode = field.NewString(tableName, "project_code")

	_monitorServerDashboard.fillFieldMap()

	return _monitorServerDashboard
}

type monitorServerDashboard struct {
	monitorServerDashboardDo

	ALL           field.Asterisk
	DashboardID   field.String
	ServerID      field.String
	Title         field.String
	URL           field.String
	Folderuid     field.String
	Foldertitle   field.String
	Folderurl     field.String
	ID            field.String
	Tags          field.String
	IsRelServer   field.String
	DashboardType field.String
	IsDisable     field.String
	ProjectCode   field.String

	fieldMap map[string]field.Expr
}

func (m monitorServerDashboard) Table(newTableName string) *monitorServerDashboard {
	m.monitorServerDashboardDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorServerDashboard) As(alias string) *monitorServerDashboard {
	m.monitorServerDashboardDo.DO = *(m.monitorServerDashboardDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorServerDashboard) updateTableName(table string) *monitorServerDashboard {
	m.ALL = field.NewAsterisk(table)
	m.DashboardID = field.NewString(table, "dashboard_id")
	m.ServerID = field.NewString(table, "server_id")
	m.Title = field.NewString(table, "title")
	m.URL = field.NewString(table, "url")
	m.Folderuid = field.NewString(table, "folderuid")
	m.Foldertitle = field.NewString(table, "foldertitle")
	m.Folderurl = field.NewString(table, "folderurl")
	m.ID = field.NewString(table, "id")
	m.Tags = field.NewString(table, "tags")
	m.IsRelServer = field.NewString(table, "is_rel_server")
	m.DashboardType = field.NewString(table, "dashboard_type")
	m.IsDisable = field.NewString(table, "is_disable")
	m.ProjectCode = field.NewString(table, "project_code")

	m.fillFieldMap()

	return m
}

func (m *monitorServerDashboard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorServerDashboard) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["dashboard_id"] = m.DashboardID
	m.fieldMap["server_id"] = m.ServerID
	m.fieldMap["title"] = m.Title
	m.fieldMap["url"] = m.URL
	m.fieldMap["folderuid"] = m.Folderuid
	m.fieldMap["foldertitle"] = m.Foldertitle
	m.fieldMap["folderurl"] = m.Folderurl
	m.fieldMap["id"] = m.ID
	m.fieldMap["tags"] = m.Tags
	m.fieldMap["is_rel_server"] = m.IsRelServer
	m.fieldMap["dashboard_type"] = m.DashboardType
	m.fieldMap["is_disable"] = m.IsDisable
	m.fieldMap["project_code"] = m.ProjectCode
}

func (m monitorServerDashboard) clone(db *gorm.DB) monitorServerDashboard {
	m.monitorServerDashboardDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorServerDashboard) replaceDB(db *gorm.DB) monitorServerDashboard {
	m.monitorServerDashboardDo.ReplaceDB(db)
	return m
}

type monitorServerDashboardDo struct{ gen.DO }

type IMonitorServerDashboardDo interface {
	gen.SubQuery
	Debug() IMonitorServerDashboardDo
	WithContext(ctx context.Context) IMonitorServerDashboardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorServerDashboardDo
	WriteDB() IMonitorServerDashboardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorServerDashboardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorServerDashboardDo
	Not(conds ...gen.Condition) IMonitorServerDashboardDo
	Or(conds ...gen.Condition) IMonitorServerDashboardDo
	Select(conds ...field.Expr) IMonitorServerDashboardDo
	Where(conds ...gen.Condition) IMonitorServerDashboardDo
	Order(conds ...field.Expr) IMonitorServerDashboardDo
	Distinct(cols ...field.Expr) IMonitorServerDashboardDo
	Omit(cols ...field.Expr) IMonitorServerDashboardDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorServerDashboardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorServerDashboardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorServerDashboardDo
	Group(cols ...field.Expr) IMonitorServerDashboardDo
	Having(conds ...gen.Condition) IMonitorServerDashboardDo
	Limit(limit int) IMonitorServerDashboardDo
	Offset(offset int) IMonitorServerDashboardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorServerDashboardDo
	Unscoped() IMonitorServerDashboardDo
	Create(values ...*model.MonitorServerDashboard) error
	CreateInBatches(values []*model.MonitorServerDashboard, batchSize int) error
	Save(values ...*model.MonitorServerDashboard) error
	First() (*model.MonitorServerDashboard, error)
	Take() (*model.MonitorServerDashboard, error)
	Last() (*model.MonitorServerDashboard, error)
	Find() ([]*model.MonitorServerDashboard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorServerDashboard, err error)
	FindInBatches(result *[]*model.MonitorServerDashboard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorServerDashboard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorServerDashboardDo
	Assign(attrs ...field.AssignExpr) IMonitorServerDashboardDo
	Joins(fields ...field.RelationField) IMonitorServerDashboardDo
	Preload(fields ...field.RelationField) IMonitorServerDashboardDo
	FirstOrInit() (*model.MonitorServerDashboard, error)
	FirstOrCreate() (*model.MonitorServerDashboard, error)
	FindByPage(offset int, limit int) (result []*model.MonitorServerDashboard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorServerDashboardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorServerDashboardDo) Debug() IMonitorServerDashboardDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorServerDashboardDo) WithContext(ctx context.Context) IMonitorServerDashboardDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorServerDashboardDo) ReadDB() IMonitorServerDashboardDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorServerDashboardDo) WriteDB() IMonitorServerDashboardDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorServerDashboardDo) Session(config *gorm.Session) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorServerDashboardDo) Clauses(conds ...clause.Expression) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorServerDashboardDo) Returning(value interface{}, columns ...string) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorServerDashboardDo) Not(conds ...gen.Condition) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorServerDashboardDo) Or(conds ...gen.Condition) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorServerDashboardDo) Select(conds ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorServerDashboardDo) Where(conds ...gen.Condition) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorServerDashboardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMonitorServerDashboardDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m monitorServerDashboardDo) Order(conds ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorServerDashboardDo) Distinct(cols ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorServerDashboardDo) Omit(cols ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorServerDashboardDo) Join(table schema.Tabler, on ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorServerDashboardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorServerDashboardDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorServerDashboardDo) Group(cols ...field.Expr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorServerDashboardDo) Having(conds ...gen.Condition) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorServerDashboardDo) Limit(limit int) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorServerDashboardDo) Offset(offset int) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorServerDashboardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorServerDashboardDo) Unscoped() IMonitorServerDashboardDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorServerDashboardDo) Create(values ...*model.MonitorServerDashboard) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorServerDashboardDo) CreateInBatches(values []*model.MonitorServerDashboard, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorServerDashboardDo) Save(values ...*model.MonitorServerDashboard) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorServerDashboardDo) First() (*model.MonitorServerDashboard, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorServerDashboard), nil
	}
}

func (m monitorServerDashboardDo) Take() (*model.MonitorServerDashboard, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorServerDashboard), nil
	}
}

func (m monitorServerDashboardDo) Last() (*model.MonitorServerDashboard, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorServerDashboard), nil
	}
}

func (m monitorServerDashboardDo) Find() ([]*model.MonitorServerDashboard, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorServerDashboard), err
}

func (m monitorServerDashboardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorServerDashboard, err error) {
	buf := make([]*model.MonitorServerDashboard, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorServerDashboardDo) FindInBatches(result *[]*model.MonitorServerDashboard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorServerDashboardDo) Attrs(attrs ...field.AssignExpr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorServerDashboardDo) Assign(attrs ...field.AssignExpr) IMonitorServerDashboardDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorServerDashboardDo) Joins(fields ...field.RelationField) IMonitorServerDashboardDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorServerDashboardDo) Preload(fields ...field.RelationField) IMonitorServerDashboardDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorServerDashboardDo) FirstOrInit() (*model.MonitorServerDashboard, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorServerDashboard), nil
	}
}

func (m monitorServerDashboardDo) FirstOrCreate() (*model.MonitorServerDashboard, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorServerDashboard), nil
	}
}

func (m monitorServerDashboardDo) FindByPage(offset int, limit int) (result []*model.MonitorServerDashboard, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorServerDashboardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorServerDashboardDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorServerDashboardDo) Delete(models ...*model.MonitorServerDashboard) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorServerDashboardDo) withDO(do gen.Dao) *monitorServerDashboardDo {
	m.DO = *do.(*gen.DO)
	return m
}
