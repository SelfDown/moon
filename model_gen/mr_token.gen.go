// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMrToken(db *gorm.DB, opts ...gen.DOOption) mrToken {
	_mrToken := mrToken{}

	_mrToken.mrTokenDo.UseDB(db, opts...)
	_mrToken.mrTokenDo.UseModel(&model.MrToken{})

	tableName := _mrToken.mrTokenDo.TableName()
	_mrToken.ALL = field.NewAsterisk(tableName)
	_mrToken.MrTokenID = field.NewString(tableName, "mr_token_id")
	_mrToken.Username = field.NewString(tableName, "username")
	_mrToken.Token = field.NewString(tableName, "token")

	_mrToken.fillFieldMap()

	return _mrToken
}

type mrToken struct {
	mrTokenDo

	ALL       field.Asterisk
	MrTokenID field.String
	Username  field.String
	Token     field.String

	fieldMap map[string]field.Expr
}

func (m mrToken) Table(newTableName string) *mrToken {
	m.mrTokenDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mrToken) As(alias string) *mrToken {
	m.mrTokenDo.DO = *(m.mrTokenDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mrToken) updateTableName(table string) *mrToken {
	m.ALL = field.NewAsterisk(table)
	m.MrTokenID = field.NewString(table, "mr_token_id")
	m.Username = field.NewString(table, "username")
	m.Token = field.NewString(table, "token")

	m.fillFieldMap()

	return m
}

func (m *mrToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mrToken) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["mr_token_id"] = m.MrTokenID
	m.fieldMap["username"] = m.Username
	m.fieldMap["token"] = m.Token
}

func (m mrToken) clone(db *gorm.DB) mrToken {
	m.mrTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mrToken) replaceDB(db *gorm.DB) mrToken {
	m.mrTokenDo.ReplaceDB(db)
	return m
}

type mrTokenDo struct{ gen.DO }

type IMrTokenDo interface {
	gen.SubQuery
	Debug() IMrTokenDo
	WithContext(ctx context.Context) IMrTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMrTokenDo
	WriteDB() IMrTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMrTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMrTokenDo
	Not(conds ...gen.Condition) IMrTokenDo
	Or(conds ...gen.Condition) IMrTokenDo
	Select(conds ...field.Expr) IMrTokenDo
	Where(conds ...gen.Condition) IMrTokenDo
	Order(conds ...field.Expr) IMrTokenDo
	Distinct(cols ...field.Expr) IMrTokenDo
	Omit(cols ...field.Expr) IMrTokenDo
	Join(table schema.Tabler, on ...field.Expr) IMrTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMrTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMrTokenDo
	Group(cols ...field.Expr) IMrTokenDo
	Having(conds ...gen.Condition) IMrTokenDo
	Limit(limit int) IMrTokenDo
	Offset(offset int) IMrTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMrTokenDo
	Unscoped() IMrTokenDo
	Create(values ...*model.MrToken) error
	CreateInBatches(values []*model.MrToken, batchSize int) error
	Save(values ...*model.MrToken) error
	First() (*model.MrToken, error)
	Take() (*model.MrToken, error)
	Last() (*model.MrToken, error)
	Find() ([]*model.MrToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MrToken, err error)
	FindInBatches(result *[]*model.MrToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MrToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMrTokenDo
	Assign(attrs ...field.AssignExpr) IMrTokenDo
	Joins(fields ...field.RelationField) IMrTokenDo
	Preload(fields ...field.RelationField) IMrTokenDo
	FirstOrInit() (*model.MrToken, error)
	FirstOrCreate() (*model.MrToken, error)
	FindByPage(offset int, limit int) (result []*model.MrToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMrTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mrTokenDo) Debug() IMrTokenDo {
	return m.withDO(m.DO.Debug())
}

func (m mrTokenDo) WithContext(ctx context.Context) IMrTokenDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mrTokenDo) ReadDB() IMrTokenDo {
	return m.Clauses(dbresolver.Read)
}

func (m mrTokenDo) WriteDB() IMrTokenDo {
	return m.Clauses(dbresolver.Write)
}

func (m mrTokenDo) Session(config *gorm.Session) IMrTokenDo {
	return m.withDO(m.DO.Session(config))
}

func (m mrTokenDo) Clauses(conds ...clause.Expression) IMrTokenDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mrTokenDo) Returning(value interface{}, columns ...string) IMrTokenDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mrTokenDo) Not(conds ...gen.Condition) IMrTokenDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mrTokenDo) Or(conds ...gen.Condition) IMrTokenDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mrTokenDo) Select(conds ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mrTokenDo) Where(conds ...gen.Condition) IMrTokenDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mrTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMrTokenDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m mrTokenDo) Order(conds ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mrTokenDo) Distinct(cols ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mrTokenDo) Omit(cols ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mrTokenDo) Join(table schema.Tabler, on ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mrTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mrTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mrTokenDo) Group(cols ...field.Expr) IMrTokenDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mrTokenDo) Having(conds ...gen.Condition) IMrTokenDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mrTokenDo) Limit(limit int) IMrTokenDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mrTokenDo) Offset(offset int) IMrTokenDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mrTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMrTokenDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mrTokenDo) Unscoped() IMrTokenDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mrTokenDo) Create(values ...*model.MrToken) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mrTokenDo) CreateInBatches(values []*model.MrToken, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mrTokenDo) Save(values ...*model.MrToken) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mrTokenDo) First() (*model.MrToken, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MrToken), nil
	}
}

func (m mrTokenDo) Take() (*model.MrToken, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MrToken), nil
	}
}

func (m mrTokenDo) Last() (*model.MrToken, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MrToken), nil
	}
}

func (m mrTokenDo) Find() ([]*model.MrToken, error) {
	result, err := m.DO.Find()
	return result.([]*model.MrToken), err
}

func (m mrTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MrToken, err error) {
	buf := make([]*model.MrToken, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mrTokenDo) FindInBatches(result *[]*model.MrToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mrTokenDo) Attrs(attrs ...field.AssignExpr) IMrTokenDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mrTokenDo) Assign(attrs ...field.AssignExpr) IMrTokenDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mrTokenDo) Joins(fields ...field.RelationField) IMrTokenDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mrTokenDo) Preload(fields ...field.RelationField) IMrTokenDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mrTokenDo) FirstOrInit() (*model.MrToken, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MrToken), nil
	}
}

func (m mrTokenDo) FirstOrCreate() (*model.MrToken, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MrToken), nil
	}
}

func (m mrTokenDo) FindByPage(offset int, limit int) (result []*model.MrToken, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mrTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mrTokenDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mrTokenDo) Delete(models ...*model.MrToken) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mrTokenDo) withDO(do gen.Dao) *mrTokenDo {
	m.DO = *do.(*gen.DO)
	return m
}
