// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMsgSendLog(db *gorm.DB, opts ...gen.DOOption) msgSendLog {
	_msgSendLog := msgSendLog{}

	_msgSendLog.msgSendLogDo.UseDB(db, opts...)
	_msgSendLog.msgSendLogDo.UseModel(&model.MsgSendLog{})

	tableName := _msgSendLog.msgSendLogDo.TableName()
	_msgSendLog.ALL = field.NewAsterisk(tableName)
	_msgSendLog.MsgSendLogID = field.NewString(tableName, "msg_send_log_id")
	_msgSendLog.AlertitemRecordID = field.NewString(tableName, "alertitem_record_id")
	_msgSendLog.ChannelID = field.NewString(tableName, "channel_id")
	_msgSendLog.ChannelName = field.NewString(tableName, "channel_name")
	_msgSendLog.ChannelType = field.NewString(tableName, "channel_type")
	_msgSendLog.SendStatu = field.NewString(tableName, "send_statu")
	_msgSendLog.SendTime = field.NewTime(tableName, "send_time")
	_msgSendLog.EventID = field.NewString(tableName, "event_id")
	_msgSendLog.AddTime = field.NewTime(tableName, "add_time")
	_msgSendLog.MsgContent = field.NewString(tableName, "msg_content")
	_msgSendLog.MapperMonitorGroupOne = field.NewString(tableName, "mapper_monitor_group_one")
	_msgSendLog.ProviderName = field.NewString(tableName, "provider_name")

	_msgSendLog.fillFieldMap()

	return _msgSendLog
}

type msgSendLog struct {
	msgSendLogDo

	ALL                   field.Asterisk
	MsgSendLogID          field.String // 发送消息ID
	AlertitemRecordID     field.String // 预警消息ID
	ChannelID             field.String // 通道Id
	ChannelName           field.String // 通道名称
	ChannelType           field.String // 通道类型
	SendStatu             field.String // 发送状态 0 正常，1失败
	SendTime              field.Time   // 发送时间
	EventID               field.String // 事件ID
	AddTime               field.Time   // 添加时间
	MsgContent            field.String
	MapperMonitorGroupOne field.String
	ProviderName          field.String

	fieldMap map[string]field.Expr
}

func (m msgSendLog) Table(newTableName string) *msgSendLog {
	m.msgSendLogDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSendLog) As(alias string) *msgSendLog {
	m.msgSendLogDo.DO = *(m.msgSendLogDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSendLog) updateTableName(table string) *msgSendLog {
	m.ALL = field.NewAsterisk(table)
	m.MsgSendLogID = field.NewString(table, "msg_send_log_id")
	m.AlertitemRecordID = field.NewString(table, "alertitem_record_id")
	m.ChannelID = field.NewString(table, "channel_id")
	m.ChannelName = field.NewString(table, "channel_name")
	m.ChannelType = field.NewString(table, "channel_type")
	m.SendStatu = field.NewString(table, "send_statu")
	m.SendTime = field.NewTime(table, "send_time")
	m.EventID = field.NewString(table, "event_id")
	m.AddTime = field.NewTime(table, "add_time")
	m.MsgContent = field.NewString(table, "msg_content")
	m.MapperMonitorGroupOne = field.NewString(table, "mapper_monitor_group_one")
	m.ProviderName = field.NewString(table, "provider_name")

	m.fillFieldMap()

	return m
}

func (m *msgSendLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSendLog) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["msg_send_log_id"] = m.MsgSendLogID
	m.fieldMap["alertitem_record_id"] = m.AlertitemRecordID
	m.fieldMap["channel_id"] = m.ChannelID
	m.fieldMap["channel_name"] = m.ChannelName
	m.fieldMap["channel_type"] = m.ChannelType
	m.fieldMap["send_statu"] = m.SendStatu
	m.fieldMap["send_time"] = m.SendTime
	m.fieldMap["event_id"] = m.EventID
	m.fieldMap["add_time"] = m.AddTime
	m.fieldMap["msg_content"] = m.MsgContent
	m.fieldMap["mapper_monitor_group_one"] = m.MapperMonitorGroupOne
	m.fieldMap["provider_name"] = m.ProviderName
}

func (m msgSendLog) clone(db *gorm.DB) msgSendLog {
	m.msgSendLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSendLog) replaceDB(db *gorm.DB) msgSendLog {
	m.msgSendLogDo.ReplaceDB(db)
	return m
}

type msgSendLogDo struct{ gen.DO }

type IMsgSendLogDo interface {
	gen.SubQuery
	Debug() IMsgSendLogDo
	WithContext(ctx context.Context) IMsgSendLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMsgSendLogDo
	WriteDB() IMsgSendLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMsgSendLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMsgSendLogDo
	Not(conds ...gen.Condition) IMsgSendLogDo
	Or(conds ...gen.Condition) IMsgSendLogDo
	Select(conds ...field.Expr) IMsgSendLogDo
	Where(conds ...gen.Condition) IMsgSendLogDo
	Order(conds ...field.Expr) IMsgSendLogDo
	Distinct(cols ...field.Expr) IMsgSendLogDo
	Omit(cols ...field.Expr) IMsgSendLogDo
	Join(table schema.Tabler, on ...field.Expr) IMsgSendLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendLogDo
	Group(cols ...field.Expr) IMsgSendLogDo
	Having(conds ...gen.Condition) IMsgSendLogDo
	Limit(limit int) IMsgSendLogDo
	Offset(offset int) IMsgSendLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendLogDo
	Unscoped() IMsgSendLogDo
	Create(values ...*model.MsgSendLog) error
	CreateInBatches(values []*model.MsgSendLog, batchSize int) error
	Save(values ...*model.MsgSendLog) error
	First() (*model.MsgSendLog, error)
	Take() (*model.MsgSendLog, error)
	Last() (*model.MsgSendLog, error)
	Find() ([]*model.MsgSendLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendLog, err error)
	FindInBatches(result *[]*model.MsgSendLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MsgSendLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMsgSendLogDo
	Assign(attrs ...field.AssignExpr) IMsgSendLogDo
	Joins(fields ...field.RelationField) IMsgSendLogDo
	Preload(fields ...field.RelationField) IMsgSendLogDo
	FirstOrInit() (*model.MsgSendLog, error)
	FirstOrCreate() (*model.MsgSendLog, error)
	FindByPage(offset int, limit int) (result []*model.MsgSendLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMsgSendLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m msgSendLogDo) Debug() IMsgSendLogDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSendLogDo) WithContext(ctx context.Context) IMsgSendLogDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSendLogDo) ReadDB() IMsgSendLogDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSendLogDo) WriteDB() IMsgSendLogDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSendLogDo) Session(config *gorm.Session) IMsgSendLogDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSendLogDo) Clauses(conds ...clause.Expression) IMsgSendLogDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSendLogDo) Returning(value interface{}, columns ...string) IMsgSendLogDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSendLogDo) Not(conds ...gen.Condition) IMsgSendLogDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSendLogDo) Or(conds ...gen.Condition) IMsgSendLogDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSendLogDo) Select(conds ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSendLogDo) Where(conds ...gen.Condition) IMsgSendLogDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSendLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMsgSendLogDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSendLogDo) Order(conds ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSendLogDo) Distinct(cols ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSendLogDo) Omit(cols ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSendLogDo) Join(table schema.Tabler, on ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSendLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSendLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSendLogDo) Group(cols ...field.Expr) IMsgSendLogDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSendLogDo) Having(conds ...gen.Condition) IMsgSendLogDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSendLogDo) Limit(limit int) IMsgSendLogDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSendLogDo) Offset(offset int) IMsgSendLogDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSendLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendLogDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSendLogDo) Unscoped() IMsgSendLogDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSendLogDo) Create(values ...*model.MsgSendLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSendLogDo) CreateInBatches(values []*model.MsgSendLog, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSendLogDo) Save(values ...*model.MsgSendLog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSendLogDo) First() (*model.MsgSendLog, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendLog), nil
	}
}

func (m msgSendLogDo) Take() (*model.MsgSendLog, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendLog), nil
	}
}

func (m msgSendLogDo) Last() (*model.MsgSendLog, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendLog), nil
	}
}

func (m msgSendLogDo) Find() ([]*model.MsgSendLog, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSendLog), err
}

func (m msgSendLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendLog, err error) {
	buf := make([]*model.MsgSendLog, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSendLogDo) FindInBatches(result *[]*model.MsgSendLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSendLogDo) Attrs(attrs ...field.AssignExpr) IMsgSendLogDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSendLogDo) Assign(attrs ...field.AssignExpr) IMsgSendLogDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSendLogDo) Joins(fields ...field.RelationField) IMsgSendLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSendLogDo) Preload(fields ...field.RelationField) IMsgSendLogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSendLogDo) FirstOrInit() (*model.MsgSendLog, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendLog), nil
	}
}

func (m msgSendLogDo) FirstOrCreate() (*model.MsgSendLog, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendLog), nil
	}
}

func (m msgSendLogDo) FindByPage(offset int, limit int) (result []*model.MsgSendLog, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSendLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSendLogDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSendLogDo) Delete(models ...*model.MsgSendLog) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSendLogDo) withDO(do gen.Dao) *msgSendLogDo {
	m.DO = *do.(*gen.DO)
	return m
}
