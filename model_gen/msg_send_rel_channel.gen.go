// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMsgSendRelChannel(db *gorm.DB, opts ...gen.DOOption) msgSendRelChannel {
	_msgSendRelChannel := msgSendRelChannel{}

	_msgSendRelChannel.msgSendRelChannelDo.UseDB(db, opts...)
	_msgSendRelChannel.msgSendRelChannelDo.UseModel(&model.MsgSendRelChannel{})

	tableName := _msgSendRelChannel.msgSendRelChannelDo.TableName()
	_msgSendRelChannel.ALL = field.NewAsterisk(tableName)
	_msgSendRelChannel.SendRelChannelID = field.NewString(tableName, "send_rel_channel_id")
	_msgSendRelChannel.MsgSendRuleID = field.NewString(tableName, "msg_send_rule_id")
	_msgSendRelChannel.ChannelID = field.NewString(tableName, "channel_id")
	_msgSendRelChannel.ChannelGroupID = field.NewString(tableName, "channel_group_id")
	_msgSendRelChannel.RelChannelType = field.NewString(tableName, "rel_channel_type")

	_msgSendRelChannel.fillFieldMap()

	return _msgSendRelChannel
}

type msgSendRelChannel struct {
	msgSendRelChannelDo

	ALL              field.Asterisk
	SendRelChannelID field.String
	MsgSendRuleID    field.String
	ChannelID        field.String
	ChannelGroupID   field.String
	RelChannelType   field.String

	fieldMap map[string]field.Expr
}

func (m msgSendRelChannel) Table(newTableName string) *msgSendRelChannel {
	m.msgSendRelChannelDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSendRelChannel) As(alias string) *msgSendRelChannel {
	m.msgSendRelChannelDo.DO = *(m.msgSendRelChannelDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSendRelChannel) updateTableName(table string) *msgSendRelChannel {
	m.ALL = field.NewAsterisk(table)
	m.SendRelChannelID = field.NewString(table, "send_rel_channel_id")
	m.MsgSendRuleID = field.NewString(table, "msg_send_rule_id")
	m.ChannelID = field.NewString(table, "channel_id")
	m.ChannelGroupID = field.NewString(table, "channel_group_id")
	m.RelChannelType = field.NewString(table, "rel_channel_type")

	m.fillFieldMap()

	return m
}

func (m *msgSendRelChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSendRelChannel) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["send_rel_channel_id"] = m.SendRelChannelID
	m.fieldMap["msg_send_rule_id"] = m.MsgSendRuleID
	m.fieldMap["channel_id"] = m.ChannelID
	m.fieldMap["channel_group_id"] = m.ChannelGroupID
	m.fieldMap["rel_channel_type"] = m.RelChannelType
}

func (m msgSendRelChannel) clone(db *gorm.DB) msgSendRelChannel {
	m.msgSendRelChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSendRelChannel) replaceDB(db *gorm.DB) msgSendRelChannel {
	m.msgSendRelChannelDo.ReplaceDB(db)
	return m
}

type msgSendRelChannelDo struct{ gen.DO }

type IMsgSendRelChannelDo interface {
	gen.SubQuery
	Debug() IMsgSendRelChannelDo
	WithContext(ctx context.Context) IMsgSendRelChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMsgSendRelChannelDo
	WriteDB() IMsgSendRelChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMsgSendRelChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMsgSendRelChannelDo
	Not(conds ...gen.Condition) IMsgSendRelChannelDo
	Or(conds ...gen.Condition) IMsgSendRelChannelDo
	Select(conds ...field.Expr) IMsgSendRelChannelDo
	Where(conds ...gen.Condition) IMsgSendRelChannelDo
	Order(conds ...field.Expr) IMsgSendRelChannelDo
	Distinct(cols ...field.Expr) IMsgSendRelChannelDo
	Omit(cols ...field.Expr) IMsgSendRelChannelDo
	Join(table schema.Tabler, on ...field.Expr) IMsgSendRelChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendRelChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendRelChannelDo
	Group(cols ...field.Expr) IMsgSendRelChannelDo
	Having(conds ...gen.Condition) IMsgSendRelChannelDo
	Limit(limit int) IMsgSendRelChannelDo
	Offset(offset int) IMsgSendRelChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendRelChannelDo
	Unscoped() IMsgSendRelChannelDo
	Create(values ...*model.MsgSendRelChannel) error
	CreateInBatches(values []*model.MsgSendRelChannel, batchSize int) error
	Save(values ...*model.MsgSendRelChannel) error
	First() (*model.MsgSendRelChannel, error)
	Take() (*model.MsgSendRelChannel, error)
	Last() (*model.MsgSendRelChannel, error)
	Find() ([]*model.MsgSendRelChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendRelChannel, err error)
	FindInBatches(result *[]*model.MsgSendRelChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MsgSendRelChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMsgSendRelChannelDo
	Assign(attrs ...field.AssignExpr) IMsgSendRelChannelDo
	Joins(fields ...field.RelationField) IMsgSendRelChannelDo
	Preload(fields ...field.RelationField) IMsgSendRelChannelDo
	FirstOrInit() (*model.MsgSendRelChannel, error)
	FirstOrCreate() (*model.MsgSendRelChannel, error)
	FindByPage(offset int, limit int) (result []*model.MsgSendRelChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMsgSendRelChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m msgSendRelChannelDo) Debug() IMsgSendRelChannelDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSendRelChannelDo) WithContext(ctx context.Context) IMsgSendRelChannelDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSendRelChannelDo) ReadDB() IMsgSendRelChannelDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSendRelChannelDo) WriteDB() IMsgSendRelChannelDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSendRelChannelDo) Session(config *gorm.Session) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSendRelChannelDo) Clauses(conds ...clause.Expression) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSendRelChannelDo) Returning(value interface{}, columns ...string) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSendRelChannelDo) Not(conds ...gen.Condition) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSendRelChannelDo) Or(conds ...gen.Condition) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSendRelChannelDo) Select(conds ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSendRelChannelDo) Where(conds ...gen.Condition) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSendRelChannelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMsgSendRelChannelDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSendRelChannelDo) Order(conds ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSendRelChannelDo) Distinct(cols ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSendRelChannelDo) Omit(cols ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSendRelChannelDo) Join(table schema.Tabler, on ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSendRelChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSendRelChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSendRelChannelDo) Group(cols ...field.Expr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSendRelChannelDo) Having(conds ...gen.Condition) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSendRelChannelDo) Limit(limit int) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSendRelChannelDo) Offset(offset int) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSendRelChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSendRelChannelDo) Unscoped() IMsgSendRelChannelDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSendRelChannelDo) Create(values ...*model.MsgSendRelChannel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSendRelChannelDo) CreateInBatches(values []*model.MsgSendRelChannel, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSendRelChannelDo) Save(values ...*model.MsgSendRelChannel) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSendRelChannelDo) First() (*model.MsgSendRelChannel, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRelChannel), nil
	}
}

func (m msgSendRelChannelDo) Take() (*model.MsgSendRelChannel, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRelChannel), nil
	}
}

func (m msgSendRelChannelDo) Last() (*model.MsgSendRelChannel, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRelChannel), nil
	}
}

func (m msgSendRelChannelDo) Find() ([]*model.MsgSendRelChannel, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSendRelChannel), err
}

func (m msgSendRelChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendRelChannel, err error) {
	buf := make([]*model.MsgSendRelChannel, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSendRelChannelDo) FindInBatches(result *[]*model.MsgSendRelChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSendRelChannelDo) Attrs(attrs ...field.AssignExpr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSendRelChannelDo) Assign(attrs ...field.AssignExpr) IMsgSendRelChannelDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSendRelChannelDo) Joins(fields ...field.RelationField) IMsgSendRelChannelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSendRelChannelDo) Preload(fields ...field.RelationField) IMsgSendRelChannelDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSendRelChannelDo) FirstOrInit() (*model.MsgSendRelChannel, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRelChannel), nil
	}
}

func (m msgSendRelChannelDo) FirstOrCreate() (*model.MsgSendRelChannel, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRelChannel), nil
	}
}

func (m msgSendRelChannelDo) FindByPage(offset int, limit int) (result []*model.MsgSendRelChannel, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSendRelChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSendRelChannelDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSendRelChannelDo) Delete(models ...*model.MsgSendRelChannel) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSendRelChannelDo) withDO(do gen.Dao) *msgSendRelChannelDo {
	m.DO = *do.(*gen.DO)
	return m
}
