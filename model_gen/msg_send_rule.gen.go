// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMsgSendRule(db *gorm.DB, opts ...gen.DOOption) msgSendRule {
	_msgSendRule := msgSendRule{}

	_msgSendRule.msgSendRuleDo.UseDB(db, opts...)
	_msgSendRule.msgSendRuleDo.UseModel(&model.MsgSendRule{})

	tableName := _msgSendRule.msgSendRuleDo.TableName()
	_msgSendRule.ALL = field.NewAsterisk(tableName)
	_msgSendRule.MsgSendRuleID = field.NewString(tableName, "msg_send_rule_id")
	_msgSendRule.SendRuleGroupID = field.NewString(tableName, "send_rule_group_id")
	_msgSendRule.AlertitemCode = field.NewString(tableName, "alertitem_code")
	_msgSendRule.RepeatSendInterval = field.NewInt32(tableName, "repeat_send_interval")
	_msgSendRule.RepeatSendIntervalMaxtime = field.NewInt32(tableName, "repeat_send_interval_maxtime")
	_msgSendRule.SameAlertResendMintime = field.NewInt32(tableName, "same_alert_resend_mintime")
	_msgSendRule.ValidTimeBegin = field.NewString(tableName, "valid_time_begin")
	_msgSendRule.ValidTimeEnd = field.NewString(tableName, "valid_time_end")
	_msgSendRule.IsForbid = field.NewString(tableName, "is_forbid")
	_msgSendRule.RecoverMsgNotsend = field.NewInt32(tableName, "recover_msg_notsend")
	_msgSendRule.AlertitemNotshow = field.NewInt32(tableName, "alertitem_notshow")
	_msgSendRule.MsgFmt = field.NewString(tableName, "msg_fmt")

	_msgSendRule.fillFieldMap()

	return _msgSendRule
}

type msgSendRule struct {
	msgSendRuleDo

	ALL                       field.Asterisk
	MsgSendRuleID             field.String
	SendRuleGroupID           field.String
	AlertitemCode             field.String
	RepeatSendInterval        field.Int32
	RepeatSendIntervalMaxtime field.Int32
	SameAlertResendMintime    field.Int32
	ValidTimeBegin            field.String
	ValidTimeEnd              field.String
	IsForbid                  field.String
	RecoverMsgNotsend         field.Int32
	AlertitemNotshow          field.Int32
	MsgFmt                    field.String

	fieldMap map[string]field.Expr
}

func (m msgSendRule) Table(newTableName string) *msgSendRule {
	m.msgSendRuleDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSendRule) As(alias string) *msgSendRule {
	m.msgSendRuleDo.DO = *(m.msgSendRuleDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSendRule) updateTableName(table string) *msgSendRule {
	m.ALL = field.NewAsterisk(table)
	m.MsgSendRuleID = field.NewString(table, "msg_send_rule_id")
	m.SendRuleGroupID = field.NewString(table, "send_rule_group_id")
	m.AlertitemCode = field.NewString(table, "alertitem_code")
	m.RepeatSendInterval = field.NewInt32(table, "repeat_send_interval")
	m.RepeatSendIntervalMaxtime = field.NewInt32(table, "repeat_send_interval_maxtime")
	m.SameAlertResendMintime = field.NewInt32(table, "same_alert_resend_mintime")
	m.ValidTimeBegin = field.NewString(table, "valid_time_begin")
	m.ValidTimeEnd = field.NewString(table, "valid_time_end")
	m.IsForbid = field.NewString(table, "is_forbid")
	m.RecoverMsgNotsend = field.NewInt32(table, "recover_msg_notsend")
	m.AlertitemNotshow = field.NewInt32(table, "alertitem_notshow")
	m.MsgFmt = field.NewString(table, "msg_fmt")

	m.fillFieldMap()

	return m
}

func (m *msgSendRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSendRule) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["msg_send_rule_id"] = m.MsgSendRuleID
	m.fieldMap["send_rule_group_id"] = m.SendRuleGroupID
	m.fieldMap["alertitem_code"] = m.AlertitemCode
	m.fieldMap["repeat_send_interval"] = m.RepeatSendInterval
	m.fieldMap["repeat_send_interval_maxtime"] = m.RepeatSendIntervalMaxtime
	m.fieldMap["same_alert_resend_mintime"] = m.SameAlertResendMintime
	m.fieldMap["valid_time_begin"] = m.ValidTimeBegin
	m.fieldMap["valid_time_end"] = m.ValidTimeEnd
	m.fieldMap["is_forbid"] = m.IsForbid
	m.fieldMap["recover_msg_notsend"] = m.RecoverMsgNotsend
	m.fieldMap["alertitem_notshow"] = m.AlertitemNotshow
	m.fieldMap["msg_fmt"] = m.MsgFmt
}

func (m msgSendRule) clone(db *gorm.DB) msgSendRule {
	m.msgSendRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSendRule) replaceDB(db *gorm.DB) msgSendRule {
	m.msgSendRuleDo.ReplaceDB(db)
	return m
}

type msgSendRuleDo struct{ gen.DO }

type IMsgSendRuleDo interface {
	gen.SubQuery
	Debug() IMsgSendRuleDo
	WithContext(ctx context.Context) IMsgSendRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMsgSendRuleDo
	WriteDB() IMsgSendRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMsgSendRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMsgSendRuleDo
	Not(conds ...gen.Condition) IMsgSendRuleDo
	Or(conds ...gen.Condition) IMsgSendRuleDo
	Select(conds ...field.Expr) IMsgSendRuleDo
	Where(conds ...gen.Condition) IMsgSendRuleDo
	Order(conds ...field.Expr) IMsgSendRuleDo
	Distinct(cols ...field.Expr) IMsgSendRuleDo
	Omit(cols ...field.Expr) IMsgSendRuleDo
	Join(table schema.Tabler, on ...field.Expr) IMsgSendRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleDo
	Group(cols ...field.Expr) IMsgSendRuleDo
	Having(conds ...gen.Condition) IMsgSendRuleDo
	Limit(limit int) IMsgSendRuleDo
	Offset(offset int) IMsgSendRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendRuleDo
	Unscoped() IMsgSendRuleDo
	Create(values ...*model.MsgSendRule) error
	CreateInBatches(values []*model.MsgSendRule, batchSize int) error
	Save(values ...*model.MsgSendRule) error
	First() (*model.MsgSendRule, error)
	Take() (*model.MsgSendRule, error)
	Last() (*model.MsgSendRule, error)
	Find() ([]*model.MsgSendRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendRule, err error)
	FindInBatches(result *[]*model.MsgSendRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MsgSendRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMsgSendRuleDo
	Assign(attrs ...field.AssignExpr) IMsgSendRuleDo
	Joins(fields ...field.RelationField) IMsgSendRuleDo
	Preload(fields ...field.RelationField) IMsgSendRuleDo
	FirstOrInit() (*model.MsgSendRule, error)
	FirstOrCreate() (*model.MsgSendRule, error)
	FindByPage(offset int, limit int) (result []*model.MsgSendRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMsgSendRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m msgSendRuleDo) Debug() IMsgSendRuleDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSendRuleDo) WithContext(ctx context.Context) IMsgSendRuleDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSendRuleDo) ReadDB() IMsgSendRuleDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSendRuleDo) WriteDB() IMsgSendRuleDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSendRuleDo) Session(config *gorm.Session) IMsgSendRuleDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSendRuleDo) Clauses(conds ...clause.Expression) IMsgSendRuleDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSendRuleDo) Returning(value interface{}, columns ...string) IMsgSendRuleDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSendRuleDo) Not(conds ...gen.Condition) IMsgSendRuleDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSendRuleDo) Or(conds ...gen.Condition) IMsgSendRuleDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSendRuleDo) Select(conds ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSendRuleDo) Where(conds ...gen.Condition) IMsgSendRuleDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSendRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMsgSendRuleDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSendRuleDo) Order(conds ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSendRuleDo) Distinct(cols ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSendRuleDo) Omit(cols ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSendRuleDo) Join(table schema.Tabler, on ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSendRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSendRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSendRuleDo) Group(cols ...field.Expr) IMsgSendRuleDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSendRuleDo) Having(conds ...gen.Condition) IMsgSendRuleDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSendRuleDo) Limit(limit int) IMsgSendRuleDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSendRuleDo) Offset(offset int) IMsgSendRuleDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSendRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendRuleDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSendRuleDo) Unscoped() IMsgSendRuleDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSendRuleDo) Create(values ...*model.MsgSendRule) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSendRuleDo) CreateInBatches(values []*model.MsgSendRule, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSendRuleDo) Save(values ...*model.MsgSendRule) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSendRuleDo) First() (*model.MsgSendRule, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRule), nil
	}
}

func (m msgSendRuleDo) Take() (*model.MsgSendRule, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRule), nil
	}
}

func (m msgSendRuleDo) Last() (*model.MsgSendRule, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRule), nil
	}
}

func (m msgSendRuleDo) Find() ([]*model.MsgSendRule, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSendRule), err
}

func (m msgSendRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendRule, err error) {
	buf := make([]*model.MsgSendRule, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSendRuleDo) FindInBatches(result *[]*model.MsgSendRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSendRuleDo) Attrs(attrs ...field.AssignExpr) IMsgSendRuleDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSendRuleDo) Assign(attrs ...field.AssignExpr) IMsgSendRuleDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSendRuleDo) Joins(fields ...field.RelationField) IMsgSendRuleDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSendRuleDo) Preload(fields ...field.RelationField) IMsgSendRuleDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSendRuleDo) FirstOrInit() (*model.MsgSendRule, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRule), nil
	}
}

func (m msgSendRuleDo) FirstOrCreate() (*model.MsgSendRule, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRule), nil
	}
}

func (m msgSendRuleDo) FindByPage(offset int, limit int) (result []*model.MsgSendRule, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSendRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSendRuleDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSendRuleDo) Delete(models ...*model.MsgSendRule) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSendRuleDo) withDO(do gen.Dao) *msgSendRuleDo {
	m.DO = *do.(*gen.DO)
	return m
}
