// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMsgSendRuleGroup(db *gorm.DB, opts ...gen.DOOption) msgSendRuleGroup {
	_msgSendRuleGroup := msgSendRuleGroup{}

	_msgSendRuleGroup.msgSendRuleGroupDo.UseDB(db, opts...)
	_msgSendRuleGroup.msgSendRuleGroupDo.UseModel(&model.MsgSendRuleGroup{})

	tableName := _msgSendRuleGroup.msgSendRuleGroupDo.TableName()
	_msgSendRuleGroup.ALL = field.NewAsterisk(tableName)
	_msgSendRuleGroup.SendRuleGroupID = field.NewString(tableName, "send_rule_group_id")
	_msgSendRuleGroup.SendRuleGroupName = field.NewString(tableName, "send_rule_group_name")
	_msgSendRuleGroup.SendRuleGroupCode = field.NewString(tableName, "send_rule_group_code")
	_msgSendRuleGroup.IsDefaultGroup = field.NewString(tableName, "is_default_group")

	_msgSendRuleGroup.fillFieldMap()

	return _msgSendRuleGroup
}

type msgSendRuleGroup struct {
	msgSendRuleGroupDo

	ALL               field.Asterisk
	SendRuleGroupID   field.String
	SendRuleGroupName field.String
	SendRuleGroupCode field.String
	IsDefaultGroup    field.String

	fieldMap map[string]field.Expr
}

func (m msgSendRuleGroup) Table(newTableName string) *msgSendRuleGroup {
	m.msgSendRuleGroupDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSendRuleGroup) As(alias string) *msgSendRuleGroup {
	m.msgSendRuleGroupDo.DO = *(m.msgSendRuleGroupDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSendRuleGroup) updateTableName(table string) *msgSendRuleGroup {
	m.ALL = field.NewAsterisk(table)
	m.SendRuleGroupID = field.NewString(table, "send_rule_group_id")
	m.SendRuleGroupName = field.NewString(table, "send_rule_group_name")
	m.SendRuleGroupCode = field.NewString(table, "send_rule_group_code")
	m.IsDefaultGroup = field.NewString(table, "is_default_group")

	m.fillFieldMap()

	return m
}

func (m *msgSendRuleGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSendRuleGroup) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["send_rule_group_id"] = m.SendRuleGroupID
	m.fieldMap["send_rule_group_name"] = m.SendRuleGroupName
	m.fieldMap["send_rule_group_code"] = m.SendRuleGroupCode
	m.fieldMap["is_default_group"] = m.IsDefaultGroup
}

func (m msgSendRuleGroup) clone(db *gorm.DB) msgSendRuleGroup {
	m.msgSendRuleGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSendRuleGroup) replaceDB(db *gorm.DB) msgSendRuleGroup {
	m.msgSendRuleGroupDo.ReplaceDB(db)
	return m
}

type msgSendRuleGroupDo struct{ gen.DO }

type IMsgSendRuleGroupDo interface {
	gen.SubQuery
	Debug() IMsgSendRuleGroupDo
	WithContext(ctx context.Context) IMsgSendRuleGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMsgSendRuleGroupDo
	WriteDB() IMsgSendRuleGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMsgSendRuleGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMsgSendRuleGroupDo
	Not(conds ...gen.Condition) IMsgSendRuleGroupDo
	Or(conds ...gen.Condition) IMsgSendRuleGroupDo
	Select(conds ...field.Expr) IMsgSendRuleGroupDo
	Where(conds ...gen.Condition) IMsgSendRuleGroupDo
	Order(conds ...field.Expr) IMsgSendRuleGroupDo
	Distinct(cols ...field.Expr) IMsgSendRuleGroupDo
	Omit(cols ...field.Expr) IMsgSendRuleGroupDo
	Join(table schema.Tabler, on ...field.Expr) IMsgSendRuleGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleGroupDo
	Group(cols ...field.Expr) IMsgSendRuleGroupDo
	Having(conds ...gen.Condition) IMsgSendRuleGroupDo
	Limit(limit int) IMsgSendRuleGroupDo
	Offset(offset int) IMsgSendRuleGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendRuleGroupDo
	Unscoped() IMsgSendRuleGroupDo
	Create(values ...*model.MsgSendRuleGroup) error
	CreateInBatches(values []*model.MsgSendRuleGroup, batchSize int) error
	Save(values ...*model.MsgSendRuleGroup) error
	First() (*model.MsgSendRuleGroup, error)
	Take() (*model.MsgSendRuleGroup, error)
	Last() (*model.MsgSendRuleGroup, error)
	Find() ([]*model.MsgSendRuleGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendRuleGroup, err error)
	FindInBatches(result *[]*model.MsgSendRuleGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MsgSendRuleGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMsgSendRuleGroupDo
	Assign(attrs ...field.AssignExpr) IMsgSendRuleGroupDo
	Joins(fields ...field.RelationField) IMsgSendRuleGroupDo
	Preload(fields ...field.RelationField) IMsgSendRuleGroupDo
	FirstOrInit() (*model.MsgSendRuleGroup, error)
	FirstOrCreate() (*model.MsgSendRuleGroup, error)
	FindByPage(offset int, limit int) (result []*model.MsgSendRuleGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMsgSendRuleGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m msgSendRuleGroupDo) Debug() IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSendRuleGroupDo) WithContext(ctx context.Context) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSendRuleGroupDo) ReadDB() IMsgSendRuleGroupDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSendRuleGroupDo) WriteDB() IMsgSendRuleGroupDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSendRuleGroupDo) Session(config *gorm.Session) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSendRuleGroupDo) Clauses(conds ...clause.Expression) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSendRuleGroupDo) Returning(value interface{}, columns ...string) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSendRuleGroupDo) Not(conds ...gen.Condition) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSendRuleGroupDo) Or(conds ...gen.Condition) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSendRuleGroupDo) Select(conds ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSendRuleGroupDo) Where(conds ...gen.Condition) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSendRuleGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMsgSendRuleGroupDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSendRuleGroupDo) Order(conds ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSendRuleGroupDo) Distinct(cols ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSendRuleGroupDo) Omit(cols ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSendRuleGroupDo) Join(table schema.Tabler, on ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSendRuleGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSendRuleGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSendRuleGroupDo) Group(cols ...field.Expr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSendRuleGroupDo) Having(conds ...gen.Condition) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSendRuleGroupDo) Limit(limit int) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSendRuleGroupDo) Offset(offset int) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSendRuleGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSendRuleGroupDo) Unscoped() IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSendRuleGroupDo) Create(values ...*model.MsgSendRuleGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSendRuleGroupDo) CreateInBatches(values []*model.MsgSendRuleGroup, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSendRuleGroupDo) Save(values ...*model.MsgSendRuleGroup) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSendRuleGroupDo) First() (*model.MsgSendRuleGroup, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRuleGroup), nil
	}
}

func (m msgSendRuleGroupDo) Take() (*model.MsgSendRuleGroup, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRuleGroup), nil
	}
}

func (m msgSendRuleGroupDo) Last() (*model.MsgSendRuleGroup, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRuleGroup), nil
	}
}

func (m msgSendRuleGroupDo) Find() ([]*model.MsgSendRuleGroup, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSendRuleGroup), err
}

func (m msgSendRuleGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendRuleGroup, err error) {
	buf := make([]*model.MsgSendRuleGroup, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSendRuleGroupDo) FindInBatches(result *[]*model.MsgSendRuleGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSendRuleGroupDo) Attrs(attrs ...field.AssignExpr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSendRuleGroupDo) Assign(attrs ...field.AssignExpr) IMsgSendRuleGroupDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSendRuleGroupDo) Joins(fields ...field.RelationField) IMsgSendRuleGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSendRuleGroupDo) Preload(fields ...field.RelationField) IMsgSendRuleGroupDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSendRuleGroupDo) FirstOrInit() (*model.MsgSendRuleGroup, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRuleGroup), nil
	}
}

func (m msgSendRuleGroupDo) FirstOrCreate() (*model.MsgSendRuleGroup, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendRuleGroup), nil
	}
}

func (m msgSendRuleGroupDo) FindByPage(offset int, limit int) (result []*model.MsgSendRuleGroup, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSendRuleGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSendRuleGroupDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSendRuleGroupDo) Delete(models ...*model.MsgSendRuleGroup) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSendRuleGroupDo) withDO(do gen.Dao) *msgSendRuleGroupDo {
	m.DO = *do.(*gen.DO)
	return m
}
