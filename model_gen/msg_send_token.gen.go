// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMsgSendToken(db *gorm.DB, opts ...gen.DOOption) msgSendToken {
	_msgSendToken := msgSendToken{}

	_msgSendToken.msgSendTokenDo.UseDB(db, opts...)
	_msgSendToken.msgSendTokenDo.UseModel(&model.MsgSendToken{})

	tableName := _msgSendToken.msgSendTokenDo.TableName()
	_msgSendToken.ALL = field.NewAsterisk(tableName)
	_msgSendToken.MsgSendTokenID = field.NewString(tableName, "msg_send_token_id")
	_msgSendToken.Token = field.NewString(tableName, "token")
	_msgSendToken.TimeBegin = field.NewTime(tableName, "time_begin")
	_msgSendToken.TimeEnd = field.NewTime(tableName, "time_end")
	_msgSendToken.AddTime = field.NewTime(tableName, "add_time")
	_msgSendToken.AddUser = field.NewString(tableName, "add_user")
	_msgSendToken.Note = field.NewString(tableName, "note")
	_msgSendToken.TokenName = field.NewString(tableName, "token_name")

	_msgSendToken.fillFieldMap()

	return _msgSendToken
}

type msgSendToken struct {
	msgSendTokenDo

	ALL            field.Asterisk
	MsgSendTokenID field.String // ID
	Token          field.String // 令牌值
	TimeBegin      field.Time   // 生效时间-开始
	TimeEnd        field.Time   // 生效时间-结束
	AddTime        field.Time   // 添加时间
	AddUser        field.String // 添加用户
	Note           field.String // 备注
	TokenName      field.String

	fieldMap map[string]field.Expr
}

func (m msgSendToken) Table(newTableName string) *msgSendToken {
	m.msgSendTokenDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSendToken) As(alias string) *msgSendToken {
	m.msgSendTokenDo.DO = *(m.msgSendTokenDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSendToken) updateTableName(table string) *msgSendToken {
	m.ALL = field.NewAsterisk(table)
	m.MsgSendTokenID = field.NewString(table, "msg_send_token_id")
	m.Token = field.NewString(table, "token")
	m.TimeBegin = field.NewTime(table, "time_begin")
	m.TimeEnd = field.NewTime(table, "time_end")
	m.AddTime = field.NewTime(table, "add_time")
	m.AddUser = field.NewString(table, "add_user")
	m.Note = field.NewString(table, "note")
	m.TokenName = field.NewString(table, "token_name")

	m.fillFieldMap()

	return m
}

func (m *msgSendToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSendToken) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["msg_send_token_id"] = m.MsgSendTokenID
	m.fieldMap["token"] = m.Token
	m.fieldMap["time_begin"] = m.TimeBegin
	m.fieldMap["time_end"] = m.TimeEnd
	m.fieldMap["add_time"] = m.AddTime
	m.fieldMap["add_user"] = m.AddUser
	m.fieldMap["note"] = m.Note
	m.fieldMap["token_name"] = m.TokenName
}

func (m msgSendToken) clone(db *gorm.DB) msgSendToken {
	m.msgSendTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSendToken) replaceDB(db *gorm.DB) msgSendToken {
	m.msgSendTokenDo.ReplaceDB(db)
	return m
}

type msgSendTokenDo struct{ gen.DO }

type IMsgSendTokenDo interface {
	gen.SubQuery
	Debug() IMsgSendTokenDo
	WithContext(ctx context.Context) IMsgSendTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMsgSendTokenDo
	WriteDB() IMsgSendTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMsgSendTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMsgSendTokenDo
	Not(conds ...gen.Condition) IMsgSendTokenDo
	Or(conds ...gen.Condition) IMsgSendTokenDo
	Select(conds ...field.Expr) IMsgSendTokenDo
	Where(conds ...gen.Condition) IMsgSendTokenDo
	Order(conds ...field.Expr) IMsgSendTokenDo
	Distinct(cols ...field.Expr) IMsgSendTokenDo
	Omit(cols ...field.Expr) IMsgSendTokenDo
	Join(table schema.Tabler, on ...field.Expr) IMsgSendTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendTokenDo
	Group(cols ...field.Expr) IMsgSendTokenDo
	Having(conds ...gen.Condition) IMsgSendTokenDo
	Limit(limit int) IMsgSendTokenDo
	Offset(offset int) IMsgSendTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendTokenDo
	Unscoped() IMsgSendTokenDo
	Create(values ...*model.MsgSendToken) error
	CreateInBatches(values []*model.MsgSendToken, batchSize int) error
	Save(values ...*model.MsgSendToken) error
	First() (*model.MsgSendToken, error)
	Take() (*model.MsgSendToken, error)
	Last() (*model.MsgSendToken, error)
	Find() ([]*model.MsgSendToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendToken, err error)
	FindInBatches(result *[]*model.MsgSendToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MsgSendToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMsgSendTokenDo
	Assign(attrs ...field.AssignExpr) IMsgSendTokenDo
	Joins(fields ...field.RelationField) IMsgSendTokenDo
	Preload(fields ...field.RelationField) IMsgSendTokenDo
	FirstOrInit() (*model.MsgSendToken, error)
	FirstOrCreate() (*model.MsgSendToken, error)
	FindByPage(offset int, limit int) (result []*model.MsgSendToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMsgSendTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m msgSendTokenDo) Debug() IMsgSendTokenDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSendTokenDo) WithContext(ctx context.Context) IMsgSendTokenDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSendTokenDo) ReadDB() IMsgSendTokenDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSendTokenDo) WriteDB() IMsgSendTokenDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSendTokenDo) Session(config *gorm.Session) IMsgSendTokenDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSendTokenDo) Clauses(conds ...clause.Expression) IMsgSendTokenDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSendTokenDo) Returning(value interface{}, columns ...string) IMsgSendTokenDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSendTokenDo) Not(conds ...gen.Condition) IMsgSendTokenDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSendTokenDo) Or(conds ...gen.Condition) IMsgSendTokenDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSendTokenDo) Select(conds ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSendTokenDo) Where(conds ...gen.Condition) IMsgSendTokenDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSendTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMsgSendTokenDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSendTokenDo) Order(conds ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSendTokenDo) Distinct(cols ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSendTokenDo) Omit(cols ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSendTokenDo) Join(table schema.Tabler, on ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSendTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSendTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSendTokenDo) Group(cols ...field.Expr) IMsgSendTokenDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSendTokenDo) Having(conds ...gen.Condition) IMsgSendTokenDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSendTokenDo) Limit(limit int) IMsgSendTokenDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSendTokenDo) Offset(offset int) IMsgSendTokenDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSendTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendTokenDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSendTokenDo) Unscoped() IMsgSendTokenDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSendTokenDo) Create(values ...*model.MsgSendToken) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSendTokenDo) CreateInBatches(values []*model.MsgSendToken, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSendTokenDo) Save(values ...*model.MsgSendToken) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSendTokenDo) First() (*model.MsgSendToken, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendToken), nil
	}
}

func (m msgSendTokenDo) Take() (*model.MsgSendToken, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendToken), nil
	}
}

func (m msgSendTokenDo) Last() (*model.MsgSendToken, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendToken), nil
	}
}

func (m msgSendTokenDo) Find() ([]*model.MsgSendToken, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSendToken), err
}

func (m msgSendTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendToken, err error) {
	buf := make([]*model.MsgSendToken, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSendTokenDo) FindInBatches(result *[]*model.MsgSendToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSendTokenDo) Attrs(attrs ...field.AssignExpr) IMsgSendTokenDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSendTokenDo) Assign(attrs ...field.AssignExpr) IMsgSendTokenDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSendTokenDo) Joins(fields ...field.RelationField) IMsgSendTokenDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSendTokenDo) Preload(fields ...field.RelationField) IMsgSendTokenDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSendTokenDo) FirstOrInit() (*model.MsgSendToken, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendToken), nil
	}
}

func (m msgSendTokenDo) FirstOrCreate() (*model.MsgSendToken, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendToken), nil
	}
}

func (m msgSendTokenDo) FindByPage(offset int, limit int) (result []*model.MsgSendToken, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSendTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSendTokenDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSendTokenDo) Delete(models ...*model.MsgSendToken) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSendTokenDo) withDO(do gen.Dao) *msgSendTokenDo {
	m.DO = *do.(*gen.DO)
	return m
}
