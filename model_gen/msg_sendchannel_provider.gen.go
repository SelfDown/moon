// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newMsgSendchannelProvider(db *gorm.DB, opts ...gen.DOOption) msgSendchannelProvider {
	_msgSendchannelProvider := msgSendchannelProvider{}

	_msgSendchannelProvider.msgSendchannelProviderDo.UseDB(db, opts...)
	_msgSendchannelProvider.msgSendchannelProviderDo.UseModel(&model.MsgSendchannelProvider{})

	tableName := _msgSendchannelProvider.msgSendchannelProviderDo.TableName()
	_msgSendchannelProvider.ALL = field.NewAsterisk(tableName)
	_msgSendchannelProvider.MsgSendProviderID = field.NewString(tableName, "msg_send_provider_id")
	_msgSendchannelProvider.ProviderName = field.NewString(tableName, "provider_name")
	_msgSendchannelProvider.WxCorpid = field.NewString(tableName, "wx_corpid")
	_msgSendchannelProvider.WxSecret = field.NewString(tableName, "wx_secret")
	_msgSendchannelProvider.WxBaseURL = field.NewString(tableName, "wx_base_url")
	_msgSendchannelProvider.WxAgentID = field.NewString(tableName, "wx_agentId")
	_msgSendchannelProvider.WxTouser = field.NewString(tableName, "wx_touser")
	_msgSendchannelProvider.WxToparty = field.NewString(tableName, "wx_toparty")
	_msgSendchannelProvider.DingRobotURL = field.NewString(tableName, "ding_robot_url")
	_msgSendchannelProvider.MailSender = field.NewString(tableName, "mail_sender")
	_msgSendchannelProvider.MailUsername = field.NewString(tableName, "mail_username")
	_msgSendchannelProvider.MailPwd = field.NewString(tableName, "mail_pwd")
	_msgSendchannelProvider.MailReciveUsers = field.NewString(tableName, "mail_recive_users")
	_msgSendchannelProvider.MailReciveUserGroups = field.NewString(tableName, "mail_recive_user_groups")
	_msgSendchannelProvider.ProviderType = field.NewString(tableName, "provider_type")
	_msgSendchannelProvider.DingRobotKeywords = field.NewString(tableName, "ding_robot_keywords")
	_msgSendchannelProvider.DingRobotSign = field.NewString(tableName, "ding_robot_sign")
	_msgSendchannelProvider.DingRobotIP = field.NewString(tableName, "ding_robot_ip")
	_msgSendchannelProvider.MasReciveUsers = field.NewString(tableName, "mas_recive_users")
	_msgSendchannelProvider.MasReciveUserGroups = field.NewString(tableName, "mas_recive_user_groups")
	_msgSendchannelProvider.MasRecivePthones = field.NewString(tableName, "mas_recive_pthones")
	_msgSendchannelProvider.MasSenderUser = field.NewString(tableName, "mas_sender_user")
	_msgSendchannelProvider.MasSenderPwd = field.NewString(tableName, "mas_sender_pwd")
	_msgSendchannelProvider.MasSenderName = field.NewString(tableName, "mas_sender_name")
	_msgSendchannelProvider.MasSenderURL = field.NewString(tableName, "mas_sender_url")
	_msgSendchannelProvider.MasType = field.NewString(tableName, "mas_type")
	_msgSendchannelProvider.MasSign = field.NewString(tableName, "mas_sign")
	_msgSendchannelProvider.MasOther1 = field.NewString(tableName, "mas_other_1")
	_msgSendchannelProvider.MasOther2 = field.NewString(tableName, "mas_other_2")
	_msgSendchannelProvider.MasOther3 = field.NewString(tableName, "mas_other_3")
	_msgSendchannelProvider.MailSenderSMTP = field.NewString(tableName, "mail_sender_smtp")
	_msgSendchannelProvider.MailSenderSMTPPort = field.NewInt32(tableName, "mail_sender_smtp_port")
	_msgSendchannelProvider.MailReciveAddress = field.NewString(tableName, "mail_recive_address")

	_msgSendchannelProvider.fillFieldMap()

	return _msgSendchannelProvider
}

type msgSendchannelProvider struct {
	msgSendchannelProviderDo

	ALL                  field.Asterisk
	MsgSendProviderID    field.String
	ProviderName         field.String
	WxCorpid             field.String
	WxSecret             field.String
	WxBaseURL            field.String
	WxAgentID            field.String
	WxTouser             field.String
	WxToparty            field.String
	DingRobotURL         field.String
	MailSender           field.String
	MailUsername         field.String
	MailPwd              field.String
	MailReciveUsers      field.String
	MailReciveUserGroups field.String
	ProviderType         field.String
	DingRobotKeywords    field.String
	DingRobotSign        field.String
	DingRobotIP          field.String
	MasReciveUsers       field.String
	MasReciveUserGroups  field.String
	MasRecivePthones     field.String
	MasSenderUser        field.String
	MasSenderPwd         field.String
	MasSenderName        field.String
	MasSenderURL         field.String
	MasType              field.String
	MasSign              field.String
	MasOther1            field.String
	MasOther2            field.String
	MasOther3            field.String
	MailSenderSMTP       field.String
	MailSenderSMTPPort   field.Int32
	MailReciveAddress    field.String

	fieldMap map[string]field.Expr
}

func (m msgSendchannelProvider) Table(newTableName string) *msgSendchannelProvider {
	m.msgSendchannelProviderDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msgSendchannelProvider) As(alias string) *msgSendchannelProvider {
	m.msgSendchannelProviderDo.DO = *(m.msgSendchannelProviderDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msgSendchannelProvider) updateTableName(table string) *msgSendchannelProvider {
	m.ALL = field.NewAsterisk(table)
	m.MsgSendProviderID = field.NewString(table, "msg_send_provider_id")
	m.ProviderName = field.NewString(table, "provider_name")
	m.WxCorpid = field.NewString(table, "wx_corpid")
	m.WxSecret = field.NewString(table, "wx_secret")
	m.WxBaseURL = field.NewString(table, "wx_base_url")
	m.WxAgentID = field.NewString(table, "wx_agentId")
	m.WxTouser = field.NewString(table, "wx_touser")
	m.WxToparty = field.NewString(table, "wx_toparty")
	m.DingRobotURL = field.NewString(table, "ding_robot_url")
	m.MailSender = field.NewString(table, "mail_sender")
	m.MailUsername = field.NewString(table, "mail_username")
	m.MailPwd = field.NewString(table, "mail_pwd")
	m.MailReciveUsers = field.NewString(table, "mail_recive_users")
	m.MailReciveUserGroups = field.NewString(table, "mail_recive_user_groups")
	m.ProviderType = field.NewString(table, "provider_type")
	m.DingRobotKeywords = field.NewString(table, "ding_robot_keywords")
	m.DingRobotSign = field.NewString(table, "ding_robot_sign")
	m.DingRobotIP = field.NewString(table, "ding_robot_ip")
	m.MasReciveUsers = field.NewString(table, "mas_recive_users")
	m.MasReciveUserGroups = field.NewString(table, "mas_recive_user_groups")
	m.MasRecivePthones = field.NewString(table, "mas_recive_pthones")
	m.MasSenderUser = field.NewString(table, "mas_sender_user")
	m.MasSenderPwd = field.NewString(table, "mas_sender_pwd")
	m.MasSenderName = field.NewString(table, "mas_sender_name")
	m.MasSenderURL = field.NewString(table, "mas_sender_url")
	m.MasType = field.NewString(table, "mas_type")
	m.MasSign = field.NewString(table, "mas_sign")
	m.MasOther1 = field.NewString(table, "mas_other_1")
	m.MasOther2 = field.NewString(table, "mas_other_2")
	m.MasOther3 = field.NewString(table, "mas_other_3")
	m.MailSenderSMTP = field.NewString(table, "mail_sender_smtp")
	m.MailSenderSMTPPort = field.NewInt32(table, "mail_sender_smtp_port")
	m.MailReciveAddress = field.NewString(table, "mail_recive_address")

	m.fillFieldMap()

	return m
}

func (m *msgSendchannelProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msgSendchannelProvider) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 33)
	m.fieldMap["msg_send_provider_id"] = m.MsgSendProviderID
	m.fieldMap["provider_name"] = m.ProviderName
	m.fieldMap["wx_corpid"] = m.WxCorpid
	m.fieldMap["wx_secret"] = m.WxSecret
	m.fieldMap["wx_base_url"] = m.WxBaseURL
	m.fieldMap["wx_agentId"] = m.WxAgentID
	m.fieldMap["wx_touser"] = m.WxTouser
	m.fieldMap["wx_toparty"] = m.WxToparty
	m.fieldMap["ding_robot_url"] = m.DingRobotURL
	m.fieldMap["mail_sender"] = m.MailSender
	m.fieldMap["mail_username"] = m.MailUsername
	m.fieldMap["mail_pwd"] = m.MailPwd
	m.fieldMap["mail_recive_users"] = m.MailReciveUsers
	m.fieldMap["mail_recive_user_groups"] = m.MailReciveUserGroups
	m.fieldMap["provider_type"] = m.ProviderType
	m.fieldMap["ding_robot_keywords"] = m.DingRobotKeywords
	m.fieldMap["ding_robot_sign"] = m.DingRobotSign
	m.fieldMap["ding_robot_ip"] = m.DingRobotIP
	m.fieldMap["mas_recive_users"] = m.MasReciveUsers
	m.fieldMap["mas_recive_user_groups"] = m.MasReciveUserGroups
	m.fieldMap["mas_recive_pthones"] = m.MasRecivePthones
	m.fieldMap["mas_sender_user"] = m.MasSenderUser
	m.fieldMap["mas_sender_pwd"] = m.MasSenderPwd
	m.fieldMap["mas_sender_name"] = m.MasSenderName
	m.fieldMap["mas_sender_url"] = m.MasSenderURL
	m.fieldMap["mas_type"] = m.MasType
	m.fieldMap["mas_sign"] = m.MasSign
	m.fieldMap["mas_other_1"] = m.MasOther1
	m.fieldMap["mas_other_2"] = m.MasOther2
	m.fieldMap["mas_other_3"] = m.MasOther3
	m.fieldMap["mail_sender_smtp"] = m.MailSenderSMTP
	m.fieldMap["mail_sender_smtp_port"] = m.MailSenderSMTPPort
	m.fieldMap["mail_recive_address"] = m.MailReciveAddress
}

func (m msgSendchannelProvider) clone(db *gorm.DB) msgSendchannelProvider {
	m.msgSendchannelProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msgSendchannelProvider) replaceDB(db *gorm.DB) msgSendchannelProvider {
	m.msgSendchannelProviderDo.ReplaceDB(db)
	return m
}

type msgSendchannelProviderDo struct{ gen.DO }

type IMsgSendchannelProviderDo interface {
	gen.SubQuery
	Debug() IMsgSendchannelProviderDo
	WithContext(ctx context.Context) IMsgSendchannelProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMsgSendchannelProviderDo
	WriteDB() IMsgSendchannelProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMsgSendchannelProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMsgSendchannelProviderDo
	Not(conds ...gen.Condition) IMsgSendchannelProviderDo
	Or(conds ...gen.Condition) IMsgSendchannelProviderDo
	Select(conds ...field.Expr) IMsgSendchannelProviderDo
	Where(conds ...gen.Condition) IMsgSendchannelProviderDo
	Order(conds ...field.Expr) IMsgSendchannelProviderDo
	Distinct(cols ...field.Expr) IMsgSendchannelProviderDo
	Omit(cols ...field.Expr) IMsgSendchannelProviderDo
	Join(table schema.Tabler, on ...field.Expr) IMsgSendchannelProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendchannelProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendchannelProviderDo
	Group(cols ...field.Expr) IMsgSendchannelProviderDo
	Having(conds ...gen.Condition) IMsgSendchannelProviderDo
	Limit(limit int) IMsgSendchannelProviderDo
	Offset(offset int) IMsgSendchannelProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendchannelProviderDo
	Unscoped() IMsgSendchannelProviderDo
	Create(values ...*model.MsgSendchannelProvider) error
	CreateInBatches(values []*model.MsgSendchannelProvider, batchSize int) error
	Save(values ...*model.MsgSendchannelProvider) error
	First() (*model.MsgSendchannelProvider, error)
	Take() (*model.MsgSendchannelProvider, error)
	Last() (*model.MsgSendchannelProvider, error)
	Find() ([]*model.MsgSendchannelProvider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendchannelProvider, err error)
	FindInBatches(result *[]*model.MsgSendchannelProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MsgSendchannelProvider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMsgSendchannelProviderDo
	Assign(attrs ...field.AssignExpr) IMsgSendchannelProviderDo
	Joins(fields ...field.RelationField) IMsgSendchannelProviderDo
	Preload(fields ...field.RelationField) IMsgSendchannelProviderDo
	FirstOrInit() (*model.MsgSendchannelProvider, error)
	FirstOrCreate() (*model.MsgSendchannelProvider, error)
	FindByPage(offset int, limit int) (result []*model.MsgSendchannelProvider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMsgSendchannelProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m msgSendchannelProviderDo) Debug() IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Debug())
}

func (m msgSendchannelProviderDo) WithContext(ctx context.Context) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgSendchannelProviderDo) ReadDB() IMsgSendchannelProviderDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgSendchannelProviderDo) WriteDB() IMsgSendchannelProviderDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgSendchannelProviderDo) Session(config *gorm.Session) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgSendchannelProviderDo) Clauses(conds ...clause.Expression) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgSendchannelProviderDo) Returning(value interface{}, columns ...string) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgSendchannelProviderDo) Not(conds ...gen.Condition) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgSendchannelProviderDo) Or(conds ...gen.Condition) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgSendchannelProviderDo) Select(conds ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgSendchannelProviderDo) Where(conds ...gen.Condition) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgSendchannelProviderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMsgSendchannelProviderDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m msgSendchannelProviderDo) Order(conds ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgSendchannelProviderDo) Distinct(cols ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgSendchannelProviderDo) Omit(cols ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgSendchannelProviderDo) Join(table schema.Tabler, on ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgSendchannelProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgSendchannelProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgSendchannelProviderDo) Group(cols ...field.Expr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgSendchannelProviderDo) Having(conds ...gen.Condition) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgSendchannelProviderDo) Limit(limit int) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgSendchannelProviderDo) Offset(offset int) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgSendchannelProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgSendchannelProviderDo) Unscoped() IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgSendchannelProviderDo) Create(values ...*model.MsgSendchannelProvider) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgSendchannelProviderDo) CreateInBatches(values []*model.MsgSendchannelProvider, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgSendchannelProviderDo) Save(values ...*model.MsgSendchannelProvider) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgSendchannelProviderDo) First() (*model.MsgSendchannelProvider, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendchannelProvider), nil
	}
}

func (m msgSendchannelProviderDo) Take() (*model.MsgSendchannelProvider, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendchannelProvider), nil
	}
}

func (m msgSendchannelProviderDo) Last() (*model.MsgSendchannelProvider, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendchannelProvider), nil
	}
}

func (m msgSendchannelProviderDo) Find() ([]*model.MsgSendchannelProvider, error) {
	result, err := m.DO.Find()
	return result.([]*model.MsgSendchannelProvider), err
}

func (m msgSendchannelProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MsgSendchannelProvider, err error) {
	buf := make([]*model.MsgSendchannelProvider, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgSendchannelProviderDo) FindInBatches(result *[]*model.MsgSendchannelProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgSendchannelProviderDo) Attrs(attrs ...field.AssignExpr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgSendchannelProviderDo) Assign(attrs ...field.AssignExpr) IMsgSendchannelProviderDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgSendchannelProviderDo) Joins(fields ...field.RelationField) IMsgSendchannelProviderDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgSendchannelProviderDo) Preload(fields ...field.RelationField) IMsgSendchannelProviderDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgSendchannelProviderDo) FirstOrInit() (*model.MsgSendchannelProvider, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendchannelProvider), nil
	}
}

func (m msgSendchannelProviderDo) FirstOrCreate() (*model.MsgSendchannelProvider, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MsgSendchannelProvider), nil
	}
}

func (m msgSendchannelProviderDo) FindByPage(offset int, limit int) (result []*model.MsgSendchannelProvider, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgSendchannelProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgSendchannelProviderDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgSendchannelProviderDo) Delete(models ...*model.MsgSendchannelProvider) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgSendchannelProviderDo) withDO(do gen.Dao) *msgSendchannelProviderDo {
	m.DO = *do.(*gen.DO)
	return m
}
