// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpenAPIKey(db *gorm.DB, opts ...gen.DOOption) openAPIKey {
	_openAPIKey := openAPIKey{}

	_openAPIKey.openAPIKeyDo.UseDB(db, opts...)
	_openAPIKey.openAPIKeyDo.UseModel(&model.OpenAPIKey{})

	tableName := _openAPIKey.openAPIKeyDo.TableName()
	_openAPIKey.ALL = field.NewAsterisk(tableName)
	_openAPIKey.APIKey = field.NewString(tableName, "api_key")
	_openAPIKey.APIKeyStatus = field.NewString(tableName, "api_key_status")
	_openAPIKey.ExpirationTime = field.NewTime(tableName, "expiration_time")
	_openAPIKey.Userid = field.NewString(tableName, "userid")
	_openAPIKey.OpenAPIKeyType = field.NewString(tableName, "open_api_key_type")
	_openAPIKey.CreateTime = field.NewTime(tableName, "create_time")
	_openAPIKey.ModifyTime = field.NewTime(tableName, "modify_time")
	_openAPIKey.Comments = field.NewString(tableName, "comments")
	_openAPIKey.OpUserid = field.NewString(tableName, "op_userid")
	_openAPIKey.AppDomain = field.NewString(tableName, "app_domain")
	_openAPIKey.APIKeyID = field.NewInt32(tableName, "api_key_id")

	_openAPIKey.fillFieldMap()

	return _openAPIKey
}

type openAPIKey struct {
	openAPIKeyDo

	ALL    field.Asterisk
	APIKey field.String // api_key
	/*
		0、禁用
		1、启用
		2、已逻辑删除
	*/
	APIKeyStatus   field.String
	ExpirationTime field.Time   // 过期时间
	Userid         field.String // 令牌所属的用户
	/*
		key类型
		sys_code.type=open_api_key_type
	*/
	OpenAPIKeyType field.String
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明
	OpUserid       field.String // 操作人
	AppDomain      field.String // 令牌应用域 ，见码表 type='app_domain'
	APIKeyID       field.Int32

	fieldMap map[string]field.Expr
}

func (o openAPIKey) Table(newTableName string) *openAPIKey {
	o.openAPIKeyDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o openAPIKey) As(alias string) *openAPIKey {
	o.openAPIKeyDo.DO = *(o.openAPIKeyDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *openAPIKey) updateTableName(table string) *openAPIKey {
	o.ALL = field.NewAsterisk(table)
	o.APIKey = field.NewString(table, "api_key")
	o.APIKeyStatus = field.NewString(table, "api_key_status")
	o.ExpirationTime = field.NewTime(table, "expiration_time")
	o.Userid = field.NewString(table, "userid")
	o.OpenAPIKeyType = field.NewString(table, "open_api_key_type")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")
	o.OpUserid = field.NewString(table, "op_userid")
	o.AppDomain = field.NewString(table, "app_domain")
	o.APIKeyID = field.NewInt32(table, "api_key_id")

	o.fillFieldMap()

	return o
}

func (o *openAPIKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *openAPIKey) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["api_key"] = o.APIKey
	o.fieldMap["api_key_status"] = o.APIKeyStatus
	o.fieldMap["expiration_time"] = o.ExpirationTime
	o.fieldMap["userid"] = o.Userid
	o.fieldMap["open_api_key_type"] = o.OpenAPIKeyType
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["op_userid"] = o.OpUserid
	o.fieldMap["app_domain"] = o.AppDomain
	o.fieldMap["api_key_id"] = o.APIKeyID
}

func (o openAPIKey) clone(db *gorm.DB) openAPIKey {
	o.openAPIKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o openAPIKey) replaceDB(db *gorm.DB) openAPIKey {
	o.openAPIKeyDo.ReplaceDB(db)
	return o
}

type openAPIKeyDo struct{ gen.DO }

type IOpenAPIKeyDo interface {
	gen.SubQuery
	Debug() IOpenAPIKeyDo
	WithContext(ctx context.Context) IOpenAPIKeyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpenAPIKeyDo
	WriteDB() IOpenAPIKeyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpenAPIKeyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpenAPIKeyDo
	Not(conds ...gen.Condition) IOpenAPIKeyDo
	Or(conds ...gen.Condition) IOpenAPIKeyDo
	Select(conds ...field.Expr) IOpenAPIKeyDo
	Where(conds ...gen.Condition) IOpenAPIKeyDo
	Order(conds ...field.Expr) IOpenAPIKeyDo
	Distinct(cols ...field.Expr) IOpenAPIKeyDo
	Omit(cols ...field.Expr) IOpenAPIKeyDo
	Join(table schema.Tabler, on ...field.Expr) IOpenAPIKeyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpenAPIKeyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpenAPIKeyDo
	Group(cols ...field.Expr) IOpenAPIKeyDo
	Having(conds ...gen.Condition) IOpenAPIKeyDo
	Limit(limit int) IOpenAPIKeyDo
	Offset(offset int) IOpenAPIKeyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpenAPIKeyDo
	Unscoped() IOpenAPIKeyDo
	Create(values ...*model.OpenAPIKey) error
	CreateInBatches(values []*model.OpenAPIKey, batchSize int) error
	Save(values ...*model.OpenAPIKey) error
	First() (*model.OpenAPIKey, error)
	Take() (*model.OpenAPIKey, error)
	Last() (*model.OpenAPIKey, error)
	Find() ([]*model.OpenAPIKey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpenAPIKey, err error)
	FindInBatches(result *[]*model.OpenAPIKey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpenAPIKey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpenAPIKeyDo
	Assign(attrs ...field.AssignExpr) IOpenAPIKeyDo
	Joins(fields ...field.RelationField) IOpenAPIKeyDo
	Preload(fields ...field.RelationField) IOpenAPIKeyDo
	FirstOrInit() (*model.OpenAPIKey, error)
	FirstOrCreate() (*model.OpenAPIKey, error)
	FindByPage(offset int, limit int) (result []*model.OpenAPIKey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpenAPIKeyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o openAPIKeyDo) Debug() IOpenAPIKeyDo {
	return o.withDO(o.DO.Debug())
}

func (o openAPIKeyDo) WithContext(ctx context.Context) IOpenAPIKeyDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o openAPIKeyDo) ReadDB() IOpenAPIKeyDo {
	return o.Clauses(dbresolver.Read)
}

func (o openAPIKeyDo) WriteDB() IOpenAPIKeyDo {
	return o.Clauses(dbresolver.Write)
}

func (o openAPIKeyDo) Session(config *gorm.Session) IOpenAPIKeyDo {
	return o.withDO(o.DO.Session(config))
}

func (o openAPIKeyDo) Clauses(conds ...clause.Expression) IOpenAPIKeyDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o openAPIKeyDo) Returning(value interface{}, columns ...string) IOpenAPIKeyDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o openAPIKeyDo) Not(conds ...gen.Condition) IOpenAPIKeyDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o openAPIKeyDo) Or(conds ...gen.Condition) IOpenAPIKeyDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o openAPIKeyDo) Select(conds ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o openAPIKeyDo) Where(conds ...gen.Condition) IOpenAPIKeyDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o openAPIKeyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpenAPIKeyDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o openAPIKeyDo) Order(conds ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o openAPIKeyDo) Distinct(cols ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o openAPIKeyDo) Omit(cols ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o openAPIKeyDo) Join(table schema.Tabler, on ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o openAPIKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o openAPIKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o openAPIKeyDo) Group(cols ...field.Expr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o openAPIKeyDo) Having(conds ...gen.Condition) IOpenAPIKeyDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o openAPIKeyDo) Limit(limit int) IOpenAPIKeyDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o openAPIKeyDo) Offset(offset int) IOpenAPIKeyDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o openAPIKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpenAPIKeyDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o openAPIKeyDo) Unscoped() IOpenAPIKeyDo {
	return o.withDO(o.DO.Unscoped())
}

func (o openAPIKeyDo) Create(values ...*model.OpenAPIKey) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o openAPIKeyDo) CreateInBatches(values []*model.OpenAPIKey, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o openAPIKeyDo) Save(values ...*model.OpenAPIKey) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o openAPIKeyDo) First() (*model.OpenAPIKey, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPIKey), nil
	}
}

func (o openAPIKeyDo) Take() (*model.OpenAPIKey, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPIKey), nil
	}
}

func (o openAPIKeyDo) Last() (*model.OpenAPIKey, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPIKey), nil
	}
}

func (o openAPIKeyDo) Find() ([]*model.OpenAPIKey, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpenAPIKey), err
}

func (o openAPIKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpenAPIKey, err error) {
	buf := make([]*model.OpenAPIKey, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o openAPIKeyDo) FindInBatches(result *[]*model.OpenAPIKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o openAPIKeyDo) Attrs(attrs ...field.AssignExpr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o openAPIKeyDo) Assign(attrs ...field.AssignExpr) IOpenAPIKeyDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o openAPIKeyDo) Joins(fields ...field.RelationField) IOpenAPIKeyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o openAPIKeyDo) Preload(fields ...field.RelationField) IOpenAPIKeyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o openAPIKeyDo) FirstOrInit() (*model.OpenAPIKey, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPIKey), nil
	}
}

func (o openAPIKeyDo) FirstOrCreate() (*model.OpenAPIKey, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPIKey), nil
	}
}

func (o openAPIKeyDo) FindByPage(offset int, limit int) (result []*model.OpenAPIKey, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o openAPIKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o openAPIKeyDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o openAPIKeyDo) Delete(models ...*model.OpenAPIKey) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *openAPIKeyDo) withDO(do gen.Dao) *openAPIKeyDo {
	o.DO = *do.(*gen.DO)
	return o
}
