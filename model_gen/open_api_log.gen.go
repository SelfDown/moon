// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpenAPILog(db *gorm.DB, opts ...gen.DOOption) openAPILog {
	_openAPILog := openAPILog{}

	_openAPILog.openAPILogDo.UseDB(db, opts...)
	_openAPILog.openAPILogDo.UseModel(&model.OpenAPILog{})

	tableName := _openAPILog.openAPILogDo.TableName()
	_openAPILog.ALL = field.NewAsterisk(tableName)
	_openAPILog.ID = field.NewInt32(tableName, "id")
	_openAPILog.APIEventID = field.NewString(tableName, "api_event_id")
	_openAPILog.OpenAPIType = field.NewString(tableName, "open_api_type")
	_openAPILog.OpenURL = field.NewString(tableName, "open_url")
	_openAPILog.ExecutorUser = field.NewString(tableName, "executor_user")
	_openAPILog.UserAPIKey = field.NewString(tableName, "user_api_key")
	_openAPILog.APIExeOutcomes = field.NewString(tableName, "api_exe_outcomes")
	_openAPILog.ExecutingState = field.NewString(tableName, "executing_state")
	_openAPILog.CreationTime = field.NewTime(tableName, "creation_time")
	_openAPILog.InformationRecord = field.NewString(tableName, "information_record")

	_openAPILog.fillFieldMap()

	return _openAPILog
}

type openAPILog struct {
	openAPILogDo

	ALL               field.Asterisk
	ID                field.Int32
	APIEventID        field.String // 事件ID
	OpenAPIType       field.String // 开放接口类型
	OpenURL           field.String // 开放接口URL
	ExecutorUser      field.String // 执行用户
	UserAPIKey        field.String // 执行用户key
	APIExeOutcomes    field.String // 执行结果
	ExecutingState    field.String
	CreationTime      field.Time // 创建时间
	InformationRecord field.String

	fieldMap map[string]field.Expr
}

func (o openAPILog) Table(newTableName string) *openAPILog {
	o.openAPILogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o openAPILog) As(alias string) *openAPILog {
	o.openAPILogDo.DO = *(o.openAPILogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *openAPILog) updateTableName(table string) *openAPILog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.APIEventID = field.NewString(table, "api_event_id")
	o.OpenAPIType = field.NewString(table, "open_api_type")
	o.OpenURL = field.NewString(table, "open_url")
	o.ExecutorUser = field.NewString(table, "executor_user")
	o.UserAPIKey = field.NewString(table, "user_api_key")
	o.APIExeOutcomes = field.NewString(table, "api_exe_outcomes")
	o.ExecutingState = field.NewString(table, "executing_state")
	o.CreationTime = field.NewTime(table, "creation_time")
	o.InformationRecord = field.NewString(table, "information_record")

	o.fillFieldMap()

	return o
}

func (o *openAPILog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *openAPILog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["id"] = o.ID
	o.fieldMap["api_event_id"] = o.APIEventID
	o.fieldMap["open_api_type"] = o.OpenAPIType
	o.fieldMap["open_url"] = o.OpenURL
	o.fieldMap["executor_user"] = o.ExecutorUser
	o.fieldMap["user_api_key"] = o.UserAPIKey
	o.fieldMap["api_exe_outcomes"] = o.APIExeOutcomes
	o.fieldMap["executing_state"] = o.ExecutingState
	o.fieldMap["creation_time"] = o.CreationTime
	o.fieldMap["information_record"] = o.InformationRecord
}

func (o openAPILog) clone(db *gorm.DB) openAPILog {
	o.openAPILogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o openAPILog) replaceDB(db *gorm.DB) openAPILog {
	o.openAPILogDo.ReplaceDB(db)
	return o
}

type openAPILogDo struct{ gen.DO }

type IOpenAPILogDo interface {
	gen.SubQuery
	Debug() IOpenAPILogDo
	WithContext(ctx context.Context) IOpenAPILogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpenAPILogDo
	WriteDB() IOpenAPILogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpenAPILogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpenAPILogDo
	Not(conds ...gen.Condition) IOpenAPILogDo
	Or(conds ...gen.Condition) IOpenAPILogDo
	Select(conds ...field.Expr) IOpenAPILogDo
	Where(conds ...gen.Condition) IOpenAPILogDo
	Order(conds ...field.Expr) IOpenAPILogDo
	Distinct(cols ...field.Expr) IOpenAPILogDo
	Omit(cols ...field.Expr) IOpenAPILogDo
	Join(table schema.Tabler, on ...field.Expr) IOpenAPILogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpenAPILogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpenAPILogDo
	Group(cols ...field.Expr) IOpenAPILogDo
	Having(conds ...gen.Condition) IOpenAPILogDo
	Limit(limit int) IOpenAPILogDo
	Offset(offset int) IOpenAPILogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpenAPILogDo
	Unscoped() IOpenAPILogDo
	Create(values ...*model.OpenAPILog) error
	CreateInBatches(values []*model.OpenAPILog, batchSize int) error
	Save(values ...*model.OpenAPILog) error
	First() (*model.OpenAPILog, error)
	Take() (*model.OpenAPILog, error)
	Last() (*model.OpenAPILog, error)
	Find() ([]*model.OpenAPILog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpenAPILog, err error)
	FindInBatches(result *[]*model.OpenAPILog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpenAPILog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpenAPILogDo
	Assign(attrs ...field.AssignExpr) IOpenAPILogDo
	Joins(fields ...field.RelationField) IOpenAPILogDo
	Preload(fields ...field.RelationField) IOpenAPILogDo
	FirstOrInit() (*model.OpenAPILog, error)
	FirstOrCreate() (*model.OpenAPILog, error)
	FindByPage(offset int, limit int) (result []*model.OpenAPILog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpenAPILogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o openAPILogDo) Debug() IOpenAPILogDo {
	return o.withDO(o.DO.Debug())
}

func (o openAPILogDo) WithContext(ctx context.Context) IOpenAPILogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o openAPILogDo) ReadDB() IOpenAPILogDo {
	return o.Clauses(dbresolver.Read)
}

func (o openAPILogDo) WriteDB() IOpenAPILogDo {
	return o.Clauses(dbresolver.Write)
}

func (o openAPILogDo) Session(config *gorm.Session) IOpenAPILogDo {
	return o.withDO(o.DO.Session(config))
}

func (o openAPILogDo) Clauses(conds ...clause.Expression) IOpenAPILogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o openAPILogDo) Returning(value interface{}, columns ...string) IOpenAPILogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o openAPILogDo) Not(conds ...gen.Condition) IOpenAPILogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o openAPILogDo) Or(conds ...gen.Condition) IOpenAPILogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o openAPILogDo) Select(conds ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o openAPILogDo) Where(conds ...gen.Condition) IOpenAPILogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o openAPILogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpenAPILogDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o openAPILogDo) Order(conds ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o openAPILogDo) Distinct(cols ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o openAPILogDo) Omit(cols ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o openAPILogDo) Join(table schema.Tabler, on ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o openAPILogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o openAPILogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o openAPILogDo) Group(cols ...field.Expr) IOpenAPILogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o openAPILogDo) Having(conds ...gen.Condition) IOpenAPILogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o openAPILogDo) Limit(limit int) IOpenAPILogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o openAPILogDo) Offset(offset int) IOpenAPILogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o openAPILogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpenAPILogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o openAPILogDo) Unscoped() IOpenAPILogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o openAPILogDo) Create(values ...*model.OpenAPILog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o openAPILogDo) CreateInBatches(values []*model.OpenAPILog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o openAPILogDo) Save(values ...*model.OpenAPILog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o openAPILogDo) First() (*model.OpenAPILog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPILog), nil
	}
}

func (o openAPILogDo) Take() (*model.OpenAPILog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPILog), nil
	}
}

func (o openAPILogDo) Last() (*model.OpenAPILog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPILog), nil
	}
}

func (o openAPILogDo) Find() ([]*model.OpenAPILog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpenAPILog), err
}

func (o openAPILogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpenAPILog, err error) {
	buf := make([]*model.OpenAPILog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o openAPILogDo) FindInBatches(result *[]*model.OpenAPILog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o openAPILogDo) Attrs(attrs ...field.AssignExpr) IOpenAPILogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o openAPILogDo) Assign(attrs ...field.AssignExpr) IOpenAPILogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o openAPILogDo) Joins(fields ...field.RelationField) IOpenAPILogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o openAPILogDo) Preload(fields ...field.RelationField) IOpenAPILogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o openAPILogDo) FirstOrInit() (*model.OpenAPILog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPILog), nil
	}
}

func (o openAPILogDo) FirstOrCreate() (*model.OpenAPILog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpenAPILog), nil
	}
}

func (o openAPILogDo) FindByPage(offset int, limit int) (result []*model.OpenAPILog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o openAPILogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o openAPILogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o openAPILogDo) Delete(models ...*model.OpenAPILog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *openAPILogDo) withDO(do gen.Dao) *openAPILogDo {
	o.DO = *do.(*gen.DO)
	return o
}
