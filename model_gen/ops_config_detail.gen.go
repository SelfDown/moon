// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpsConfigDetail(db *gorm.DB, opts ...gen.DOOption) opsConfigDetail {
	_opsConfigDetail := opsConfigDetail{}

	_opsConfigDetail.opsConfigDetailDo.UseDB(db, opts...)
	_opsConfigDetail.opsConfigDetailDo.UseModel(&model.OpsConfigDetail{})

	tableName := _opsConfigDetail.opsConfigDetailDo.TableName()
	_opsConfigDetail.ALL = field.NewAsterisk(tableName)
	_opsConfigDetail.OpsConfigDetailID = field.NewString(tableName, "ops_config_detail_id")
	_opsConfigDetail.OpsConfigKey = field.NewString(tableName, "ops_config_key")
	_opsConfigDetail.OpsConfigValue = field.NewString(tableName, "ops_config_value")
	_opsConfigDetail.OpsConfigGroupID = field.NewString(tableName, "ops_config_group_id")
	_opsConfigDetail.CreateTime = field.NewTime(tableName, "create_time")
	_opsConfigDetail.ModifyTime = field.NewTime(tableName, "modify_time")
	_opsConfigDetail.Comments = field.NewString(tableName, "comments")
	_opsConfigDetail.OpsConfigFileRelPath = field.NewString(tableName, "ops_config_file_rel_path")

	_opsConfigDetail.fillFieldMap()

	return _opsConfigDetail
}

type opsConfigDetail struct {
	opsConfigDetailDo

	ALL               field.Asterisk
	OpsConfigDetailID field.String // 主键
	OpsConfigKey      field.String // 键值对键
	OpsConfigValue    field.String // 键值对值
	OpsConfigGroupID  field.String // 所属配置分组 ops_config_group.ops_config_group_id
	CreateTime        field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime        field.Time   // 记录修改时间（数据库自动写入）
	Comments          field.String // 备注说明
	/*
		软件配置文件相对路径
		比如： jboss/standalone/configruation/standalone.xml
	*/
	OpsConfigFileRelPath field.String

	fieldMap map[string]field.Expr
}

func (o opsConfigDetail) Table(newTableName string) *opsConfigDetail {
	o.opsConfigDetailDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o opsConfigDetail) As(alias string) *opsConfigDetail {
	o.opsConfigDetailDo.DO = *(o.opsConfigDetailDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *opsConfigDetail) updateTableName(table string) *opsConfigDetail {
	o.ALL = field.NewAsterisk(table)
	o.OpsConfigDetailID = field.NewString(table, "ops_config_detail_id")
	o.OpsConfigKey = field.NewString(table, "ops_config_key")
	o.OpsConfigValue = field.NewString(table, "ops_config_value")
	o.OpsConfigGroupID = field.NewString(table, "ops_config_group_id")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")
	o.OpsConfigFileRelPath = field.NewString(table, "ops_config_file_rel_path")

	o.fillFieldMap()

	return o
}

func (o *opsConfigDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *opsConfigDetail) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["ops_config_detail_id"] = o.OpsConfigDetailID
	o.fieldMap["ops_config_key"] = o.OpsConfigKey
	o.fieldMap["ops_config_value"] = o.OpsConfigValue
	o.fieldMap["ops_config_group_id"] = o.OpsConfigGroupID
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["ops_config_file_rel_path"] = o.OpsConfigFileRelPath
}

func (o opsConfigDetail) clone(db *gorm.DB) opsConfigDetail {
	o.opsConfigDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o opsConfigDetail) replaceDB(db *gorm.DB) opsConfigDetail {
	o.opsConfigDetailDo.ReplaceDB(db)
	return o
}

type opsConfigDetailDo struct{ gen.DO }

type IOpsConfigDetailDo interface {
	gen.SubQuery
	Debug() IOpsConfigDetailDo
	WithContext(ctx context.Context) IOpsConfigDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpsConfigDetailDo
	WriteDB() IOpsConfigDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpsConfigDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpsConfigDetailDo
	Not(conds ...gen.Condition) IOpsConfigDetailDo
	Or(conds ...gen.Condition) IOpsConfigDetailDo
	Select(conds ...field.Expr) IOpsConfigDetailDo
	Where(conds ...gen.Condition) IOpsConfigDetailDo
	Order(conds ...field.Expr) IOpsConfigDetailDo
	Distinct(cols ...field.Expr) IOpsConfigDetailDo
	Omit(cols ...field.Expr) IOpsConfigDetailDo
	Join(table schema.Tabler, on ...field.Expr) IOpsConfigDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailDo
	Group(cols ...field.Expr) IOpsConfigDetailDo
	Having(conds ...gen.Condition) IOpsConfigDetailDo
	Limit(limit int) IOpsConfigDetailDo
	Offset(offset int) IOpsConfigDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsConfigDetailDo
	Unscoped() IOpsConfigDetailDo
	Create(values ...*model.OpsConfigDetail) error
	CreateInBatches(values []*model.OpsConfigDetail, batchSize int) error
	Save(values ...*model.OpsConfigDetail) error
	First() (*model.OpsConfigDetail, error)
	Take() (*model.OpsConfigDetail, error)
	Last() (*model.OpsConfigDetail, error)
	Find() ([]*model.OpsConfigDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsConfigDetail, err error)
	FindInBatches(result *[]*model.OpsConfigDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpsConfigDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpsConfigDetailDo
	Assign(attrs ...field.AssignExpr) IOpsConfigDetailDo
	Joins(fields ...field.RelationField) IOpsConfigDetailDo
	Preload(fields ...field.RelationField) IOpsConfigDetailDo
	FirstOrInit() (*model.OpsConfigDetail, error)
	FirstOrCreate() (*model.OpsConfigDetail, error)
	FindByPage(offset int, limit int) (result []*model.OpsConfigDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpsConfigDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o opsConfigDetailDo) Debug() IOpsConfigDetailDo {
	return o.withDO(o.DO.Debug())
}

func (o opsConfigDetailDo) WithContext(ctx context.Context) IOpsConfigDetailDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o opsConfigDetailDo) ReadDB() IOpsConfigDetailDo {
	return o.Clauses(dbresolver.Read)
}

func (o opsConfigDetailDo) WriteDB() IOpsConfigDetailDo {
	return o.Clauses(dbresolver.Write)
}

func (o opsConfigDetailDo) Session(config *gorm.Session) IOpsConfigDetailDo {
	return o.withDO(o.DO.Session(config))
}

func (o opsConfigDetailDo) Clauses(conds ...clause.Expression) IOpsConfigDetailDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o opsConfigDetailDo) Returning(value interface{}, columns ...string) IOpsConfigDetailDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o opsConfigDetailDo) Not(conds ...gen.Condition) IOpsConfigDetailDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o opsConfigDetailDo) Or(conds ...gen.Condition) IOpsConfigDetailDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o opsConfigDetailDo) Select(conds ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o opsConfigDetailDo) Where(conds ...gen.Condition) IOpsConfigDetailDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o opsConfigDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpsConfigDetailDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o opsConfigDetailDo) Order(conds ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o opsConfigDetailDo) Distinct(cols ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o opsConfigDetailDo) Omit(cols ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o opsConfigDetailDo) Join(table schema.Tabler, on ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o opsConfigDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o opsConfigDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o opsConfigDetailDo) Group(cols ...field.Expr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o opsConfigDetailDo) Having(conds ...gen.Condition) IOpsConfigDetailDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o opsConfigDetailDo) Limit(limit int) IOpsConfigDetailDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o opsConfigDetailDo) Offset(offset int) IOpsConfigDetailDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o opsConfigDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsConfigDetailDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o opsConfigDetailDo) Unscoped() IOpsConfigDetailDo {
	return o.withDO(o.DO.Unscoped())
}

func (o opsConfigDetailDo) Create(values ...*model.OpsConfigDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o opsConfigDetailDo) CreateInBatches(values []*model.OpsConfigDetail, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o opsConfigDetailDo) Save(values ...*model.OpsConfigDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o opsConfigDetailDo) First() (*model.OpsConfigDetail, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetail), nil
	}
}

func (o opsConfigDetailDo) Take() (*model.OpsConfigDetail, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetail), nil
	}
}

func (o opsConfigDetailDo) Last() (*model.OpsConfigDetail, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetail), nil
	}
}

func (o opsConfigDetailDo) Find() ([]*model.OpsConfigDetail, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpsConfigDetail), err
}

func (o opsConfigDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsConfigDetail, err error) {
	buf := make([]*model.OpsConfigDetail, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o opsConfigDetailDo) FindInBatches(result *[]*model.OpsConfigDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o opsConfigDetailDo) Attrs(attrs ...field.AssignExpr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o opsConfigDetailDo) Assign(attrs ...field.AssignExpr) IOpsConfigDetailDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o opsConfigDetailDo) Joins(fields ...field.RelationField) IOpsConfigDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o opsConfigDetailDo) Preload(fields ...field.RelationField) IOpsConfigDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o opsConfigDetailDo) FirstOrInit() (*model.OpsConfigDetail, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetail), nil
	}
}

func (o opsConfigDetailDo) FirstOrCreate() (*model.OpsConfigDetail, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetail), nil
	}
}

func (o opsConfigDetailDo) FindByPage(offset int, limit int) (result []*model.OpsConfigDetail, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o opsConfigDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o opsConfigDetailDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o opsConfigDetailDo) Delete(models ...*model.OpsConfigDetail) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *opsConfigDetailDo) withDO(do gen.Dao) *opsConfigDetailDo {
	o.DO = *do.(*gen.DO)
	return o
}
