// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpsConfigDetailCopy(db *gorm.DB, opts ...gen.DOOption) opsConfigDetailCopy {
	_opsConfigDetailCopy := opsConfigDetailCopy{}

	_opsConfigDetailCopy.opsConfigDetailCopyDo.UseDB(db, opts...)
	_opsConfigDetailCopy.opsConfigDetailCopyDo.UseModel(&model.OpsConfigDetailCopy{})

	tableName := _opsConfigDetailCopy.opsConfigDetailCopyDo.TableName()
	_opsConfigDetailCopy.ALL = field.NewAsterisk(tableName)
	_opsConfigDetailCopy.OpsConfigDetailID = field.NewString(tableName, "ops_config_detail_id")
	_opsConfigDetailCopy.OpsConfigKey = field.NewString(tableName, "ops_config_key")
	_opsConfigDetailCopy.OpsConfigValue = field.NewString(tableName, "ops_config_value")
	_opsConfigDetailCopy.OpsConfigGroupID = field.NewString(tableName, "ops_config_group_id")
	_opsConfigDetailCopy.CreateTime = field.NewTime(tableName, "create_time")
	_opsConfigDetailCopy.ModifyTime = field.NewTime(tableName, "modify_time")
	_opsConfigDetailCopy.Comments = field.NewString(tableName, "comments")
	_opsConfigDetailCopy.OpsConfigFileRelPath = field.NewString(tableName, "ops_config_file_rel_path")

	_opsConfigDetailCopy.fillFieldMap()

	return _opsConfigDetailCopy
}

type opsConfigDetailCopy struct {
	opsConfigDetailCopyDo

	ALL                  field.Asterisk
	OpsConfigDetailID    field.String // 主键
	OpsConfigKey         field.String // 键值对键
	OpsConfigValue       field.String // 键值对值
	OpsConfigGroupID     field.String // 所属配置分组 ops_config_group.ops_config_group_id
	CreateTime           field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime           field.Time   // 记录修改时间（数据库自动写入）
	Comments             field.String // 备注说明
	OpsConfigFileRelPath field.String // 软件配置文件相对路径\n比如： jboss/standalone/configruation/standalone.xml

	fieldMap map[string]field.Expr
}

func (o opsConfigDetailCopy) Table(newTableName string) *opsConfigDetailCopy {
	o.opsConfigDetailCopyDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o opsConfigDetailCopy) As(alias string) *opsConfigDetailCopy {
	o.opsConfigDetailCopyDo.DO = *(o.opsConfigDetailCopyDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *opsConfigDetailCopy) updateTableName(table string) *opsConfigDetailCopy {
	o.ALL = field.NewAsterisk(table)
	o.OpsConfigDetailID = field.NewString(table, "ops_config_detail_id")
	o.OpsConfigKey = field.NewString(table, "ops_config_key")
	o.OpsConfigValue = field.NewString(table, "ops_config_value")
	o.OpsConfigGroupID = field.NewString(table, "ops_config_group_id")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")
	o.OpsConfigFileRelPath = field.NewString(table, "ops_config_file_rel_path")

	o.fillFieldMap()

	return o
}

func (o *opsConfigDetailCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *opsConfigDetailCopy) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["ops_config_detail_id"] = o.OpsConfigDetailID
	o.fieldMap["ops_config_key"] = o.OpsConfigKey
	o.fieldMap["ops_config_value"] = o.OpsConfigValue
	o.fieldMap["ops_config_group_id"] = o.OpsConfigGroupID
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["ops_config_file_rel_path"] = o.OpsConfigFileRelPath
}

func (o opsConfigDetailCopy) clone(db *gorm.DB) opsConfigDetailCopy {
	o.opsConfigDetailCopyDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o opsConfigDetailCopy) replaceDB(db *gorm.DB) opsConfigDetailCopy {
	o.opsConfigDetailCopyDo.ReplaceDB(db)
	return o
}

type opsConfigDetailCopyDo struct{ gen.DO }

type IOpsConfigDetailCopyDo interface {
	gen.SubQuery
	Debug() IOpsConfigDetailCopyDo
	WithContext(ctx context.Context) IOpsConfigDetailCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpsConfigDetailCopyDo
	WriteDB() IOpsConfigDetailCopyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpsConfigDetailCopyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpsConfigDetailCopyDo
	Not(conds ...gen.Condition) IOpsConfigDetailCopyDo
	Or(conds ...gen.Condition) IOpsConfigDetailCopyDo
	Select(conds ...field.Expr) IOpsConfigDetailCopyDo
	Where(conds ...gen.Condition) IOpsConfigDetailCopyDo
	Order(conds ...field.Expr) IOpsConfigDetailCopyDo
	Distinct(cols ...field.Expr) IOpsConfigDetailCopyDo
	Omit(cols ...field.Expr) IOpsConfigDetailCopyDo
	Join(table schema.Tabler, on ...field.Expr) IOpsConfigDetailCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailCopyDo
	Group(cols ...field.Expr) IOpsConfigDetailCopyDo
	Having(conds ...gen.Condition) IOpsConfigDetailCopyDo
	Limit(limit int) IOpsConfigDetailCopyDo
	Offset(offset int) IOpsConfigDetailCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsConfigDetailCopyDo
	Unscoped() IOpsConfigDetailCopyDo
	Create(values ...*model.OpsConfigDetailCopy) error
	CreateInBatches(values []*model.OpsConfigDetailCopy, batchSize int) error
	Save(values ...*model.OpsConfigDetailCopy) error
	First() (*model.OpsConfigDetailCopy, error)
	Take() (*model.OpsConfigDetailCopy, error)
	Last() (*model.OpsConfigDetailCopy, error)
	Find() ([]*model.OpsConfigDetailCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsConfigDetailCopy, err error)
	FindInBatches(result *[]*model.OpsConfigDetailCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpsConfigDetailCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpsConfigDetailCopyDo
	Assign(attrs ...field.AssignExpr) IOpsConfigDetailCopyDo
	Joins(fields ...field.RelationField) IOpsConfigDetailCopyDo
	Preload(fields ...field.RelationField) IOpsConfigDetailCopyDo
	FirstOrInit() (*model.OpsConfigDetailCopy, error)
	FirstOrCreate() (*model.OpsConfigDetailCopy, error)
	FindByPage(offset int, limit int) (result []*model.OpsConfigDetailCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpsConfigDetailCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o opsConfigDetailCopyDo) Debug() IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Debug())
}

func (o opsConfigDetailCopyDo) WithContext(ctx context.Context) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o opsConfigDetailCopyDo) ReadDB() IOpsConfigDetailCopyDo {
	return o.Clauses(dbresolver.Read)
}

func (o opsConfigDetailCopyDo) WriteDB() IOpsConfigDetailCopyDo {
	return o.Clauses(dbresolver.Write)
}

func (o opsConfigDetailCopyDo) Session(config *gorm.Session) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Session(config))
}

func (o opsConfigDetailCopyDo) Clauses(conds ...clause.Expression) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o opsConfigDetailCopyDo) Returning(value interface{}, columns ...string) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o opsConfigDetailCopyDo) Not(conds ...gen.Condition) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o opsConfigDetailCopyDo) Or(conds ...gen.Condition) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o opsConfigDetailCopyDo) Select(conds ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o opsConfigDetailCopyDo) Where(conds ...gen.Condition) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o opsConfigDetailCopyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpsConfigDetailCopyDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o opsConfigDetailCopyDo) Order(conds ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o opsConfigDetailCopyDo) Distinct(cols ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o opsConfigDetailCopyDo) Omit(cols ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o opsConfigDetailCopyDo) Join(table schema.Tabler, on ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o opsConfigDetailCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o opsConfigDetailCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o opsConfigDetailCopyDo) Group(cols ...field.Expr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o opsConfigDetailCopyDo) Having(conds ...gen.Condition) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o opsConfigDetailCopyDo) Limit(limit int) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o opsConfigDetailCopyDo) Offset(offset int) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o opsConfigDetailCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o opsConfigDetailCopyDo) Unscoped() IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Unscoped())
}

func (o opsConfigDetailCopyDo) Create(values ...*model.OpsConfigDetailCopy) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o opsConfigDetailCopyDo) CreateInBatches(values []*model.OpsConfigDetailCopy, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o opsConfigDetailCopyDo) Save(values ...*model.OpsConfigDetailCopy) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o opsConfigDetailCopyDo) First() (*model.OpsConfigDetailCopy, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetailCopy), nil
	}
}

func (o opsConfigDetailCopyDo) Take() (*model.OpsConfigDetailCopy, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetailCopy), nil
	}
}

func (o opsConfigDetailCopyDo) Last() (*model.OpsConfigDetailCopy, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetailCopy), nil
	}
}

func (o opsConfigDetailCopyDo) Find() ([]*model.OpsConfigDetailCopy, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpsConfigDetailCopy), err
}

func (o opsConfigDetailCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsConfigDetailCopy, err error) {
	buf := make([]*model.OpsConfigDetailCopy, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o opsConfigDetailCopyDo) FindInBatches(result *[]*model.OpsConfigDetailCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o opsConfigDetailCopyDo) Attrs(attrs ...field.AssignExpr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o opsConfigDetailCopyDo) Assign(attrs ...field.AssignExpr) IOpsConfigDetailCopyDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o opsConfigDetailCopyDo) Joins(fields ...field.RelationField) IOpsConfigDetailCopyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o opsConfigDetailCopyDo) Preload(fields ...field.RelationField) IOpsConfigDetailCopyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o opsConfigDetailCopyDo) FirstOrInit() (*model.OpsConfigDetailCopy, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetailCopy), nil
	}
}

func (o opsConfigDetailCopyDo) FirstOrCreate() (*model.OpsConfigDetailCopy, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigDetailCopy), nil
	}
}

func (o opsConfigDetailCopyDo) FindByPage(offset int, limit int) (result []*model.OpsConfigDetailCopy, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o opsConfigDetailCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o opsConfigDetailCopyDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o opsConfigDetailCopyDo) Delete(models ...*model.OpsConfigDetailCopy) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *opsConfigDetailCopyDo) withDO(do gen.Dao) *opsConfigDetailCopyDo {
	o.DO = *do.(*gen.DO)
	return o
}
