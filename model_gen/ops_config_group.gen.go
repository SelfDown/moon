// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpsConfigGroup(db *gorm.DB, opts ...gen.DOOption) opsConfigGroup {
	_opsConfigGroup := opsConfigGroup{}

	_opsConfigGroup.opsConfigGroupDo.UseDB(db, opts...)
	_opsConfigGroup.opsConfigGroupDo.UseModel(&model.OpsConfigGroup{})

	tableName := _opsConfigGroup.opsConfigGroupDo.TableName()
	_opsConfigGroup.ALL = field.NewAsterisk(tableName)
	_opsConfigGroup.OpsConfigGroupID = field.NewString(tableName, "ops_config_group_id")
	_opsConfigGroup.OpsConfigGroupName = field.NewString(tableName, "ops_config_group_name")
	_opsConfigGroup.CreateTime = field.NewTime(tableName, "create_time")
	_opsConfigGroup.ModifyTime = field.NewTime(tableName, "modify_time")
	_opsConfigGroup.Comments = field.NewString(tableName, "comments")
	_opsConfigGroup.ServerEnvID = field.NewString(tableName, "server_env_id")

	_opsConfigGroup.fillFieldMap()

	return _opsConfigGroup
}

type opsConfigGroup struct {
	opsConfigGroupDo

	ALL                field.Asterisk
	OpsConfigGroupID   field.String
	OpsConfigGroupName field.String // 配置分组名称
	CreateTime         field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime         field.Time   // 记录修改时间（数据库自动写入）
	Comments           field.String // 备注说明
	/*
		server_env.server_env_id
		环境ID
	*/
	ServerEnvID field.String

	fieldMap map[string]field.Expr
}

func (o opsConfigGroup) Table(newTableName string) *opsConfigGroup {
	o.opsConfigGroupDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o opsConfigGroup) As(alias string) *opsConfigGroup {
	o.opsConfigGroupDo.DO = *(o.opsConfigGroupDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *opsConfigGroup) updateTableName(table string) *opsConfigGroup {
	o.ALL = field.NewAsterisk(table)
	o.OpsConfigGroupID = field.NewString(table, "ops_config_group_id")
	o.OpsConfigGroupName = field.NewString(table, "ops_config_group_name")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")
	o.ServerEnvID = field.NewString(table, "server_env_id")

	o.fillFieldMap()

	return o
}

func (o *opsConfigGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *opsConfigGroup) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["ops_config_group_id"] = o.OpsConfigGroupID
	o.fieldMap["ops_config_group_name"] = o.OpsConfigGroupName
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["server_env_id"] = o.ServerEnvID
}

func (o opsConfigGroup) clone(db *gorm.DB) opsConfigGroup {
	o.opsConfigGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o opsConfigGroup) replaceDB(db *gorm.DB) opsConfigGroup {
	o.opsConfigGroupDo.ReplaceDB(db)
	return o
}

type opsConfigGroupDo struct{ gen.DO }

type IOpsConfigGroupDo interface {
	gen.SubQuery
	Debug() IOpsConfigGroupDo
	WithContext(ctx context.Context) IOpsConfigGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpsConfigGroupDo
	WriteDB() IOpsConfigGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpsConfigGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpsConfigGroupDo
	Not(conds ...gen.Condition) IOpsConfigGroupDo
	Or(conds ...gen.Condition) IOpsConfigGroupDo
	Select(conds ...field.Expr) IOpsConfigGroupDo
	Where(conds ...gen.Condition) IOpsConfigGroupDo
	Order(conds ...field.Expr) IOpsConfigGroupDo
	Distinct(cols ...field.Expr) IOpsConfigGroupDo
	Omit(cols ...field.Expr) IOpsConfigGroupDo
	Join(table schema.Tabler, on ...field.Expr) IOpsConfigGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpsConfigGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpsConfigGroupDo
	Group(cols ...field.Expr) IOpsConfigGroupDo
	Having(conds ...gen.Condition) IOpsConfigGroupDo
	Limit(limit int) IOpsConfigGroupDo
	Offset(offset int) IOpsConfigGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsConfigGroupDo
	Unscoped() IOpsConfigGroupDo
	Create(values ...*model.OpsConfigGroup) error
	CreateInBatches(values []*model.OpsConfigGroup, batchSize int) error
	Save(values ...*model.OpsConfigGroup) error
	First() (*model.OpsConfigGroup, error)
	Take() (*model.OpsConfigGroup, error)
	Last() (*model.OpsConfigGroup, error)
	Find() ([]*model.OpsConfigGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsConfigGroup, err error)
	FindInBatches(result *[]*model.OpsConfigGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpsConfigGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpsConfigGroupDo
	Assign(attrs ...field.AssignExpr) IOpsConfigGroupDo
	Joins(fields ...field.RelationField) IOpsConfigGroupDo
	Preload(fields ...field.RelationField) IOpsConfigGroupDo
	FirstOrInit() (*model.OpsConfigGroup, error)
	FirstOrCreate() (*model.OpsConfigGroup, error)
	FindByPage(offset int, limit int) (result []*model.OpsConfigGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpsConfigGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o opsConfigGroupDo) Debug() IOpsConfigGroupDo {
	return o.withDO(o.DO.Debug())
}

func (o opsConfigGroupDo) WithContext(ctx context.Context) IOpsConfigGroupDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o opsConfigGroupDo) ReadDB() IOpsConfigGroupDo {
	return o.Clauses(dbresolver.Read)
}

func (o opsConfigGroupDo) WriteDB() IOpsConfigGroupDo {
	return o.Clauses(dbresolver.Write)
}

func (o opsConfigGroupDo) Session(config *gorm.Session) IOpsConfigGroupDo {
	return o.withDO(o.DO.Session(config))
}

func (o opsConfigGroupDo) Clauses(conds ...clause.Expression) IOpsConfigGroupDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o opsConfigGroupDo) Returning(value interface{}, columns ...string) IOpsConfigGroupDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o opsConfigGroupDo) Not(conds ...gen.Condition) IOpsConfigGroupDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o opsConfigGroupDo) Or(conds ...gen.Condition) IOpsConfigGroupDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o opsConfigGroupDo) Select(conds ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o opsConfigGroupDo) Where(conds ...gen.Condition) IOpsConfigGroupDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o opsConfigGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpsConfigGroupDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o opsConfigGroupDo) Order(conds ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o opsConfigGroupDo) Distinct(cols ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o opsConfigGroupDo) Omit(cols ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o opsConfigGroupDo) Join(table schema.Tabler, on ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o opsConfigGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o opsConfigGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o opsConfigGroupDo) Group(cols ...field.Expr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o opsConfigGroupDo) Having(conds ...gen.Condition) IOpsConfigGroupDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o opsConfigGroupDo) Limit(limit int) IOpsConfigGroupDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o opsConfigGroupDo) Offset(offset int) IOpsConfigGroupDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o opsConfigGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsConfigGroupDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o opsConfigGroupDo) Unscoped() IOpsConfigGroupDo {
	return o.withDO(o.DO.Unscoped())
}

func (o opsConfigGroupDo) Create(values ...*model.OpsConfigGroup) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o opsConfigGroupDo) CreateInBatches(values []*model.OpsConfigGroup, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o opsConfigGroupDo) Save(values ...*model.OpsConfigGroup) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o opsConfigGroupDo) First() (*model.OpsConfigGroup, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigGroup), nil
	}
}

func (o opsConfigGroupDo) Take() (*model.OpsConfigGroup, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigGroup), nil
	}
}

func (o opsConfigGroupDo) Last() (*model.OpsConfigGroup, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigGroup), nil
	}
}

func (o opsConfigGroupDo) Find() ([]*model.OpsConfigGroup, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpsConfigGroup), err
}

func (o opsConfigGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsConfigGroup, err error) {
	buf := make([]*model.OpsConfigGroup, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o opsConfigGroupDo) FindInBatches(result *[]*model.OpsConfigGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o opsConfigGroupDo) Attrs(attrs ...field.AssignExpr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o opsConfigGroupDo) Assign(attrs ...field.AssignExpr) IOpsConfigGroupDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o opsConfigGroupDo) Joins(fields ...field.RelationField) IOpsConfigGroupDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o opsConfigGroupDo) Preload(fields ...field.RelationField) IOpsConfigGroupDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o opsConfigGroupDo) FirstOrInit() (*model.OpsConfigGroup, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigGroup), nil
	}
}

func (o opsConfigGroupDo) FirstOrCreate() (*model.OpsConfigGroup, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsConfigGroup), nil
	}
}

func (o opsConfigGroupDo) FindByPage(offset int, limit int) (result []*model.OpsConfigGroup, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o opsConfigGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o opsConfigGroupDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o opsConfigGroupDo) Delete(models ...*model.OpsConfigGroup) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *opsConfigGroupDo) withDO(do gen.Dao) *opsConfigGroupDo {
	o.DO = *do.(*gen.DO)
	return o
}
