// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpsSwDeployEvent(db *gorm.DB, opts ...gen.DOOption) opsSwDeployEvent {
	_opsSwDeployEvent := opsSwDeployEvent{}

	_opsSwDeployEvent.opsSwDeployEventDo.UseDB(db, opts...)
	_opsSwDeployEvent.opsSwDeployEventDo.UseModel(&model.OpsSwDeployEvent{})

	tableName := _opsSwDeployEvent.opsSwDeployEventDo.TableName()
	_opsSwDeployEvent.ALL = field.NewAsterisk(tableName)
	_opsSwDeployEvent.OpsDeployEventID = field.NewString(tableName, "ops_deploy_event_id")
	_opsSwDeployEvent.OpUserID = field.NewString(tableName, "op_user_id")
	_opsSwDeployEvent.OpsSwDeployListID = field.NewString(tableName, "ops_sw_deploy_list_id")
	_opsSwDeployEvent.CreateTime = field.NewTime(tableName, "create_time")
	_opsSwDeployEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_opsSwDeployEvent.Comments = field.NewString(tableName, "comments")
	_opsSwDeployEvent.AnsibleExecDetail = field.NewString(tableName, "ansible_exec_detail")
	_opsSwDeployEvent.DeployDetail = field.NewString(tableName, "deploy_detail")
	_opsSwDeployEvent.DeployStatus = field.NewString(tableName, "deploy_status")
	_opsSwDeployEvent.DeployOpsSwType = field.NewString(tableName, "deploy_ops_sw_type")
	_opsSwDeployEvent.ID = field.NewInt32(tableName, "id")

	_opsSwDeployEvent.fillFieldMap()

	return _opsSwDeployEvent
}

type opsSwDeployEvent struct {
	opsSwDeployEventDo

	ALL               field.Asterisk
	OpsDeployEventID  field.String // 主键
	OpUserID          field.String // 事件操作人
	OpsSwDeployListID field.String // ops_sw_deploy_list.ops_sw_deploy_list_id
	CreateTime        field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime        field.Time   // 记录修改时间（数据库自动写入）
	Comments          field.String // 备注说明
	AnsibleExecDetail field.String // anisble执行任务的结果
	DeployDetail      field.String // 部署详细信息
	DeployStatus      field.String // 软件部署状态; sys_code.sys_type=deploy_event_status
	/*
		部署方式
		sys_code.sys_code_type='deploy_ops_sw_type'
	*/
	DeployOpsSwType field.String
	ID              field.Int32

	fieldMap map[string]field.Expr
}

func (o opsSwDeployEvent) Table(newTableName string) *opsSwDeployEvent {
	o.opsSwDeployEventDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o opsSwDeployEvent) As(alias string) *opsSwDeployEvent {
	o.opsSwDeployEventDo.DO = *(o.opsSwDeployEventDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *opsSwDeployEvent) updateTableName(table string) *opsSwDeployEvent {
	o.ALL = field.NewAsterisk(table)
	o.OpsDeployEventID = field.NewString(table, "ops_deploy_event_id")
	o.OpUserID = field.NewString(table, "op_user_id")
	o.OpsSwDeployListID = field.NewString(table, "ops_sw_deploy_list_id")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")
	o.AnsibleExecDetail = field.NewString(table, "ansible_exec_detail")
	o.DeployDetail = field.NewString(table, "deploy_detail")
	o.DeployStatus = field.NewString(table, "deploy_status")
	o.DeployOpsSwType = field.NewString(table, "deploy_ops_sw_type")
	o.ID = field.NewInt32(table, "id")

	o.fillFieldMap()

	return o
}

func (o *opsSwDeployEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *opsSwDeployEvent) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["ops_deploy_event_id"] = o.OpsDeployEventID
	o.fieldMap["op_user_id"] = o.OpUserID
	o.fieldMap["ops_sw_deploy_list_id"] = o.OpsSwDeployListID
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["ansible_exec_detail"] = o.AnsibleExecDetail
	o.fieldMap["deploy_detail"] = o.DeployDetail
	o.fieldMap["deploy_status"] = o.DeployStatus
	o.fieldMap["deploy_ops_sw_type"] = o.DeployOpsSwType
	o.fieldMap["id"] = o.ID
}

func (o opsSwDeployEvent) clone(db *gorm.DB) opsSwDeployEvent {
	o.opsSwDeployEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o opsSwDeployEvent) replaceDB(db *gorm.DB) opsSwDeployEvent {
	o.opsSwDeployEventDo.ReplaceDB(db)
	return o
}

type opsSwDeployEventDo struct{ gen.DO }

type IOpsSwDeployEventDo interface {
	gen.SubQuery
	Debug() IOpsSwDeployEventDo
	WithContext(ctx context.Context) IOpsSwDeployEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpsSwDeployEventDo
	WriteDB() IOpsSwDeployEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpsSwDeployEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpsSwDeployEventDo
	Not(conds ...gen.Condition) IOpsSwDeployEventDo
	Or(conds ...gen.Condition) IOpsSwDeployEventDo
	Select(conds ...field.Expr) IOpsSwDeployEventDo
	Where(conds ...gen.Condition) IOpsSwDeployEventDo
	Order(conds ...field.Expr) IOpsSwDeployEventDo
	Distinct(cols ...field.Expr) IOpsSwDeployEventDo
	Omit(cols ...field.Expr) IOpsSwDeployEventDo
	Join(table schema.Tabler, on ...field.Expr) IOpsSwDeployEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployEventDo
	Group(cols ...field.Expr) IOpsSwDeployEventDo
	Having(conds ...gen.Condition) IOpsSwDeployEventDo
	Limit(limit int) IOpsSwDeployEventDo
	Offset(offset int) IOpsSwDeployEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsSwDeployEventDo
	Unscoped() IOpsSwDeployEventDo
	Create(values ...*model.OpsSwDeployEvent) error
	CreateInBatches(values []*model.OpsSwDeployEvent, batchSize int) error
	Save(values ...*model.OpsSwDeployEvent) error
	First() (*model.OpsSwDeployEvent, error)
	Take() (*model.OpsSwDeployEvent, error)
	Last() (*model.OpsSwDeployEvent, error)
	Find() ([]*model.OpsSwDeployEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsSwDeployEvent, err error)
	FindInBatches(result *[]*model.OpsSwDeployEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpsSwDeployEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpsSwDeployEventDo
	Assign(attrs ...field.AssignExpr) IOpsSwDeployEventDo
	Joins(fields ...field.RelationField) IOpsSwDeployEventDo
	Preload(fields ...field.RelationField) IOpsSwDeployEventDo
	FirstOrInit() (*model.OpsSwDeployEvent, error)
	FirstOrCreate() (*model.OpsSwDeployEvent, error)
	FindByPage(offset int, limit int) (result []*model.OpsSwDeployEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpsSwDeployEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o opsSwDeployEventDo) Debug() IOpsSwDeployEventDo {
	return o.withDO(o.DO.Debug())
}

func (o opsSwDeployEventDo) WithContext(ctx context.Context) IOpsSwDeployEventDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o opsSwDeployEventDo) ReadDB() IOpsSwDeployEventDo {
	return o.Clauses(dbresolver.Read)
}

func (o opsSwDeployEventDo) WriteDB() IOpsSwDeployEventDo {
	return o.Clauses(dbresolver.Write)
}

func (o opsSwDeployEventDo) Session(config *gorm.Session) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Session(config))
}

func (o opsSwDeployEventDo) Clauses(conds ...clause.Expression) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o opsSwDeployEventDo) Returning(value interface{}, columns ...string) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o opsSwDeployEventDo) Not(conds ...gen.Condition) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o opsSwDeployEventDo) Or(conds ...gen.Condition) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o opsSwDeployEventDo) Select(conds ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o opsSwDeployEventDo) Where(conds ...gen.Condition) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o opsSwDeployEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpsSwDeployEventDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o opsSwDeployEventDo) Order(conds ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o opsSwDeployEventDo) Distinct(cols ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o opsSwDeployEventDo) Omit(cols ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o opsSwDeployEventDo) Join(table schema.Tabler, on ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o opsSwDeployEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o opsSwDeployEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o opsSwDeployEventDo) Group(cols ...field.Expr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o opsSwDeployEventDo) Having(conds ...gen.Condition) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o opsSwDeployEventDo) Limit(limit int) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o opsSwDeployEventDo) Offset(offset int) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o opsSwDeployEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o opsSwDeployEventDo) Unscoped() IOpsSwDeployEventDo {
	return o.withDO(o.DO.Unscoped())
}

func (o opsSwDeployEventDo) Create(values ...*model.OpsSwDeployEvent) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o opsSwDeployEventDo) CreateInBatches(values []*model.OpsSwDeployEvent, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o opsSwDeployEventDo) Save(values ...*model.OpsSwDeployEvent) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o opsSwDeployEventDo) First() (*model.OpsSwDeployEvent, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployEvent), nil
	}
}

func (o opsSwDeployEventDo) Take() (*model.OpsSwDeployEvent, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployEvent), nil
	}
}

func (o opsSwDeployEventDo) Last() (*model.OpsSwDeployEvent, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployEvent), nil
	}
}

func (o opsSwDeployEventDo) Find() ([]*model.OpsSwDeployEvent, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpsSwDeployEvent), err
}

func (o opsSwDeployEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsSwDeployEvent, err error) {
	buf := make([]*model.OpsSwDeployEvent, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o opsSwDeployEventDo) FindInBatches(result *[]*model.OpsSwDeployEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o opsSwDeployEventDo) Attrs(attrs ...field.AssignExpr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o opsSwDeployEventDo) Assign(attrs ...field.AssignExpr) IOpsSwDeployEventDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o opsSwDeployEventDo) Joins(fields ...field.RelationField) IOpsSwDeployEventDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o opsSwDeployEventDo) Preload(fields ...field.RelationField) IOpsSwDeployEventDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o opsSwDeployEventDo) FirstOrInit() (*model.OpsSwDeployEvent, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployEvent), nil
	}
}

func (o opsSwDeployEventDo) FirstOrCreate() (*model.OpsSwDeployEvent, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployEvent), nil
	}
}

func (o opsSwDeployEventDo) FindByPage(offset int, limit int) (result []*model.OpsSwDeployEvent, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o opsSwDeployEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o opsSwDeployEventDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o opsSwDeployEventDo) Delete(models ...*model.OpsSwDeployEvent) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *opsSwDeployEventDo) withDO(do gen.Dao) *opsSwDeployEventDo {
	o.DO = *do.(*gen.DO)
	return o
}
