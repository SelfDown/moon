// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOpsSwDeployList(db *gorm.DB, opts ...gen.DOOption) opsSwDeployList {
	_opsSwDeployList := opsSwDeployList{}

	_opsSwDeployList.opsSwDeployListDo.UseDB(db, opts...)
	_opsSwDeployList.opsSwDeployListDo.UseModel(&model.OpsSwDeployList{})

	tableName := _opsSwDeployList.opsSwDeployListDo.TableName()
	_opsSwDeployList.ALL = field.NewAsterisk(tableName)
	_opsSwDeployList.OpsSwDeployListID = field.NewString(tableName, "ops_sw_deploy_list_id")
	_opsSwDeployList.ServerID = field.NewString(tableName, "server_id")
	_opsSwDeployList.OpsConfigGroupID = field.NewString(tableName, "ops_config_group_id")
	_opsSwDeployList.OpsSoftwareListID = field.NewString(tableName, "ops_software_list_id")
	_opsSwDeployList.CreateTime = field.NewTime(tableName, "create_time")
	_opsSwDeployList.ModifyTime = field.NewTime(tableName, "modify_time")
	_opsSwDeployList.Comments = field.NewString(tableName, "comments")
	_opsSwDeployList.OpsSoftwareVersion = field.NewString(tableName, "ops_software_version")
	_opsSwDeployList.InstallSoftID = field.NewString(tableName, "install_soft_id")

	_opsSwDeployList.fillFieldMap()

	return _opsSwDeployList
}

type opsSwDeployList struct {
	opsSwDeployListDo

	ALL               field.Asterisk
	OpsSwDeployListID field.String // 主键
	ServerID          field.String // server_instance.server_id
	/*
		ops_config_group.ops_config_group_id
		软件配置分组
	*/
	OpsConfigGroupID   field.String
	OpsSoftwareListID  field.String
	CreateTime         field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime         field.Time   // 记录修改时间（数据库自动写入）
	Comments           field.String // 备注说明
	OpsSoftwareVersion field.String // 软件版本号
	InstallSoftID      field.String

	fieldMap map[string]field.Expr
}

func (o opsSwDeployList) Table(newTableName string) *opsSwDeployList {
	o.opsSwDeployListDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o opsSwDeployList) As(alias string) *opsSwDeployList {
	o.opsSwDeployListDo.DO = *(o.opsSwDeployListDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *opsSwDeployList) updateTableName(table string) *opsSwDeployList {
	o.ALL = field.NewAsterisk(table)
	o.OpsSwDeployListID = field.NewString(table, "ops_sw_deploy_list_id")
	o.ServerID = field.NewString(table, "server_id")
	o.OpsConfigGroupID = field.NewString(table, "ops_config_group_id")
	o.OpsSoftwareListID = field.NewString(table, "ops_software_list_id")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")
	o.OpsSoftwareVersion = field.NewString(table, "ops_software_version")
	o.InstallSoftID = field.NewString(table, "install_soft_id")

	o.fillFieldMap()

	return o
}

func (o *opsSwDeployList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *opsSwDeployList) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["ops_sw_deploy_list_id"] = o.OpsSwDeployListID
	o.fieldMap["server_id"] = o.ServerID
	o.fieldMap["ops_config_group_id"] = o.OpsConfigGroupID
	o.fieldMap["ops_software_list_id"] = o.OpsSoftwareListID
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["ops_software_version"] = o.OpsSoftwareVersion
	o.fieldMap["install_soft_id"] = o.InstallSoftID
}

func (o opsSwDeployList) clone(db *gorm.DB) opsSwDeployList {
	o.opsSwDeployListDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o opsSwDeployList) replaceDB(db *gorm.DB) opsSwDeployList {
	o.opsSwDeployListDo.ReplaceDB(db)
	return o
}

type opsSwDeployListDo struct{ gen.DO }

type IOpsSwDeployListDo interface {
	gen.SubQuery
	Debug() IOpsSwDeployListDo
	WithContext(ctx context.Context) IOpsSwDeployListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOpsSwDeployListDo
	WriteDB() IOpsSwDeployListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOpsSwDeployListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOpsSwDeployListDo
	Not(conds ...gen.Condition) IOpsSwDeployListDo
	Or(conds ...gen.Condition) IOpsSwDeployListDo
	Select(conds ...field.Expr) IOpsSwDeployListDo
	Where(conds ...gen.Condition) IOpsSwDeployListDo
	Order(conds ...field.Expr) IOpsSwDeployListDo
	Distinct(cols ...field.Expr) IOpsSwDeployListDo
	Omit(cols ...field.Expr) IOpsSwDeployListDo
	Join(table schema.Tabler, on ...field.Expr) IOpsSwDeployListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployListDo
	Group(cols ...field.Expr) IOpsSwDeployListDo
	Having(conds ...gen.Condition) IOpsSwDeployListDo
	Limit(limit int) IOpsSwDeployListDo
	Offset(offset int) IOpsSwDeployListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsSwDeployListDo
	Unscoped() IOpsSwDeployListDo
	Create(values ...*model.OpsSwDeployList) error
	CreateInBatches(values []*model.OpsSwDeployList, batchSize int) error
	Save(values ...*model.OpsSwDeployList) error
	First() (*model.OpsSwDeployList, error)
	Take() (*model.OpsSwDeployList, error)
	Last() (*model.OpsSwDeployList, error)
	Find() ([]*model.OpsSwDeployList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsSwDeployList, err error)
	FindInBatches(result *[]*model.OpsSwDeployList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OpsSwDeployList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOpsSwDeployListDo
	Assign(attrs ...field.AssignExpr) IOpsSwDeployListDo
	Joins(fields ...field.RelationField) IOpsSwDeployListDo
	Preload(fields ...field.RelationField) IOpsSwDeployListDo
	FirstOrInit() (*model.OpsSwDeployList, error)
	FirstOrCreate() (*model.OpsSwDeployList, error)
	FindByPage(offset int, limit int) (result []*model.OpsSwDeployList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOpsSwDeployListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o opsSwDeployListDo) Debug() IOpsSwDeployListDo {
	return o.withDO(o.DO.Debug())
}

func (o opsSwDeployListDo) WithContext(ctx context.Context) IOpsSwDeployListDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o opsSwDeployListDo) ReadDB() IOpsSwDeployListDo {
	return o.Clauses(dbresolver.Read)
}

func (o opsSwDeployListDo) WriteDB() IOpsSwDeployListDo {
	return o.Clauses(dbresolver.Write)
}

func (o opsSwDeployListDo) Session(config *gorm.Session) IOpsSwDeployListDo {
	return o.withDO(o.DO.Session(config))
}

func (o opsSwDeployListDo) Clauses(conds ...clause.Expression) IOpsSwDeployListDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o opsSwDeployListDo) Returning(value interface{}, columns ...string) IOpsSwDeployListDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o opsSwDeployListDo) Not(conds ...gen.Condition) IOpsSwDeployListDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o opsSwDeployListDo) Or(conds ...gen.Condition) IOpsSwDeployListDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o opsSwDeployListDo) Select(conds ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o opsSwDeployListDo) Where(conds ...gen.Condition) IOpsSwDeployListDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o opsSwDeployListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOpsSwDeployListDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o opsSwDeployListDo) Order(conds ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o opsSwDeployListDo) Distinct(cols ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o opsSwDeployListDo) Omit(cols ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o opsSwDeployListDo) Join(table schema.Tabler, on ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o opsSwDeployListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o opsSwDeployListDo) RightJoin(table schema.Tabler, on ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o opsSwDeployListDo) Group(cols ...field.Expr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o opsSwDeployListDo) Having(conds ...gen.Condition) IOpsSwDeployListDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o opsSwDeployListDo) Limit(limit int) IOpsSwDeployListDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o opsSwDeployListDo) Offset(offset int) IOpsSwDeployListDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o opsSwDeployListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOpsSwDeployListDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o opsSwDeployListDo) Unscoped() IOpsSwDeployListDo {
	return o.withDO(o.DO.Unscoped())
}

func (o opsSwDeployListDo) Create(values ...*model.OpsSwDeployList) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o opsSwDeployListDo) CreateInBatches(values []*model.OpsSwDeployList, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o opsSwDeployListDo) Save(values ...*model.OpsSwDeployList) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o opsSwDeployListDo) First() (*model.OpsSwDeployList, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployList), nil
	}
}

func (o opsSwDeployListDo) Take() (*model.OpsSwDeployList, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployList), nil
	}
}

func (o opsSwDeployListDo) Last() (*model.OpsSwDeployList, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployList), nil
	}
}

func (o opsSwDeployListDo) Find() ([]*model.OpsSwDeployList, error) {
	result, err := o.DO.Find()
	return result.([]*model.OpsSwDeployList), err
}

func (o opsSwDeployListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OpsSwDeployList, err error) {
	buf := make([]*model.OpsSwDeployList, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o opsSwDeployListDo) FindInBatches(result *[]*model.OpsSwDeployList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o opsSwDeployListDo) Attrs(attrs ...field.AssignExpr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o opsSwDeployListDo) Assign(attrs ...field.AssignExpr) IOpsSwDeployListDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o opsSwDeployListDo) Joins(fields ...field.RelationField) IOpsSwDeployListDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o opsSwDeployListDo) Preload(fields ...field.RelationField) IOpsSwDeployListDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o opsSwDeployListDo) FirstOrInit() (*model.OpsSwDeployList, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployList), nil
	}
}

func (o opsSwDeployListDo) FirstOrCreate() (*model.OpsSwDeployList, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OpsSwDeployList), nil
	}
}

func (o opsSwDeployListDo) FindByPage(offset int, limit int) (result []*model.OpsSwDeployList, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o opsSwDeployListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o opsSwDeployListDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o opsSwDeployListDo) Delete(models ...*model.OpsSwDeployList) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *opsSwDeployListDo) withDO(do gen.Dao) *opsSwDeployListDo {
	o.DO = *do.(*gen.DO)
	return o
}
