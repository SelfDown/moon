// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOracleRpt(db *gorm.DB, opts ...gen.DOOption) oracleRpt {
	_oracleRpt := oracleRpt{}

	_oracleRpt.oracleRptDo.UseDB(db, opts...)
	_oracleRpt.oracleRptDo.UseModel(&model.OracleRpt{})

	tableName := _oracleRpt.oracleRptDo.TableName()
	_oracleRpt.ALL = field.NewAsterisk(tableName)
	_oracleRpt.OracleRptID = field.NewString(tableName, "oracle_rpt_id")
	_oracleRpt.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_oracleRpt.OracleRptType = field.NewString(tableName, "oracle_rpt_type")
	_oracleRpt.ProcessStatus = field.NewString(tableName, "process_status")
	_oracleRpt.CreateTime = field.NewString(tableName, "create_time")
	_oracleRpt.FinishTime = field.NewString(tableName, "finish_time")
	_oracleRpt.OpUser = field.NewString(tableName, "op_user")
	_oracleRpt.ErrorInfo = field.NewString(tableName, "error_info")
	_oracleRpt.BeginTime = field.NewString(tableName, "begin_time")
	_oracleRpt.EndTime = field.NewString(tableName, "end_time")
	_oracleRpt.RptContent = field.NewString(tableName, "rpt_content")
	_oracleRpt.TimeSpendSec = field.NewInt32(tableName, "time_spend_sec")
	_oracleRpt.SnapIDBeg = field.NewString(tableName, "snap_id_beg")
	_oracleRpt.SnapIDEnd = field.NewString(tableName, "snap_id_end")
	_oracleRpt.Comments = field.NewString(tableName, "comments")
	_oracleRpt.StaticHTMLPath = field.NewString(tableName, "static_html_path")

	_oracleRpt.fillFieldMap()

	return _oracleRpt
}

type oracleRpt struct {
	oracleRptDo

	ALL            field.Asterisk
	OracleRptID    field.String
	InstallSoftID  field.String
	OracleRptType  field.String
	ProcessStatus  field.String
	CreateTime     field.String
	FinishTime     field.String
	OpUser         field.String
	ErrorInfo      field.String
	BeginTime      field.String
	EndTime        field.String
	RptContent     field.String
	TimeSpendSec   field.Int32
	SnapIDBeg      field.String
	SnapIDEnd      field.String
	Comments       field.String
	StaticHTMLPath field.String

	fieldMap map[string]field.Expr
}

func (o oracleRpt) Table(newTableName string) *oracleRpt {
	o.oracleRptDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oracleRpt) As(alias string) *oracleRpt {
	o.oracleRptDo.DO = *(o.oracleRptDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oracleRpt) updateTableName(table string) *oracleRpt {
	o.ALL = field.NewAsterisk(table)
	o.OracleRptID = field.NewString(table, "oracle_rpt_id")
	o.InstallSoftID = field.NewString(table, "install_soft_id")
	o.OracleRptType = field.NewString(table, "oracle_rpt_type")
	o.ProcessStatus = field.NewString(table, "process_status")
	o.CreateTime = field.NewString(table, "create_time")
	o.FinishTime = field.NewString(table, "finish_time")
	o.OpUser = field.NewString(table, "op_user")
	o.ErrorInfo = field.NewString(table, "error_info")
	o.BeginTime = field.NewString(table, "begin_time")
	o.EndTime = field.NewString(table, "end_time")
	o.RptContent = field.NewString(table, "rpt_content")
	o.TimeSpendSec = field.NewInt32(table, "time_spend_sec")
	o.SnapIDBeg = field.NewString(table, "snap_id_beg")
	o.SnapIDEnd = field.NewString(table, "snap_id_end")
	o.Comments = field.NewString(table, "comments")
	o.StaticHTMLPath = field.NewString(table, "static_html_path")

	o.fillFieldMap()

	return o
}

func (o *oracleRpt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oracleRpt) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 16)
	o.fieldMap["oracle_rpt_id"] = o.OracleRptID
	o.fieldMap["install_soft_id"] = o.InstallSoftID
	o.fieldMap["oracle_rpt_type"] = o.OracleRptType
	o.fieldMap["process_status"] = o.ProcessStatus
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["finish_time"] = o.FinishTime
	o.fieldMap["op_user"] = o.OpUser
	o.fieldMap["error_info"] = o.ErrorInfo
	o.fieldMap["begin_time"] = o.BeginTime
	o.fieldMap["end_time"] = o.EndTime
	o.fieldMap["rpt_content"] = o.RptContent
	o.fieldMap["time_spend_sec"] = o.TimeSpendSec
	o.fieldMap["snap_id_beg"] = o.SnapIDBeg
	o.fieldMap["snap_id_end"] = o.SnapIDEnd
	o.fieldMap["comments"] = o.Comments
	o.fieldMap["static_html_path"] = o.StaticHTMLPath
}

func (o oracleRpt) clone(db *gorm.DB) oracleRpt {
	o.oracleRptDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oracleRpt) replaceDB(db *gorm.DB) oracleRpt {
	o.oracleRptDo.ReplaceDB(db)
	return o
}

type oracleRptDo struct{ gen.DO }

type IOracleRptDo interface {
	gen.SubQuery
	Debug() IOracleRptDo
	WithContext(ctx context.Context) IOracleRptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOracleRptDo
	WriteDB() IOracleRptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOracleRptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOracleRptDo
	Not(conds ...gen.Condition) IOracleRptDo
	Or(conds ...gen.Condition) IOracleRptDo
	Select(conds ...field.Expr) IOracleRptDo
	Where(conds ...gen.Condition) IOracleRptDo
	Order(conds ...field.Expr) IOracleRptDo
	Distinct(cols ...field.Expr) IOracleRptDo
	Omit(cols ...field.Expr) IOracleRptDo
	Join(table schema.Tabler, on ...field.Expr) IOracleRptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOracleRptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOracleRptDo
	Group(cols ...field.Expr) IOracleRptDo
	Having(conds ...gen.Condition) IOracleRptDo
	Limit(limit int) IOracleRptDo
	Offset(offset int) IOracleRptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOracleRptDo
	Unscoped() IOracleRptDo
	Create(values ...*model.OracleRpt) error
	CreateInBatches(values []*model.OracleRpt, batchSize int) error
	Save(values ...*model.OracleRpt) error
	First() (*model.OracleRpt, error)
	Take() (*model.OracleRpt, error)
	Last() (*model.OracleRpt, error)
	Find() ([]*model.OracleRpt, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OracleRpt, err error)
	FindInBatches(result *[]*model.OracleRpt, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OracleRpt) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOracleRptDo
	Assign(attrs ...field.AssignExpr) IOracleRptDo
	Joins(fields ...field.RelationField) IOracleRptDo
	Preload(fields ...field.RelationField) IOracleRptDo
	FirstOrInit() (*model.OracleRpt, error)
	FirstOrCreate() (*model.OracleRpt, error)
	FindByPage(offset int, limit int) (result []*model.OracleRpt, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOracleRptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oracleRptDo) Debug() IOracleRptDo {
	return o.withDO(o.DO.Debug())
}

func (o oracleRptDo) WithContext(ctx context.Context) IOracleRptDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oracleRptDo) ReadDB() IOracleRptDo {
	return o.Clauses(dbresolver.Read)
}

func (o oracleRptDo) WriteDB() IOracleRptDo {
	return o.Clauses(dbresolver.Write)
}

func (o oracleRptDo) Session(config *gorm.Session) IOracleRptDo {
	return o.withDO(o.DO.Session(config))
}

func (o oracleRptDo) Clauses(conds ...clause.Expression) IOracleRptDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oracleRptDo) Returning(value interface{}, columns ...string) IOracleRptDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oracleRptDo) Not(conds ...gen.Condition) IOracleRptDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oracleRptDo) Or(conds ...gen.Condition) IOracleRptDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oracleRptDo) Select(conds ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oracleRptDo) Where(conds ...gen.Condition) IOracleRptDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oracleRptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOracleRptDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o oracleRptDo) Order(conds ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oracleRptDo) Distinct(cols ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oracleRptDo) Omit(cols ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oracleRptDo) Join(table schema.Tabler, on ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oracleRptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oracleRptDo) RightJoin(table schema.Tabler, on ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oracleRptDo) Group(cols ...field.Expr) IOracleRptDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oracleRptDo) Having(conds ...gen.Condition) IOracleRptDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oracleRptDo) Limit(limit int) IOracleRptDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oracleRptDo) Offset(offset int) IOracleRptDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oracleRptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOracleRptDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oracleRptDo) Unscoped() IOracleRptDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oracleRptDo) Create(values ...*model.OracleRpt) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oracleRptDo) CreateInBatches(values []*model.OracleRpt, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oracleRptDo) Save(values ...*model.OracleRpt) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oracleRptDo) First() (*model.OracleRpt, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleRpt), nil
	}
}

func (o oracleRptDo) Take() (*model.OracleRpt, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleRpt), nil
	}
}

func (o oracleRptDo) Last() (*model.OracleRpt, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleRpt), nil
	}
}

func (o oracleRptDo) Find() ([]*model.OracleRpt, error) {
	result, err := o.DO.Find()
	return result.([]*model.OracleRpt), err
}

func (o oracleRptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OracleRpt, err error) {
	buf := make([]*model.OracleRpt, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oracleRptDo) FindInBatches(result *[]*model.OracleRpt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oracleRptDo) Attrs(attrs ...field.AssignExpr) IOracleRptDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oracleRptDo) Assign(attrs ...field.AssignExpr) IOracleRptDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oracleRptDo) Joins(fields ...field.RelationField) IOracleRptDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oracleRptDo) Preload(fields ...field.RelationField) IOracleRptDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oracleRptDo) FirstOrInit() (*model.OracleRpt, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleRpt), nil
	}
}

func (o oracleRptDo) FirstOrCreate() (*model.OracleRpt, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleRpt), nil
	}
}

func (o oracleRptDo) FindByPage(offset int, limit int) (result []*model.OracleRpt, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oracleRptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oracleRptDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oracleRptDo) Delete(models ...*model.OracleRpt) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oracleRptDo) withDO(do gen.Dao) *oracleRptDo {
	o.DO = *do.(*gen.DO)
	return o
}
