// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOracleUser(db *gorm.DB, opts ...gen.DOOption) oracleUser {
	_oracleUser := oracleUser{}

	_oracleUser.oracleUserDo.UseDB(db, opts...)
	_oracleUser.oracleUserDo.UseModel(&model.OracleUser{})

	tableName := _oracleUser.oracleUserDo.TableName()
	_oracleUser.ALL = field.NewAsterisk(tableName)
	_oracleUser.OracleUserID = field.NewString(tableName, "oracle_user_id")
	_oracleUser.DbuserValue = field.NewString(tableName, "dbuser_value")
	_oracleUser.DbuserText = field.NewString(tableName, "dbuser_text")
	_oracleUser.Note = field.NewString(tableName, "note")
	_oracleUser.SysProjectTeamID = field.NewString(tableName, "sys_project_team_id")
	_oracleUser.CreateTime = field.NewTime(tableName, "create_time")
	_oracleUser.ModifyTime = field.NewTime(tableName, "modify_time")
	_oracleUser.Comments = field.NewString(tableName, "comments")

	_oracleUser.fillFieldMap()

	return _oracleUser
}

type oracleUser struct {
	oracleUserDo

	ALL              field.Asterisk
	OracleUserID     field.String
	DbuserValue      field.String
	DbuserText       field.String
	Note             field.String
	SysProjectTeamID field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (o oracleUser) Table(newTableName string) *oracleUser {
	o.oracleUserDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oracleUser) As(alias string) *oracleUser {
	o.oracleUserDo.DO = *(o.oracleUserDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oracleUser) updateTableName(table string) *oracleUser {
	o.ALL = field.NewAsterisk(table)
	o.OracleUserID = field.NewString(table, "oracle_user_id")
	o.DbuserValue = field.NewString(table, "dbuser_value")
	o.DbuserText = field.NewString(table, "dbuser_text")
	o.Note = field.NewString(table, "note")
	o.SysProjectTeamID = field.NewString(table, "sys_project_team_id")
	o.CreateTime = field.NewTime(table, "create_time")
	o.ModifyTime = field.NewTime(table, "modify_time")
	o.Comments = field.NewString(table, "comments")

	o.fillFieldMap()

	return o
}

func (o *oracleUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oracleUser) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["oracle_user_id"] = o.OracleUserID
	o.fieldMap["dbuser_value"] = o.DbuserValue
	o.fieldMap["dbuser_text"] = o.DbuserText
	o.fieldMap["note"] = o.Note
	o.fieldMap["sys_project_team_id"] = o.SysProjectTeamID
	o.fieldMap["create_time"] = o.CreateTime
	o.fieldMap["modify_time"] = o.ModifyTime
	o.fieldMap["comments"] = o.Comments
}

func (o oracleUser) clone(db *gorm.DB) oracleUser {
	o.oracleUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oracleUser) replaceDB(db *gorm.DB) oracleUser {
	o.oracleUserDo.ReplaceDB(db)
	return o
}

type oracleUserDo struct{ gen.DO }

type IOracleUserDo interface {
	gen.SubQuery
	Debug() IOracleUserDo
	WithContext(ctx context.Context) IOracleUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOracleUserDo
	WriteDB() IOracleUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOracleUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOracleUserDo
	Not(conds ...gen.Condition) IOracleUserDo
	Or(conds ...gen.Condition) IOracleUserDo
	Select(conds ...field.Expr) IOracleUserDo
	Where(conds ...gen.Condition) IOracleUserDo
	Order(conds ...field.Expr) IOracleUserDo
	Distinct(cols ...field.Expr) IOracleUserDo
	Omit(cols ...field.Expr) IOracleUserDo
	Join(table schema.Tabler, on ...field.Expr) IOracleUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOracleUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOracleUserDo
	Group(cols ...field.Expr) IOracleUserDo
	Having(conds ...gen.Condition) IOracleUserDo
	Limit(limit int) IOracleUserDo
	Offset(offset int) IOracleUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOracleUserDo
	Unscoped() IOracleUserDo
	Create(values ...*model.OracleUser) error
	CreateInBatches(values []*model.OracleUser, batchSize int) error
	Save(values ...*model.OracleUser) error
	First() (*model.OracleUser, error)
	Take() (*model.OracleUser, error)
	Last() (*model.OracleUser, error)
	Find() ([]*model.OracleUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OracleUser, err error)
	FindInBatches(result *[]*model.OracleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OracleUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOracleUserDo
	Assign(attrs ...field.AssignExpr) IOracleUserDo
	Joins(fields ...field.RelationField) IOracleUserDo
	Preload(fields ...field.RelationField) IOracleUserDo
	FirstOrInit() (*model.OracleUser, error)
	FirstOrCreate() (*model.OracleUser, error)
	FindByPage(offset int, limit int) (result []*model.OracleUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOracleUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oracleUserDo) Debug() IOracleUserDo {
	return o.withDO(o.DO.Debug())
}

func (o oracleUserDo) WithContext(ctx context.Context) IOracleUserDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oracleUserDo) ReadDB() IOracleUserDo {
	return o.Clauses(dbresolver.Read)
}

func (o oracleUserDo) WriteDB() IOracleUserDo {
	return o.Clauses(dbresolver.Write)
}

func (o oracleUserDo) Session(config *gorm.Session) IOracleUserDo {
	return o.withDO(o.DO.Session(config))
}

func (o oracleUserDo) Clauses(conds ...clause.Expression) IOracleUserDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oracleUserDo) Returning(value interface{}, columns ...string) IOracleUserDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oracleUserDo) Not(conds ...gen.Condition) IOracleUserDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oracleUserDo) Or(conds ...gen.Condition) IOracleUserDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oracleUserDo) Select(conds ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oracleUserDo) Where(conds ...gen.Condition) IOracleUserDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oracleUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOracleUserDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o oracleUserDo) Order(conds ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oracleUserDo) Distinct(cols ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oracleUserDo) Omit(cols ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oracleUserDo) Join(table schema.Tabler, on ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oracleUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oracleUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oracleUserDo) Group(cols ...field.Expr) IOracleUserDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oracleUserDo) Having(conds ...gen.Condition) IOracleUserDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oracleUserDo) Limit(limit int) IOracleUserDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oracleUserDo) Offset(offset int) IOracleUserDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oracleUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOracleUserDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oracleUserDo) Unscoped() IOracleUserDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oracleUserDo) Create(values ...*model.OracleUser) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oracleUserDo) CreateInBatches(values []*model.OracleUser, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oracleUserDo) Save(values ...*model.OracleUser) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oracleUserDo) First() (*model.OracleUser, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleUser), nil
	}
}

func (o oracleUserDo) Take() (*model.OracleUser, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleUser), nil
	}
}

func (o oracleUserDo) Last() (*model.OracleUser, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleUser), nil
	}
}

func (o oracleUserDo) Find() ([]*model.OracleUser, error) {
	result, err := o.DO.Find()
	return result.([]*model.OracleUser), err
}

func (o oracleUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OracleUser, err error) {
	buf := make([]*model.OracleUser, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oracleUserDo) FindInBatches(result *[]*model.OracleUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oracleUserDo) Attrs(attrs ...field.AssignExpr) IOracleUserDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oracleUserDo) Assign(attrs ...field.AssignExpr) IOracleUserDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oracleUserDo) Joins(fields ...field.RelationField) IOracleUserDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oracleUserDo) Preload(fields ...field.RelationField) IOracleUserDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oracleUserDo) FirstOrInit() (*model.OracleUser, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleUser), nil
	}
}

func (o oracleUserDo) FirstOrCreate() (*model.OracleUser, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OracleUser), nil
	}
}

func (o oracleUserDo) FindByPage(offset int, limit int) (result []*model.OracleUser, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oracleUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oracleUserDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oracleUserDo) Delete(models ...*model.OracleUser) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oracleUserDo) withDO(do gen.Dao) *oracleUserDo {
	o.DO = *do.(*gen.DO)
	return o
}
