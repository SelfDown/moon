// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newOsSoftUserGroup(db *gorm.DB, opts ...gen.DOOption) osSoftUserGroup {
	_osSoftUserGroup := osSoftUserGroup{}

	_osSoftUserGroup.osSoftUserGroupDo.UseDB(db, opts...)
	_osSoftUserGroup.osSoftUserGroupDo.UseModel(&model.OsSoftUserGroup{})

	tableName := _osSoftUserGroup.osSoftUserGroupDo.TableName()
	_osSoftUserGroup.ALL = field.NewAsterisk(tableName)
	_osSoftUserGroup.OssoftUserGroupID = field.NewString(tableName, "ossoft_user_group_id")
	_osSoftUserGroup.UserGroupName = field.NewString(tableName, "user_group_name")
	_osSoftUserGroup.SoftType = field.NewString(tableName, "soft_type")
	_osSoftUserGroup.UserGroupCode = field.NewString(tableName, "user_group_code")
	_osSoftUserGroup.UserGoupSrc = field.NewString(tableName, "user_goup_src")
	_osSoftUserGroup.OsType = field.NewString(tableName, "os_type")
	_osSoftUserGroup.Comments = field.NewString(tableName, "comments")

	_osSoftUserGroup.fillFieldMap()

	return _osSoftUserGroup
}

type osSoftUserGroup struct {
	osSoftUserGroupDo

	ALL               field.Asterisk
	OssoftUserGroupID field.String
	UserGroupName     field.String
	SoftType          field.String
	UserGroupCode     field.String
	UserGoupSrc       field.String // 用户组来源 1、OS user，2、server soft user
	OsType            field.String
	Comments          field.String

	fieldMap map[string]field.Expr
}

func (o osSoftUserGroup) Table(newTableName string) *osSoftUserGroup {
	o.osSoftUserGroupDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o osSoftUserGroup) As(alias string) *osSoftUserGroup {
	o.osSoftUserGroupDo.DO = *(o.osSoftUserGroupDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *osSoftUserGroup) updateTableName(table string) *osSoftUserGroup {
	o.ALL = field.NewAsterisk(table)
	o.OssoftUserGroupID = field.NewString(table, "ossoft_user_group_id")
	o.UserGroupName = field.NewString(table, "user_group_name")
	o.SoftType = field.NewString(table, "soft_type")
	o.UserGroupCode = field.NewString(table, "user_group_code")
	o.UserGoupSrc = field.NewString(table, "user_goup_src")
	o.OsType = field.NewString(table, "os_type")
	o.Comments = field.NewString(table, "comments")

	o.fillFieldMap()

	return o
}

func (o *osSoftUserGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *osSoftUserGroup) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["ossoft_user_group_id"] = o.OssoftUserGroupID
	o.fieldMap["user_group_name"] = o.UserGroupName
	o.fieldMap["soft_type"] = o.SoftType
	o.fieldMap["user_group_code"] = o.UserGroupCode
	o.fieldMap["user_goup_src"] = o.UserGoupSrc
	o.fieldMap["os_type"] = o.OsType
	o.fieldMap["comments"] = o.Comments
}

func (o osSoftUserGroup) clone(db *gorm.DB) osSoftUserGroup {
	o.osSoftUserGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o osSoftUserGroup) replaceDB(db *gorm.DB) osSoftUserGroup {
	o.osSoftUserGroupDo.ReplaceDB(db)
	return o
}

type osSoftUserGroupDo struct{ gen.DO }

type IOsSoftUserGroupDo interface {
	gen.SubQuery
	Debug() IOsSoftUserGroupDo
	WithContext(ctx context.Context) IOsSoftUserGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOsSoftUserGroupDo
	WriteDB() IOsSoftUserGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOsSoftUserGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOsSoftUserGroupDo
	Not(conds ...gen.Condition) IOsSoftUserGroupDo
	Or(conds ...gen.Condition) IOsSoftUserGroupDo
	Select(conds ...field.Expr) IOsSoftUserGroupDo
	Where(conds ...gen.Condition) IOsSoftUserGroupDo
	Order(conds ...field.Expr) IOsSoftUserGroupDo
	Distinct(cols ...field.Expr) IOsSoftUserGroupDo
	Omit(cols ...field.Expr) IOsSoftUserGroupDo
	Join(table schema.Tabler, on ...field.Expr) IOsSoftUserGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOsSoftUserGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOsSoftUserGroupDo
	Group(cols ...field.Expr) IOsSoftUserGroupDo
	Having(conds ...gen.Condition) IOsSoftUserGroupDo
	Limit(limit int) IOsSoftUserGroupDo
	Offset(offset int) IOsSoftUserGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOsSoftUserGroupDo
	Unscoped() IOsSoftUserGroupDo
	Create(values ...*model.OsSoftUserGroup) error
	CreateInBatches(values []*model.OsSoftUserGroup, batchSize int) error
	Save(values ...*model.OsSoftUserGroup) error
	First() (*model.OsSoftUserGroup, error)
	Take() (*model.OsSoftUserGroup, error)
	Last() (*model.OsSoftUserGroup, error)
	Find() ([]*model.OsSoftUserGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OsSoftUserGroup, err error)
	FindInBatches(result *[]*model.OsSoftUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OsSoftUserGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOsSoftUserGroupDo
	Assign(attrs ...field.AssignExpr) IOsSoftUserGroupDo
	Joins(fields ...field.RelationField) IOsSoftUserGroupDo
	Preload(fields ...field.RelationField) IOsSoftUserGroupDo
	FirstOrInit() (*model.OsSoftUserGroup, error)
	FirstOrCreate() (*model.OsSoftUserGroup, error)
	FindByPage(offset int, limit int) (result []*model.OsSoftUserGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOsSoftUserGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o osSoftUserGroupDo) Debug() IOsSoftUserGroupDo {
	return o.withDO(o.DO.Debug())
}

func (o osSoftUserGroupDo) WithContext(ctx context.Context) IOsSoftUserGroupDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o osSoftUserGroupDo) ReadDB() IOsSoftUserGroupDo {
	return o.Clauses(dbresolver.Read)
}

func (o osSoftUserGroupDo) WriteDB() IOsSoftUserGroupDo {
	return o.Clauses(dbresolver.Write)
}

func (o osSoftUserGroupDo) Session(config *gorm.Session) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Session(config))
}

func (o osSoftUserGroupDo) Clauses(conds ...clause.Expression) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o osSoftUserGroupDo) Returning(value interface{}, columns ...string) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o osSoftUserGroupDo) Not(conds ...gen.Condition) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o osSoftUserGroupDo) Or(conds ...gen.Condition) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o osSoftUserGroupDo) Select(conds ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o osSoftUserGroupDo) Where(conds ...gen.Condition) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o osSoftUserGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOsSoftUserGroupDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o osSoftUserGroupDo) Order(conds ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o osSoftUserGroupDo) Distinct(cols ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o osSoftUserGroupDo) Omit(cols ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o osSoftUserGroupDo) Join(table schema.Tabler, on ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o osSoftUserGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o osSoftUserGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o osSoftUserGroupDo) Group(cols ...field.Expr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o osSoftUserGroupDo) Having(conds ...gen.Condition) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o osSoftUserGroupDo) Limit(limit int) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o osSoftUserGroupDo) Offset(offset int) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o osSoftUserGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o osSoftUserGroupDo) Unscoped() IOsSoftUserGroupDo {
	return o.withDO(o.DO.Unscoped())
}

func (o osSoftUserGroupDo) Create(values ...*model.OsSoftUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o osSoftUserGroupDo) CreateInBatches(values []*model.OsSoftUserGroup, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o osSoftUserGroupDo) Save(values ...*model.OsSoftUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o osSoftUserGroupDo) First() (*model.OsSoftUserGroup, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OsSoftUserGroup), nil
	}
}

func (o osSoftUserGroupDo) Take() (*model.OsSoftUserGroup, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OsSoftUserGroup), nil
	}
}

func (o osSoftUserGroupDo) Last() (*model.OsSoftUserGroup, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OsSoftUserGroup), nil
	}
}

func (o osSoftUserGroupDo) Find() ([]*model.OsSoftUserGroup, error) {
	result, err := o.DO.Find()
	return result.([]*model.OsSoftUserGroup), err
}

func (o osSoftUserGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OsSoftUserGroup, err error) {
	buf := make([]*model.OsSoftUserGroup, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o osSoftUserGroupDo) FindInBatches(result *[]*model.OsSoftUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o osSoftUserGroupDo) Attrs(attrs ...field.AssignExpr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o osSoftUserGroupDo) Assign(attrs ...field.AssignExpr) IOsSoftUserGroupDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o osSoftUserGroupDo) Joins(fields ...field.RelationField) IOsSoftUserGroupDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o osSoftUserGroupDo) Preload(fields ...field.RelationField) IOsSoftUserGroupDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o osSoftUserGroupDo) FirstOrInit() (*model.OsSoftUserGroup, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OsSoftUserGroup), nil
	}
}

func (o osSoftUserGroupDo) FirstOrCreate() (*model.OsSoftUserGroup, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OsSoftUserGroup), nil
	}
}

func (o osSoftUserGroupDo) FindByPage(offset int, limit int) (result []*model.OsSoftUserGroup, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o osSoftUserGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o osSoftUserGroupDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o osSoftUserGroupDo) Delete(models ...*model.OsSoftUserGroup) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *osSoftUserGroupDo) withDO(do gen.Dao) *osSoftUserGroupDo {
	o.DO = *do.(*gen.DO)
	return o
}
