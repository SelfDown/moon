// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPageGroup(db *gorm.DB, opts ...gen.DOOption) pageGroup {
	_pageGroup := pageGroup{}

	_pageGroup.pageGroupDo.UseDB(db, opts...)
	_pageGroup.pageGroupDo.UseModel(&model.PageGroup{})

	tableName := _pageGroup.pageGroupDo.TableName()
	_pageGroup.ALL = field.NewAsterisk(tableName)
	_pageGroup.PageGroupID = field.NewString(tableName, "page_group_id")
	_pageGroup.Name = field.NewString(tableName, "name")
	_pageGroup.SysProjectCode = field.NewString(tableName, "sys_project_code")

	_pageGroup.fillFieldMap()

	return _pageGroup
}

type pageGroup struct {
	pageGroupDo

	ALL            field.Asterisk
	PageGroupID    field.String
	Name           field.String // 名称
	SysProjectCode field.String

	fieldMap map[string]field.Expr
}

func (p pageGroup) Table(newTableName string) *pageGroup {
	p.pageGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pageGroup) As(alias string) *pageGroup {
	p.pageGroupDo.DO = *(p.pageGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pageGroup) updateTableName(table string) *pageGroup {
	p.ALL = field.NewAsterisk(table)
	p.PageGroupID = field.NewString(table, "page_group_id")
	p.Name = field.NewString(table, "name")
	p.SysProjectCode = field.NewString(table, "sys_project_code")

	p.fillFieldMap()

	return p
}

func (p *pageGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pageGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["page_group_id"] = p.PageGroupID
	p.fieldMap["name"] = p.Name
	p.fieldMap["sys_project_code"] = p.SysProjectCode
}

func (p pageGroup) clone(db *gorm.DB) pageGroup {
	p.pageGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pageGroup) replaceDB(db *gorm.DB) pageGroup {
	p.pageGroupDo.ReplaceDB(db)
	return p
}

type pageGroupDo struct{ gen.DO }

type IPageGroupDo interface {
	gen.SubQuery
	Debug() IPageGroupDo
	WithContext(ctx context.Context) IPageGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPageGroupDo
	WriteDB() IPageGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPageGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPageGroupDo
	Not(conds ...gen.Condition) IPageGroupDo
	Or(conds ...gen.Condition) IPageGroupDo
	Select(conds ...field.Expr) IPageGroupDo
	Where(conds ...gen.Condition) IPageGroupDo
	Order(conds ...field.Expr) IPageGroupDo
	Distinct(cols ...field.Expr) IPageGroupDo
	Omit(cols ...field.Expr) IPageGroupDo
	Join(table schema.Tabler, on ...field.Expr) IPageGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPageGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPageGroupDo
	Group(cols ...field.Expr) IPageGroupDo
	Having(conds ...gen.Condition) IPageGroupDo
	Limit(limit int) IPageGroupDo
	Offset(offset int) IPageGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPageGroupDo
	Unscoped() IPageGroupDo
	Create(values ...*model.PageGroup) error
	CreateInBatches(values []*model.PageGroup, batchSize int) error
	Save(values ...*model.PageGroup) error
	First() (*model.PageGroup, error)
	Take() (*model.PageGroup, error)
	Last() (*model.PageGroup, error)
	Find() ([]*model.PageGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PageGroup, err error)
	FindInBatches(result *[]*model.PageGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PageGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPageGroupDo
	Assign(attrs ...field.AssignExpr) IPageGroupDo
	Joins(fields ...field.RelationField) IPageGroupDo
	Preload(fields ...field.RelationField) IPageGroupDo
	FirstOrInit() (*model.PageGroup, error)
	FirstOrCreate() (*model.PageGroup, error)
	FindByPage(offset int, limit int) (result []*model.PageGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPageGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pageGroupDo) Debug() IPageGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p pageGroupDo) WithContext(ctx context.Context) IPageGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pageGroupDo) ReadDB() IPageGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p pageGroupDo) WriteDB() IPageGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p pageGroupDo) Session(config *gorm.Session) IPageGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p pageGroupDo) Clauses(conds ...clause.Expression) IPageGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pageGroupDo) Returning(value interface{}, columns ...string) IPageGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pageGroupDo) Not(conds ...gen.Condition) IPageGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pageGroupDo) Or(conds ...gen.Condition) IPageGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pageGroupDo) Select(conds ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pageGroupDo) Where(conds ...gen.Condition) IPageGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pageGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPageGroupDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pageGroupDo) Order(conds ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pageGroupDo) Distinct(cols ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pageGroupDo) Omit(cols ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pageGroupDo) Join(table schema.Tabler, on ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pageGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pageGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pageGroupDo) Group(cols ...field.Expr) IPageGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pageGroupDo) Having(conds ...gen.Condition) IPageGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pageGroupDo) Limit(limit int) IPageGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pageGroupDo) Offset(offset int) IPageGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pageGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPageGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pageGroupDo) Unscoped() IPageGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pageGroupDo) Create(values ...*model.PageGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pageGroupDo) CreateInBatches(values []*model.PageGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pageGroupDo) Save(values ...*model.PageGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pageGroupDo) First() (*model.PageGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroup), nil
	}
}

func (p pageGroupDo) Take() (*model.PageGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroup), nil
	}
}

func (p pageGroupDo) Last() (*model.PageGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroup), nil
	}
}

func (p pageGroupDo) Find() ([]*model.PageGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.PageGroup), err
}

func (p pageGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PageGroup, err error) {
	buf := make([]*model.PageGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pageGroupDo) FindInBatches(result *[]*model.PageGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pageGroupDo) Attrs(attrs ...field.AssignExpr) IPageGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pageGroupDo) Assign(attrs ...field.AssignExpr) IPageGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pageGroupDo) Joins(fields ...field.RelationField) IPageGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pageGroupDo) Preload(fields ...field.RelationField) IPageGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pageGroupDo) FirstOrInit() (*model.PageGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroup), nil
	}
}

func (p pageGroupDo) FirstOrCreate() (*model.PageGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroup), nil
	}
}

func (p pageGroupDo) FindByPage(offset int, limit int) (result []*model.PageGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pageGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pageGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pageGroupDo) Delete(models ...*model.PageGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pageGroupDo) withDO(do gen.Dao) *pageGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
