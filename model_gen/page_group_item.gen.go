// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPageGroupItem(db *gorm.DB, opts ...gen.DOOption) pageGroupItem {
	_pageGroupItem := pageGroupItem{}

	_pageGroupItem.pageGroupItemDo.UseDB(db, opts...)
	_pageGroupItem.pageGroupItemDo.UseModel(&model.PageGroupItem{})

	tableName := _pageGroupItem.pageGroupItemDo.TableName()
	_pageGroupItem.ALL = field.NewAsterisk(tableName)
	_pageGroupItem.PageGroupItemID = field.NewString(tableName, "page_group_item_id")
	_pageGroupItem.Key = field.NewString(tableName, "key")
	_pageGroupItem.Value = field.NewString(tableName, "value")
	_pageGroupItem.Weight = field.NewInt32(tableName, "weight")
	_pageGroupItem.Desc = field.NewString(tableName, "desc")
	_pageGroupItem.PageGroupID = field.NewString(tableName, "page_group_id")

	_pageGroupItem.fillFieldMap()

	return _pageGroupItem
}

type pageGroupItem struct {
	pageGroupItemDo

	ALL             field.Asterisk
	PageGroupItemID field.String
	Key             field.String // 名称
	Value           field.String // 配置
	Weight          field.Int32  // 权重
	Desc            field.String // 备注
	PageGroupID     field.String

	fieldMap map[string]field.Expr
}

func (p pageGroupItem) Table(newTableName string) *pageGroupItem {
	p.pageGroupItemDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pageGroupItem) As(alias string) *pageGroupItem {
	p.pageGroupItemDo.DO = *(p.pageGroupItemDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pageGroupItem) updateTableName(table string) *pageGroupItem {
	p.ALL = field.NewAsterisk(table)
	p.PageGroupItemID = field.NewString(table, "page_group_item_id")
	p.Key = field.NewString(table, "key")
	p.Value = field.NewString(table, "value")
	p.Weight = field.NewInt32(table, "weight")
	p.Desc = field.NewString(table, "desc")
	p.PageGroupID = field.NewString(table, "page_group_id")

	p.fillFieldMap()

	return p
}

func (p *pageGroupItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pageGroupItem) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["page_group_item_id"] = p.PageGroupItemID
	p.fieldMap["key"] = p.Key
	p.fieldMap["value"] = p.Value
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["page_group_id"] = p.PageGroupID
}

func (p pageGroupItem) clone(db *gorm.DB) pageGroupItem {
	p.pageGroupItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pageGroupItem) replaceDB(db *gorm.DB) pageGroupItem {
	p.pageGroupItemDo.ReplaceDB(db)
	return p
}

type pageGroupItemDo struct{ gen.DO }

type IPageGroupItemDo interface {
	gen.SubQuery
	Debug() IPageGroupItemDo
	WithContext(ctx context.Context) IPageGroupItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPageGroupItemDo
	WriteDB() IPageGroupItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPageGroupItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPageGroupItemDo
	Not(conds ...gen.Condition) IPageGroupItemDo
	Or(conds ...gen.Condition) IPageGroupItemDo
	Select(conds ...field.Expr) IPageGroupItemDo
	Where(conds ...gen.Condition) IPageGroupItemDo
	Order(conds ...field.Expr) IPageGroupItemDo
	Distinct(cols ...field.Expr) IPageGroupItemDo
	Omit(cols ...field.Expr) IPageGroupItemDo
	Join(table schema.Tabler, on ...field.Expr) IPageGroupItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPageGroupItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPageGroupItemDo
	Group(cols ...field.Expr) IPageGroupItemDo
	Having(conds ...gen.Condition) IPageGroupItemDo
	Limit(limit int) IPageGroupItemDo
	Offset(offset int) IPageGroupItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPageGroupItemDo
	Unscoped() IPageGroupItemDo
	Create(values ...*model.PageGroupItem) error
	CreateInBatches(values []*model.PageGroupItem, batchSize int) error
	Save(values ...*model.PageGroupItem) error
	First() (*model.PageGroupItem, error)
	Take() (*model.PageGroupItem, error)
	Last() (*model.PageGroupItem, error)
	Find() ([]*model.PageGroupItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PageGroupItem, err error)
	FindInBatches(result *[]*model.PageGroupItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PageGroupItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPageGroupItemDo
	Assign(attrs ...field.AssignExpr) IPageGroupItemDo
	Joins(fields ...field.RelationField) IPageGroupItemDo
	Preload(fields ...field.RelationField) IPageGroupItemDo
	FirstOrInit() (*model.PageGroupItem, error)
	FirstOrCreate() (*model.PageGroupItem, error)
	FindByPage(offset int, limit int) (result []*model.PageGroupItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPageGroupItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pageGroupItemDo) Debug() IPageGroupItemDo {
	return p.withDO(p.DO.Debug())
}

func (p pageGroupItemDo) WithContext(ctx context.Context) IPageGroupItemDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pageGroupItemDo) ReadDB() IPageGroupItemDo {
	return p.Clauses(dbresolver.Read)
}

func (p pageGroupItemDo) WriteDB() IPageGroupItemDo {
	return p.Clauses(dbresolver.Write)
}

func (p pageGroupItemDo) Session(config *gorm.Session) IPageGroupItemDo {
	return p.withDO(p.DO.Session(config))
}

func (p pageGroupItemDo) Clauses(conds ...clause.Expression) IPageGroupItemDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pageGroupItemDo) Returning(value interface{}, columns ...string) IPageGroupItemDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pageGroupItemDo) Not(conds ...gen.Condition) IPageGroupItemDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pageGroupItemDo) Or(conds ...gen.Condition) IPageGroupItemDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pageGroupItemDo) Select(conds ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pageGroupItemDo) Where(conds ...gen.Condition) IPageGroupItemDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pageGroupItemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPageGroupItemDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pageGroupItemDo) Order(conds ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pageGroupItemDo) Distinct(cols ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pageGroupItemDo) Omit(cols ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pageGroupItemDo) Join(table schema.Tabler, on ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pageGroupItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pageGroupItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pageGroupItemDo) Group(cols ...field.Expr) IPageGroupItemDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pageGroupItemDo) Having(conds ...gen.Condition) IPageGroupItemDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pageGroupItemDo) Limit(limit int) IPageGroupItemDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pageGroupItemDo) Offset(offset int) IPageGroupItemDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pageGroupItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPageGroupItemDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pageGroupItemDo) Unscoped() IPageGroupItemDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pageGroupItemDo) Create(values ...*model.PageGroupItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pageGroupItemDo) CreateInBatches(values []*model.PageGroupItem, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pageGroupItemDo) Save(values ...*model.PageGroupItem) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pageGroupItemDo) First() (*model.PageGroupItem, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroupItem), nil
	}
}

func (p pageGroupItemDo) Take() (*model.PageGroupItem, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroupItem), nil
	}
}

func (p pageGroupItemDo) Last() (*model.PageGroupItem, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroupItem), nil
	}
}

func (p pageGroupItemDo) Find() ([]*model.PageGroupItem, error) {
	result, err := p.DO.Find()
	return result.([]*model.PageGroupItem), err
}

func (p pageGroupItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PageGroupItem, err error) {
	buf := make([]*model.PageGroupItem, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pageGroupItemDo) FindInBatches(result *[]*model.PageGroupItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pageGroupItemDo) Attrs(attrs ...field.AssignExpr) IPageGroupItemDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pageGroupItemDo) Assign(attrs ...field.AssignExpr) IPageGroupItemDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pageGroupItemDo) Joins(fields ...field.RelationField) IPageGroupItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pageGroupItemDo) Preload(fields ...field.RelationField) IPageGroupItemDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pageGroupItemDo) FirstOrInit() (*model.PageGroupItem, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroupItem), nil
	}
}

func (p pageGroupItemDo) FirstOrCreate() (*model.PageGroupItem, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PageGroupItem), nil
	}
}

func (p pageGroupItemDo) FindByPage(offset int, limit int) (result []*model.PageGroupItem, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pageGroupItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pageGroupItemDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pageGroupItemDo) Delete(models ...*model.PageGroupItem) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pageGroupItemDo) withDO(do gen.Dao) *pageGroupItemDo {
	p.DO = *do.(*gen.DO)
	return p
}
