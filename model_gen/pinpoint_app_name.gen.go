// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPinpointAppName(db *gorm.DB, opts ...gen.DOOption) pinpointAppName {
	_pinpointAppName := pinpointAppName{}

	_pinpointAppName.pinpointAppNameDo.UseDB(db, opts...)
	_pinpointAppName.pinpointAppNameDo.UseModel(&model.PinpointAppName{})

	tableName := _pinpointAppName.pinpointAppNameDo.TableName()
	_pinpointAppName.ALL = field.NewAsterisk(tableName)
	_pinpointAppName.ServerID = field.NewString(tableName, "server_id")
	_pinpointAppName.PinpointAppName = field.NewString(tableName, "pinpoint_app_name")
	_pinpointAppName.CreateTime = field.NewTime(tableName, "create_time")
	_pinpointAppName.ModifyTime = field.NewTime(tableName, "modify_time")
	_pinpointAppName.Comments = field.NewString(tableName, "comments")

	_pinpointAppName.fillFieldMap()

	return _pinpointAppName
}

type pinpointAppName struct {
	pinpointAppNameDo

	ALL             field.Asterisk
	ServerID        field.String // server_instance.server_id
	PinpointAppName field.String // pinpoint应用名称
	CreateTime      field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time   // 记录修改时间（数据库自动写入）
	Comments        field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (p pinpointAppName) Table(newTableName string) *pinpointAppName {
	p.pinpointAppNameDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pinpointAppName) As(alias string) *pinpointAppName {
	p.pinpointAppNameDo.DO = *(p.pinpointAppNameDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pinpointAppName) updateTableName(table string) *pinpointAppName {
	p.ALL = field.NewAsterisk(table)
	p.ServerID = field.NewString(table, "server_id")
	p.PinpointAppName = field.NewString(table, "pinpoint_app_name")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")

	p.fillFieldMap()

	return p
}

func (p *pinpointAppName) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pinpointAppName) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["server_id"] = p.ServerID
	p.fieldMap["pinpoint_app_name"] = p.PinpointAppName
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
}

func (p pinpointAppName) clone(db *gorm.DB) pinpointAppName {
	p.pinpointAppNameDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pinpointAppName) replaceDB(db *gorm.DB) pinpointAppName {
	p.pinpointAppNameDo.ReplaceDB(db)
	return p
}

type pinpointAppNameDo struct{ gen.DO }

type IPinpointAppNameDo interface {
	gen.SubQuery
	Debug() IPinpointAppNameDo
	WithContext(ctx context.Context) IPinpointAppNameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPinpointAppNameDo
	WriteDB() IPinpointAppNameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPinpointAppNameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPinpointAppNameDo
	Not(conds ...gen.Condition) IPinpointAppNameDo
	Or(conds ...gen.Condition) IPinpointAppNameDo
	Select(conds ...field.Expr) IPinpointAppNameDo
	Where(conds ...gen.Condition) IPinpointAppNameDo
	Order(conds ...field.Expr) IPinpointAppNameDo
	Distinct(cols ...field.Expr) IPinpointAppNameDo
	Omit(cols ...field.Expr) IPinpointAppNameDo
	Join(table schema.Tabler, on ...field.Expr) IPinpointAppNameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPinpointAppNameDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPinpointAppNameDo
	Group(cols ...field.Expr) IPinpointAppNameDo
	Having(conds ...gen.Condition) IPinpointAppNameDo
	Limit(limit int) IPinpointAppNameDo
	Offset(offset int) IPinpointAppNameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPinpointAppNameDo
	Unscoped() IPinpointAppNameDo
	Create(values ...*model.PinpointAppName) error
	CreateInBatches(values []*model.PinpointAppName, batchSize int) error
	Save(values ...*model.PinpointAppName) error
	First() (*model.PinpointAppName, error)
	Take() (*model.PinpointAppName, error)
	Last() (*model.PinpointAppName, error)
	Find() ([]*model.PinpointAppName, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PinpointAppName, err error)
	FindInBatches(result *[]*model.PinpointAppName, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PinpointAppName) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPinpointAppNameDo
	Assign(attrs ...field.AssignExpr) IPinpointAppNameDo
	Joins(fields ...field.RelationField) IPinpointAppNameDo
	Preload(fields ...field.RelationField) IPinpointAppNameDo
	FirstOrInit() (*model.PinpointAppName, error)
	FirstOrCreate() (*model.PinpointAppName, error)
	FindByPage(offset int, limit int) (result []*model.PinpointAppName, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPinpointAppNameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pinpointAppNameDo) Debug() IPinpointAppNameDo {
	return p.withDO(p.DO.Debug())
}

func (p pinpointAppNameDo) WithContext(ctx context.Context) IPinpointAppNameDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pinpointAppNameDo) ReadDB() IPinpointAppNameDo {
	return p.Clauses(dbresolver.Read)
}

func (p pinpointAppNameDo) WriteDB() IPinpointAppNameDo {
	return p.Clauses(dbresolver.Write)
}

func (p pinpointAppNameDo) Session(config *gorm.Session) IPinpointAppNameDo {
	return p.withDO(p.DO.Session(config))
}

func (p pinpointAppNameDo) Clauses(conds ...clause.Expression) IPinpointAppNameDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pinpointAppNameDo) Returning(value interface{}, columns ...string) IPinpointAppNameDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pinpointAppNameDo) Not(conds ...gen.Condition) IPinpointAppNameDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pinpointAppNameDo) Or(conds ...gen.Condition) IPinpointAppNameDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pinpointAppNameDo) Select(conds ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pinpointAppNameDo) Where(conds ...gen.Condition) IPinpointAppNameDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pinpointAppNameDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPinpointAppNameDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pinpointAppNameDo) Order(conds ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pinpointAppNameDo) Distinct(cols ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pinpointAppNameDo) Omit(cols ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pinpointAppNameDo) Join(table schema.Tabler, on ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pinpointAppNameDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pinpointAppNameDo) RightJoin(table schema.Tabler, on ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pinpointAppNameDo) Group(cols ...field.Expr) IPinpointAppNameDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pinpointAppNameDo) Having(conds ...gen.Condition) IPinpointAppNameDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pinpointAppNameDo) Limit(limit int) IPinpointAppNameDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pinpointAppNameDo) Offset(offset int) IPinpointAppNameDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pinpointAppNameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPinpointAppNameDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pinpointAppNameDo) Unscoped() IPinpointAppNameDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pinpointAppNameDo) Create(values ...*model.PinpointAppName) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pinpointAppNameDo) CreateInBatches(values []*model.PinpointAppName, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pinpointAppNameDo) Save(values ...*model.PinpointAppName) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pinpointAppNameDo) First() (*model.PinpointAppName, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PinpointAppName), nil
	}
}

func (p pinpointAppNameDo) Take() (*model.PinpointAppName, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PinpointAppName), nil
	}
}

func (p pinpointAppNameDo) Last() (*model.PinpointAppName, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PinpointAppName), nil
	}
}

func (p pinpointAppNameDo) Find() ([]*model.PinpointAppName, error) {
	result, err := p.DO.Find()
	return result.([]*model.PinpointAppName), err
}

func (p pinpointAppNameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PinpointAppName, err error) {
	buf := make([]*model.PinpointAppName, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pinpointAppNameDo) FindInBatches(result *[]*model.PinpointAppName, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pinpointAppNameDo) Attrs(attrs ...field.AssignExpr) IPinpointAppNameDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pinpointAppNameDo) Assign(attrs ...field.AssignExpr) IPinpointAppNameDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pinpointAppNameDo) Joins(fields ...field.RelationField) IPinpointAppNameDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pinpointAppNameDo) Preload(fields ...field.RelationField) IPinpointAppNameDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pinpointAppNameDo) FirstOrInit() (*model.PinpointAppName, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PinpointAppName), nil
	}
}

func (p pinpointAppNameDo) FirstOrCreate() (*model.PinpointAppName, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PinpointAppName), nil
	}
}

func (p pinpointAppNameDo) FindByPage(offset int, limit int) (result []*model.PinpointAppName, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pinpointAppNameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pinpointAppNameDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pinpointAppNameDo) Delete(models ...*model.PinpointAppName) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pinpointAppNameDo) withDO(do gen.Dao) *pinpointAppNameDo {
	p.DO = *do.(*gen.DO)
	return p
}
