// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPlanJiraProjects(db *gorm.DB, opts ...gen.DOOption) planJiraProjects {
	_planJiraProjects := planJiraProjects{}

	_planJiraProjects.planJiraProjectsDo.UseDB(db, opts...)
	_planJiraProjects.planJiraProjectsDo.UseModel(&model.PlanJiraProjects{})

	tableName := _planJiraProjects.planJiraProjectsDo.TableName()
	_planJiraProjects.ALL = field.NewAsterisk(tableName)
	_planJiraProjects.PlanJiraProjectID = field.NewString(tableName, "plan_jira_project_id")
	_planJiraProjects.PlanID = field.NewString(tableName, "plan_id")
	_planJiraProjects.Name = field.NewString(tableName, "name")
	_planJiraProjects.JiraProjectID = field.NewString(tableName, "jira_project_id")

	_planJiraProjects.fillFieldMap()

	return _planJiraProjects
}

type planJiraProjects struct {
	planJiraProjectsDo

	ALL               field.Asterisk
	PlanJiraProjectID field.String
	PlanID            field.String
	Name              field.String
	JiraProjectID     field.String // jira 项目ID

	fieldMap map[string]field.Expr
}

func (p planJiraProjects) Table(newTableName string) *planJiraProjects {
	p.planJiraProjectsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p planJiraProjects) As(alias string) *planJiraProjects {
	p.planJiraProjectsDo.DO = *(p.planJiraProjectsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *planJiraProjects) updateTableName(table string) *planJiraProjects {
	p.ALL = field.NewAsterisk(table)
	p.PlanJiraProjectID = field.NewString(table, "plan_jira_project_id")
	p.PlanID = field.NewString(table, "plan_id")
	p.Name = field.NewString(table, "name")
	p.JiraProjectID = field.NewString(table, "jira_project_id")

	p.fillFieldMap()

	return p
}

func (p *planJiraProjects) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *planJiraProjects) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["plan_jira_project_id"] = p.PlanJiraProjectID
	p.fieldMap["plan_id"] = p.PlanID
	p.fieldMap["name"] = p.Name
	p.fieldMap["jira_project_id"] = p.JiraProjectID
}

func (p planJiraProjects) clone(db *gorm.DB) planJiraProjects {
	p.planJiraProjectsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p planJiraProjects) replaceDB(db *gorm.DB) planJiraProjects {
	p.planJiraProjectsDo.ReplaceDB(db)
	return p
}

type planJiraProjectsDo struct{ gen.DO }

type IPlanJiraProjectsDo interface {
	gen.SubQuery
	Debug() IPlanJiraProjectsDo
	WithContext(ctx context.Context) IPlanJiraProjectsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlanJiraProjectsDo
	WriteDB() IPlanJiraProjectsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlanJiraProjectsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlanJiraProjectsDo
	Not(conds ...gen.Condition) IPlanJiraProjectsDo
	Or(conds ...gen.Condition) IPlanJiraProjectsDo
	Select(conds ...field.Expr) IPlanJiraProjectsDo
	Where(conds ...gen.Condition) IPlanJiraProjectsDo
	Order(conds ...field.Expr) IPlanJiraProjectsDo
	Distinct(cols ...field.Expr) IPlanJiraProjectsDo
	Omit(cols ...field.Expr) IPlanJiraProjectsDo
	Join(table schema.Tabler, on ...field.Expr) IPlanJiraProjectsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlanJiraProjectsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlanJiraProjectsDo
	Group(cols ...field.Expr) IPlanJiraProjectsDo
	Having(conds ...gen.Condition) IPlanJiraProjectsDo
	Limit(limit int) IPlanJiraProjectsDo
	Offset(offset int) IPlanJiraProjectsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanJiraProjectsDo
	Unscoped() IPlanJiraProjectsDo
	Create(values ...*model.PlanJiraProjects) error
	CreateInBatches(values []*model.PlanJiraProjects, batchSize int) error
	Save(values ...*model.PlanJiraProjects) error
	First() (*model.PlanJiraProjects, error)
	Take() (*model.PlanJiraProjects, error)
	Last() (*model.PlanJiraProjects, error)
	Find() ([]*model.PlanJiraProjects, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanJiraProjects, err error)
	FindInBatches(result *[]*model.PlanJiraProjects, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlanJiraProjects) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlanJiraProjectsDo
	Assign(attrs ...field.AssignExpr) IPlanJiraProjectsDo
	Joins(fields ...field.RelationField) IPlanJiraProjectsDo
	Preload(fields ...field.RelationField) IPlanJiraProjectsDo
	FirstOrInit() (*model.PlanJiraProjects, error)
	FirstOrCreate() (*model.PlanJiraProjects, error)
	FindByPage(offset int, limit int) (result []*model.PlanJiraProjects, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlanJiraProjectsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p planJiraProjectsDo) Debug() IPlanJiraProjectsDo {
	return p.withDO(p.DO.Debug())
}

func (p planJiraProjectsDo) WithContext(ctx context.Context) IPlanJiraProjectsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p planJiraProjectsDo) ReadDB() IPlanJiraProjectsDo {
	return p.Clauses(dbresolver.Read)
}

func (p planJiraProjectsDo) WriteDB() IPlanJiraProjectsDo {
	return p.Clauses(dbresolver.Write)
}

func (p planJiraProjectsDo) Session(config *gorm.Session) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Session(config))
}

func (p planJiraProjectsDo) Clauses(conds ...clause.Expression) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p planJiraProjectsDo) Returning(value interface{}, columns ...string) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p planJiraProjectsDo) Not(conds ...gen.Condition) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p planJiraProjectsDo) Or(conds ...gen.Condition) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p planJiraProjectsDo) Select(conds ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p planJiraProjectsDo) Where(conds ...gen.Condition) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p planJiraProjectsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPlanJiraProjectsDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p planJiraProjectsDo) Order(conds ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p planJiraProjectsDo) Distinct(cols ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p planJiraProjectsDo) Omit(cols ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p planJiraProjectsDo) Join(table schema.Tabler, on ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p planJiraProjectsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p planJiraProjectsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p planJiraProjectsDo) Group(cols ...field.Expr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p planJiraProjectsDo) Having(conds ...gen.Condition) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p planJiraProjectsDo) Limit(limit int) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p planJiraProjectsDo) Offset(offset int) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p planJiraProjectsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p planJiraProjectsDo) Unscoped() IPlanJiraProjectsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p planJiraProjectsDo) Create(values ...*model.PlanJiraProjects) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p planJiraProjectsDo) CreateInBatches(values []*model.PlanJiraProjects, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p planJiraProjectsDo) Save(values ...*model.PlanJiraProjects) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p planJiraProjectsDo) First() (*model.PlanJiraProjects, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanJiraProjects), nil
	}
}

func (p planJiraProjectsDo) Take() (*model.PlanJiraProjects, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanJiraProjects), nil
	}
}

func (p planJiraProjectsDo) Last() (*model.PlanJiraProjects, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanJiraProjects), nil
	}
}

func (p planJiraProjectsDo) Find() ([]*model.PlanJiraProjects, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlanJiraProjects), err
}

func (p planJiraProjectsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanJiraProjects, err error) {
	buf := make([]*model.PlanJiraProjects, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p planJiraProjectsDo) FindInBatches(result *[]*model.PlanJiraProjects, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p planJiraProjectsDo) Attrs(attrs ...field.AssignExpr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p planJiraProjectsDo) Assign(attrs ...field.AssignExpr) IPlanJiraProjectsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p planJiraProjectsDo) Joins(fields ...field.RelationField) IPlanJiraProjectsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p planJiraProjectsDo) Preload(fields ...field.RelationField) IPlanJiraProjectsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p planJiraProjectsDo) FirstOrInit() (*model.PlanJiraProjects, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanJiraProjects), nil
	}
}

func (p planJiraProjectsDo) FirstOrCreate() (*model.PlanJiraProjects, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanJiraProjects), nil
	}
}

func (p planJiraProjectsDo) FindByPage(offset int, limit int) (result []*model.PlanJiraProjects, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p planJiraProjectsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p planJiraProjectsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p planJiraProjectsDo) Delete(models ...*model.PlanJiraProjects) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *planJiraProjectsDo) withDO(do gen.Dao) *planJiraProjectsDo {
	p.DO = *do.(*gen.DO)
	return p
}
