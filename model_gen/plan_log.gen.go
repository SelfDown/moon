// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPlanLog(db *gorm.DB, opts ...gen.DOOption) planLog {
	_planLog := planLog{}

	_planLog.planLogDo.UseDB(db, opts...)
	_planLog.planLogDo.UseModel(&model.PlanLog{})

	tableName := _planLog.planLogDo.TableName()
	_planLog.ALL = field.NewAsterisk(tableName)
	_planLog.PlanLogID = field.NewString(tableName, "plan_log_id")
	_planLog.ReqID = field.NewString(tableName, "req_id")
	_planLog.UserID = field.NewString(tableName, "user_id")
	_planLog.CreateTime = field.NewString(tableName, "create_time")
	_planLog.Comment = field.NewString(tableName, "comment")

	_planLog.fillFieldMap()

	return _planLog
}

type planLog struct {
	planLogDo

	ALL        field.Asterisk
	PlanLogID  field.String
	ReqID      field.String
	UserID     field.String // 用户ID
	CreateTime field.String
	Comment    field.String

	fieldMap map[string]field.Expr
}

func (p planLog) Table(newTableName string) *planLog {
	p.planLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p planLog) As(alias string) *planLog {
	p.planLogDo.DO = *(p.planLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *planLog) updateTableName(table string) *planLog {
	p.ALL = field.NewAsterisk(table)
	p.PlanLogID = field.NewString(table, "plan_log_id")
	p.ReqID = field.NewString(table, "req_id")
	p.UserID = field.NewString(table, "user_id")
	p.CreateTime = field.NewString(table, "create_time")
	p.Comment = field.NewString(table, "comment")

	p.fillFieldMap()

	return p
}

func (p *planLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *planLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["plan_log_id"] = p.PlanLogID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["comment"] = p.Comment
}

func (p planLog) clone(db *gorm.DB) planLog {
	p.planLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p planLog) replaceDB(db *gorm.DB) planLog {
	p.planLogDo.ReplaceDB(db)
	return p
}

type planLogDo struct{ gen.DO }

type IPlanLogDo interface {
	gen.SubQuery
	Debug() IPlanLogDo
	WithContext(ctx context.Context) IPlanLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlanLogDo
	WriteDB() IPlanLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlanLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlanLogDo
	Not(conds ...gen.Condition) IPlanLogDo
	Or(conds ...gen.Condition) IPlanLogDo
	Select(conds ...field.Expr) IPlanLogDo
	Where(conds ...gen.Condition) IPlanLogDo
	Order(conds ...field.Expr) IPlanLogDo
	Distinct(cols ...field.Expr) IPlanLogDo
	Omit(cols ...field.Expr) IPlanLogDo
	Join(table schema.Tabler, on ...field.Expr) IPlanLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlanLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlanLogDo
	Group(cols ...field.Expr) IPlanLogDo
	Having(conds ...gen.Condition) IPlanLogDo
	Limit(limit int) IPlanLogDo
	Offset(offset int) IPlanLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanLogDo
	Unscoped() IPlanLogDo
	Create(values ...*model.PlanLog) error
	CreateInBatches(values []*model.PlanLog, batchSize int) error
	Save(values ...*model.PlanLog) error
	First() (*model.PlanLog, error)
	Take() (*model.PlanLog, error)
	Last() (*model.PlanLog, error)
	Find() ([]*model.PlanLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanLog, err error)
	FindInBatches(result *[]*model.PlanLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlanLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlanLogDo
	Assign(attrs ...field.AssignExpr) IPlanLogDo
	Joins(fields ...field.RelationField) IPlanLogDo
	Preload(fields ...field.RelationField) IPlanLogDo
	FirstOrInit() (*model.PlanLog, error)
	FirstOrCreate() (*model.PlanLog, error)
	FindByPage(offset int, limit int) (result []*model.PlanLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlanLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p planLogDo) Debug() IPlanLogDo {
	return p.withDO(p.DO.Debug())
}

func (p planLogDo) WithContext(ctx context.Context) IPlanLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p planLogDo) ReadDB() IPlanLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p planLogDo) WriteDB() IPlanLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p planLogDo) Session(config *gorm.Session) IPlanLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p planLogDo) Clauses(conds ...clause.Expression) IPlanLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p planLogDo) Returning(value interface{}, columns ...string) IPlanLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p planLogDo) Not(conds ...gen.Condition) IPlanLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p planLogDo) Or(conds ...gen.Condition) IPlanLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p planLogDo) Select(conds ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p planLogDo) Where(conds ...gen.Condition) IPlanLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p planLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPlanLogDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p planLogDo) Order(conds ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p planLogDo) Distinct(cols ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p planLogDo) Omit(cols ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p planLogDo) Join(table schema.Tabler, on ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p planLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p planLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p planLogDo) Group(cols ...field.Expr) IPlanLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p planLogDo) Having(conds ...gen.Condition) IPlanLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p planLogDo) Limit(limit int) IPlanLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p planLogDo) Offset(offset int) IPlanLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p planLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p planLogDo) Unscoped() IPlanLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p planLogDo) Create(values ...*model.PlanLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p planLogDo) CreateInBatches(values []*model.PlanLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p planLogDo) Save(values ...*model.PlanLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p planLogDo) First() (*model.PlanLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanLog), nil
	}
}

func (p planLogDo) Take() (*model.PlanLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanLog), nil
	}
}

func (p planLogDo) Last() (*model.PlanLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanLog), nil
	}
}

func (p planLogDo) Find() ([]*model.PlanLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlanLog), err
}

func (p planLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanLog, err error) {
	buf := make([]*model.PlanLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p planLogDo) FindInBatches(result *[]*model.PlanLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p planLogDo) Attrs(attrs ...field.AssignExpr) IPlanLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p planLogDo) Assign(attrs ...field.AssignExpr) IPlanLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p planLogDo) Joins(fields ...field.RelationField) IPlanLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p planLogDo) Preload(fields ...field.RelationField) IPlanLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p planLogDo) FirstOrInit() (*model.PlanLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanLog), nil
	}
}

func (p planLogDo) FirstOrCreate() (*model.PlanLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanLog), nil
	}
}

func (p planLogDo) FindByPage(offset int, limit int) (result []*model.PlanLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p planLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p planLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p planLogDo) Delete(models ...*model.PlanLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *planLogDo) withDO(do gen.Dao) *planLogDo {
	p.DO = *do.(*gen.DO)
	return p
}
