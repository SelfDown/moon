// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPlanNotice(db *gorm.DB, opts ...gen.DOOption) planNotice {
	_planNotice := planNotice{}

	_planNotice.planNoticeDo.UseDB(db, opts...)
	_planNotice.planNoticeDo.UseModel(&model.PlanNotice{})

	tableName := _planNotice.planNoticeDo.TableName()
	_planNotice.ALL = field.NewAsterisk(tableName)
	_planNotice.Title = field.NewString(tableName, "title")
	_planNotice.Content = field.NewString(tableName, "content")
	_planNotice.CreateTime = field.NewString(tableName, "create_time")
	_planNotice.NoticeTime = field.NewString(tableName, "notice_time")
	_planNotice.CreateUser = field.NewString(tableName, "create_user")
	_planNotice.NoticeID = field.NewString(tableName, "notice_id")
	_planNotice.NoticeUser = field.NewString(tableName, "notice_user")

	_planNotice.fillFieldMap()

	return _planNotice
}

type planNotice struct {
	planNoticeDo

	ALL        field.Asterisk
	Title      field.String
	Content    field.String
	CreateTime field.String
	NoticeTime field.String
	CreateUser field.String
	NoticeID   field.String
	NoticeUser field.String

	fieldMap map[string]field.Expr
}

func (p planNotice) Table(newTableName string) *planNotice {
	p.planNoticeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p planNotice) As(alias string) *planNotice {
	p.planNoticeDo.DO = *(p.planNoticeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *planNotice) updateTableName(table string) *planNotice {
	p.ALL = field.NewAsterisk(table)
	p.Title = field.NewString(table, "title")
	p.Content = field.NewString(table, "content")
	p.CreateTime = field.NewString(table, "create_time")
	p.NoticeTime = field.NewString(table, "notice_time")
	p.CreateUser = field.NewString(table, "create_user")
	p.NoticeID = field.NewString(table, "notice_id")
	p.NoticeUser = field.NewString(table, "notice_user")

	p.fillFieldMap()

	return p
}

func (p *planNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *planNotice) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["title"] = p.Title
	p.fieldMap["content"] = p.Content
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["notice_time"] = p.NoticeTime
	p.fieldMap["create_user"] = p.CreateUser
	p.fieldMap["notice_id"] = p.NoticeID
	p.fieldMap["notice_user"] = p.NoticeUser
}

func (p planNotice) clone(db *gorm.DB) planNotice {
	p.planNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p planNotice) replaceDB(db *gorm.DB) planNotice {
	p.planNoticeDo.ReplaceDB(db)
	return p
}

type planNoticeDo struct{ gen.DO }

type IPlanNoticeDo interface {
	gen.SubQuery
	Debug() IPlanNoticeDo
	WithContext(ctx context.Context) IPlanNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlanNoticeDo
	WriteDB() IPlanNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlanNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlanNoticeDo
	Not(conds ...gen.Condition) IPlanNoticeDo
	Or(conds ...gen.Condition) IPlanNoticeDo
	Select(conds ...field.Expr) IPlanNoticeDo
	Where(conds ...gen.Condition) IPlanNoticeDo
	Order(conds ...field.Expr) IPlanNoticeDo
	Distinct(cols ...field.Expr) IPlanNoticeDo
	Omit(cols ...field.Expr) IPlanNoticeDo
	Join(table schema.Tabler, on ...field.Expr) IPlanNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlanNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlanNoticeDo
	Group(cols ...field.Expr) IPlanNoticeDo
	Having(conds ...gen.Condition) IPlanNoticeDo
	Limit(limit int) IPlanNoticeDo
	Offset(offset int) IPlanNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanNoticeDo
	Unscoped() IPlanNoticeDo
	Create(values ...*model.PlanNotice) error
	CreateInBatches(values []*model.PlanNotice, batchSize int) error
	Save(values ...*model.PlanNotice) error
	First() (*model.PlanNotice, error)
	Take() (*model.PlanNotice, error)
	Last() (*model.PlanNotice, error)
	Find() ([]*model.PlanNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanNotice, err error)
	FindInBatches(result *[]*model.PlanNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlanNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlanNoticeDo
	Assign(attrs ...field.AssignExpr) IPlanNoticeDo
	Joins(fields ...field.RelationField) IPlanNoticeDo
	Preload(fields ...field.RelationField) IPlanNoticeDo
	FirstOrInit() (*model.PlanNotice, error)
	FirstOrCreate() (*model.PlanNotice, error)
	FindByPage(offset int, limit int) (result []*model.PlanNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlanNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p planNoticeDo) Debug() IPlanNoticeDo {
	return p.withDO(p.DO.Debug())
}

func (p planNoticeDo) WithContext(ctx context.Context) IPlanNoticeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p planNoticeDo) ReadDB() IPlanNoticeDo {
	return p.Clauses(dbresolver.Read)
}

func (p planNoticeDo) WriteDB() IPlanNoticeDo {
	return p.Clauses(dbresolver.Write)
}

func (p planNoticeDo) Session(config *gorm.Session) IPlanNoticeDo {
	return p.withDO(p.DO.Session(config))
}

func (p planNoticeDo) Clauses(conds ...clause.Expression) IPlanNoticeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p planNoticeDo) Returning(value interface{}, columns ...string) IPlanNoticeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p planNoticeDo) Not(conds ...gen.Condition) IPlanNoticeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p planNoticeDo) Or(conds ...gen.Condition) IPlanNoticeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p planNoticeDo) Select(conds ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p planNoticeDo) Where(conds ...gen.Condition) IPlanNoticeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p planNoticeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPlanNoticeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p planNoticeDo) Order(conds ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p planNoticeDo) Distinct(cols ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p planNoticeDo) Omit(cols ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p planNoticeDo) Join(table schema.Tabler, on ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p planNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p planNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p planNoticeDo) Group(cols ...field.Expr) IPlanNoticeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p planNoticeDo) Having(conds ...gen.Condition) IPlanNoticeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p planNoticeDo) Limit(limit int) IPlanNoticeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p planNoticeDo) Offset(offset int) IPlanNoticeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p planNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanNoticeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p planNoticeDo) Unscoped() IPlanNoticeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p planNoticeDo) Create(values ...*model.PlanNotice) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p planNoticeDo) CreateInBatches(values []*model.PlanNotice, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p planNoticeDo) Save(values ...*model.PlanNotice) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p planNoticeDo) First() (*model.PlanNotice, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanNotice), nil
	}
}

func (p planNoticeDo) Take() (*model.PlanNotice, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanNotice), nil
	}
}

func (p planNoticeDo) Last() (*model.PlanNotice, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanNotice), nil
	}
}

func (p planNoticeDo) Find() ([]*model.PlanNotice, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlanNotice), err
}

func (p planNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanNotice, err error) {
	buf := make([]*model.PlanNotice, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p planNoticeDo) FindInBatches(result *[]*model.PlanNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p planNoticeDo) Attrs(attrs ...field.AssignExpr) IPlanNoticeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p planNoticeDo) Assign(attrs ...field.AssignExpr) IPlanNoticeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p planNoticeDo) Joins(fields ...field.RelationField) IPlanNoticeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p planNoticeDo) Preload(fields ...field.RelationField) IPlanNoticeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p planNoticeDo) FirstOrInit() (*model.PlanNotice, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanNotice), nil
	}
}

func (p planNoticeDo) FirstOrCreate() (*model.PlanNotice, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanNotice), nil
	}
}

func (p planNoticeDo) FindByPage(offset int, limit int) (result []*model.PlanNotice, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p planNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p planNoticeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p planNoticeDo) Delete(models ...*model.PlanNotice) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *planNoticeDo) withDO(do gen.Dao) *planNoticeDo {
	p.DO = *do.(*gen.DO)
	return p
}
