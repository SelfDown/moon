// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPlanRoleUsers(db *gorm.DB, opts ...gen.DOOption) planRoleUsers {
	_planRoleUsers := planRoleUsers{}

	_planRoleUsers.planRoleUsersDo.UseDB(db, opts...)
	_planRoleUsers.planRoleUsersDo.UseModel(&model.PlanRoleUsers{})

	tableName := _planRoleUsers.planRoleUsersDo.TableName()
	_planRoleUsers.ALL = field.NewAsterisk(tableName)
	_planRoleUsers.PlanRoleUsersID = field.NewString(tableName, "plan_role_users_id")
	_planRoleUsers.PlanID = field.NewString(tableName, "plan_id")
	_planRoleUsers.UserID = field.NewString(tableName, "user_id")
	_planRoleUsers.Type = field.NewString(tableName, "type")

	_planRoleUsers.fillFieldMap()

	return _planRoleUsers
}

type planRoleUsers struct {
	planRoleUsersDo

	ALL             field.Asterisk
	PlanRoleUsersID field.String
	PlanID          field.String
	UserID          field.String // 用户ID
	Type            field.String

	fieldMap map[string]field.Expr
}

func (p planRoleUsers) Table(newTableName string) *planRoleUsers {
	p.planRoleUsersDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p planRoleUsers) As(alias string) *planRoleUsers {
	p.planRoleUsersDo.DO = *(p.planRoleUsersDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *planRoleUsers) updateTableName(table string) *planRoleUsers {
	p.ALL = field.NewAsterisk(table)
	p.PlanRoleUsersID = field.NewString(table, "plan_role_users_id")
	p.PlanID = field.NewString(table, "plan_id")
	p.UserID = field.NewString(table, "user_id")
	p.Type = field.NewString(table, "type")

	p.fillFieldMap()

	return p
}

func (p *planRoleUsers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *planRoleUsers) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["plan_role_users_id"] = p.PlanRoleUsersID
	p.fieldMap["plan_id"] = p.PlanID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["type"] = p.Type
}

func (p planRoleUsers) clone(db *gorm.DB) planRoleUsers {
	p.planRoleUsersDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p planRoleUsers) replaceDB(db *gorm.DB) planRoleUsers {
	p.planRoleUsersDo.ReplaceDB(db)
	return p
}

type planRoleUsersDo struct{ gen.DO }

type IPlanRoleUsersDo interface {
	gen.SubQuery
	Debug() IPlanRoleUsersDo
	WithContext(ctx context.Context) IPlanRoleUsersDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlanRoleUsersDo
	WriteDB() IPlanRoleUsersDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlanRoleUsersDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlanRoleUsersDo
	Not(conds ...gen.Condition) IPlanRoleUsersDo
	Or(conds ...gen.Condition) IPlanRoleUsersDo
	Select(conds ...field.Expr) IPlanRoleUsersDo
	Where(conds ...gen.Condition) IPlanRoleUsersDo
	Order(conds ...field.Expr) IPlanRoleUsersDo
	Distinct(cols ...field.Expr) IPlanRoleUsersDo
	Omit(cols ...field.Expr) IPlanRoleUsersDo
	Join(table schema.Tabler, on ...field.Expr) IPlanRoleUsersDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlanRoleUsersDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlanRoleUsersDo
	Group(cols ...field.Expr) IPlanRoleUsersDo
	Having(conds ...gen.Condition) IPlanRoleUsersDo
	Limit(limit int) IPlanRoleUsersDo
	Offset(offset int) IPlanRoleUsersDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanRoleUsersDo
	Unscoped() IPlanRoleUsersDo
	Create(values ...*model.PlanRoleUsers) error
	CreateInBatches(values []*model.PlanRoleUsers, batchSize int) error
	Save(values ...*model.PlanRoleUsers) error
	First() (*model.PlanRoleUsers, error)
	Take() (*model.PlanRoleUsers, error)
	Last() (*model.PlanRoleUsers, error)
	Find() ([]*model.PlanRoleUsers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanRoleUsers, err error)
	FindInBatches(result *[]*model.PlanRoleUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlanRoleUsers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlanRoleUsersDo
	Assign(attrs ...field.AssignExpr) IPlanRoleUsersDo
	Joins(fields ...field.RelationField) IPlanRoleUsersDo
	Preload(fields ...field.RelationField) IPlanRoleUsersDo
	FirstOrInit() (*model.PlanRoleUsers, error)
	FirstOrCreate() (*model.PlanRoleUsers, error)
	FindByPage(offset int, limit int) (result []*model.PlanRoleUsers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlanRoleUsersDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p planRoleUsersDo) Debug() IPlanRoleUsersDo {
	return p.withDO(p.DO.Debug())
}

func (p planRoleUsersDo) WithContext(ctx context.Context) IPlanRoleUsersDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p planRoleUsersDo) ReadDB() IPlanRoleUsersDo {
	return p.Clauses(dbresolver.Read)
}

func (p planRoleUsersDo) WriteDB() IPlanRoleUsersDo {
	return p.Clauses(dbresolver.Write)
}

func (p planRoleUsersDo) Session(config *gorm.Session) IPlanRoleUsersDo {
	return p.withDO(p.DO.Session(config))
}

func (p planRoleUsersDo) Clauses(conds ...clause.Expression) IPlanRoleUsersDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p planRoleUsersDo) Returning(value interface{}, columns ...string) IPlanRoleUsersDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p planRoleUsersDo) Not(conds ...gen.Condition) IPlanRoleUsersDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p planRoleUsersDo) Or(conds ...gen.Condition) IPlanRoleUsersDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p planRoleUsersDo) Select(conds ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p planRoleUsersDo) Where(conds ...gen.Condition) IPlanRoleUsersDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p planRoleUsersDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPlanRoleUsersDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p planRoleUsersDo) Order(conds ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p planRoleUsersDo) Distinct(cols ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p planRoleUsersDo) Omit(cols ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p planRoleUsersDo) Join(table schema.Tabler, on ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p planRoleUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p planRoleUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p planRoleUsersDo) Group(cols ...field.Expr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p planRoleUsersDo) Having(conds ...gen.Condition) IPlanRoleUsersDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p planRoleUsersDo) Limit(limit int) IPlanRoleUsersDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p planRoleUsersDo) Offset(offset int) IPlanRoleUsersDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p planRoleUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlanRoleUsersDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p planRoleUsersDo) Unscoped() IPlanRoleUsersDo {
	return p.withDO(p.DO.Unscoped())
}

func (p planRoleUsersDo) Create(values ...*model.PlanRoleUsers) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p planRoleUsersDo) CreateInBatches(values []*model.PlanRoleUsers, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p planRoleUsersDo) Save(values ...*model.PlanRoleUsers) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p planRoleUsersDo) First() (*model.PlanRoleUsers, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanRoleUsers), nil
	}
}

func (p planRoleUsersDo) Take() (*model.PlanRoleUsers, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanRoleUsers), nil
	}
}

func (p planRoleUsersDo) Last() (*model.PlanRoleUsers, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanRoleUsers), nil
	}
}

func (p planRoleUsersDo) Find() ([]*model.PlanRoleUsers, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlanRoleUsers), err
}

func (p planRoleUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlanRoleUsers, err error) {
	buf := make([]*model.PlanRoleUsers, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p planRoleUsersDo) FindInBatches(result *[]*model.PlanRoleUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p planRoleUsersDo) Attrs(attrs ...field.AssignExpr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p planRoleUsersDo) Assign(attrs ...field.AssignExpr) IPlanRoleUsersDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p planRoleUsersDo) Joins(fields ...field.RelationField) IPlanRoleUsersDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p planRoleUsersDo) Preload(fields ...field.RelationField) IPlanRoleUsersDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p planRoleUsersDo) FirstOrInit() (*model.PlanRoleUsers, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanRoleUsers), nil
	}
}

func (p planRoleUsersDo) FirstOrCreate() (*model.PlanRoleUsers, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlanRoleUsers), nil
	}
}

func (p planRoleUsersDo) FindByPage(offset int, limit int) (result []*model.PlanRoleUsers, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p planRoleUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p planRoleUsersDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p planRoleUsersDo) Delete(models ...*model.PlanRoleUsers) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *planRoleUsersDo) withDO(do gen.Dao) *planRoleUsersDo {
	p.DO = *do.(*gen.DO)
	return p
}
