// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newProductLine(db *gorm.DB, opts ...gen.DOOption) productLine {
	_productLine := productLine{}

	_productLine.productLineDo.UseDB(db, opts...)
	_productLine.productLineDo.UseModel(&model.ProductLine{})

	tableName := _productLine.productLineDo.TableName()
	_productLine.ALL = field.NewAsterisk(tableName)
	_productLine.ProductLine = field.NewString(tableName, "product_line")
	_productLine.ProductDomain = field.NewString(tableName, "product_domain")
	_productLine.ProductDomainID = field.NewString(tableName, "product_domain_id")
	_productLine.ProductLineName = field.NewString(tableName, "product_line_name")
	_productLine.ProductDomainName = field.NewString(tableName, "product_domain_name")

	_productLine.fillFieldMap()

	return _productLine
}

type productLine struct {
	productLineDo

	ALL               field.Asterisk
	ProductLine       field.String // 产品线
	ProductDomain     field.String // 产品域
	ProductDomainID   field.String
	ProductLineName   field.String // 产品线名
	ProductDomainName field.String // 产品域名

	fieldMap map[string]field.Expr
}

func (p productLine) Table(newTableName string) *productLine {
	p.productLineDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productLine) As(alias string) *productLine {
	p.productLineDo.DO = *(p.productLineDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productLine) updateTableName(table string) *productLine {
	p.ALL = field.NewAsterisk(table)
	p.ProductLine = field.NewString(table, "product_line")
	p.ProductDomain = field.NewString(table, "product_domain")
	p.ProductDomainID = field.NewString(table, "product_domain_id")
	p.ProductLineName = field.NewString(table, "product_line_name")
	p.ProductDomainName = field.NewString(table, "product_domain_name")

	p.fillFieldMap()

	return p
}

func (p *productLine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productLine) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["product_line"] = p.ProductLine
	p.fieldMap["product_domain"] = p.ProductDomain
	p.fieldMap["product_domain_id"] = p.ProductDomainID
	p.fieldMap["product_line_name"] = p.ProductLineName
	p.fieldMap["product_domain_name"] = p.ProductDomainName
}

func (p productLine) clone(db *gorm.DB) productLine {
	p.productLineDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productLine) replaceDB(db *gorm.DB) productLine {
	p.productLineDo.ReplaceDB(db)
	return p
}

type productLineDo struct{ gen.DO }

type IProductLineDo interface {
	gen.SubQuery
	Debug() IProductLineDo
	WithContext(ctx context.Context) IProductLineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductLineDo
	WriteDB() IProductLineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductLineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductLineDo
	Not(conds ...gen.Condition) IProductLineDo
	Or(conds ...gen.Condition) IProductLineDo
	Select(conds ...field.Expr) IProductLineDo
	Where(conds ...gen.Condition) IProductLineDo
	Order(conds ...field.Expr) IProductLineDo
	Distinct(cols ...field.Expr) IProductLineDo
	Omit(cols ...field.Expr) IProductLineDo
	Join(table schema.Tabler, on ...field.Expr) IProductLineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductLineDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductLineDo
	Group(cols ...field.Expr) IProductLineDo
	Having(conds ...gen.Condition) IProductLineDo
	Limit(limit int) IProductLineDo
	Offset(offset int) IProductLineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductLineDo
	Unscoped() IProductLineDo
	Create(values ...*model.ProductLine) error
	CreateInBatches(values []*model.ProductLine, batchSize int) error
	Save(values ...*model.ProductLine) error
	First() (*model.ProductLine, error)
	Take() (*model.ProductLine, error)
	Last() (*model.ProductLine, error)
	Find() ([]*model.ProductLine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductLine, err error)
	FindInBatches(result *[]*model.ProductLine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductLine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductLineDo
	Assign(attrs ...field.AssignExpr) IProductLineDo
	Joins(fields ...field.RelationField) IProductLineDo
	Preload(fields ...field.RelationField) IProductLineDo
	FirstOrInit() (*model.ProductLine, error)
	FirstOrCreate() (*model.ProductLine, error)
	FindByPage(offset int, limit int) (result []*model.ProductLine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductLineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productLineDo) Debug() IProductLineDo {
	return p.withDO(p.DO.Debug())
}

func (p productLineDo) WithContext(ctx context.Context) IProductLineDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productLineDo) ReadDB() IProductLineDo {
	return p.Clauses(dbresolver.Read)
}

func (p productLineDo) WriteDB() IProductLineDo {
	return p.Clauses(dbresolver.Write)
}

func (p productLineDo) Session(config *gorm.Session) IProductLineDo {
	return p.withDO(p.DO.Session(config))
}

func (p productLineDo) Clauses(conds ...clause.Expression) IProductLineDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productLineDo) Returning(value interface{}, columns ...string) IProductLineDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productLineDo) Not(conds ...gen.Condition) IProductLineDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productLineDo) Or(conds ...gen.Condition) IProductLineDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productLineDo) Select(conds ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productLineDo) Where(conds ...gen.Condition) IProductLineDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productLineDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProductLineDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p productLineDo) Order(conds ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productLineDo) Distinct(cols ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productLineDo) Omit(cols ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productLineDo) Join(table schema.Tabler, on ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productLineDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productLineDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productLineDo) Group(cols ...field.Expr) IProductLineDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productLineDo) Having(conds ...gen.Condition) IProductLineDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productLineDo) Limit(limit int) IProductLineDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productLineDo) Offset(offset int) IProductLineDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productLineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductLineDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productLineDo) Unscoped() IProductLineDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productLineDo) Create(values ...*model.ProductLine) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productLineDo) CreateInBatches(values []*model.ProductLine, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productLineDo) Save(values ...*model.ProductLine) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productLineDo) First() (*model.ProductLine, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductLine), nil
	}
}

func (p productLineDo) Take() (*model.ProductLine, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductLine), nil
	}
}

func (p productLineDo) Last() (*model.ProductLine, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductLine), nil
	}
}

func (p productLineDo) Find() ([]*model.ProductLine, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductLine), err
}

func (p productLineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductLine, err error) {
	buf := make([]*model.ProductLine, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productLineDo) FindInBatches(result *[]*model.ProductLine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productLineDo) Attrs(attrs ...field.AssignExpr) IProductLineDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productLineDo) Assign(attrs ...field.AssignExpr) IProductLineDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productLineDo) Joins(fields ...field.RelationField) IProductLineDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productLineDo) Preload(fields ...field.RelationField) IProductLineDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productLineDo) FirstOrInit() (*model.ProductLine, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductLine), nil
	}
}

func (p productLineDo) FirstOrCreate() (*model.ProductLine, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductLine), nil
	}
}

func (p productLineDo) FindByPage(offset int, limit int) (result []*model.ProductLine, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productLineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productLineDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productLineDo) Delete(models ...*model.ProductLine) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productLineDo) withDO(do gen.Dao) *productLineDo {
	p.DO = *do.(*gen.DO)
	return p
}
