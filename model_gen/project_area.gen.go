// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newProjectArea(db *gorm.DB, opts ...gen.DOOption) projectArea {
	_projectArea := projectArea{}

	_projectArea.projectAreaDo.UseDB(db, opts...)
	_projectArea.projectAreaDo.UseModel(&model.ProjectArea{})

	tableName := _projectArea.projectAreaDo.TableName()
	_projectArea.ALL = field.NewAsterisk(tableName)
	_projectArea.ProjectAreaID = field.NewString(tableName, "project_area_id")
	_projectArea.Name = field.NewString(tableName, "name")
	_projectArea.ProjectCodeList = field.NewString(tableName, "project_code_list")
	_projectArea.CreateUser = field.NewString(tableName, "create_user")
	_projectArea.CreateTime = field.NewString(tableName, "create_time")

	_projectArea.fillFieldMap()

	return _projectArea
}

type projectArea struct {
	projectAreaDo

	ALL             field.Asterisk
	ProjectAreaID   field.String
	Name            field.String
	ProjectCodeList field.String
	CreateUser      field.String
	CreateTime      field.String

	fieldMap map[string]field.Expr
}

func (p projectArea) Table(newTableName string) *projectArea {
	p.projectAreaDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectArea) As(alias string) *projectArea {
	p.projectAreaDo.DO = *(p.projectAreaDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectArea) updateTableName(table string) *projectArea {
	p.ALL = field.NewAsterisk(table)
	p.ProjectAreaID = field.NewString(table, "project_area_id")
	p.Name = field.NewString(table, "name")
	p.ProjectCodeList = field.NewString(table, "project_code_list")
	p.CreateUser = field.NewString(table, "create_user")
	p.CreateTime = field.NewString(table, "create_time")

	p.fillFieldMap()

	return p
}

func (p *projectArea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectArea) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["project_area_id"] = p.ProjectAreaID
	p.fieldMap["name"] = p.Name
	p.fieldMap["project_code_list"] = p.ProjectCodeList
	p.fieldMap["create_user"] = p.CreateUser
	p.fieldMap["create_time"] = p.CreateTime
}

func (p projectArea) clone(db *gorm.DB) projectArea {
	p.projectAreaDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectArea) replaceDB(db *gorm.DB) projectArea {
	p.projectAreaDo.ReplaceDB(db)
	return p
}

type projectAreaDo struct{ gen.DO }

type IProjectAreaDo interface {
	gen.SubQuery
	Debug() IProjectAreaDo
	WithContext(ctx context.Context) IProjectAreaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectAreaDo
	WriteDB() IProjectAreaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectAreaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectAreaDo
	Not(conds ...gen.Condition) IProjectAreaDo
	Or(conds ...gen.Condition) IProjectAreaDo
	Select(conds ...field.Expr) IProjectAreaDo
	Where(conds ...gen.Condition) IProjectAreaDo
	Order(conds ...field.Expr) IProjectAreaDo
	Distinct(cols ...field.Expr) IProjectAreaDo
	Omit(cols ...field.Expr) IProjectAreaDo
	Join(table schema.Tabler, on ...field.Expr) IProjectAreaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectAreaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectAreaDo
	Group(cols ...field.Expr) IProjectAreaDo
	Having(conds ...gen.Condition) IProjectAreaDo
	Limit(limit int) IProjectAreaDo
	Offset(offset int) IProjectAreaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectAreaDo
	Unscoped() IProjectAreaDo
	Create(values ...*model.ProjectArea) error
	CreateInBatches(values []*model.ProjectArea, batchSize int) error
	Save(values ...*model.ProjectArea) error
	First() (*model.ProjectArea, error)
	Take() (*model.ProjectArea, error)
	Last() (*model.ProjectArea, error)
	Find() ([]*model.ProjectArea, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectArea, err error)
	FindInBatches(result *[]*model.ProjectArea, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectArea) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectAreaDo
	Assign(attrs ...field.AssignExpr) IProjectAreaDo
	Joins(fields ...field.RelationField) IProjectAreaDo
	Preload(fields ...field.RelationField) IProjectAreaDo
	FirstOrInit() (*model.ProjectArea, error)
	FirstOrCreate() (*model.ProjectArea, error)
	FindByPage(offset int, limit int) (result []*model.ProjectArea, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectAreaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectAreaDo) Debug() IProjectAreaDo {
	return p.withDO(p.DO.Debug())
}

func (p projectAreaDo) WithContext(ctx context.Context) IProjectAreaDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectAreaDo) ReadDB() IProjectAreaDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectAreaDo) WriteDB() IProjectAreaDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectAreaDo) Session(config *gorm.Session) IProjectAreaDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectAreaDo) Clauses(conds ...clause.Expression) IProjectAreaDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectAreaDo) Returning(value interface{}, columns ...string) IProjectAreaDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectAreaDo) Not(conds ...gen.Condition) IProjectAreaDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectAreaDo) Or(conds ...gen.Condition) IProjectAreaDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectAreaDo) Select(conds ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectAreaDo) Where(conds ...gen.Condition) IProjectAreaDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectAreaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProjectAreaDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectAreaDo) Order(conds ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectAreaDo) Distinct(cols ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectAreaDo) Omit(cols ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectAreaDo) Join(table schema.Tabler, on ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectAreaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectAreaDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectAreaDo) Group(cols ...field.Expr) IProjectAreaDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectAreaDo) Having(conds ...gen.Condition) IProjectAreaDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectAreaDo) Limit(limit int) IProjectAreaDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectAreaDo) Offset(offset int) IProjectAreaDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectAreaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectAreaDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectAreaDo) Unscoped() IProjectAreaDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectAreaDo) Create(values ...*model.ProjectArea) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectAreaDo) CreateInBatches(values []*model.ProjectArea, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectAreaDo) Save(values ...*model.ProjectArea) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectAreaDo) First() (*model.ProjectArea, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectArea), nil
	}
}

func (p projectAreaDo) Take() (*model.ProjectArea, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectArea), nil
	}
}

func (p projectAreaDo) Last() (*model.ProjectArea, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectArea), nil
	}
}

func (p projectAreaDo) Find() ([]*model.ProjectArea, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectArea), err
}

func (p projectAreaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectArea, err error) {
	buf := make([]*model.ProjectArea, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectAreaDo) FindInBatches(result *[]*model.ProjectArea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectAreaDo) Attrs(attrs ...field.AssignExpr) IProjectAreaDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectAreaDo) Assign(attrs ...field.AssignExpr) IProjectAreaDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectAreaDo) Joins(fields ...field.RelationField) IProjectAreaDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectAreaDo) Preload(fields ...field.RelationField) IProjectAreaDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectAreaDo) FirstOrInit() (*model.ProjectArea, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectArea), nil
	}
}

func (p projectAreaDo) FirstOrCreate() (*model.ProjectArea, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectArea), nil
	}
}

func (p projectAreaDo) FindByPage(offset int, limit int) (result []*model.ProjectArea, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectAreaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectAreaDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectAreaDo) Delete(models ...*model.ProjectArea) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectAreaDo) withDO(do gen.Dao) *projectAreaDo {
	p.DO = *do.(*gen.DO)
	return p
}
