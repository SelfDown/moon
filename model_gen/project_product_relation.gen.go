// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newProjectProductRelation(db *gorm.DB, opts ...gen.DOOption) projectProductRelation {
	_projectProductRelation := projectProductRelation{}

	_projectProductRelation.projectProductRelationDo.UseDB(db, opts...)
	_projectProductRelation.projectProductRelationDo.UseModel(&model.ProjectProductRelation{})

	tableName := _projectProductRelation.projectProductRelationDo.TableName()
	_projectProductRelation.ALL = field.NewAsterisk(tableName)
	_projectProductRelation.ProductDomainID = field.NewString(tableName, "product_domain_id")
	_projectProductRelation.SysProjectID = field.NewString(tableName, "sys_project_id")
	_projectProductRelation.ProductProjectID = field.NewString(tableName, "product_project_id")

	_projectProductRelation.fillFieldMap()

	return _projectProductRelation
}

type projectProductRelation struct {
	projectProductRelationDo

	ALL              field.Asterisk
	ProductDomainID  field.String // 产品域id
	SysProjectID     field.String // 项目id
	ProductProjectID field.String // id

	fieldMap map[string]field.Expr
}

func (p projectProductRelation) Table(newTableName string) *projectProductRelation {
	p.projectProductRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectProductRelation) As(alias string) *projectProductRelation {
	p.projectProductRelationDo.DO = *(p.projectProductRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectProductRelation) updateTableName(table string) *projectProductRelation {
	p.ALL = field.NewAsterisk(table)
	p.ProductDomainID = field.NewString(table, "product_domain_id")
	p.SysProjectID = field.NewString(table, "sys_project_id")
	p.ProductProjectID = field.NewString(table, "product_project_id")

	p.fillFieldMap()

	return p
}

func (p *projectProductRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectProductRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["product_domain_id"] = p.ProductDomainID
	p.fieldMap["sys_project_id"] = p.SysProjectID
	p.fieldMap["product_project_id"] = p.ProductProjectID
}

func (p projectProductRelation) clone(db *gorm.DB) projectProductRelation {
	p.projectProductRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectProductRelation) replaceDB(db *gorm.DB) projectProductRelation {
	p.projectProductRelationDo.ReplaceDB(db)
	return p
}

type projectProductRelationDo struct{ gen.DO }

type IProjectProductRelationDo interface {
	gen.SubQuery
	Debug() IProjectProductRelationDo
	WithContext(ctx context.Context) IProjectProductRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectProductRelationDo
	WriteDB() IProjectProductRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectProductRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectProductRelationDo
	Not(conds ...gen.Condition) IProjectProductRelationDo
	Or(conds ...gen.Condition) IProjectProductRelationDo
	Select(conds ...field.Expr) IProjectProductRelationDo
	Where(conds ...gen.Condition) IProjectProductRelationDo
	Order(conds ...field.Expr) IProjectProductRelationDo
	Distinct(cols ...field.Expr) IProjectProductRelationDo
	Omit(cols ...field.Expr) IProjectProductRelationDo
	Join(table schema.Tabler, on ...field.Expr) IProjectProductRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectProductRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectProductRelationDo
	Group(cols ...field.Expr) IProjectProductRelationDo
	Having(conds ...gen.Condition) IProjectProductRelationDo
	Limit(limit int) IProjectProductRelationDo
	Offset(offset int) IProjectProductRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectProductRelationDo
	Unscoped() IProjectProductRelationDo
	Create(values ...*model.ProjectProductRelation) error
	CreateInBatches(values []*model.ProjectProductRelation, batchSize int) error
	Save(values ...*model.ProjectProductRelation) error
	First() (*model.ProjectProductRelation, error)
	Take() (*model.ProjectProductRelation, error)
	Last() (*model.ProjectProductRelation, error)
	Find() ([]*model.ProjectProductRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectProductRelation, err error)
	FindInBatches(result *[]*model.ProjectProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectProductRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectProductRelationDo
	Assign(attrs ...field.AssignExpr) IProjectProductRelationDo
	Joins(fields ...field.RelationField) IProjectProductRelationDo
	Preload(fields ...field.RelationField) IProjectProductRelationDo
	FirstOrInit() (*model.ProjectProductRelation, error)
	FirstOrCreate() (*model.ProjectProductRelation, error)
	FindByPage(offset int, limit int) (result []*model.ProjectProductRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectProductRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectProductRelationDo) Debug() IProjectProductRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p projectProductRelationDo) WithContext(ctx context.Context) IProjectProductRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectProductRelationDo) ReadDB() IProjectProductRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectProductRelationDo) WriteDB() IProjectProductRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectProductRelationDo) Session(config *gorm.Session) IProjectProductRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectProductRelationDo) Clauses(conds ...clause.Expression) IProjectProductRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectProductRelationDo) Returning(value interface{}, columns ...string) IProjectProductRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectProductRelationDo) Not(conds ...gen.Condition) IProjectProductRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectProductRelationDo) Or(conds ...gen.Condition) IProjectProductRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectProductRelationDo) Select(conds ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectProductRelationDo) Where(conds ...gen.Condition) IProjectProductRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectProductRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProjectProductRelationDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectProductRelationDo) Order(conds ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectProductRelationDo) Distinct(cols ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectProductRelationDo) Omit(cols ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectProductRelationDo) Join(table schema.Tabler, on ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectProductRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectProductRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectProductRelationDo) Group(cols ...field.Expr) IProjectProductRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectProductRelationDo) Having(conds ...gen.Condition) IProjectProductRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectProductRelationDo) Limit(limit int) IProjectProductRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectProductRelationDo) Offset(offset int) IProjectProductRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectProductRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectProductRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectProductRelationDo) Unscoped() IProjectProductRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectProductRelationDo) Create(values ...*model.ProjectProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectProductRelationDo) CreateInBatches(values []*model.ProjectProductRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectProductRelationDo) Save(values ...*model.ProjectProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectProductRelationDo) First() (*model.ProjectProductRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectProductRelation), nil
	}
}

func (p projectProductRelationDo) Take() (*model.ProjectProductRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectProductRelation), nil
	}
}

func (p projectProductRelationDo) Last() (*model.ProjectProductRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectProductRelation), nil
	}
}

func (p projectProductRelationDo) Find() ([]*model.ProjectProductRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectProductRelation), err
}

func (p projectProductRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectProductRelation, err error) {
	buf := make([]*model.ProjectProductRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectProductRelationDo) FindInBatches(result *[]*model.ProjectProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectProductRelationDo) Attrs(attrs ...field.AssignExpr) IProjectProductRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectProductRelationDo) Assign(attrs ...field.AssignExpr) IProjectProductRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectProductRelationDo) Joins(fields ...field.RelationField) IProjectProductRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectProductRelationDo) Preload(fields ...field.RelationField) IProjectProductRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectProductRelationDo) FirstOrInit() (*model.ProjectProductRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectProductRelation), nil
	}
}

func (p projectProductRelationDo) FirstOrCreate() (*model.ProjectProductRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectProductRelation), nil
	}
}

func (p projectProductRelationDo) FindByPage(offset int, limit int) (result []*model.ProjectProductRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectProductRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectProductRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectProductRelationDo) Delete(models ...*model.ProjectProductRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectProductRelationDo) withDO(do gen.Dao) *projectProductRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
