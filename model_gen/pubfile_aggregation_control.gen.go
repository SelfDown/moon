// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPubfileAggregationControl(db *gorm.DB, opts ...gen.DOOption) pubfileAggregationControl {
	_pubfileAggregationControl := pubfileAggregationControl{}

	_pubfileAggregationControl.pubfileAggregationControlDo.UseDB(db, opts...)
	_pubfileAggregationControl.pubfileAggregationControlDo.UseModel(&model.PubfileAggregationControl{})

	tableName := _pubfileAggregationControl.pubfileAggregationControlDo.TableName()
	_pubfileAggregationControl.ALL = field.NewAsterisk(tableName)
	_pubfileAggregationControl.AggID = field.NewString(tableName, "agg_id")
	_pubfileAggregationControl.AggName = field.NewString(tableName, "agg_name")
	_pubfileAggregationControl.AggVersion = field.NewString(tableName, "agg_version")
	_pubfileAggregationControl.PubfileType = field.NewString(tableName, "pubfile_type")
	_pubfileAggregationControl.AddTime = field.NewTime(tableName, "add_time")
	_pubfileAggregationControl.AddUser = field.NewString(tableName, "add_user")
	_pubfileAggregationControl.ProjectID = field.NewString(tableName, "project_id")
	_pubfileAggregationControl.ArtifactID = field.NewString(tableName, "artifact_id")
	_pubfileAggregationControl.ArtifactGroup = field.NewString(tableName, "artifact_group")
	_pubfileAggregationControl.IsDel = field.NewString(tableName, "is_del")
	_pubfileAggregationControl.Note = field.NewString(tableName, "note")

	_pubfileAggregationControl.fillFieldMap()

	return _pubfileAggregationControl
}

type pubfileAggregationControl struct {
	pubfileAggregationControlDo

	ALL           field.Asterisk
	AggID         field.String // ID
	AggName       field.String // 文件名
	AggVersion    field.String // 文件部署版本 注意此版本全局唯一
	PubfileType   field.String // 文件发布类型（1、模板  2、报表）
	AddTime       field.Time   // 添加时间
	AddUser       field.String // 添加用户
	ProjectID     field.String // 发布项目（sys_project.project_id）
	ArtifactID    field.String // 虚拟坐标
	ArtifactGroup field.String // 虚拟分组
	IsDel         field.String // 标记是否删除（0、正常 1、已删除）
	Note          field.String // 备注

	fieldMap map[string]field.Expr
}

func (p pubfileAggregationControl) Table(newTableName string) *pubfileAggregationControl {
	p.pubfileAggregationControlDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pubfileAggregationControl) As(alias string) *pubfileAggregationControl {
	p.pubfileAggregationControlDo.DO = *(p.pubfileAggregationControlDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pubfileAggregationControl) updateTableName(table string) *pubfileAggregationControl {
	p.ALL = field.NewAsterisk(table)
	p.AggID = field.NewString(table, "agg_id")
	p.AggName = field.NewString(table, "agg_name")
	p.AggVersion = field.NewString(table, "agg_version")
	p.PubfileType = field.NewString(table, "pubfile_type")
	p.AddTime = field.NewTime(table, "add_time")
	p.AddUser = field.NewString(table, "add_user")
	p.ProjectID = field.NewString(table, "project_id")
	p.ArtifactID = field.NewString(table, "artifact_id")
	p.ArtifactGroup = field.NewString(table, "artifact_group")
	p.IsDel = field.NewString(table, "is_del")
	p.Note = field.NewString(table, "note")

	p.fillFieldMap()

	return p
}

func (p *pubfileAggregationControl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pubfileAggregationControl) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["agg_id"] = p.AggID
	p.fieldMap["agg_name"] = p.AggName
	p.fieldMap["agg_version"] = p.AggVersion
	p.fieldMap["pubfile_type"] = p.PubfileType
	p.fieldMap["add_time"] = p.AddTime
	p.fieldMap["add_user"] = p.AddUser
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["artifact_id"] = p.ArtifactID
	p.fieldMap["artifact_group"] = p.ArtifactGroup
	p.fieldMap["is_del"] = p.IsDel
	p.fieldMap["note"] = p.Note
}

func (p pubfileAggregationControl) clone(db *gorm.DB) pubfileAggregationControl {
	p.pubfileAggregationControlDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pubfileAggregationControl) replaceDB(db *gorm.DB) pubfileAggregationControl {
	p.pubfileAggregationControlDo.ReplaceDB(db)
	return p
}

type pubfileAggregationControlDo struct{ gen.DO }

type IPubfileAggregationControlDo interface {
	gen.SubQuery
	Debug() IPubfileAggregationControlDo
	WithContext(ctx context.Context) IPubfileAggregationControlDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPubfileAggregationControlDo
	WriteDB() IPubfileAggregationControlDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPubfileAggregationControlDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPubfileAggregationControlDo
	Not(conds ...gen.Condition) IPubfileAggregationControlDo
	Or(conds ...gen.Condition) IPubfileAggregationControlDo
	Select(conds ...field.Expr) IPubfileAggregationControlDo
	Where(conds ...gen.Condition) IPubfileAggregationControlDo
	Order(conds ...field.Expr) IPubfileAggregationControlDo
	Distinct(cols ...field.Expr) IPubfileAggregationControlDo
	Omit(cols ...field.Expr) IPubfileAggregationControlDo
	Join(table schema.Tabler, on ...field.Expr) IPubfileAggregationControlDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationControlDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationControlDo
	Group(cols ...field.Expr) IPubfileAggregationControlDo
	Having(conds ...gen.Condition) IPubfileAggregationControlDo
	Limit(limit int) IPubfileAggregationControlDo
	Offset(offset int) IPubfileAggregationControlDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPubfileAggregationControlDo
	Unscoped() IPubfileAggregationControlDo
	Create(values ...*model.PubfileAggregationControl) error
	CreateInBatches(values []*model.PubfileAggregationControl, batchSize int) error
	Save(values ...*model.PubfileAggregationControl) error
	First() (*model.PubfileAggregationControl, error)
	Take() (*model.PubfileAggregationControl, error)
	Last() (*model.PubfileAggregationControl, error)
	Find() ([]*model.PubfileAggregationControl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PubfileAggregationControl, err error)
	FindInBatches(result *[]*model.PubfileAggregationControl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PubfileAggregationControl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPubfileAggregationControlDo
	Assign(attrs ...field.AssignExpr) IPubfileAggregationControlDo
	Joins(fields ...field.RelationField) IPubfileAggregationControlDo
	Preload(fields ...field.RelationField) IPubfileAggregationControlDo
	FirstOrInit() (*model.PubfileAggregationControl, error)
	FirstOrCreate() (*model.PubfileAggregationControl, error)
	FindByPage(offset int, limit int) (result []*model.PubfileAggregationControl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPubfileAggregationControlDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pubfileAggregationControlDo) Debug() IPubfileAggregationControlDo {
	return p.withDO(p.DO.Debug())
}

func (p pubfileAggregationControlDo) WithContext(ctx context.Context) IPubfileAggregationControlDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pubfileAggregationControlDo) ReadDB() IPubfileAggregationControlDo {
	return p.Clauses(dbresolver.Read)
}

func (p pubfileAggregationControlDo) WriteDB() IPubfileAggregationControlDo {
	return p.Clauses(dbresolver.Write)
}

func (p pubfileAggregationControlDo) Session(config *gorm.Session) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Session(config))
}

func (p pubfileAggregationControlDo) Clauses(conds ...clause.Expression) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pubfileAggregationControlDo) Returning(value interface{}, columns ...string) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pubfileAggregationControlDo) Not(conds ...gen.Condition) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pubfileAggregationControlDo) Or(conds ...gen.Condition) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pubfileAggregationControlDo) Select(conds ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pubfileAggregationControlDo) Where(conds ...gen.Condition) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pubfileAggregationControlDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPubfileAggregationControlDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pubfileAggregationControlDo) Order(conds ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pubfileAggregationControlDo) Distinct(cols ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pubfileAggregationControlDo) Omit(cols ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pubfileAggregationControlDo) Join(table schema.Tabler, on ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pubfileAggregationControlDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pubfileAggregationControlDo) RightJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pubfileAggregationControlDo) Group(cols ...field.Expr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pubfileAggregationControlDo) Having(conds ...gen.Condition) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pubfileAggregationControlDo) Limit(limit int) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pubfileAggregationControlDo) Offset(offset int) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pubfileAggregationControlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pubfileAggregationControlDo) Unscoped() IPubfileAggregationControlDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pubfileAggregationControlDo) Create(values ...*model.PubfileAggregationControl) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pubfileAggregationControlDo) CreateInBatches(values []*model.PubfileAggregationControl, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pubfileAggregationControlDo) Save(values ...*model.PubfileAggregationControl) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pubfileAggregationControlDo) First() (*model.PubfileAggregationControl, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationControl), nil
	}
}

func (p pubfileAggregationControlDo) Take() (*model.PubfileAggregationControl, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationControl), nil
	}
}

func (p pubfileAggregationControlDo) Last() (*model.PubfileAggregationControl, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationControl), nil
	}
}

func (p pubfileAggregationControlDo) Find() ([]*model.PubfileAggregationControl, error) {
	result, err := p.DO.Find()
	return result.([]*model.PubfileAggregationControl), err
}

func (p pubfileAggregationControlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PubfileAggregationControl, err error) {
	buf := make([]*model.PubfileAggregationControl, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pubfileAggregationControlDo) FindInBatches(result *[]*model.PubfileAggregationControl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pubfileAggregationControlDo) Attrs(attrs ...field.AssignExpr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pubfileAggregationControlDo) Assign(attrs ...field.AssignExpr) IPubfileAggregationControlDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pubfileAggregationControlDo) Joins(fields ...field.RelationField) IPubfileAggregationControlDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pubfileAggregationControlDo) Preload(fields ...field.RelationField) IPubfileAggregationControlDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pubfileAggregationControlDo) FirstOrInit() (*model.PubfileAggregationControl, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationControl), nil
	}
}

func (p pubfileAggregationControlDo) FirstOrCreate() (*model.PubfileAggregationControl, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationControl), nil
	}
}

func (p pubfileAggregationControlDo) FindByPage(offset int, limit int) (result []*model.PubfileAggregationControl, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pubfileAggregationControlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pubfileAggregationControlDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pubfileAggregationControlDo) Delete(models ...*model.PubfileAggregationControl) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pubfileAggregationControlDo) withDO(do gen.Dao) *pubfileAggregationControlDo {
	p.DO = *do.(*gen.DO)
	return p
}
