// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPubfileAggregationRel(db *gorm.DB, opts ...gen.DOOption) pubfileAggregationRel {
	_pubfileAggregationRel := pubfileAggregationRel{}

	_pubfileAggregationRel.pubfileAggregationRelDo.UseDB(db, opts...)
	_pubfileAggregationRel.pubfileAggregationRelDo.UseModel(&model.PubfileAggregationRel{})

	tableName := _pubfileAggregationRel.pubfileAggregationRelDo.TableName()
	_pubfileAggregationRel.ALL = field.NewAsterisk(tableName)
	_pubfileAggregationRel.AggRelID = field.NewString(tableName, "agg_rel_id")
	_pubfileAggregationRel.AggID = field.NewString(tableName, "agg_id")
	_pubfileAggregationRel.PubfileID = field.NewString(tableName, "pubfile_id")
	_pubfileAggregationRel.RelType = field.NewString(tableName, "rel_type")

	_pubfileAggregationRel.fillFieldMap()

	return _pubfileAggregationRel
}

type pubfileAggregationRel struct {
	pubfileAggregationRelDo

	ALL       field.Asterisk
	AggRelID  field.String // ID
	AggID     field.String // ID
	PubfileID field.String // ID
	RelType   field.String // 关系类型（1、部署关系  2回退关系）

	fieldMap map[string]field.Expr
}

func (p pubfileAggregationRel) Table(newTableName string) *pubfileAggregationRel {
	p.pubfileAggregationRelDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pubfileAggregationRel) As(alias string) *pubfileAggregationRel {
	p.pubfileAggregationRelDo.DO = *(p.pubfileAggregationRelDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pubfileAggregationRel) updateTableName(table string) *pubfileAggregationRel {
	p.ALL = field.NewAsterisk(table)
	p.AggRelID = field.NewString(table, "agg_rel_id")
	p.AggID = field.NewString(table, "agg_id")
	p.PubfileID = field.NewString(table, "pubfile_id")
	p.RelType = field.NewString(table, "rel_type")

	p.fillFieldMap()

	return p
}

func (p *pubfileAggregationRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pubfileAggregationRel) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["agg_rel_id"] = p.AggRelID
	p.fieldMap["agg_id"] = p.AggID
	p.fieldMap["pubfile_id"] = p.PubfileID
	p.fieldMap["rel_type"] = p.RelType
}

func (p pubfileAggregationRel) clone(db *gorm.DB) pubfileAggregationRel {
	p.pubfileAggregationRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pubfileAggregationRel) replaceDB(db *gorm.DB) pubfileAggregationRel {
	p.pubfileAggregationRelDo.ReplaceDB(db)
	return p
}

type pubfileAggregationRelDo struct{ gen.DO }

type IPubfileAggregationRelDo interface {
	gen.SubQuery
	Debug() IPubfileAggregationRelDo
	WithContext(ctx context.Context) IPubfileAggregationRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPubfileAggregationRelDo
	WriteDB() IPubfileAggregationRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPubfileAggregationRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPubfileAggregationRelDo
	Not(conds ...gen.Condition) IPubfileAggregationRelDo
	Or(conds ...gen.Condition) IPubfileAggregationRelDo
	Select(conds ...field.Expr) IPubfileAggregationRelDo
	Where(conds ...gen.Condition) IPubfileAggregationRelDo
	Order(conds ...field.Expr) IPubfileAggregationRelDo
	Distinct(cols ...field.Expr) IPubfileAggregationRelDo
	Omit(cols ...field.Expr) IPubfileAggregationRelDo
	Join(table schema.Tabler, on ...field.Expr) IPubfileAggregationRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationRelDo
	Group(cols ...field.Expr) IPubfileAggregationRelDo
	Having(conds ...gen.Condition) IPubfileAggregationRelDo
	Limit(limit int) IPubfileAggregationRelDo
	Offset(offset int) IPubfileAggregationRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPubfileAggregationRelDo
	Unscoped() IPubfileAggregationRelDo
	Create(values ...*model.PubfileAggregationRel) error
	CreateInBatches(values []*model.PubfileAggregationRel, batchSize int) error
	Save(values ...*model.PubfileAggregationRel) error
	First() (*model.PubfileAggregationRel, error)
	Take() (*model.PubfileAggregationRel, error)
	Last() (*model.PubfileAggregationRel, error)
	Find() ([]*model.PubfileAggregationRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PubfileAggregationRel, err error)
	FindInBatches(result *[]*model.PubfileAggregationRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PubfileAggregationRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPubfileAggregationRelDo
	Assign(attrs ...field.AssignExpr) IPubfileAggregationRelDo
	Joins(fields ...field.RelationField) IPubfileAggregationRelDo
	Preload(fields ...field.RelationField) IPubfileAggregationRelDo
	FirstOrInit() (*model.PubfileAggregationRel, error)
	FirstOrCreate() (*model.PubfileAggregationRel, error)
	FindByPage(offset int, limit int) (result []*model.PubfileAggregationRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPubfileAggregationRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pubfileAggregationRelDo) Debug() IPubfileAggregationRelDo {
	return p.withDO(p.DO.Debug())
}

func (p pubfileAggregationRelDo) WithContext(ctx context.Context) IPubfileAggregationRelDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pubfileAggregationRelDo) ReadDB() IPubfileAggregationRelDo {
	return p.Clauses(dbresolver.Read)
}

func (p pubfileAggregationRelDo) WriteDB() IPubfileAggregationRelDo {
	return p.Clauses(dbresolver.Write)
}

func (p pubfileAggregationRelDo) Session(config *gorm.Session) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Session(config))
}

func (p pubfileAggregationRelDo) Clauses(conds ...clause.Expression) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pubfileAggregationRelDo) Returning(value interface{}, columns ...string) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pubfileAggregationRelDo) Not(conds ...gen.Condition) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pubfileAggregationRelDo) Or(conds ...gen.Condition) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pubfileAggregationRelDo) Select(conds ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pubfileAggregationRelDo) Where(conds ...gen.Condition) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pubfileAggregationRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPubfileAggregationRelDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pubfileAggregationRelDo) Order(conds ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pubfileAggregationRelDo) Distinct(cols ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pubfileAggregationRelDo) Omit(cols ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pubfileAggregationRelDo) Join(table schema.Tabler, on ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pubfileAggregationRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pubfileAggregationRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pubfileAggregationRelDo) Group(cols ...field.Expr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pubfileAggregationRelDo) Having(conds ...gen.Condition) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pubfileAggregationRelDo) Limit(limit int) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pubfileAggregationRelDo) Offset(offset int) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pubfileAggregationRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pubfileAggregationRelDo) Unscoped() IPubfileAggregationRelDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pubfileAggregationRelDo) Create(values ...*model.PubfileAggregationRel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pubfileAggregationRelDo) CreateInBatches(values []*model.PubfileAggregationRel, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pubfileAggregationRelDo) Save(values ...*model.PubfileAggregationRel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pubfileAggregationRelDo) First() (*model.PubfileAggregationRel, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationRel), nil
	}
}

func (p pubfileAggregationRelDo) Take() (*model.PubfileAggregationRel, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationRel), nil
	}
}

func (p pubfileAggregationRelDo) Last() (*model.PubfileAggregationRel, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationRel), nil
	}
}

func (p pubfileAggregationRelDo) Find() ([]*model.PubfileAggregationRel, error) {
	result, err := p.DO.Find()
	return result.([]*model.PubfileAggregationRel), err
}

func (p pubfileAggregationRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PubfileAggregationRel, err error) {
	buf := make([]*model.PubfileAggregationRel, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pubfileAggregationRelDo) FindInBatches(result *[]*model.PubfileAggregationRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pubfileAggregationRelDo) Attrs(attrs ...field.AssignExpr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pubfileAggregationRelDo) Assign(attrs ...field.AssignExpr) IPubfileAggregationRelDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pubfileAggregationRelDo) Joins(fields ...field.RelationField) IPubfileAggregationRelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pubfileAggregationRelDo) Preload(fields ...field.RelationField) IPubfileAggregationRelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pubfileAggregationRelDo) FirstOrInit() (*model.PubfileAggregationRel, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationRel), nil
	}
}

func (p pubfileAggregationRelDo) FirstOrCreate() (*model.PubfileAggregationRel, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubfileAggregationRel), nil
	}
}

func (p pubfileAggregationRelDo) FindByPage(offset int, limit int) (result []*model.PubfileAggregationRel, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pubfileAggregationRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pubfileAggregationRelDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pubfileAggregationRelDo) Delete(models ...*model.PubfileAggregationRel) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pubfileAggregationRelDo) withDO(do gen.Dao) *pubfileAggregationRelDo {
	p.DO = *do.(*gen.DO)
	return p
}
