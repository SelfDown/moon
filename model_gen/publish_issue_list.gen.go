// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishIssueList(db *gorm.DB, opts ...gen.DOOption) publishIssueList {
	_publishIssueList := publishIssueList{}

	_publishIssueList.publishIssueListDo.UseDB(db, opts...)
	_publishIssueList.publishIssueListDo.UseModel(&model.PublishIssueList{})

	tableName := _publishIssueList.publishIssueListDo.TableName()
	_publishIssueList.ALL = field.NewAsterisk(tableName)
	_publishIssueList.ID = field.NewInt32(tableName, "id")
	_publishIssueList.ReqIssueID = field.NewString(tableName, "req_issue_id")
	_publishIssueList.ReqID = field.NewString(tableName, "req_id")
	_publishIssueList.IssueKey = field.NewString(tableName, "issue_key")
	_publishIssueList.IssueTitle = field.NewString(tableName, "issue_title")
	_publishIssueList.IssueType = field.NewInt32(tableName, "issue_type")
	_publishIssueList.IssueStatu = field.NewString(tableName, "issue_statu")
	_publishIssueList.Issuetype = field.NewString(tableName, "issuetype")
	_publishIssueList.IsSupply = field.NewString(tableName, "isSupply")
	_publishIssueList.IssueAssignee = field.NewString(tableName, "issue_assignee")
	_publishIssueList.CreateTime = field.NewTime(tableName, "create_time")
	_publishIssueList.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishIssueList.Comments = field.NewString(tableName, "comments")

	_publishIssueList.fillFieldMap()

	return _publishIssueList
}

type publishIssueList struct {
	publishIssueListDo

	ALL        field.Asterisk
	ID         field.Int32
	ReqIssueID field.String
	ReqID      field.String
	IssueKey   field.String
	IssueTitle field.String
	IssueType  field.Int32 // 0 开发类，1，项目类，2-环境类
	IssueStatu field.String
	Issuetype  field.String // Jira的ISSUE问题类型
	/*
		是否为开始集成测试后补录的ISSUE

		0 或空 表示 非补录
		1 表示补录
	*/
	IsSupply      field.String
	IssueAssignee field.String // ISSUE经办人
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (p publishIssueList) Table(newTableName string) *publishIssueList {
	p.publishIssueListDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishIssueList) As(alias string) *publishIssueList {
	p.publishIssueListDo.DO = *(p.publishIssueListDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishIssueList) updateTableName(table string) *publishIssueList {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.ReqIssueID = field.NewString(table, "req_issue_id")
	p.ReqID = field.NewString(table, "req_id")
	p.IssueKey = field.NewString(table, "issue_key")
	p.IssueTitle = field.NewString(table, "issue_title")
	p.IssueType = field.NewInt32(table, "issue_type")
	p.IssueStatu = field.NewString(table, "issue_statu")
	p.Issuetype = field.NewString(table, "issuetype")
	p.IsSupply = field.NewString(table, "isSupply")
	p.IssueAssignee = field.NewString(table, "issue_assignee")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")

	p.fillFieldMap()

	return p
}

func (p *publishIssueList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishIssueList) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["req_issue_id"] = p.ReqIssueID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["issue_key"] = p.IssueKey
	p.fieldMap["issue_title"] = p.IssueTitle
	p.fieldMap["issue_type"] = p.IssueType
	p.fieldMap["issue_statu"] = p.IssueStatu
	p.fieldMap["issuetype"] = p.Issuetype
	p.fieldMap["isSupply"] = p.IsSupply
	p.fieldMap["issue_assignee"] = p.IssueAssignee
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
}

func (p publishIssueList) clone(db *gorm.DB) publishIssueList {
	p.publishIssueListDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishIssueList) replaceDB(db *gorm.DB) publishIssueList {
	p.publishIssueListDo.ReplaceDB(db)
	return p
}

type publishIssueListDo struct{ gen.DO }

type IPublishIssueListDo interface {
	gen.SubQuery
	Debug() IPublishIssueListDo
	WithContext(ctx context.Context) IPublishIssueListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishIssueListDo
	WriteDB() IPublishIssueListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishIssueListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishIssueListDo
	Not(conds ...gen.Condition) IPublishIssueListDo
	Or(conds ...gen.Condition) IPublishIssueListDo
	Select(conds ...field.Expr) IPublishIssueListDo
	Where(conds ...gen.Condition) IPublishIssueListDo
	Order(conds ...field.Expr) IPublishIssueListDo
	Distinct(cols ...field.Expr) IPublishIssueListDo
	Omit(cols ...field.Expr) IPublishIssueListDo
	Join(table schema.Tabler, on ...field.Expr) IPublishIssueListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishIssueListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishIssueListDo
	Group(cols ...field.Expr) IPublishIssueListDo
	Having(conds ...gen.Condition) IPublishIssueListDo
	Limit(limit int) IPublishIssueListDo
	Offset(offset int) IPublishIssueListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishIssueListDo
	Unscoped() IPublishIssueListDo
	Create(values ...*model.PublishIssueList) error
	CreateInBatches(values []*model.PublishIssueList, batchSize int) error
	Save(values ...*model.PublishIssueList) error
	First() (*model.PublishIssueList, error)
	Take() (*model.PublishIssueList, error)
	Last() (*model.PublishIssueList, error)
	Find() ([]*model.PublishIssueList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishIssueList, err error)
	FindInBatches(result *[]*model.PublishIssueList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishIssueList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishIssueListDo
	Assign(attrs ...field.AssignExpr) IPublishIssueListDo
	Joins(fields ...field.RelationField) IPublishIssueListDo
	Preload(fields ...field.RelationField) IPublishIssueListDo
	FirstOrInit() (*model.PublishIssueList, error)
	FirstOrCreate() (*model.PublishIssueList, error)
	FindByPage(offset int, limit int) (result []*model.PublishIssueList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishIssueListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishIssueListDo) Debug() IPublishIssueListDo {
	return p.withDO(p.DO.Debug())
}

func (p publishIssueListDo) WithContext(ctx context.Context) IPublishIssueListDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishIssueListDo) ReadDB() IPublishIssueListDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishIssueListDo) WriteDB() IPublishIssueListDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishIssueListDo) Session(config *gorm.Session) IPublishIssueListDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishIssueListDo) Clauses(conds ...clause.Expression) IPublishIssueListDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishIssueListDo) Returning(value interface{}, columns ...string) IPublishIssueListDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishIssueListDo) Not(conds ...gen.Condition) IPublishIssueListDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishIssueListDo) Or(conds ...gen.Condition) IPublishIssueListDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishIssueListDo) Select(conds ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishIssueListDo) Where(conds ...gen.Condition) IPublishIssueListDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishIssueListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishIssueListDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishIssueListDo) Order(conds ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishIssueListDo) Distinct(cols ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishIssueListDo) Omit(cols ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishIssueListDo) Join(table schema.Tabler, on ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishIssueListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishIssueListDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishIssueListDo) Group(cols ...field.Expr) IPublishIssueListDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishIssueListDo) Having(conds ...gen.Condition) IPublishIssueListDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishIssueListDo) Limit(limit int) IPublishIssueListDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishIssueListDo) Offset(offset int) IPublishIssueListDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishIssueListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishIssueListDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishIssueListDo) Unscoped() IPublishIssueListDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishIssueListDo) Create(values ...*model.PublishIssueList) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishIssueListDo) CreateInBatches(values []*model.PublishIssueList, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishIssueListDo) Save(values ...*model.PublishIssueList) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishIssueListDo) First() (*model.PublishIssueList, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishIssueList), nil
	}
}

func (p publishIssueListDo) Take() (*model.PublishIssueList, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishIssueList), nil
	}
}

func (p publishIssueListDo) Last() (*model.PublishIssueList, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishIssueList), nil
	}
}

func (p publishIssueListDo) Find() ([]*model.PublishIssueList, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishIssueList), err
}

func (p publishIssueListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishIssueList, err error) {
	buf := make([]*model.PublishIssueList, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishIssueListDo) FindInBatches(result *[]*model.PublishIssueList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishIssueListDo) Attrs(attrs ...field.AssignExpr) IPublishIssueListDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishIssueListDo) Assign(attrs ...field.AssignExpr) IPublishIssueListDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishIssueListDo) Joins(fields ...field.RelationField) IPublishIssueListDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishIssueListDo) Preload(fields ...field.RelationField) IPublishIssueListDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishIssueListDo) FirstOrInit() (*model.PublishIssueList, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishIssueList), nil
	}
}

func (p publishIssueListDo) FirstOrCreate() (*model.PublishIssueList, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishIssueList), nil
	}
}

func (p publishIssueListDo) FindByPage(offset int, limit int) (result []*model.PublishIssueList, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishIssueListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishIssueListDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishIssueListDo) Delete(models ...*model.PublishIssueList) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishIssueListDo) withDO(do gen.Dao) *publishIssueListDo {
	p.DO = *do.(*gen.DO)
	return p
}
