// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishNotice(db *gorm.DB, opts ...gen.DOOption) publishNotice {
	_publishNotice := publishNotice{}

	_publishNotice.publishNoticeDo.UseDB(db, opts...)
	_publishNotice.publishNoticeDo.UseModel(&model.PublishNotice{})

	tableName := _publishNotice.publishNoticeDo.TableName()
	_publishNotice.ALL = field.NewAsterisk(tableName)
	_publishNotice.PublishNoticeID = field.NewString(tableName, "publish_notice_id")
	_publishNotice.PublishTime = field.NewTime(tableName, "publish_time")
	_publishNotice.NoticeContent = field.NewString(tableName, "notice_content")
	_publishNotice.PublishUsetime = field.NewString(tableName, "publish_usetime")
	_publishNotice.NoticeCreattime = field.NewTime(tableName, "notice_creattime")
	_publishNotice.NoticeUserid = field.NewString(tableName, "notice_userid")
	_publishNotice.MessageSendLogID = field.NewString(tableName, "message_send_log_id")
	_publishNotice.ReqID = field.NewString(tableName, "req_id")
	_publishNotice.PublishNoticeType = field.NewString(tableName, "publish_notice_type")
	_publishNotice.CreateTime = field.NewTime(tableName, "create_time")
	_publishNotice.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishNotice.Comments = field.NewString(tableName, "comments")

	_publishNotice.fillFieldMap()

	return _publishNotice
}

type publishNotice struct {
	publishNoticeDo

	ALL               field.Asterisk
	PublishNoticeID   field.String
	PublishTime       field.Time   // 申请单发布时间（小时：分）
	NoticeContent     field.String // 通知主体内容
	PublishUsetime    field.String // 预计用时（分）
	NoticeCreattime   field.Time   // 通知创建时间
	NoticeUserid      field.String // 创建者（存userid）
	MessageSendLogID  field.String // 发送消息ID
	ReqID             field.String // 升级单ID
	PublishNoticeType field.String // 通知类型
	CreateTime        field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime        field.Time   // 记录修改时间（数据库自动写入）
	Comments          field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (p publishNotice) Table(newTableName string) *publishNotice {
	p.publishNoticeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishNotice) As(alias string) *publishNotice {
	p.publishNoticeDo.DO = *(p.publishNoticeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishNotice) updateTableName(table string) *publishNotice {
	p.ALL = field.NewAsterisk(table)
	p.PublishNoticeID = field.NewString(table, "publish_notice_id")
	p.PublishTime = field.NewTime(table, "publish_time")
	p.NoticeContent = field.NewString(table, "notice_content")
	p.PublishUsetime = field.NewString(table, "publish_usetime")
	p.NoticeCreattime = field.NewTime(table, "notice_creattime")
	p.NoticeUserid = field.NewString(table, "notice_userid")
	p.MessageSendLogID = field.NewString(table, "message_send_log_id")
	p.ReqID = field.NewString(table, "req_id")
	p.PublishNoticeType = field.NewString(table, "publish_notice_type")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")

	p.fillFieldMap()

	return p
}

func (p *publishNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishNotice) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["publish_notice_id"] = p.PublishNoticeID
	p.fieldMap["publish_time"] = p.PublishTime
	p.fieldMap["notice_content"] = p.NoticeContent
	p.fieldMap["publish_usetime"] = p.PublishUsetime
	p.fieldMap["notice_creattime"] = p.NoticeCreattime
	p.fieldMap["notice_userid"] = p.NoticeUserid
	p.fieldMap["message_send_log_id"] = p.MessageSendLogID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["publish_notice_type"] = p.PublishNoticeType
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
}

func (p publishNotice) clone(db *gorm.DB) publishNotice {
	p.publishNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishNotice) replaceDB(db *gorm.DB) publishNotice {
	p.publishNoticeDo.ReplaceDB(db)
	return p
}

type publishNoticeDo struct{ gen.DO }

type IPublishNoticeDo interface {
	gen.SubQuery
	Debug() IPublishNoticeDo
	WithContext(ctx context.Context) IPublishNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishNoticeDo
	WriteDB() IPublishNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishNoticeDo
	Not(conds ...gen.Condition) IPublishNoticeDo
	Or(conds ...gen.Condition) IPublishNoticeDo
	Select(conds ...field.Expr) IPublishNoticeDo
	Where(conds ...gen.Condition) IPublishNoticeDo
	Order(conds ...field.Expr) IPublishNoticeDo
	Distinct(cols ...field.Expr) IPublishNoticeDo
	Omit(cols ...field.Expr) IPublishNoticeDo
	Join(table schema.Tabler, on ...field.Expr) IPublishNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeDo
	Group(cols ...field.Expr) IPublishNoticeDo
	Having(conds ...gen.Condition) IPublishNoticeDo
	Limit(limit int) IPublishNoticeDo
	Offset(offset int) IPublishNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishNoticeDo
	Unscoped() IPublishNoticeDo
	Create(values ...*model.PublishNotice) error
	CreateInBatches(values []*model.PublishNotice, batchSize int) error
	Save(values ...*model.PublishNotice) error
	First() (*model.PublishNotice, error)
	Take() (*model.PublishNotice, error)
	Last() (*model.PublishNotice, error)
	Find() ([]*model.PublishNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishNotice, err error)
	FindInBatches(result *[]*model.PublishNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishNoticeDo
	Assign(attrs ...field.AssignExpr) IPublishNoticeDo
	Joins(fields ...field.RelationField) IPublishNoticeDo
	Preload(fields ...field.RelationField) IPublishNoticeDo
	FirstOrInit() (*model.PublishNotice, error)
	FirstOrCreate() (*model.PublishNotice, error)
	FindByPage(offset int, limit int) (result []*model.PublishNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishNoticeDo) Debug() IPublishNoticeDo {
	return p.withDO(p.DO.Debug())
}

func (p publishNoticeDo) WithContext(ctx context.Context) IPublishNoticeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishNoticeDo) ReadDB() IPublishNoticeDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishNoticeDo) WriteDB() IPublishNoticeDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishNoticeDo) Session(config *gorm.Session) IPublishNoticeDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishNoticeDo) Clauses(conds ...clause.Expression) IPublishNoticeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishNoticeDo) Returning(value interface{}, columns ...string) IPublishNoticeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishNoticeDo) Not(conds ...gen.Condition) IPublishNoticeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishNoticeDo) Or(conds ...gen.Condition) IPublishNoticeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishNoticeDo) Select(conds ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishNoticeDo) Where(conds ...gen.Condition) IPublishNoticeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishNoticeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishNoticeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishNoticeDo) Order(conds ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishNoticeDo) Distinct(cols ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishNoticeDo) Omit(cols ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishNoticeDo) Join(table schema.Tabler, on ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishNoticeDo) Group(cols ...field.Expr) IPublishNoticeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishNoticeDo) Having(conds ...gen.Condition) IPublishNoticeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishNoticeDo) Limit(limit int) IPublishNoticeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishNoticeDo) Offset(offset int) IPublishNoticeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishNoticeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishNoticeDo) Unscoped() IPublishNoticeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishNoticeDo) Create(values ...*model.PublishNotice) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishNoticeDo) CreateInBatches(values []*model.PublishNotice, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishNoticeDo) Save(values ...*model.PublishNotice) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishNoticeDo) First() (*model.PublishNotice, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNotice), nil
	}
}

func (p publishNoticeDo) Take() (*model.PublishNotice, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNotice), nil
	}
}

func (p publishNoticeDo) Last() (*model.PublishNotice, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNotice), nil
	}
}

func (p publishNoticeDo) Find() ([]*model.PublishNotice, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishNotice), err
}

func (p publishNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishNotice, err error) {
	buf := make([]*model.PublishNotice, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishNoticeDo) FindInBatches(result *[]*model.PublishNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishNoticeDo) Attrs(attrs ...field.AssignExpr) IPublishNoticeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishNoticeDo) Assign(attrs ...field.AssignExpr) IPublishNoticeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishNoticeDo) Joins(fields ...field.RelationField) IPublishNoticeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishNoticeDo) Preload(fields ...field.RelationField) IPublishNoticeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishNoticeDo) FirstOrInit() (*model.PublishNotice, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNotice), nil
	}
}

func (p publishNoticeDo) FirstOrCreate() (*model.PublishNotice, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNotice), nil
	}
}

func (p publishNoticeDo) FindByPage(offset int, limit int) (result []*model.PublishNotice, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishNoticeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishNoticeDo) Delete(models ...*model.PublishNotice) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishNoticeDo) withDO(do gen.Dao) *publishNoticeDo {
	p.DO = *do.(*gen.DO)
	return p
}
