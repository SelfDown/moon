// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishNoticeType(db *gorm.DB, opts ...gen.DOOption) publishNoticeType {
	_publishNoticeType := publishNoticeType{}

	_publishNoticeType.publishNoticeTypeDo.UseDB(db, opts...)
	_publishNoticeType.publishNoticeTypeDo.UseModel(&model.PublishNoticeType{})

	tableName := _publishNoticeType.publishNoticeTypeDo.TableName()
	_publishNoticeType.ALL = field.NewAsterisk(tableName)
	_publishNoticeType.PublishNoticeTypeID = field.NewString(tableName, "publish_notice_type_id")
	_publishNoticeType.PublishNoticeType = field.NewString(tableName, "publish_notice_type")
	_publishNoticeType.PublishNoticeTypeDesc = field.NewString(tableName, "publish_notice_type_desc")
	_publishNoticeType.CreateTime = field.NewTime(tableName, "create_time")
	_publishNoticeType.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishNoticeType.Comments = field.NewString(tableName, "comments")

	_publishNoticeType.fillFieldMap()

	return _publishNoticeType
}

type publishNoticeType struct {
	publishNoticeTypeDo

	ALL                   field.Asterisk
	PublishNoticeTypeID   field.String
	PublishNoticeType     field.String // 升级通知类型
	PublishNoticeTypeDesc field.String // 通知类型描述
	CreateTime            field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime            field.Time   // 记录修改时间（数据库自动写入）
	Comments              field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (p publishNoticeType) Table(newTableName string) *publishNoticeType {
	p.publishNoticeTypeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishNoticeType) As(alias string) *publishNoticeType {
	p.publishNoticeTypeDo.DO = *(p.publishNoticeTypeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishNoticeType) updateTableName(table string) *publishNoticeType {
	p.ALL = field.NewAsterisk(table)
	p.PublishNoticeTypeID = field.NewString(table, "publish_notice_type_id")
	p.PublishNoticeType = field.NewString(table, "publish_notice_type")
	p.PublishNoticeTypeDesc = field.NewString(table, "publish_notice_type_desc")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")

	p.fillFieldMap()

	return p
}

func (p *publishNoticeType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishNoticeType) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["publish_notice_type_id"] = p.PublishNoticeTypeID
	p.fieldMap["publish_notice_type"] = p.PublishNoticeType
	p.fieldMap["publish_notice_type_desc"] = p.PublishNoticeTypeDesc
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
}

func (p publishNoticeType) clone(db *gorm.DB) publishNoticeType {
	p.publishNoticeTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishNoticeType) replaceDB(db *gorm.DB) publishNoticeType {
	p.publishNoticeTypeDo.ReplaceDB(db)
	return p
}

type publishNoticeTypeDo struct{ gen.DO }

type IPublishNoticeTypeDo interface {
	gen.SubQuery
	Debug() IPublishNoticeTypeDo
	WithContext(ctx context.Context) IPublishNoticeTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishNoticeTypeDo
	WriteDB() IPublishNoticeTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishNoticeTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishNoticeTypeDo
	Not(conds ...gen.Condition) IPublishNoticeTypeDo
	Or(conds ...gen.Condition) IPublishNoticeTypeDo
	Select(conds ...field.Expr) IPublishNoticeTypeDo
	Where(conds ...gen.Condition) IPublishNoticeTypeDo
	Order(conds ...field.Expr) IPublishNoticeTypeDo
	Distinct(cols ...field.Expr) IPublishNoticeTypeDo
	Omit(cols ...field.Expr) IPublishNoticeTypeDo
	Join(table schema.Tabler, on ...field.Expr) IPublishNoticeTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeTypeDo
	Group(cols ...field.Expr) IPublishNoticeTypeDo
	Having(conds ...gen.Condition) IPublishNoticeTypeDo
	Limit(limit int) IPublishNoticeTypeDo
	Offset(offset int) IPublishNoticeTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishNoticeTypeDo
	Unscoped() IPublishNoticeTypeDo
	Create(values ...*model.PublishNoticeType) error
	CreateInBatches(values []*model.PublishNoticeType, batchSize int) error
	Save(values ...*model.PublishNoticeType) error
	First() (*model.PublishNoticeType, error)
	Take() (*model.PublishNoticeType, error)
	Last() (*model.PublishNoticeType, error)
	Find() ([]*model.PublishNoticeType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishNoticeType, err error)
	FindInBatches(result *[]*model.PublishNoticeType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishNoticeType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishNoticeTypeDo
	Assign(attrs ...field.AssignExpr) IPublishNoticeTypeDo
	Joins(fields ...field.RelationField) IPublishNoticeTypeDo
	Preload(fields ...field.RelationField) IPublishNoticeTypeDo
	FirstOrInit() (*model.PublishNoticeType, error)
	FirstOrCreate() (*model.PublishNoticeType, error)
	FindByPage(offset int, limit int) (result []*model.PublishNoticeType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishNoticeTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishNoticeTypeDo) Debug() IPublishNoticeTypeDo {
	return p.withDO(p.DO.Debug())
}

func (p publishNoticeTypeDo) WithContext(ctx context.Context) IPublishNoticeTypeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishNoticeTypeDo) ReadDB() IPublishNoticeTypeDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishNoticeTypeDo) WriteDB() IPublishNoticeTypeDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishNoticeTypeDo) Session(config *gorm.Session) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishNoticeTypeDo) Clauses(conds ...clause.Expression) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishNoticeTypeDo) Returning(value interface{}, columns ...string) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishNoticeTypeDo) Not(conds ...gen.Condition) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishNoticeTypeDo) Or(conds ...gen.Condition) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishNoticeTypeDo) Select(conds ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishNoticeTypeDo) Where(conds ...gen.Condition) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishNoticeTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishNoticeTypeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishNoticeTypeDo) Order(conds ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishNoticeTypeDo) Distinct(cols ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishNoticeTypeDo) Omit(cols ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishNoticeTypeDo) Join(table schema.Tabler, on ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishNoticeTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishNoticeTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishNoticeTypeDo) Group(cols ...field.Expr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishNoticeTypeDo) Having(conds ...gen.Condition) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishNoticeTypeDo) Limit(limit int) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishNoticeTypeDo) Offset(offset int) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishNoticeTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishNoticeTypeDo) Unscoped() IPublishNoticeTypeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishNoticeTypeDo) Create(values ...*model.PublishNoticeType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishNoticeTypeDo) CreateInBatches(values []*model.PublishNoticeType, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishNoticeTypeDo) Save(values ...*model.PublishNoticeType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishNoticeTypeDo) First() (*model.PublishNoticeType, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNoticeType), nil
	}
}

func (p publishNoticeTypeDo) Take() (*model.PublishNoticeType, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNoticeType), nil
	}
}

func (p publishNoticeTypeDo) Last() (*model.PublishNoticeType, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNoticeType), nil
	}
}

func (p publishNoticeTypeDo) Find() ([]*model.PublishNoticeType, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishNoticeType), err
}

func (p publishNoticeTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishNoticeType, err error) {
	buf := make([]*model.PublishNoticeType, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishNoticeTypeDo) FindInBatches(result *[]*model.PublishNoticeType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishNoticeTypeDo) Attrs(attrs ...field.AssignExpr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishNoticeTypeDo) Assign(attrs ...field.AssignExpr) IPublishNoticeTypeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishNoticeTypeDo) Joins(fields ...field.RelationField) IPublishNoticeTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishNoticeTypeDo) Preload(fields ...field.RelationField) IPublishNoticeTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishNoticeTypeDo) FirstOrInit() (*model.PublishNoticeType, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNoticeType), nil
	}
}

func (p publishNoticeTypeDo) FirstOrCreate() (*model.PublishNoticeType, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishNoticeType), nil
	}
}

func (p publishNoticeTypeDo) FindByPage(offset int, limit int) (result []*model.PublishNoticeType, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishNoticeTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishNoticeTypeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishNoticeTypeDo) Delete(models ...*model.PublishNoticeType) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishNoticeTypeDo) withDO(do gen.Dao) *publishNoticeTypeDo {
	p.DO = *do.(*gen.DO)
	return p
}
