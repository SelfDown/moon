// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishPannel(db *gorm.DB, opts ...gen.DOOption) publishPannel {
	_publishPannel := publishPannel{}

	_publishPannel.publishPannelDo.UseDB(db, opts...)
	_publishPannel.publishPannelDo.UseModel(&model.PublishPannel{})

	tableName := _publishPannel.publishPannelDo.TableName()
	_publishPannel.ALL = field.NewAsterisk(tableName)
	_publishPannel.PannelID = field.NewString(tableName, "pannel_id")
	_publishPannel.Type = field.NewString(tableName, "type")
	_publishPannel.Name = field.NewString(tableName, "name")
	_publishPannel.Spaces = field.NewString(tableName, "spaces")
	_publishPannel.IsLinkProductLine = field.NewString(tableName, "is_link_product_line")

	_publishPannel.fillFieldMap()

	return _publishPannel
}

type publishPannel struct {
	publishPannelDo

	ALL               field.Asterisk
	PannelID          field.String
	Type              field.String
	Name              field.String
	Spaces            field.String
	IsLinkProductLine field.String

	fieldMap map[string]field.Expr
}

func (p publishPannel) Table(newTableName string) *publishPannel {
	p.publishPannelDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishPannel) As(alias string) *publishPannel {
	p.publishPannelDo.DO = *(p.publishPannelDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishPannel) updateTableName(table string) *publishPannel {
	p.ALL = field.NewAsterisk(table)
	p.PannelID = field.NewString(table, "pannel_id")
	p.Type = field.NewString(table, "type")
	p.Name = field.NewString(table, "name")
	p.Spaces = field.NewString(table, "spaces")
	p.IsLinkProductLine = field.NewString(table, "is_link_product_line")

	p.fillFieldMap()

	return p
}

func (p *publishPannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishPannel) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["pannel_id"] = p.PannelID
	p.fieldMap["type"] = p.Type
	p.fieldMap["name"] = p.Name
	p.fieldMap["spaces"] = p.Spaces
	p.fieldMap["is_link_product_line"] = p.IsLinkProductLine
}

func (p publishPannel) clone(db *gorm.DB) publishPannel {
	p.publishPannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishPannel) replaceDB(db *gorm.DB) publishPannel {
	p.publishPannelDo.ReplaceDB(db)
	return p
}

type publishPannelDo struct{ gen.DO }

type IPublishPannelDo interface {
	gen.SubQuery
	Debug() IPublishPannelDo
	WithContext(ctx context.Context) IPublishPannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishPannelDo
	WriteDB() IPublishPannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishPannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishPannelDo
	Not(conds ...gen.Condition) IPublishPannelDo
	Or(conds ...gen.Condition) IPublishPannelDo
	Select(conds ...field.Expr) IPublishPannelDo
	Where(conds ...gen.Condition) IPublishPannelDo
	Order(conds ...field.Expr) IPublishPannelDo
	Distinct(cols ...field.Expr) IPublishPannelDo
	Omit(cols ...field.Expr) IPublishPannelDo
	Join(table schema.Tabler, on ...field.Expr) IPublishPannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishPannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishPannelDo
	Group(cols ...field.Expr) IPublishPannelDo
	Having(conds ...gen.Condition) IPublishPannelDo
	Limit(limit int) IPublishPannelDo
	Offset(offset int) IPublishPannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishPannelDo
	Unscoped() IPublishPannelDo
	Create(values ...*model.PublishPannel) error
	CreateInBatches(values []*model.PublishPannel, batchSize int) error
	Save(values ...*model.PublishPannel) error
	First() (*model.PublishPannel, error)
	Take() (*model.PublishPannel, error)
	Last() (*model.PublishPannel, error)
	Find() ([]*model.PublishPannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishPannel, err error)
	FindInBatches(result *[]*model.PublishPannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishPannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishPannelDo
	Assign(attrs ...field.AssignExpr) IPublishPannelDo
	Joins(fields ...field.RelationField) IPublishPannelDo
	Preload(fields ...field.RelationField) IPublishPannelDo
	FirstOrInit() (*model.PublishPannel, error)
	FirstOrCreate() (*model.PublishPannel, error)
	FindByPage(offset int, limit int) (result []*model.PublishPannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishPannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishPannelDo) Debug() IPublishPannelDo {
	return p.withDO(p.DO.Debug())
}

func (p publishPannelDo) WithContext(ctx context.Context) IPublishPannelDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishPannelDo) ReadDB() IPublishPannelDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishPannelDo) WriteDB() IPublishPannelDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishPannelDo) Session(config *gorm.Session) IPublishPannelDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishPannelDo) Clauses(conds ...clause.Expression) IPublishPannelDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishPannelDo) Returning(value interface{}, columns ...string) IPublishPannelDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishPannelDo) Not(conds ...gen.Condition) IPublishPannelDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishPannelDo) Or(conds ...gen.Condition) IPublishPannelDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishPannelDo) Select(conds ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishPannelDo) Where(conds ...gen.Condition) IPublishPannelDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishPannelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishPannelDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishPannelDo) Order(conds ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishPannelDo) Distinct(cols ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishPannelDo) Omit(cols ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishPannelDo) Join(table schema.Tabler, on ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishPannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishPannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishPannelDo) Group(cols ...field.Expr) IPublishPannelDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishPannelDo) Having(conds ...gen.Condition) IPublishPannelDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishPannelDo) Limit(limit int) IPublishPannelDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishPannelDo) Offset(offset int) IPublishPannelDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishPannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishPannelDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishPannelDo) Unscoped() IPublishPannelDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishPannelDo) Create(values ...*model.PublishPannel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishPannelDo) CreateInBatches(values []*model.PublishPannel, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishPannelDo) Save(values ...*model.PublishPannel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishPannelDo) First() (*model.PublishPannel, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishPannel), nil
	}
}

func (p publishPannelDo) Take() (*model.PublishPannel, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishPannel), nil
	}
}

func (p publishPannelDo) Last() (*model.PublishPannel, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishPannel), nil
	}
}

func (p publishPannelDo) Find() ([]*model.PublishPannel, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishPannel), err
}

func (p publishPannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishPannel, err error) {
	buf := make([]*model.PublishPannel, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishPannelDo) FindInBatches(result *[]*model.PublishPannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishPannelDo) Attrs(attrs ...field.AssignExpr) IPublishPannelDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishPannelDo) Assign(attrs ...field.AssignExpr) IPublishPannelDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishPannelDo) Joins(fields ...field.RelationField) IPublishPannelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishPannelDo) Preload(fields ...field.RelationField) IPublishPannelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishPannelDo) FirstOrInit() (*model.PublishPannel, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishPannel), nil
	}
}

func (p publishPannelDo) FirstOrCreate() (*model.PublishPannel, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishPannel), nil
	}
}

func (p publishPannelDo) FindByPage(offset int, limit int) (result []*model.PublishPannel, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishPannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishPannelDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishPannelDo) Delete(models ...*model.PublishPannel) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishPannelDo) withDO(do gen.Dao) *publishPannelDo {
	p.DO = *do.(*gen.DO)
	return p
}
