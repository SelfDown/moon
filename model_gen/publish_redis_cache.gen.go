// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishRedisCache(db *gorm.DB, opts ...gen.DOOption) publishRedisCache {
	_publishRedisCache := publishRedisCache{}

	_publishRedisCache.publishRedisCacheDo.UseDB(db, opts...)
	_publishRedisCache.publishRedisCacheDo.UseModel(&model.PublishRedisCache{})

	tableName := _publishRedisCache.publishRedisCacheDo.TableName()
	_publishRedisCache.ALL = field.NewAsterisk(tableName)
	_publishRedisCache.RedisCacheID = field.NewString(tableName, "redis_cache_id")
	_publishRedisCache.ReqID = field.NewString(tableName, "req_id")
	_publishRedisCache.Key = field.NewString(tableName, "key")
	_publishRedisCache.Description = field.NewString(tableName, "description")
	_publishRedisCache.CreateTime = field.NewString(tableName, "create_time")
	_publishRedisCache.Field = field.NewString(tableName, "field")
	_publishRedisCache.DutyUser = field.NewString(tableName, "duty_user")

	_publishRedisCache.fillFieldMap()

	return _publishRedisCache
}

type publishRedisCache struct {
	publishRedisCacheDo

	ALL          field.Asterisk
	RedisCacheID field.String
	ReqID        field.String
	Key          field.String
	Description  field.String
	CreateTime   field.String
	Field        field.String
	DutyUser     field.String

	fieldMap map[string]field.Expr
}

func (p publishRedisCache) Table(newTableName string) *publishRedisCache {
	p.publishRedisCacheDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishRedisCache) As(alias string) *publishRedisCache {
	p.publishRedisCacheDo.DO = *(p.publishRedisCacheDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishRedisCache) updateTableName(table string) *publishRedisCache {
	p.ALL = field.NewAsterisk(table)
	p.RedisCacheID = field.NewString(table, "redis_cache_id")
	p.ReqID = field.NewString(table, "req_id")
	p.Key = field.NewString(table, "key")
	p.Description = field.NewString(table, "description")
	p.CreateTime = field.NewString(table, "create_time")
	p.Field = field.NewString(table, "field")
	p.DutyUser = field.NewString(table, "duty_user")

	p.fillFieldMap()

	return p
}

func (p *publishRedisCache) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishRedisCache) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["redis_cache_id"] = p.RedisCacheID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["key"] = p.Key
	p.fieldMap["description"] = p.Description
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["field"] = p.Field
	p.fieldMap["duty_user"] = p.DutyUser
}

func (p publishRedisCache) clone(db *gorm.DB) publishRedisCache {
	p.publishRedisCacheDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishRedisCache) replaceDB(db *gorm.DB) publishRedisCache {
	p.publishRedisCacheDo.ReplaceDB(db)
	return p
}

type publishRedisCacheDo struct{ gen.DO }

type IPublishRedisCacheDo interface {
	gen.SubQuery
	Debug() IPublishRedisCacheDo
	WithContext(ctx context.Context) IPublishRedisCacheDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishRedisCacheDo
	WriteDB() IPublishRedisCacheDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishRedisCacheDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishRedisCacheDo
	Not(conds ...gen.Condition) IPublishRedisCacheDo
	Or(conds ...gen.Condition) IPublishRedisCacheDo
	Select(conds ...field.Expr) IPublishRedisCacheDo
	Where(conds ...gen.Condition) IPublishRedisCacheDo
	Order(conds ...field.Expr) IPublishRedisCacheDo
	Distinct(cols ...field.Expr) IPublishRedisCacheDo
	Omit(cols ...field.Expr) IPublishRedisCacheDo
	Join(table schema.Tabler, on ...field.Expr) IPublishRedisCacheDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishRedisCacheDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishRedisCacheDo
	Group(cols ...field.Expr) IPublishRedisCacheDo
	Having(conds ...gen.Condition) IPublishRedisCacheDo
	Limit(limit int) IPublishRedisCacheDo
	Offset(offset int) IPublishRedisCacheDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishRedisCacheDo
	Unscoped() IPublishRedisCacheDo
	Create(values ...*model.PublishRedisCache) error
	CreateInBatches(values []*model.PublishRedisCache, batchSize int) error
	Save(values ...*model.PublishRedisCache) error
	First() (*model.PublishRedisCache, error)
	Take() (*model.PublishRedisCache, error)
	Last() (*model.PublishRedisCache, error)
	Find() ([]*model.PublishRedisCache, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishRedisCache, err error)
	FindInBatches(result *[]*model.PublishRedisCache, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishRedisCache) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishRedisCacheDo
	Assign(attrs ...field.AssignExpr) IPublishRedisCacheDo
	Joins(fields ...field.RelationField) IPublishRedisCacheDo
	Preload(fields ...field.RelationField) IPublishRedisCacheDo
	FirstOrInit() (*model.PublishRedisCache, error)
	FirstOrCreate() (*model.PublishRedisCache, error)
	FindByPage(offset int, limit int) (result []*model.PublishRedisCache, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishRedisCacheDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishRedisCacheDo) Debug() IPublishRedisCacheDo {
	return p.withDO(p.DO.Debug())
}

func (p publishRedisCacheDo) WithContext(ctx context.Context) IPublishRedisCacheDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishRedisCacheDo) ReadDB() IPublishRedisCacheDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishRedisCacheDo) WriteDB() IPublishRedisCacheDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishRedisCacheDo) Session(config *gorm.Session) IPublishRedisCacheDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishRedisCacheDo) Clauses(conds ...clause.Expression) IPublishRedisCacheDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishRedisCacheDo) Returning(value interface{}, columns ...string) IPublishRedisCacheDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishRedisCacheDo) Not(conds ...gen.Condition) IPublishRedisCacheDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishRedisCacheDo) Or(conds ...gen.Condition) IPublishRedisCacheDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishRedisCacheDo) Select(conds ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishRedisCacheDo) Where(conds ...gen.Condition) IPublishRedisCacheDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishRedisCacheDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishRedisCacheDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishRedisCacheDo) Order(conds ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishRedisCacheDo) Distinct(cols ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishRedisCacheDo) Omit(cols ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishRedisCacheDo) Join(table schema.Tabler, on ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishRedisCacheDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishRedisCacheDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishRedisCacheDo) Group(cols ...field.Expr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishRedisCacheDo) Having(conds ...gen.Condition) IPublishRedisCacheDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishRedisCacheDo) Limit(limit int) IPublishRedisCacheDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishRedisCacheDo) Offset(offset int) IPublishRedisCacheDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishRedisCacheDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishRedisCacheDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishRedisCacheDo) Unscoped() IPublishRedisCacheDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishRedisCacheDo) Create(values ...*model.PublishRedisCache) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishRedisCacheDo) CreateInBatches(values []*model.PublishRedisCache, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishRedisCacheDo) Save(values ...*model.PublishRedisCache) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishRedisCacheDo) First() (*model.PublishRedisCache, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishRedisCache), nil
	}
}

func (p publishRedisCacheDo) Take() (*model.PublishRedisCache, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishRedisCache), nil
	}
}

func (p publishRedisCacheDo) Last() (*model.PublishRedisCache, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishRedisCache), nil
	}
}

func (p publishRedisCacheDo) Find() ([]*model.PublishRedisCache, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishRedisCache), err
}

func (p publishRedisCacheDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishRedisCache, err error) {
	buf := make([]*model.PublishRedisCache, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishRedisCacheDo) FindInBatches(result *[]*model.PublishRedisCache, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishRedisCacheDo) Attrs(attrs ...field.AssignExpr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishRedisCacheDo) Assign(attrs ...field.AssignExpr) IPublishRedisCacheDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishRedisCacheDo) Joins(fields ...field.RelationField) IPublishRedisCacheDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishRedisCacheDo) Preload(fields ...field.RelationField) IPublishRedisCacheDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishRedisCacheDo) FirstOrInit() (*model.PublishRedisCache, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishRedisCache), nil
	}
}

func (p publishRedisCacheDo) FirstOrCreate() (*model.PublishRedisCache, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishRedisCache), nil
	}
}

func (p publishRedisCacheDo) FindByPage(offset int, limit int) (result []*model.PublishRedisCache, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishRedisCacheDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishRedisCacheDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishRedisCacheDo) Delete(models ...*model.PublishRedisCache) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishRedisCacheDo) withDO(do gen.Dao) *publishRedisCacheDo {
	p.DO = *do.(*gen.DO)
	return p
}
