// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqDbscript(db *gorm.DB, opts ...gen.DOOption) publishReqDbscript {
	_publishReqDbscript := publishReqDbscript{}

	_publishReqDbscript.publishReqDbscriptDo.UseDB(db, opts...)
	_publishReqDbscript.publishReqDbscriptDo.UseModel(&model.PublishReqDbscript{})

	tableName := _publishReqDbscript.publishReqDbscriptDo.TableName()
	_publishReqDbscript.ALL = field.NewAsterisk(tableName)
	_publishReqDbscript.ReqDbscriptID = field.NewString(tableName, "req_dbscript_id")
	_publishReqDbscript.ReqID = field.NewString(tableName, "req_id")
	_publishReqDbscript.DbscriptEventID = field.NewString(tableName, "dbscript_event_id")
	_publishReqDbscript.IsSupply = field.NewString(tableName, "isSupply")
	_publishReqDbscript.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqDbscript.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqDbscript.Comments = field.NewString(tableName, "comments")
	_publishReqDbscript.SqlScriptID = field.NewString(tableName, "sql_script_id")
	_publishReqDbscript.OrderIndex = field.NewString(tableName, "order_index")

	_publishReqDbscript.fillFieldMap()

	return _publishReqDbscript
}

type publishReqDbscript struct {
	publishReqDbscriptDo

	ALL             field.Asterisk
	ReqDbscriptID   field.String
	ReqID           field.String
	DbscriptEventID field.String
	/*
		是否为开始集成测试后补录的脚本归档

		0 或空 表示 非补录
		1 表示补录
	*/
	IsSupply    field.String
	CreateTime  field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime  field.Time   // 记录修改时间（数据库自动写入）
	Comments    field.String // 备注说明
	SqlScriptID field.String
	OrderIndex  field.String

	fieldMap map[string]field.Expr
}

func (p publishReqDbscript) Table(newTableName string) *publishReqDbscript {
	p.publishReqDbscriptDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqDbscript) As(alias string) *publishReqDbscript {
	p.publishReqDbscriptDo.DO = *(p.publishReqDbscriptDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqDbscript) updateTableName(table string) *publishReqDbscript {
	p.ALL = field.NewAsterisk(table)
	p.ReqDbscriptID = field.NewString(table, "req_dbscript_id")
	p.ReqID = field.NewString(table, "req_id")
	p.DbscriptEventID = field.NewString(table, "dbscript_event_id")
	p.IsSupply = field.NewString(table, "isSupply")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")
	p.SqlScriptID = field.NewString(table, "sql_script_id")
	p.OrderIndex = field.NewString(table, "order_index")

	p.fillFieldMap()

	return p
}

func (p *publishReqDbscript) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqDbscript) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["req_dbscript_id"] = p.ReqDbscriptID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["dbscript_event_id"] = p.DbscriptEventID
	p.fieldMap["isSupply"] = p.IsSupply
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["sql_script_id"] = p.SqlScriptID
	p.fieldMap["order_index"] = p.OrderIndex
}

func (p publishReqDbscript) clone(db *gorm.DB) publishReqDbscript {
	p.publishReqDbscriptDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqDbscript) replaceDB(db *gorm.DB) publishReqDbscript {
	p.publishReqDbscriptDo.ReplaceDB(db)
	return p
}

type publishReqDbscriptDo struct{ gen.DO }

type IPublishReqDbscriptDo interface {
	gen.SubQuery
	Debug() IPublishReqDbscriptDo
	WithContext(ctx context.Context) IPublishReqDbscriptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqDbscriptDo
	WriteDB() IPublishReqDbscriptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqDbscriptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqDbscriptDo
	Not(conds ...gen.Condition) IPublishReqDbscriptDo
	Or(conds ...gen.Condition) IPublishReqDbscriptDo
	Select(conds ...field.Expr) IPublishReqDbscriptDo
	Where(conds ...gen.Condition) IPublishReqDbscriptDo
	Order(conds ...field.Expr) IPublishReqDbscriptDo
	Distinct(cols ...field.Expr) IPublishReqDbscriptDo
	Omit(cols ...field.Expr) IPublishReqDbscriptDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqDbscriptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqDbscriptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqDbscriptDo
	Group(cols ...field.Expr) IPublishReqDbscriptDo
	Having(conds ...gen.Condition) IPublishReqDbscriptDo
	Limit(limit int) IPublishReqDbscriptDo
	Offset(offset int) IPublishReqDbscriptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqDbscriptDo
	Unscoped() IPublishReqDbscriptDo
	Create(values ...*model.PublishReqDbscript) error
	CreateInBatches(values []*model.PublishReqDbscript, batchSize int) error
	Save(values ...*model.PublishReqDbscript) error
	First() (*model.PublishReqDbscript, error)
	Take() (*model.PublishReqDbscript, error)
	Last() (*model.PublishReqDbscript, error)
	Find() ([]*model.PublishReqDbscript, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqDbscript, err error)
	FindInBatches(result *[]*model.PublishReqDbscript, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqDbscript) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqDbscriptDo
	Assign(attrs ...field.AssignExpr) IPublishReqDbscriptDo
	Joins(fields ...field.RelationField) IPublishReqDbscriptDo
	Preload(fields ...field.RelationField) IPublishReqDbscriptDo
	FirstOrInit() (*model.PublishReqDbscript, error)
	FirstOrCreate() (*model.PublishReqDbscript, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqDbscript, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqDbscriptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqDbscriptDo) Debug() IPublishReqDbscriptDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqDbscriptDo) WithContext(ctx context.Context) IPublishReqDbscriptDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqDbscriptDo) ReadDB() IPublishReqDbscriptDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqDbscriptDo) WriteDB() IPublishReqDbscriptDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqDbscriptDo) Session(config *gorm.Session) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqDbscriptDo) Clauses(conds ...clause.Expression) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqDbscriptDo) Returning(value interface{}, columns ...string) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqDbscriptDo) Not(conds ...gen.Condition) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqDbscriptDo) Or(conds ...gen.Condition) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqDbscriptDo) Select(conds ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqDbscriptDo) Where(conds ...gen.Condition) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqDbscriptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqDbscriptDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqDbscriptDo) Order(conds ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqDbscriptDo) Distinct(cols ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqDbscriptDo) Omit(cols ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqDbscriptDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqDbscriptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqDbscriptDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqDbscriptDo) Group(cols ...field.Expr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqDbscriptDo) Having(conds ...gen.Condition) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqDbscriptDo) Limit(limit int) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqDbscriptDo) Offset(offset int) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqDbscriptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqDbscriptDo) Unscoped() IPublishReqDbscriptDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqDbscriptDo) Create(values ...*model.PublishReqDbscript) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqDbscriptDo) CreateInBatches(values []*model.PublishReqDbscript, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqDbscriptDo) Save(values ...*model.PublishReqDbscript) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqDbscriptDo) First() (*model.PublishReqDbscript, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDbscript), nil
	}
}

func (p publishReqDbscriptDo) Take() (*model.PublishReqDbscript, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDbscript), nil
	}
}

func (p publishReqDbscriptDo) Last() (*model.PublishReqDbscript, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDbscript), nil
	}
}

func (p publishReqDbscriptDo) Find() ([]*model.PublishReqDbscript, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqDbscript), err
}

func (p publishReqDbscriptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqDbscript, err error) {
	buf := make([]*model.PublishReqDbscript, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqDbscriptDo) FindInBatches(result *[]*model.PublishReqDbscript, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqDbscriptDo) Attrs(attrs ...field.AssignExpr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqDbscriptDo) Assign(attrs ...field.AssignExpr) IPublishReqDbscriptDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqDbscriptDo) Joins(fields ...field.RelationField) IPublishReqDbscriptDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqDbscriptDo) Preload(fields ...field.RelationField) IPublishReqDbscriptDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqDbscriptDo) FirstOrInit() (*model.PublishReqDbscript, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDbscript), nil
	}
}

func (p publishReqDbscriptDo) FirstOrCreate() (*model.PublishReqDbscript, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDbscript), nil
	}
}

func (p publishReqDbscriptDo) FindByPage(offset int, limit int) (result []*model.PublishReqDbscript, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqDbscriptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqDbscriptDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqDbscriptDo) Delete(models ...*model.PublishReqDbscript) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqDbscriptDo) withDO(do gen.Dao) *publishReqDbscriptDo {
	p.DO = *do.(*gen.DO)
	return p
}
