// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqDeployEvent(db *gorm.DB, opts ...gen.DOOption) publishReqDeployEvent {
	_publishReqDeployEvent := publishReqDeployEvent{}

	_publishReqDeployEvent.publishReqDeployEventDo.UseDB(db, opts...)
	_publishReqDeployEvent.publishReqDeployEventDo.UseModel(&model.PublishReqDeployEvent{})

	tableName := _publishReqDeployEvent.publishReqDeployEventDo.TableName()
	_publishReqDeployEvent.ALL = field.NewAsterisk(tableName)
	_publishReqDeployEvent.ReqRelDepeventID = field.NewString(tableName, "req_rel_depevent_id")
	_publishReqDeployEvent.ReqID = field.NewString(tableName, "req_id")
	_publishReqDeployEvent.DepEventID = field.NewString(tableName, "dep_event_id")
	_publishReqDeployEvent.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqDeployEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqDeployEvent.Comments = field.NewString(tableName, "comments")

	_publishReqDeployEvent.fillFieldMap()

	return _publishReqDeployEvent
}

type publishReqDeployEvent struct {
	publishReqDeployEventDo

	ALL              field.Asterisk
	ReqRelDepeventID field.String
	ReqID            field.String // 确认单申请ID
	DepEventID       field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (p publishReqDeployEvent) Table(newTableName string) *publishReqDeployEvent {
	p.publishReqDeployEventDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqDeployEvent) As(alias string) *publishReqDeployEvent {
	p.publishReqDeployEventDo.DO = *(p.publishReqDeployEventDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqDeployEvent) updateTableName(table string) *publishReqDeployEvent {
	p.ALL = field.NewAsterisk(table)
	p.ReqRelDepeventID = field.NewString(table, "req_rel_depevent_id")
	p.ReqID = field.NewString(table, "req_id")
	p.DepEventID = field.NewString(table, "dep_event_id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")

	p.fillFieldMap()

	return p
}

func (p *publishReqDeployEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqDeployEvent) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["req_rel_depevent_id"] = p.ReqRelDepeventID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["dep_event_id"] = p.DepEventID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
}

func (p publishReqDeployEvent) clone(db *gorm.DB) publishReqDeployEvent {
	p.publishReqDeployEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqDeployEvent) replaceDB(db *gorm.DB) publishReqDeployEvent {
	p.publishReqDeployEventDo.ReplaceDB(db)
	return p
}

type publishReqDeployEventDo struct{ gen.DO }

type IPublishReqDeployEventDo interface {
	gen.SubQuery
	Debug() IPublishReqDeployEventDo
	WithContext(ctx context.Context) IPublishReqDeployEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqDeployEventDo
	WriteDB() IPublishReqDeployEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqDeployEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqDeployEventDo
	Not(conds ...gen.Condition) IPublishReqDeployEventDo
	Or(conds ...gen.Condition) IPublishReqDeployEventDo
	Select(conds ...field.Expr) IPublishReqDeployEventDo
	Where(conds ...gen.Condition) IPublishReqDeployEventDo
	Order(conds ...field.Expr) IPublishReqDeployEventDo
	Distinct(cols ...field.Expr) IPublishReqDeployEventDo
	Omit(cols ...field.Expr) IPublishReqDeployEventDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqDeployEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqDeployEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqDeployEventDo
	Group(cols ...field.Expr) IPublishReqDeployEventDo
	Having(conds ...gen.Condition) IPublishReqDeployEventDo
	Limit(limit int) IPublishReqDeployEventDo
	Offset(offset int) IPublishReqDeployEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqDeployEventDo
	Unscoped() IPublishReqDeployEventDo
	Create(values ...*model.PublishReqDeployEvent) error
	CreateInBatches(values []*model.PublishReqDeployEvent, batchSize int) error
	Save(values ...*model.PublishReqDeployEvent) error
	First() (*model.PublishReqDeployEvent, error)
	Take() (*model.PublishReqDeployEvent, error)
	Last() (*model.PublishReqDeployEvent, error)
	Find() ([]*model.PublishReqDeployEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqDeployEvent, err error)
	FindInBatches(result *[]*model.PublishReqDeployEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqDeployEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqDeployEventDo
	Assign(attrs ...field.AssignExpr) IPublishReqDeployEventDo
	Joins(fields ...field.RelationField) IPublishReqDeployEventDo
	Preload(fields ...field.RelationField) IPublishReqDeployEventDo
	FirstOrInit() (*model.PublishReqDeployEvent, error)
	FirstOrCreate() (*model.PublishReqDeployEvent, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqDeployEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqDeployEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqDeployEventDo) Debug() IPublishReqDeployEventDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqDeployEventDo) WithContext(ctx context.Context) IPublishReqDeployEventDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqDeployEventDo) ReadDB() IPublishReqDeployEventDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqDeployEventDo) WriteDB() IPublishReqDeployEventDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqDeployEventDo) Session(config *gorm.Session) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqDeployEventDo) Clauses(conds ...clause.Expression) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqDeployEventDo) Returning(value interface{}, columns ...string) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqDeployEventDo) Not(conds ...gen.Condition) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqDeployEventDo) Or(conds ...gen.Condition) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqDeployEventDo) Select(conds ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqDeployEventDo) Where(conds ...gen.Condition) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqDeployEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqDeployEventDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqDeployEventDo) Order(conds ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqDeployEventDo) Distinct(cols ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqDeployEventDo) Omit(cols ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqDeployEventDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqDeployEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqDeployEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqDeployEventDo) Group(cols ...field.Expr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqDeployEventDo) Having(conds ...gen.Condition) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqDeployEventDo) Limit(limit int) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqDeployEventDo) Offset(offset int) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqDeployEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqDeployEventDo) Unscoped() IPublishReqDeployEventDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqDeployEventDo) Create(values ...*model.PublishReqDeployEvent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqDeployEventDo) CreateInBatches(values []*model.PublishReqDeployEvent, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqDeployEventDo) Save(values ...*model.PublishReqDeployEvent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqDeployEventDo) First() (*model.PublishReqDeployEvent, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDeployEvent), nil
	}
}

func (p publishReqDeployEventDo) Take() (*model.PublishReqDeployEvent, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDeployEvent), nil
	}
}

func (p publishReqDeployEventDo) Last() (*model.PublishReqDeployEvent, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDeployEvent), nil
	}
}

func (p publishReqDeployEventDo) Find() ([]*model.PublishReqDeployEvent, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqDeployEvent), err
}

func (p publishReqDeployEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqDeployEvent, err error) {
	buf := make([]*model.PublishReqDeployEvent, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqDeployEventDo) FindInBatches(result *[]*model.PublishReqDeployEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqDeployEventDo) Attrs(attrs ...field.AssignExpr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqDeployEventDo) Assign(attrs ...field.AssignExpr) IPublishReqDeployEventDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqDeployEventDo) Joins(fields ...field.RelationField) IPublishReqDeployEventDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqDeployEventDo) Preload(fields ...field.RelationField) IPublishReqDeployEventDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqDeployEventDo) FirstOrInit() (*model.PublishReqDeployEvent, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDeployEvent), nil
	}
}

func (p publishReqDeployEventDo) FirstOrCreate() (*model.PublishReqDeployEvent, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDeployEvent), nil
	}
}

func (p publishReqDeployEventDo) FindByPage(offset int, limit int) (result []*model.PublishReqDeployEvent, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqDeployEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqDeployEventDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqDeployEventDo) Delete(models ...*model.PublishReqDeployEvent) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqDeployEventDo) withDO(do gen.Dao) *publishReqDeployEventDo {
	p.DO = *do.(*gen.DO)
	return p
}
