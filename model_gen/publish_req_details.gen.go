// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqDetails(db *gorm.DB, opts ...gen.DOOption) publishReqDetails {
	_publishReqDetails := publishReqDetails{}

	_publishReqDetails.publishReqDetailsDo.UseDB(db, opts...)
	_publishReqDetails.publishReqDetailsDo.UseModel(&model.PublishReqDetails{})

	tableName := _publishReqDetails.publishReqDetailsDo.TableName()
	_publishReqDetails.ALL = field.NewAsterisk(tableName)
	_publishReqDetails.ID = field.NewInt32(tableName, "id")
	_publishReqDetails.ReqDetailsID = field.NewString(tableName, "req_details_id")
	_publishReqDetails.ReqID = field.NewString(tableName, "req_id")
	_publishReqDetails.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_publishReqDetails.WarGroupid = field.NewString(tableName, "war_groupid")
	_publishReqDetails.WarVersion = field.NewString(tableName, "war_version")
	_publishReqDetails.WarComboboxIndex = field.NewString(tableName, "war_combobox_index")
	_publishReqDetails.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqDetails.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqDetails.Comments = field.NewString(tableName, "comments")
	_publishReqDetails.RollbackVersion = field.NewString(tableName, "rollback_version")
	_publishReqDetails.User = field.NewString(tableName, "user")
	_publishReqDetails.CommonIsVersion = field.NewString(tableName, "common_is_version")

	_publishReqDetails.fillFieldMap()

	return _publishReqDetails
}

type publishReqDetails struct {
	publishReqDetailsDo

	ALL              field.Asterisk
	ID               field.Int32
	ReqDetailsID     field.String // 主键
	ReqID            field.String // 确认单申请ID
	WarArtifactid    field.String
	WarGroupid       field.String
	WarVersion       field.String
	WarComboboxIndex field.String // 下拉框包的控件索引ID
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明
	RollbackVersion  field.String // 回退版本
	User             field.String
	CommonIsVersion  field.String // common是否版本分支

	fieldMap map[string]field.Expr
}

func (p publishReqDetails) Table(newTableName string) *publishReqDetails {
	p.publishReqDetailsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqDetails) As(alias string) *publishReqDetails {
	p.publishReqDetailsDo.DO = *(p.publishReqDetailsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqDetails) updateTableName(table string) *publishReqDetails {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.ReqDetailsID = field.NewString(table, "req_details_id")
	p.ReqID = field.NewString(table, "req_id")
	p.WarArtifactid = field.NewString(table, "war_artifactid")
	p.WarGroupid = field.NewString(table, "war_groupid")
	p.WarVersion = field.NewString(table, "war_version")
	p.WarComboboxIndex = field.NewString(table, "war_combobox_index")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")
	p.RollbackVersion = field.NewString(table, "rollback_version")
	p.User = field.NewString(table, "user")
	p.CommonIsVersion = field.NewString(table, "common_is_version")

	p.fillFieldMap()

	return p
}

func (p *publishReqDetails) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqDetails) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["req_details_id"] = p.ReqDetailsID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["war_artifactid"] = p.WarArtifactid
	p.fieldMap["war_groupid"] = p.WarGroupid
	p.fieldMap["war_version"] = p.WarVersion
	p.fieldMap["war_combobox_index"] = p.WarComboboxIndex
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["rollback_version"] = p.RollbackVersion
	p.fieldMap["user"] = p.User
	p.fieldMap["common_is_version"] = p.CommonIsVersion
}

func (p publishReqDetails) clone(db *gorm.DB) publishReqDetails {
	p.publishReqDetailsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqDetails) replaceDB(db *gorm.DB) publishReqDetails {
	p.publishReqDetailsDo.ReplaceDB(db)
	return p
}

type publishReqDetailsDo struct{ gen.DO }

type IPublishReqDetailsDo interface {
	gen.SubQuery
	Debug() IPublishReqDetailsDo
	WithContext(ctx context.Context) IPublishReqDetailsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqDetailsDo
	WriteDB() IPublishReqDetailsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqDetailsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqDetailsDo
	Not(conds ...gen.Condition) IPublishReqDetailsDo
	Or(conds ...gen.Condition) IPublishReqDetailsDo
	Select(conds ...field.Expr) IPublishReqDetailsDo
	Where(conds ...gen.Condition) IPublishReqDetailsDo
	Order(conds ...field.Expr) IPublishReqDetailsDo
	Distinct(cols ...field.Expr) IPublishReqDetailsDo
	Omit(cols ...field.Expr) IPublishReqDetailsDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqDetailsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqDetailsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqDetailsDo
	Group(cols ...field.Expr) IPublishReqDetailsDo
	Having(conds ...gen.Condition) IPublishReqDetailsDo
	Limit(limit int) IPublishReqDetailsDo
	Offset(offset int) IPublishReqDetailsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqDetailsDo
	Unscoped() IPublishReqDetailsDo
	Create(values ...*model.PublishReqDetails) error
	CreateInBatches(values []*model.PublishReqDetails, batchSize int) error
	Save(values ...*model.PublishReqDetails) error
	First() (*model.PublishReqDetails, error)
	Take() (*model.PublishReqDetails, error)
	Last() (*model.PublishReqDetails, error)
	Find() ([]*model.PublishReqDetails, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqDetails, err error)
	FindInBatches(result *[]*model.PublishReqDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqDetails) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqDetailsDo
	Assign(attrs ...field.AssignExpr) IPublishReqDetailsDo
	Joins(fields ...field.RelationField) IPublishReqDetailsDo
	Preload(fields ...field.RelationField) IPublishReqDetailsDo
	FirstOrInit() (*model.PublishReqDetails, error)
	FirstOrCreate() (*model.PublishReqDetails, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqDetails, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqDetailsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqDetailsDo) Debug() IPublishReqDetailsDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqDetailsDo) WithContext(ctx context.Context) IPublishReqDetailsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqDetailsDo) ReadDB() IPublishReqDetailsDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqDetailsDo) WriteDB() IPublishReqDetailsDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqDetailsDo) Session(config *gorm.Session) IPublishReqDetailsDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqDetailsDo) Clauses(conds ...clause.Expression) IPublishReqDetailsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqDetailsDo) Returning(value interface{}, columns ...string) IPublishReqDetailsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqDetailsDo) Not(conds ...gen.Condition) IPublishReqDetailsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqDetailsDo) Or(conds ...gen.Condition) IPublishReqDetailsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqDetailsDo) Select(conds ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqDetailsDo) Where(conds ...gen.Condition) IPublishReqDetailsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqDetailsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqDetailsDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqDetailsDo) Order(conds ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqDetailsDo) Distinct(cols ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqDetailsDo) Omit(cols ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqDetailsDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqDetailsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqDetailsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqDetailsDo) Group(cols ...field.Expr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqDetailsDo) Having(conds ...gen.Condition) IPublishReqDetailsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqDetailsDo) Limit(limit int) IPublishReqDetailsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqDetailsDo) Offset(offset int) IPublishReqDetailsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqDetailsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqDetailsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqDetailsDo) Unscoped() IPublishReqDetailsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqDetailsDo) Create(values ...*model.PublishReqDetails) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqDetailsDo) CreateInBatches(values []*model.PublishReqDetails, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqDetailsDo) Save(values ...*model.PublishReqDetails) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqDetailsDo) First() (*model.PublishReqDetails, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDetails), nil
	}
}

func (p publishReqDetailsDo) Take() (*model.PublishReqDetails, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDetails), nil
	}
}

func (p publishReqDetailsDo) Last() (*model.PublishReqDetails, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDetails), nil
	}
}

func (p publishReqDetailsDo) Find() ([]*model.PublishReqDetails, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqDetails), err
}

func (p publishReqDetailsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqDetails, err error) {
	buf := make([]*model.PublishReqDetails, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqDetailsDo) FindInBatches(result *[]*model.PublishReqDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqDetailsDo) Attrs(attrs ...field.AssignExpr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqDetailsDo) Assign(attrs ...field.AssignExpr) IPublishReqDetailsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqDetailsDo) Joins(fields ...field.RelationField) IPublishReqDetailsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqDetailsDo) Preload(fields ...field.RelationField) IPublishReqDetailsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqDetailsDo) FirstOrInit() (*model.PublishReqDetails, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDetails), nil
	}
}

func (p publishReqDetailsDo) FirstOrCreate() (*model.PublishReqDetails, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqDetails), nil
	}
}

func (p publishReqDetailsDo) FindByPage(offset int, limit int) (result []*model.PublishReqDetails, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqDetailsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqDetailsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqDetailsDo) Delete(models ...*model.PublishReqDetails) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqDetailsDo) withDO(do gen.Dao) *publishReqDetailsDo {
	p.DO = *do.(*gen.DO)
	return p
}
