// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqMenuScript(db *gorm.DB, opts ...gen.DOOption) publishReqMenuScript {
	_publishReqMenuScript := publishReqMenuScript{}

	_publishReqMenuScript.publishReqMenuScriptDo.UseDB(db, opts...)
	_publishReqMenuScript.publishReqMenuScriptDo.UseModel(&model.PublishReqMenuScript{})

	tableName := _publishReqMenuScript.publishReqMenuScriptDo.TableName()
	_publishReqMenuScript.ALL = field.NewAsterisk(tableName)
	_publishReqMenuScript.ReqMenuScriptID = field.NewString(tableName, "req_menu_script_id")
	_publishReqMenuScript.ReqID = field.NewString(tableName, "req_id")
	_publishReqMenuScript.Name = field.NewString(tableName, "name")
	_publishReqMenuScript.FileName = field.NewString(tableName, "file_name")
	_publishReqMenuScript.Data = field.NewBytes(tableName, "data")
	_publishReqMenuScript.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqMenuScript.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqMenuScript.Comments = field.NewString(tableName, "comments")
	_publishReqMenuScript.CreateUser = field.NewString(tableName, "create_user")

	_publishReqMenuScript.fillFieldMap()

	return _publishReqMenuScript
}

type publishReqMenuScript struct {
	publishReqMenuScriptDo

	ALL             field.Asterisk
	ReqMenuScriptID field.String
	ReqID           field.String
	Name            field.String
	FileName        field.String
	Data            field.Bytes  // 菜单栏脚本
	CreateTime      field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time   // 记录修改时间（数据库自动写入）
	Comments        field.String // 备注说明
	CreateUser      field.String

	fieldMap map[string]field.Expr
}

func (p publishReqMenuScript) Table(newTableName string) *publishReqMenuScript {
	p.publishReqMenuScriptDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqMenuScript) As(alias string) *publishReqMenuScript {
	p.publishReqMenuScriptDo.DO = *(p.publishReqMenuScriptDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqMenuScript) updateTableName(table string) *publishReqMenuScript {
	p.ALL = field.NewAsterisk(table)
	p.ReqMenuScriptID = field.NewString(table, "req_menu_script_id")
	p.ReqID = field.NewString(table, "req_id")
	p.Name = field.NewString(table, "name")
	p.FileName = field.NewString(table, "file_name")
	p.Data = field.NewBytes(table, "data")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")
	p.CreateUser = field.NewString(table, "create_user")

	p.fillFieldMap()

	return p
}

func (p *publishReqMenuScript) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqMenuScript) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["req_menu_script_id"] = p.ReqMenuScriptID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["name"] = p.Name
	p.fieldMap["file_name"] = p.FileName
	p.fieldMap["data"] = p.Data
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["create_user"] = p.CreateUser
}

func (p publishReqMenuScript) clone(db *gorm.DB) publishReqMenuScript {
	p.publishReqMenuScriptDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqMenuScript) replaceDB(db *gorm.DB) publishReqMenuScript {
	p.publishReqMenuScriptDo.ReplaceDB(db)
	return p
}

type publishReqMenuScriptDo struct{ gen.DO }

type IPublishReqMenuScriptDo interface {
	gen.SubQuery
	Debug() IPublishReqMenuScriptDo
	WithContext(ctx context.Context) IPublishReqMenuScriptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqMenuScriptDo
	WriteDB() IPublishReqMenuScriptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqMenuScriptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqMenuScriptDo
	Not(conds ...gen.Condition) IPublishReqMenuScriptDo
	Or(conds ...gen.Condition) IPublishReqMenuScriptDo
	Select(conds ...field.Expr) IPublishReqMenuScriptDo
	Where(conds ...gen.Condition) IPublishReqMenuScriptDo
	Order(conds ...field.Expr) IPublishReqMenuScriptDo
	Distinct(cols ...field.Expr) IPublishReqMenuScriptDo
	Omit(cols ...field.Expr) IPublishReqMenuScriptDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqMenuScriptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqMenuScriptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqMenuScriptDo
	Group(cols ...field.Expr) IPublishReqMenuScriptDo
	Having(conds ...gen.Condition) IPublishReqMenuScriptDo
	Limit(limit int) IPublishReqMenuScriptDo
	Offset(offset int) IPublishReqMenuScriptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqMenuScriptDo
	Unscoped() IPublishReqMenuScriptDo
	Create(values ...*model.PublishReqMenuScript) error
	CreateInBatches(values []*model.PublishReqMenuScript, batchSize int) error
	Save(values ...*model.PublishReqMenuScript) error
	First() (*model.PublishReqMenuScript, error)
	Take() (*model.PublishReqMenuScript, error)
	Last() (*model.PublishReqMenuScript, error)
	Find() ([]*model.PublishReqMenuScript, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqMenuScript, err error)
	FindInBatches(result *[]*model.PublishReqMenuScript, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqMenuScript) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqMenuScriptDo
	Assign(attrs ...field.AssignExpr) IPublishReqMenuScriptDo
	Joins(fields ...field.RelationField) IPublishReqMenuScriptDo
	Preload(fields ...field.RelationField) IPublishReqMenuScriptDo
	FirstOrInit() (*model.PublishReqMenuScript, error)
	FirstOrCreate() (*model.PublishReqMenuScript, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqMenuScript, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqMenuScriptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqMenuScriptDo) Debug() IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqMenuScriptDo) WithContext(ctx context.Context) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqMenuScriptDo) ReadDB() IPublishReqMenuScriptDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqMenuScriptDo) WriteDB() IPublishReqMenuScriptDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqMenuScriptDo) Session(config *gorm.Session) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqMenuScriptDo) Clauses(conds ...clause.Expression) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqMenuScriptDo) Returning(value interface{}, columns ...string) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqMenuScriptDo) Not(conds ...gen.Condition) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqMenuScriptDo) Or(conds ...gen.Condition) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqMenuScriptDo) Select(conds ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqMenuScriptDo) Where(conds ...gen.Condition) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqMenuScriptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqMenuScriptDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqMenuScriptDo) Order(conds ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqMenuScriptDo) Distinct(cols ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqMenuScriptDo) Omit(cols ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqMenuScriptDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqMenuScriptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqMenuScriptDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqMenuScriptDo) Group(cols ...field.Expr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqMenuScriptDo) Having(conds ...gen.Condition) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqMenuScriptDo) Limit(limit int) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqMenuScriptDo) Offset(offset int) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqMenuScriptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqMenuScriptDo) Unscoped() IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqMenuScriptDo) Create(values ...*model.PublishReqMenuScript) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqMenuScriptDo) CreateInBatches(values []*model.PublishReqMenuScript, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqMenuScriptDo) Save(values ...*model.PublishReqMenuScript) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqMenuScriptDo) First() (*model.PublishReqMenuScript, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqMenuScript), nil
	}
}

func (p publishReqMenuScriptDo) Take() (*model.PublishReqMenuScript, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqMenuScript), nil
	}
}

func (p publishReqMenuScriptDo) Last() (*model.PublishReqMenuScript, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqMenuScript), nil
	}
}

func (p publishReqMenuScriptDo) Find() ([]*model.PublishReqMenuScript, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqMenuScript), err
}

func (p publishReqMenuScriptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqMenuScript, err error) {
	buf := make([]*model.PublishReqMenuScript, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqMenuScriptDo) FindInBatches(result *[]*model.PublishReqMenuScript, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqMenuScriptDo) Attrs(attrs ...field.AssignExpr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqMenuScriptDo) Assign(attrs ...field.AssignExpr) IPublishReqMenuScriptDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqMenuScriptDo) Joins(fields ...field.RelationField) IPublishReqMenuScriptDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqMenuScriptDo) Preload(fields ...field.RelationField) IPublishReqMenuScriptDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqMenuScriptDo) FirstOrInit() (*model.PublishReqMenuScript, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqMenuScript), nil
	}
}

func (p publishReqMenuScriptDo) FirstOrCreate() (*model.PublishReqMenuScript, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqMenuScript), nil
	}
}

func (p publishReqMenuScriptDo) FindByPage(offset int, limit int) (result []*model.PublishReqMenuScript, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqMenuScriptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqMenuScriptDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqMenuScriptDo) Delete(models ...*model.PublishReqMenuScript) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqMenuScriptDo) withDO(do gen.Dao) *publishReqMenuScriptDo {
	p.DO = *do.(*gen.DO)
	return p
}
