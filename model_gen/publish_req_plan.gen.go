// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqPlan(db *gorm.DB, opts ...gen.DOOption) publishReqPlan {
	_publishReqPlan := publishReqPlan{}

	_publishReqPlan.publishReqPlanDo.UseDB(db, opts...)
	_publishReqPlan.publishReqPlanDo.UseModel(&model.PublishReqPlan{})

	tableName := _publishReqPlan.publishReqPlanDo.TableName()
	_publishReqPlan.ALL = field.NewAsterisk(tableName)
	_publishReqPlan.PlanID = field.NewString(tableName, "plan_id")
	_publishReqPlan.ReqSummary = field.NewString(tableName, "req_summary")
	_publishReqPlan.PublishVersion = field.NewString(tableName, "publish_version")
	_publishReqPlan.ReqStatu = field.NewString(tableName, "req_statu")
	_publishReqPlan.DevUser = field.NewString(tableName, "dev_user")
	_publishReqPlan.TestUser = field.NewString(tableName, "test_user")
	_publishReqPlan.CreateUser = field.NewString(tableName, "create_user")
	_publishReqPlan.DevExpectFinishTime = field.NewString(tableName, "dev_expect_finish_time")
	_publishReqPlan.TestExpectFinishTime = field.NewString(tableName, "test_expect_finish_time")
	_publishReqPlan.PlanPublishTime = field.NewTime(tableName, "plan_publish_time")
	_publishReqPlan.SysProjectID = field.NewString(tableName, "sys_project_id")
	_publishReqPlan.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqPlan.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqPlan.DutyTeam = field.NewString(tableName, "duty_team")
	_publishReqPlan.Comments = field.NewString(tableName, "comments")
	_publishReqPlan.VersionType = field.NewString(tableName, "version_type")
	_publishReqPlan.IsDelete = field.NewString(tableName, "is_delete")
	_publishReqPlan.ModifyUser = field.NewString(tableName, "modify_user")
	_publishReqPlan.PublishReqID = field.NewString(tableName, "publish_req_id")
	_publishReqPlan.IsProduct = field.NewString(tableName, "is_product")
	_publishReqPlan.ProductFrom = field.NewString(tableName, "product_from")

	_publishReqPlan.fillFieldMap()

	return _publishReqPlan
}

type publishReqPlan struct {
	publishReqPlanDo

	ALL                  field.Asterisk
	PlanID               field.String
	ReqSummary           field.String // 标题
	PublishVersion       field.String
	ReqStatu             field.String
	DevUser              field.String
	TestUser             field.String
	CreateUser           field.String
	DevExpectFinishTime  field.String
	TestExpectFinishTime field.String
	PlanPublishTime      field.Time
	SysProjectID         field.String
	CreateTime           field.Time // 记录创建时间（数据库自动写入）
	ModifyTime           field.Time // 记录修改时间（数据库自动写入）
	DutyTeam             field.String
	Comments             field.String // 备注说明
	VersionType          field.String
	IsDelete             field.String // 是否删除
	ModifyUser           field.String
	PublishReqID         field.String
	IsProduct            field.String
	ProductFrom          field.String

	fieldMap map[string]field.Expr
}

func (p publishReqPlan) Table(newTableName string) *publishReqPlan {
	p.publishReqPlanDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqPlan) As(alias string) *publishReqPlan {
	p.publishReqPlanDo.DO = *(p.publishReqPlanDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqPlan) updateTableName(table string) *publishReqPlan {
	p.ALL = field.NewAsterisk(table)
	p.PlanID = field.NewString(table, "plan_id")
	p.ReqSummary = field.NewString(table, "req_summary")
	p.PublishVersion = field.NewString(table, "publish_version")
	p.ReqStatu = field.NewString(table, "req_statu")
	p.DevUser = field.NewString(table, "dev_user")
	p.TestUser = field.NewString(table, "test_user")
	p.CreateUser = field.NewString(table, "create_user")
	p.DevExpectFinishTime = field.NewString(table, "dev_expect_finish_time")
	p.TestExpectFinishTime = field.NewString(table, "test_expect_finish_time")
	p.PlanPublishTime = field.NewTime(table, "plan_publish_time")
	p.SysProjectID = field.NewString(table, "sys_project_id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.DutyTeam = field.NewString(table, "duty_team")
	p.Comments = field.NewString(table, "comments")
	p.VersionType = field.NewString(table, "version_type")
	p.IsDelete = field.NewString(table, "is_delete")
	p.ModifyUser = field.NewString(table, "modify_user")
	p.PublishReqID = field.NewString(table, "publish_req_id")
	p.IsProduct = field.NewString(table, "is_product")
	p.ProductFrom = field.NewString(table, "product_from")

	p.fillFieldMap()

	return p
}

func (p *publishReqPlan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqPlan) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 21)
	p.fieldMap["plan_id"] = p.PlanID
	p.fieldMap["req_summary"] = p.ReqSummary
	p.fieldMap["publish_version"] = p.PublishVersion
	p.fieldMap["req_statu"] = p.ReqStatu
	p.fieldMap["dev_user"] = p.DevUser
	p.fieldMap["test_user"] = p.TestUser
	p.fieldMap["create_user"] = p.CreateUser
	p.fieldMap["dev_expect_finish_time"] = p.DevExpectFinishTime
	p.fieldMap["test_expect_finish_time"] = p.TestExpectFinishTime
	p.fieldMap["plan_publish_time"] = p.PlanPublishTime
	p.fieldMap["sys_project_id"] = p.SysProjectID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["duty_team"] = p.DutyTeam
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["version_type"] = p.VersionType
	p.fieldMap["is_delete"] = p.IsDelete
	p.fieldMap["modify_user"] = p.ModifyUser
	p.fieldMap["publish_req_id"] = p.PublishReqID
	p.fieldMap["is_product"] = p.IsProduct
	p.fieldMap["product_from"] = p.ProductFrom
}

func (p publishReqPlan) clone(db *gorm.DB) publishReqPlan {
	p.publishReqPlanDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqPlan) replaceDB(db *gorm.DB) publishReqPlan {
	p.publishReqPlanDo.ReplaceDB(db)
	return p
}

type publishReqPlanDo struct{ gen.DO }

type IPublishReqPlanDo interface {
	gen.SubQuery
	Debug() IPublishReqPlanDo
	WithContext(ctx context.Context) IPublishReqPlanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqPlanDo
	WriteDB() IPublishReqPlanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqPlanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqPlanDo
	Not(conds ...gen.Condition) IPublishReqPlanDo
	Or(conds ...gen.Condition) IPublishReqPlanDo
	Select(conds ...field.Expr) IPublishReqPlanDo
	Where(conds ...gen.Condition) IPublishReqPlanDo
	Order(conds ...field.Expr) IPublishReqPlanDo
	Distinct(cols ...field.Expr) IPublishReqPlanDo
	Omit(cols ...field.Expr) IPublishReqPlanDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqPlanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqPlanDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqPlanDo
	Group(cols ...field.Expr) IPublishReqPlanDo
	Having(conds ...gen.Condition) IPublishReqPlanDo
	Limit(limit int) IPublishReqPlanDo
	Offset(offset int) IPublishReqPlanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqPlanDo
	Unscoped() IPublishReqPlanDo
	Create(values ...*model.PublishReqPlan) error
	CreateInBatches(values []*model.PublishReqPlan, batchSize int) error
	Save(values ...*model.PublishReqPlan) error
	First() (*model.PublishReqPlan, error)
	Take() (*model.PublishReqPlan, error)
	Last() (*model.PublishReqPlan, error)
	Find() ([]*model.PublishReqPlan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqPlan, err error)
	FindInBatches(result *[]*model.PublishReqPlan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqPlan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqPlanDo
	Assign(attrs ...field.AssignExpr) IPublishReqPlanDo
	Joins(fields ...field.RelationField) IPublishReqPlanDo
	Preload(fields ...field.RelationField) IPublishReqPlanDo
	FirstOrInit() (*model.PublishReqPlan, error)
	FirstOrCreate() (*model.PublishReqPlan, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqPlan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqPlanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqPlanDo) Debug() IPublishReqPlanDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqPlanDo) WithContext(ctx context.Context) IPublishReqPlanDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqPlanDo) ReadDB() IPublishReqPlanDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqPlanDo) WriteDB() IPublishReqPlanDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqPlanDo) Session(config *gorm.Session) IPublishReqPlanDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqPlanDo) Clauses(conds ...clause.Expression) IPublishReqPlanDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqPlanDo) Returning(value interface{}, columns ...string) IPublishReqPlanDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqPlanDo) Not(conds ...gen.Condition) IPublishReqPlanDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqPlanDo) Or(conds ...gen.Condition) IPublishReqPlanDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqPlanDo) Select(conds ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqPlanDo) Where(conds ...gen.Condition) IPublishReqPlanDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqPlanDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqPlanDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqPlanDo) Order(conds ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqPlanDo) Distinct(cols ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqPlanDo) Omit(cols ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqPlanDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqPlanDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqPlanDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqPlanDo) Group(cols ...field.Expr) IPublishReqPlanDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqPlanDo) Having(conds ...gen.Condition) IPublishReqPlanDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqPlanDo) Limit(limit int) IPublishReqPlanDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqPlanDo) Offset(offset int) IPublishReqPlanDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqPlanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqPlanDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqPlanDo) Unscoped() IPublishReqPlanDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqPlanDo) Create(values ...*model.PublishReqPlan) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqPlanDo) CreateInBatches(values []*model.PublishReqPlan, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqPlanDo) Save(values ...*model.PublishReqPlan) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqPlanDo) First() (*model.PublishReqPlan, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqPlan), nil
	}
}

func (p publishReqPlanDo) Take() (*model.PublishReqPlan, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqPlan), nil
	}
}

func (p publishReqPlanDo) Last() (*model.PublishReqPlan, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqPlan), nil
	}
}

func (p publishReqPlanDo) Find() ([]*model.PublishReqPlan, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqPlan), err
}

func (p publishReqPlanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqPlan, err error) {
	buf := make([]*model.PublishReqPlan, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqPlanDo) FindInBatches(result *[]*model.PublishReqPlan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqPlanDo) Attrs(attrs ...field.AssignExpr) IPublishReqPlanDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqPlanDo) Assign(attrs ...field.AssignExpr) IPublishReqPlanDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqPlanDo) Joins(fields ...field.RelationField) IPublishReqPlanDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqPlanDo) Preload(fields ...field.RelationField) IPublishReqPlanDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqPlanDo) FirstOrInit() (*model.PublishReqPlan, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqPlan), nil
	}
}

func (p publishReqPlanDo) FirstOrCreate() (*model.PublishReqPlan, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqPlan), nil
	}
}

func (p publishReqPlanDo) FindByPage(offset int, limit int) (result []*model.PublishReqPlan, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqPlanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqPlanDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqPlanDo) Delete(models ...*model.PublishReqPlan) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqPlanDo) withDO(do gen.Dao) *publishReqPlanDo {
	p.DO = *do.(*gen.DO)
	return p
}
