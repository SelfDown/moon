// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqRollbackEvent(db *gorm.DB, opts ...gen.DOOption) publishReqRollbackEvent {
	_publishReqRollbackEvent := publishReqRollbackEvent{}

	_publishReqRollbackEvent.publishReqRollbackEventDo.UseDB(db, opts...)
	_publishReqRollbackEvent.publishReqRollbackEventDo.UseModel(&model.PublishReqRollbackEvent{})

	tableName := _publishReqRollbackEvent.publishReqRollbackEventDo.TableName()
	_publishReqRollbackEvent.ALL = field.NewAsterisk(tableName)
	_publishReqRollbackEvent.PublishReqRollbackEventID = field.NewString(tableName, "publish_req_rollback_event_id")
	_publishReqRollbackEvent.ReqID = field.NewString(tableName, "req_id")
	_publishReqRollbackEvent.DepTaskID = field.NewString(tableName, "dep_task_id")
	_publishReqRollbackEvent.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqRollbackEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqRollbackEvent.Comments = field.NewString(tableName, "comments")
	_publishReqRollbackEvent.RollBackVersion = field.NewString(tableName, "roll_back_version")

	_publishReqRollbackEvent.fillFieldMap()

	return _publishReqRollbackEvent
}

type publishReqRollbackEvent struct {
	publishReqRollbackEventDo

	ALL                       field.Asterisk
	PublishReqRollbackEventID field.String
	ReqID                     field.String
	DepTaskID                 field.String
	CreateTime                field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime                field.Time   // 记录修改时间（数据库自动写入）
	Comments                  field.String // 备注说明
	RollBackVersion           field.String

	fieldMap map[string]field.Expr
}

func (p publishReqRollbackEvent) Table(newTableName string) *publishReqRollbackEvent {
	p.publishReqRollbackEventDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqRollbackEvent) As(alias string) *publishReqRollbackEvent {
	p.publishReqRollbackEventDo.DO = *(p.publishReqRollbackEventDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqRollbackEvent) updateTableName(table string) *publishReqRollbackEvent {
	p.ALL = field.NewAsterisk(table)
	p.PublishReqRollbackEventID = field.NewString(table, "publish_req_rollback_event_id")
	p.ReqID = field.NewString(table, "req_id")
	p.DepTaskID = field.NewString(table, "dep_task_id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")
	p.RollBackVersion = field.NewString(table, "roll_back_version")

	p.fillFieldMap()

	return p
}

func (p *publishReqRollbackEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqRollbackEvent) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["publish_req_rollback_event_id"] = p.PublishReqRollbackEventID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["dep_task_id"] = p.DepTaskID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["roll_back_version"] = p.RollBackVersion
}

func (p publishReqRollbackEvent) clone(db *gorm.DB) publishReqRollbackEvent {
	p.publishReqRollbackEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqRollbackEvent) replaceDB(db *gorm.DB) publishReqRollbackEvent {
	p.publishReqRollbackEventDo.ReplaceDB(db)
	return p
}

type publishReqRollbackEventDo struct{ gen.DO }

type IPublishReqRollbackEventDo interface {
	gen.SubQuery
	Debug() IPublishReqRollbackEventDo
	WithContext(ctx context.Context) IPublishReqRollbackEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqRollbackEventDo
	WriteDB() IPublishReqRollbackEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqRollbackEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqRollbackEventDo
	Not(conds ...gen.Condition) IPublishReqRollbackEventDo
	Or(conds ...gen.Condition) IPublishReqRollbackEventDo
	Select(conds ...field.Expr) IPublishReqRollbackEventDo
	Where(conds ...gen.Condition) IPublishReqRollbackEventDo
	Order(conds ...field.Expr) IPublishReqRollbackEventDo
	Distinct(cols ...field.Expr) IPublishReqRollbackEventDo
	Omit(cols ...field.Expr) IPublishReqRollbackEventDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqRollbackEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqRollbackEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqRollbackEventDo
	Group(cols ...field.Expr) IPublishReqRollbackEventDo
	Having(conds ...gen.Condition) IPublishReqRollbackEventDo
	Limit(limit int) IPublishReqRollbackEventDo
	Offset(offset int) IPublishReqRollbackEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqRollbackEventDo
	Unscoped() IPublishReqRollbackEventDo
	Create(values ...*model.PublishReqRollbackEvent) error
	CreateInBatches(values []*model.PublishReqRollbackEvent, batchSize int) error
	Save(values ...*model.PublishReqRollbackEvent) error
	First() (*model.PublishReqRollbackEvent, error)
	Take() (*model.PublishReqRollbackEvent, error)
	Last() (*model.PublishReqRollbackEvent, error)
	Find() ([]*model.PublishReqRollbackEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqRollbackEvent, err error)
	FindInBatches(result *[]*model.PublishReqRollbackEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqRollbackEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqRollbackEventDo
	Assign(attrs ...field.AssignExpr) IPublishReqRollbackEventDo
	Joins(fields ...field.RelationField) IPublishReqRollbackEventDo
	Preload(fields ...field.RelationField) IPublishReqRollbackEventDo
	FirstOrInit() (*model.PublishReqRollbackEvent, error)
	FirstOrCreate() (*model.PublishReqRollbackEvent, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqRollbackEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqRollbackEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqRollbackEventDo) Debug() IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqRollbackEventDo) WithContext(ctx context.Context) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqRollbackEventDo) ReadDB() IPublishReqRollbackEventDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqRollbackEventDo) WriteDB() IPublishReqRollbackEventDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqRollbackEventDo) Session(config *gorm.Session) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqRollbackEventDo) Clauses(conds ...clause.Expression) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqRollbackEventDo) Returning(value interface{}, columns ...string) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqRollbackEventDo) Not(conds ...gen.Condition) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqRollbackEventDo) Or(conds ...gen.Condition) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqRollbackEventDo) Select(conds ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqRollbackEventDo) Where(conds ...gen.Condition) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqRollbackEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqRollbackEventDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqRollbackEventDo) Order(conds ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqRollbackEventDo) Distinct(cols ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqRollbackEventDo) Omit(cols ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqRollbackEventDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqRollbackEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqRollbackEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqRollbackEventDo) Group(cols ...field.Expr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqRollbackEventDo) Having(conds ...gen.Condition) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqRollbackEventDo) Limit(limit int) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqRollbackEventDo) Offset(offset int) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqRollbackEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqRollbackEventDo) Unscoped() IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqRollbackEventDo) Create(values ...*model.PublishReqRollbackEvent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqRollbackEventDo) CreateInBatches(values []*model.PublishReqRollbackEvent, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqRollbackEventDo) Save(values ...*model.PublishReqRollbackEvent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqRollbackEventDo) First() (*model.PublishReqRollbackEvent, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqRollbackEvent), nil
	}
}

func (p publishReqRollbackEventDo) Take() (*model.PublishReqRollbackEvent, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqRollbackEvent), nil
	}
}

func (p publishReqRollbackEventDo) Last() (*model.PublishReqRollbackEvent, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqRollbackEvent), nil
	}
}

func (p publishReqRollbackEventDo) Find() ([]*model.PublishReqRollbackEvent, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqRollbackEvent), err
}

func (p publishReqRollbackEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqRollbackEvent, err error) {
	buf := make([]*model.PublishReqRollbackEvent, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqRollbackEventDo) FindInBatches(result *[]*model.PublishReqRollbackEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqRollbackEventDo) Attrs(attrs ...field.AssignExpr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqRollbackEventDo) Assign(attrs ...field.AssignExpr) IPublishReqRollbackEventDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqRollbackEventDo) Joins(fields ...field.RelationField) IPublishReqRollbackEventDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqRollbackEventDo) Preload(fields ...field.RelationField) IPublishReqRollbackEventDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqRollbackEventDo) FirstOrInit() (*model.PublishReqRollbackEvent, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqRollbackEvent), nil
	}
}

func (p publishReqRollbackEventDo) FirstOrCreate() (*model.PublishReqRollbackEvent, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqRollbackEvent), nil
	}
}

func (p publishReqRollbackEventDo) FindByPage(offset int, limit int) (result []*model.PublishReqRollbackEvent, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqRollbackEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqRollbackEventDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqRollbackEventDo) Delete(models ...*model.PublishReqRollbackEvent) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqRollbackEventDo) withDO(do gen.Dao) *publishReqRollbackEventDo {
	p.DO = *do.(*gen.DO)
	return p
}
