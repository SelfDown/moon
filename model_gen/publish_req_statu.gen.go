// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqStatu(db *gorm.DB, opts ...gen.DOOption) publishReqStatu {
	_publishReqStatu := publishReqStatu{}

	_publishReqStatu.publishReqStatuDo.UseDB(db, opts...)
	_publishReqStatu.publishReqStatuDo.UseModel(&model.PublishReqStatu{})

	tableName := _publishReqStatu.publishReqStatuDo.TableName()
	_publishReqStatu.ALL = field.NewAsterisk(tableName)
	_publishReqStatu.StatuID = field.NewString(tableName, "statu_id")
	_publishReqStatu.StatuText = field.NewString(tableName, "statu_text")
	_publishReqStatu.Notes = field.NewString(tableName, "notes")
	_publishReqStatu.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqStatu.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqStatu.Comments = field.NewString(tableName, "comments")
	_publishReqStatu.Weight = field.NewInt32(tableName, "weight")
	_publishReqStatu.OrderIndex = field.NewInt32(tableName, "order_index")

	_publishReqStatu.fillFieldMap()

	return _publishReqStatu
}

type publishReqStatu struct {
	publishReqStatuDo

	ALL        field.Asterisk
	StatuID    field.String
	StatuText  field.String
	Notes      field.String
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明
	Weight     field.Int32
	OrderIndex field.Int32

	fieldMap map[string]field.Expr
}

func (p publishReqStatu) Table(newTableName string) *publishReqStatu {
	p.publishReqStatuDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqStatu) As(alias string) *publishReqStatu {
	p.publishReqStatuDo.DO = *(p.publishReqStatuDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqStatu) updateTableName(table string) *publishReqStatu {
	p.ALL = field.NewAsterisk(table)
	p.StatuID = field.NewString(table, "statu_id")
	p.StatuText = field.NewString(table, "statu_text")
	p.Notes = field.NewString(table, "notes")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")
	p.Weight = field.NewInt32(table, "weight")
	p.OrderIndex = field.NewInt32(table, "order_index")

	p.fillFieldMap()

	return p
}

func (p *publishReqStatu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqStatu) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["statu_id"] = p.StatuID
	p.fieldMap["statu_text"] = p.StatuText
	p.fieldMap["notes"] = p.Notes
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["order_index"] = p.OrderIndex
}

func (p publishReqStatu) clone(db *gorm.DB) publishReqStatu {
	p.publishReqStatuDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqStatu) replaceDB(db *gorm.DB) publishReqStatu {
	p.publishReqStatuDo.ReplaceDB(db)
	return p
}

type publishReqStatuDo struct{ gen.DO }

type IPublishReqStatuDo interface {
	gen.SubQuery
	Debug() IPublishReqStatuDo
	WithContext(ctx context.Context) IPublishReqStatuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqStatuDo
	WriteDB() IPublishReqStatuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqStatuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqStatuDo
	Not(conds ...gen.Condition) IPublishReqStatuDo
	Or(conds ...gen.Condition) IPublishReqStatuDo
	Select(conds ...field.Expr) IPublishReqStatuDo
	Where(conds ...gen.Condition) IPublishReqStatuDo
	Order(conds ...field.Expr) IPublishReqStatuDo
	Distinct(cols ...field.Expr) IPublishReqStatuDo
	Omit(cols ...field.Expr) IPublishReqStatuDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqStatuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatuDo
	Group(cols ...field.Expr) IPublishReqStatuDo
	Having(conds ...gen.Condition) IPublishReqStatuDo
	Limit(limit int) IPublishReqStatuDo
	Offset(offset int) IPublishReqStatuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqStatuDo
	Unscoped() IPublishReqStatuDo
	Create(values ...*model.PublishReqStatu) error
	CreateInBatches(values []*model.PublishReqStatu, batchSize int) error
	Save(values ...*model.PublishReqStatu) error
	First() (*model.PublishReqStatu, error)
	Take() (*model.PublishReqStatu, error)
	Last() (*model.PublishReqStatu, error)
	Find() ([]*model.PublishReqStatu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqStatu, err error)
	FindInBatches(result *[]*model.PublishReqStatu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqStatu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqStatuDo
	Assign(attrs ...field.AssignExpr) IPublishReqStatuDo
	Joins(fields ...field.RelationField) IPublishReqStatuDo
	Preload(fields ...field.RelationField) IPublishReqStatuDo
	FirstOrInit() (*model.PublishReqStatu, error)
	FirstOrCreate() (*model.PublishReqStatu, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqStatu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqStatuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqStatuDo) Debug() IPublishReqStatuDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqStatuDo) WithContext(ctx context.Context) IPublishReqStatuDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqStatuDo) ReadDB() IPublishReqStatuDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqStatuDo) WriteDB() IPublishReqStatuDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqStatuDo) Session(config *gorm.Session) IPublishReqStatuDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqStatuDo) Clauses(conds ...clause.Expression) IPublishReqStatuDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqStatuDo) Returning(value interface{}, columns ...string) IPublishReqStatuDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqStatuDo) Not(conds ...gen.Condition) IPublishReqStatuDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqStatuDo) Or(conds ...gen.Condition) IPublishReqStatuDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqStatuDo) Select(conds ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqStatuDo) Where(conds ...gen.Condition) IPublishReqStatuDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqStatuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqStatuDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqStatuDo) Order(conds ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqStatuDo) Distinct(cols ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqStatuDo) Omit(cols ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqStatuDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqStatuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqStatuDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqStatuDo) Group(cols ...field.Expr) IPublishReqStatuDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqStatuDo) Having(conds ...gen.Condition) IPublishReqStatuDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqStatuDo) Limit(limit int) IPublishReqStatuDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqStatuDo) Offset(offset int) IPublishReqStatuDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqStatuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqStatuDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqStatuDo) Unscoped() IPublishReqStatuDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqStatuDo) Create(values ...*model.PublishReqStatu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqStatuDo) CreateInBatches(values []*model.PublishReqStatu, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqStatuDo) Save(values ...*model.PublishReqStatu) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqStatuDo) First() (*model.PublishReqStatu, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatu), nil
	}
}

func (p publishReqStatuDo) Take() (*model.PublishReqStatu, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatu), nil
	}
}

func (p publishReqStatuDo) Last() (*model.PublishReqStatu, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatu), nil
	}
}

func (p publishReqStatuDo) Find() ([]*model.PublishReqStatu, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqStatu), err
}

func (p publishReqStatuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqStatu, err error) {
	buf := make([]*model.PublishReqStatu, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqStatuDo) FindInBatches(result *[]*model.PublishReqStatu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqStatuDo) Attrs(attrs ...field.AssignExpr) IPublishReqStatuDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqStatuDo) Assign(attrs ...field.AssignExpr) IPublishReqStatuDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqStatuDo) Joins(fields ...field.RelationField) IPublishReqStatuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqStatuDo) Preload(fields ...field.RelationField) IPublishReqStatuDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqStatuDo) FirstOrInit() (*model.PublishReqStatu, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatu), nil
	}
}

func (p publishReqStatuDo) FirstOrCreate() (*model.PublishReqStatu, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatu), nil
	}
}

func (p publishReqStatuDo) FindByPage(offset int, limit int) (result []*model.PublishReqStatu, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqStatuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqStatuDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqStatuDo) Delete(models ...*model.PublishReqStatu) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqStatuDo) withDO(do gen.Dao) *publishReqStatuDo {
	p.DO = *do.(*gen.DO)
	return p
}
