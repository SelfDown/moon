// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqStatusChangeReason(db *gorm.DB, opts ...gen.DOOption) publishReqStatusChangeReason {
	_publishReqStatusChangeReason := publishReqStatusChangeReason{}

	_publishReqStatusChangeReason.publishReqStatusChangeReasonDo.UseDB(db, opts...)
	_publishReqStatusChangeReason.publishReqStatusChangeReasonDo.UseModel(&model.PublishReqStatusChangeReason{})

	tableName := _publishReqStatusChangeReason.publishReqStatusChangeReasonDo.TableName()
	_publishReqStatusChangeReason.ALL = field.NewAsterisk(tableName)
	_publishReqStatusChangeReason.StatusChangeReasonID = field.NewString(tableName, "status_change_reason_id")
	_publishReqStatusChangeReason.ReqID = field.NewString(tableName, "req_id")
	_publishReqStatusChangeReason.PublishReqStatusCode = field.NewString(tableName, "publish_req_status_code")
	_publishReqStatusChangeReason.OpUser = field.NewString(tableName, "op_user")
	_publishReqStatusChangeReason.StatusChangeReasonCode = field.NewString(tableName, "status_change_reason_code")
	_publishReqStatusChangeReason.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqStatusChangeReason.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishReqStatusChangeReason.Comments = field.NewString(tableName, "comments")
	_publishReqStatusChangeReason.IsImportant = field.NewString(tableName, "is_important")
	_publishReqStatusChangeReason.FinishTime = field.NewString(tableName, "finish_time")
	_publishReqStatusChangeReason.PublishUnsuccessType = field.NewString(tableName, "publish_unsuccess_type")

	_publishReqStatusChangeReason.fillFieldMap()

	return _publishReqStatusChangeReason
}

type publishReqStatusChangeReason struct {
	publishReqStatusChangeReasonDo

	ALL                  field.Asterisk
	StatusChangeReasonID field.String // 主键，UUID
	ReqID                field.String // publish_req.req_id
	PublishReqStatusCode field.String // 升级状态码，比如用户准备调整升级单状态测试不通过，那么这个记录的就是测试不通过的升级单状态码
	OpUser               field.String // 状态修改人
	/*
		码表 sys_code
		比如，用户选择了测试不通过，那么这里应该记录的是测试不通过原因的码表值
	*/
	StatusChangeReasonCode field.String
	CreateTime             field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime             field.Time   // 记录修改时间（数据库自动写入）
	Comments               field.String // 备注说明,记录调整备注说明
	IsImportant            field.String
	FinishTime             field.String
	PublishUnsuccessType   field.String

	fieldMap map[string]field.Expr
}

func (p publishReqStatusChangeReason) Table(newTableName string) *publishReqStatusChangeReason {
	p.publishReqStatusChangeReasonDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqStatusChangeReason) As(alias string) *publishReqStatusChangeReason {
	p.publishReqStatusChangeReasonDo.DO = *(p.publishReqStatusChangeReasonDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqStatusChangeReason) updateTableName(table string) *publishReqStatusChangeReason {
	p.ALL = field.NewAsterisk(table)
	p.StatusChangeReasonID = field.NewString(table, "status_change_reason_id")
	p.ReqID = field.NewString(table, "req_id")
	p.PublishReqStatusCode = field.NewString(table, "publish_req_status_code")
	p.OpUser = field.NewString(table, "op_user")
	p.StatusChangeReasonCode = field.NewString(table, "status_change_reason_code")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")
	p.IsImportant = field.NewString(table, "is_important")
	p.FinishTime = field.NewString(table, "finish_time")
	p.PublishUnsuccessType = field.NewString(table, "publish_unsuccess_type")

	p.fillFieldMap()

	return p
}

func (p *publishReqStatusChangeReason) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqStatusChangeReason) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["status_change_reason_id"] = p.StatusChangeReasonID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["publish_req_status_code"] = p.PublishReqStatusCode
	p.fieldMap["op_user"] = p.OpUser
	p.fieldMap["status_change_reason_code"] = p.StatusChangeReasonCode
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
	p.fieldMap["is_important"] = p.IsImportant
	p.fieldMap["finish_time"] = p.FinishTime
	p.fieldMap["publish_unsuccess_type"] = p.PublishUnsuccessType
}

func (p publishReqStatusChangeReason) clone(db *gorm.DB) publishReqStatusChangeReason {
	p.publishReqStatusChangeReasonDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqStatusChangeReason) replaceDB(db *gorm.DB) publishReqStatusChangeReason {
	p.publishReqStatusChangeReasonDo.ReplaceDB(db)
	return p
}

type publishReqStatusChangeReasonDo struct{ gen.DO }

type IPublishReqStatusChangeReasonDo interface {
	gen.SubQuery
	Debug() IPublishReqStatusChangeReasonDo
	WithContext(ctx context.Context) IPublishReqStatusChangeReasonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqStatusChangeReasonDo
	WriteDB() IPublishReqStatusChangeReasonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqStatusChangeReasonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqStatusChangeReasonDo
	Not(conds ...gen.Condition) IPublishReqStatusChangeReasonDo
	Or(conds ...gen.Condition) IPublishReqStatusChangeReasonDo
	Select(conds ...field.Expr) IPublishReqStatusChangeReasonDo
	Where(conds ...gen.Condition) IPublishReqStatusChangeReasonDo
	Order(conds ...field.Expr) IPublishReqStatusChangeReasonDo
	Distinct(cols ...field.Expr) IPublishReqStatusChangeReasonDo
	Omit(cols ...field.Expr) IPublishReqStatusChangeReasonDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqStatusChangeReasonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatusChangeReasonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatusChangeReasonDo
	Group(cols ...field.Expr) IPublishReqStatusChangeReasonDo
	Having(conds ...gen.Condition) IPublishReqStatusChangeReasonDo
	Limit(limit int) IPublishReqStatusChangeReasonDo
	Offset(offset int) IPublishReqStatusChangeReasonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqStatusChangeReasonDo
	Unscoped() IPublishReqStatusChangeReasonDo
	Create(values ...*model.PublishReqStatusChangeReason) error
	CreateInBatches(values []*model.PublishReqStatusChangeReason, batchSize int) error
	Save(values ...*model.PublishReqStatusChangeReason) error
	First() (*model.PublishReqStatusChangeReason, error)
	Take() (*model.PublishReqStatusChangeReason, error)
	Last() (*model.PublishReqStatusChangeReason, error)
	Find() ([]*model.PublishReqStatusChangeReason, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqStatusChangeReason, err error)
	FindInBatches(result *[]*model.PublishReqStatusChangeReason, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqStatusChangeReason) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqStatusChangeReasonDo
	Assign(attrs ...field.AssignExpr) IPublishReqStatusChangeReasonDo
	Joins(fields ...field.RelationField) IPublishReqStatusChangeReasonDo
	Preload(fields ...field.RelationField) IPublishReqStatusChangeReasonDo
	FirstOrInit() (*model.PublishReqStatusChangeReason, error)
	FirstOrCreate() (*model.PublishReqStatusChangeReason, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqStatusChangeReason, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqStatusChangeReasonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqStatusChangeReasonDo) Debug() IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqStatusChangeReasonDo) WithContext(ctx context.Context) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqStatusChangeReasonDo) ReadDB() IPublishReqStatusChangeReasonDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqStatusChangeReasonDo) WriteDB() IPublishReqStatusChangeReasonDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqStatusChangeReasonDo) Session(config *gorm.Session) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqStatusChangeReasonDo) Clauses(conds ...clause.Expression) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqStatusChangeReasonDo) Returning(value interface{}, columns ...string) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqStatusChangeReasonDo) Not(conds ...gen.Condition) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqStatusChangeReasonDo) Or(conds ...gen.Condition) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqStatusChangeReasonDo) Select(conds ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqStatusChangeReasonDo) Where(conds ...gen.Condition) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqStatusChangeReasonDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqStatusChangeReasonDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqStatusChangeReasonDo) Order(conds ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqStatusChangeReasonDo) Distinct(cols ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqStatusChangeReasonDo) Omit(cols ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqStatusChangeReasonDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqStatusChangeReasonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqStatusChangeReasonDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqStatusChangeReasonDo) Group(cols ...field.Expr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqStatusChangeReasonDo) Having(conds ...gen.Condition) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqStatusChangeReasonDo) Limit(limit int) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqStatusChangeReasonDo) Offset(offset int) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqStatusChangeReasonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqStatusChangeReasonDo) Unscoped() IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqStatusChangeReasonDo) Create(values ...*model.PublishReqStatusChangeReason) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqStatusChangeReasonDo) CreateInBatches(values []*model.PublishReqStatusChangeReason, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqStatusChangeReasonDo) Save(values ...*model.PublishReqStatusChangeReason) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqStatusChangeReasonDo) First() (*model.PublishReqStatusChangeReason, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatusChangeReason), nil
	}
}

func (p publishReqStatusChangeReasonDo) Take() (*model.PublishReqStatusChangeReason, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatusChangeReason), nil
	}
}

func (p publishReqStatusChangeReasonDo) Last() (*model.PublishReqStatusChangeReason, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatusChangeReason), nil
	}
}

func (p publishReqStatusChangeReasonDo) Find() ([]*model.PublishReqStatusChangeReason, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqStatusChangeReason), err
}

func (p publishReqStatusChangeReasonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqStatusChangeReason, err error) {
	buf := make([]*model.PublishReqStatusChangeReason, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqStatusChangeReasonDo) FindInBatches(result *[]*model.PublishReqStatusChangeReason, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqStatusChangeReasonDo) Attrs(attrs ...field.AssignExpr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqStatusChangeReasonDo) Assign(attrs ...field.AssignExpr) IPublishReqStatusChangeReasonDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqStatusChangeReasonDo) Joins(fields ...field.RelationField) IPublishReqStatusChangeReasonDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqStatusChangeReasonDo) Preload(fields ...field.RelationField) IPublishReqStatusChangeReasonDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqStatusChangeReasonDo) FirstOrInit() (*model.PublishReqStatusChangeReason, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatusChangeReason), nil
	}
}

func (p publishReqStatusChangeReasonDo) FirstOrCreate() (*model.PublishReqStatusChangeReason, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqStatusChangeReason), nil
	}
}

func (p publishReqStatusChangeReasonDo) FindByPage(offset int, limit int) (result []*model.PublishReqStatusChangeReason, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqStatusChangeReasonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqStatusChangeReasonDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqStatusChangeReasonDo) Delete(models ...*model.PublishReqStatusChangeReason) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqStatusChangeReasonDo) withDO(do gen.Dao) *publishReqStatusChangeReasonDo {
	p.DO = *do.(*gen.DO)
	return p
}
