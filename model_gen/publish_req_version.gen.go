// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishReqVersion(db *gorm.DB, opts ...gen.DOOption) publishReqVersion {
	_publishReqVersion := publishReqVersion{}

	_publishReqVersion.publishReqVersionDo.UseDB(db, opts...)
	_publishReqVersion.publishReqVersionDo.UseModel(&model.PublishReqVersion{})

	tableName := _publishReqVersion.publishReqVersionDo.TableName()
	_publishReqVersion.ALL = field.NewAsterisk(tableName)
	_publishReqVersion.PublishVersionID = field.NewString(tableName, "publish_version_id")
	_publishReqVersion.ReqID = field.NewString(tableName, "req_id")
	_publishReqVersion.Startdate = field.NewString(tableName, "startdate")
	_publishReqVersion.Archived = field.NewString(tableName, "archived")
	_publishReqVersion.Vname = field.NewString(tableName, "vname")
	_publishReqVersion.Sequence = field.NewString(tableName, "sequence")
	_publishReqVersion.Project = field.NewString(tableName, "project")
	_publishReqVersion.Released = field.NewString(tableName, "released")
	_publishReqVersion.URL = field.NewString(tableName, "url")
	_publishReqVersion.Releasedate = field.NewString(tableName, "releasedate")
	_publishReqVersion.ID = field.NewString(tableName, "id")
	_publishReqVersion.CreateTime = field.NewTime(tableName, "create_time")
	_publishReqVersion.ModifyTime = field.NewTime(tableName, "modify_time")

	_publishReqVersion.fillFieldMap()

	return _publishReqVersion
}

type publishReqVersion struct {
	publishReqVersionDo

	ALL              field.Asterisk
	PublishVersionID field.String // 主键\n
	ReqID            field.String
	Startdate        field.String // 开始日期
	Archived         field.String // 归档
	Vname            field.String // 名称
	Sequence         field.String //
	Project          field.String //
	Released         field.String //
	URL              field.String //
	Releasedate      field.String //
	ID               field.String //
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）

	fieldMap map[string]field.Expr
}

func (p publishReqVersion) Table(newTableName string) *publishReqVersion {
	p.publishReqVersionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishReqVersion) As(alias string) *publishReqVersion {
	p.publishReqVersionDo.DO = *(p.publishReqVersionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishReqVersion) updateTableName(table string) *publishReqVersion {
	p.ALL = field.NewAsterisk(table)
	p.PublishVersionID = field.NewString(table, "publish_version_id")
	p.ReqID = field.NewString(table, "req_id")
	p.Startdate = field.NewString(table, "startdate")
	p.Archived = field.NewString(table, "archived")
	p.Vname = field.NewString(table, "vname")
	p.Sequence = field.NewString(table, "sequence")
	p.Project = field.NewString(table, "project")
	p.Released = field.NewString(table, "released")
	p.URL = field.NewString(table, "url")
	p.Releasedate = field.NewString(table, "releasedate")
	p.ID = field.NewString(table, "id")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")

	p.fillFieldMap()

	return p
}

func (p *publishReqVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishReqVersion) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["publish_version_id"] = p.PublishVersionID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["startdate"] = p.Startdate
	p.fieldMap["archived"] = p.Archived
	p.fieldMap["vname"] = p.Vname
	p.fieldMap["sequence"] = p.Sequence
	p.fieldMap["project"] = p.Project
	p.fieldMap["released"] = p.Released
	p.fieldMap["url"] = p.URL
	p.fieldMap["releasedate"] = p.Releasedate
	p.fieldMap["id"] = p.ID
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
}

func (p publishReqVersion) clone(db *gorm.DB) publishReqVersion {
	p.publishReqVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishReqVersion) replaceDB(db *gorm.DB) publishReqVersion {
	p.publishReqVersionDo.ReplaceDB(db)
	return p
}

type publishReqVersionDo struct{ gen.DO }

type IPublishReqVersionDo interface {
	gen.SubQuery
	Debug() IPublishReqVersionDo
	WithContext(ctx context.Context) IPublishReqVersionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishReqVersionDo
	WriteDB() IPublishReqVersionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishReqVersionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishReqVersionDo
	Not(conds ...gen.Condition) IPublishReqVersionDo
	Or(conds ...gen.Condition) IPublishReqVersionDo
	Select(conds ...field.Expr) IPublishReqVersionDo
	Where(conds ...gen.Condition) IPublishReqVersionDo
	Order(conds ...field.Expr) IPublishReqVersionDo
	Distinct(cols ...field.Expr) IPublishReqVersionDo
	Omit(cols ...field.Expr) IPublishReqVersionDo
	Join(table schema.Tabler, on ...field.Expr) IPublishReqVersionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqVersionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqVersionDo
	Group(cols ...field.Expr) IPublishReqVersionDo
	Having(conds ...gen.Condition) IPublishReqVersionDo
	Limit(limit int) IPublishReqVersionDo
	Offset(offset int) IPublishReqVersionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqVersionDo
	Unscoped() IPublishReqVersionDo
	Create(values ...*model.PublishReqVersion) error
	CreateInBatches(values []*model.PublishReqVersion, batchSize int) error
	Save(values ...*model.PublishReqVersion) error
	First() (*model.PublishReqVersion, error)
	Take() (*model.PublishReqVersion, error)
	Last() (*model.PublishReqVersion, error)
	Find() ([]*model.PublishReqVersion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqVersion, err error)
	FindInBatches(result *[]*model.PublishReqVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishReqVersion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishReqVersionDo
	Assign(attrs ...field.AssignExpr) IPublishReqVersionDo
	Joins(fields ...field.RelationField) IPublishReqVersionDo
	Preload(fields ...field.RelationField) IPublishReqVersionDo
	FirstOrInit() (*model.PublishReqVersion, error)
	FirstOrCreate() (*model.PublishReqVersion, error)
	FindByPage(offset int, limit int) (result []*model.PublishReqVersion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishReqVersionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishReqVersionDo) Debug() IPublishReqVersionDo {
	return p.withDO(p.DO.Debug())
}

func (p publishReqVersionDo) WithContext(ctx context.Context) IPublishReqVersionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishReqVersionDo) ReadDB() IPublishReqVersionDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishReqVersionDo) WriteDB() IPublishReqVersionDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishReqVersionDo) Session(config *gorm.Session) IPublishReqVersionDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishReqVersionDo) Clauses(conds ...clause.Expression) IPublishReqVersionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishReqVersionDo) Returning(value interface{}, columns ...string) IPublishReqVersionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishReqVersionDo) Not(conds ...gen.Condition) IPublishReqVersionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishReqVersionDo) Or(conds ...gen.Condition) IPublishReqVersionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishReqVersionDo) Select(conds ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishReqVersionDo) Where(conds ...gen.Condition) IPublishReqVersionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishReqVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishReqVersionDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishReqVersionDo) Order(conds ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishReqVersionDo) Distinct(cols ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishReqVersionDo) Omit(cols ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishReqVersionDo) Join(table schema.Tabler, on ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishReqVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishReqVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishReqVersionDo) Group(cols ...field.Expr) IPublishReqVersionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishReqVersionDo) Having(conds ...gen.Condition) IPublishReqVersionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishReqVersionDo) Limit(limit int) IPublishReqVersionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishReqVersionDo) Offset(offset int) IPublishReqVersionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishReqVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishReqVersionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishReqVersionDo) Unscoped() IPublishReqVersionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishReqVersionDo) Create(values ...*model.PublishReqVersion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishReqVersionDo) CreateInBatches(values []*model.PublishReqVersion, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishReqVersionDo) Save(values ...*model.PublishReqVersion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishReqVersionDo) First() (*model.PublishReqVersion, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqVersion), nil
	}
}

func (p publishReqVersionDo) Take() (*model.PublishReqVersion, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqVersion), nil
	}
}

func (p publishReqVersionDo) Last() (*model.PublishReqVersion, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqVersion), nil
	}
}

func (p publishReqVersionDo) Find() ([]*model.PublishReqVersion, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishReqVersion), err
}

func (p publishReqVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishReqVersion, err error) {
	buf := make([]*model.PublishReqVersion, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishReqVersionDo) FindInBatches(result *[]*model.PublishReqVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishReqVersionDo) Attrs(attrs ...field.AssignExpr) IPublishReqVersionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishReqVersionDo) Assign(attrs ...field.AssignExpr) IPublishReqVersionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishReqVersionDo) Joins(fields ...field.RelationField) IPublishReqVersionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishReqVersionDo) Preload(fields ...field.RelationField) IPublishReqVersionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishReqVersionDo) FirstOrInit() (*model.PublishReqVersion, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqVersion), nil
	}
}

func (p publishReqVersionDo) FirstOrCreate() (*model.PublishReqVersion, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishReqVersion), nil
	}
}

func (p publishReqVersionDo) FindByPage(offset int, limit int) (result []*model.PublishReqVersion, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishReqVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishReqVersionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishReqVersionDo) Delete(models ...*model.PublishReqVersion) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishReqVersionDo) withDO(do gen.Dao) *publishReqVersionDo {
	p.DO = *do.(*gen.DO)
	return p
}
