// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newPublishWikiList(db *gorm.DB, opts ...gen.DOOption) publishWikiList {
	_publishWikiList := publishWikiList{}

	_publishWikiList.publishWikiListDo.UseDB(db, opts...)
	_publishWikiList.publishWikiListDo.UseModel(&model.PublishWikiList{})

	tableName := _publishWikiList.publishWikiListDo.TableName()
	_publishWikiList.ALL = field.NewAsterisk(tableName)
	_publishWikiList.ID = field.NewInt32(tableName, "id")
	_publishWikiList.ReqWikiID = field.NewString(tableName, "req_wiki_id")
	_publishWikiList.ReqID = field.NewString(tableName, "req_id")
	_publishWikiList.WikiKey = field.NewString(tableName, "wiki_key")
	_publishWikiList.WikiTitle = field.NewString(tableName, "wiki_title")
	_publishWikiList.WikiType = field.NewInt32(tableName, "wiki_type")
	_publishWikiList.WikiStatu = field.NewString(tableName, "wiki_statu")
	_publishWikiList.WikiURL = field.NewString(tableName, "wiki_url")
	_publishWikiList.CreateTime = field.NewTime(tableName, "create_time")
	_publishWikiList.ModifyTime = field.NewTime(tableName, "modify_time")
	_publishWikiList.Comments = field.NewString(tableName, "comments")

	_publishWikiList.fillFieldMap()

	return _publishWikiList
}

type publishWikiList struct {
	publishWikiListDo

	ALL        field.Asterisk
	ID         field.Int32
	ReqWikiID  field.String
	ReqID      field.String
	WikiKey    field.String
	WikiTitle  field.String
	WikiType   field.Int32 // 0 测试报告
	WikiStatu  field.String
	WikiURL    field.String // 文档链接地址
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (p publishWikiList) Table(newTableName string) *publishWikiList {
	p.publishWikiListDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishWikiList) As(alias string) *publishWikiList {
	p.publishWikiListDo.DO = *(p.publishWikiListDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishWikiList) updateTableName(table string) *publishWikiList {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.ReqWikiID = field.NewString(table, "req_wiki_id")
	p.ReqID = field.NewString(table, "req_id")
	p.WikiKey = field.NewString(table, "wiki_key")
	p.WikiTitle = field.NewString(table, "wiki_title")
	p.WikiType = field.NewInt32(table, "wiki_type")
	p.WikiStatu = field.NewString(table, "wiki_statu")
	p.WikiURL = field.NewString(table, "wiki_url")
	p.CreateTime = field.NewTime(table, "create_time")
	p.ModifyTime = field.NewTime(table, "modify_time")
	p.Comments = field.NewString(table, "comments")

	p.fillFieldMap()

	return p
}

func (p *publishWikiList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishWikiList) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["req_wiki_id"] = p.ReqWikiID
	p.fieldMap["req_id"] = p.ReqID
	p.fieldMap["wiki_key"] = p.WikiKey
	p.fieldMap["wiki_title"] = p.WikiTitle
	p.fieldMap["wiki_type"] = p.WikiType
	p.fieldMap["wiki_statu"] = p.WikiStatu
	p.fieldMap["wiki_url"] = p.WikiURL
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["modify_time"] = p.ModifyTime
	p.fieldMap["comments"] = p.Comments
}

func (p publishWikiList) clone(db *gorm.DB) publishWikiList {
	p.publishWikiListDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishWikiList) replaceDB(db *gorm.DB) publishWikiList {
	p.publishWikiListDo.ReplaceDB(db)
	return p
}

type publishWikiListDo struct{ gen.DO }

type IPublishWikiListDo interface {
	gen.SubQuery
	Debug() IPublishWikiListDo
	WithContext(ctx context.Context) IPublishWikiListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishWikiListDo
	WriteDB() IPublishWikiListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishWikiListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishWikiListDo
	Not(conds ...gen.Condition) IPublishWikiListDo
	Or(conds ...gen.Condition) IPublishWikiListDo
	Select(conds ...field.Expr) IPublishWikiListDo
	Where(conds ...gen.Condition) IPublishWikiListDo
	Order(conds ...field.Expr) IPublishWikiListDo
	Distinct(cols ...field.Expr) IPublishWikiListDo
	Omit(cols ...field.Expr) IPublishWikiListDo
	Join(table schema.Tabler, on ...field.Expr) IPublishWikiListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishWikiListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishWikiListDo
	Group(cols ...field.Expr) IPublishWikiListDo
	Having(conds ...gen.Condition) IPublishWikiListDo
	Limit(limit int) IPublishWikiListDo
	Offset(offset int) IPublishWikiListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishWikiListDo
	Unscoped() IPublishWikiListDo
	Create(values ...*model.PublishWikiList) error
	CreateInBatches(values []*model.PublishWikiList, batchSize int) error
	Save(values ...*model.PublishWikiList) error
	First() (*model.PublishWikiList, error)
	Take() (*model.PublishWikiList, error)
	Last() (*model.PublishWikiList, error)
	Find() ([]*model.PublishWikiList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishWikiList, err error)
	FindInBatches(result *[]*model.PublishWikiList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PublishWikiList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishWikiListDo
	Assign(attrs ...field.AssignExpr) IPublishWikiListDo
	Joins(fields ...field.RelationField) IPublishWikiListDo
	Preload(fields ...field.RelationField) IPublishWikiListDo
	FirstOrInit() (*model.PublishWikiList, error)
	FirstOrCreate() (*model.PublishWikiList, error)
	FindByPage(offset int, limit int) (result []*model.PublishWikiList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishWikiListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p publishWikiListDo) Debug() IPublishWikiListDo {
	return p.withDO(p.DO.Debug())
}

func (p publishWikiListDo) WithContext(ctx context.Context) IPublishWikiListDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishWikiListDo) ReadDB() IPublishWikiListDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishWikiListDo) WriteDB() IPublishWikiListDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishWikiListDo) Session(config *gorm.Session) IPublishWikiListDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishWikiListDo) Clauses(conds ...clause.Expression) IPublishWikiListDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishWikiListDo) Returning(value interface{}, columns ...string) IPublishWikiListDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishWikiListDo) Not(conds ...gen.Condition) IPublishWikiListDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishWikiListDo) Or(conds ...gen.Condition) IPublishWikiListDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishWikiListDo) Select(conds ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishWikiListDo) Where(conds ...gen.Condition) IPublishWikiListDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishWikiListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishWikiListDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishWikiListDo) Order(conds ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishWikiListDo) Distinct(cols ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishWikiListDo) Omit(cols ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishWikiListDo) Join(table schema.Tabler, on ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishWikiListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishWikiListDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishWikiListDo) Group(cols ...field.Expr) IPublishWikiListDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishWikiListDo) Having(conds ...gen.Condition) IPublishWikiListDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishWikiListDo) Limit(limit int) IPublishWikiListDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishWikiListDo) Offset(offset int) IPublishWikiListDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishWikiListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishWikiListDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishWikiListDo) Unscoped() IPublishWikiListDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishWikiListDo) Create(values ...*model.PublishWikiList) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishWikiListDo) CreateInBatches(values []*model.PublishWikiList, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishWikiListDo) Save(values ...*model.PublishWikiList) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishWikiListDo) First() (*model.PublishWikiList, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishWikiList), nil
	}
}

func (p publishWikiListDo) Take() (*model.PublishWikiList, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishWikiList), nil
	}
}

func (p publishWikiListDo) Last() (*model.PublishWikiList, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishWikiList), nil
	}
}

func (p publishWikiListDo) Find() ([]*model.PublishWikiList, error) {
	result, err := p.DO.Find()
	return result.([]*model.PublishWikiList), err
}

func (p publishWikiListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PublishWikiList, err error) {
	buf := make([]*model.PublishWikiList, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishWikiListDo) FindInBatches(result *[]*model.PublishWikiList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishWikiListDo) Attrs(attrs ...field.AssignExpr) IPublishWikiListDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishWikiListDo) Assign(attrs ...field.AssignExpr) IPublishWikiListDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishWikiListDo) Joins(fields ...field.RelationField) IPublishWikiListDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishWikiListDo) Preload(fields ...field.RelationField) IPublishWikiListDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishWikiListDo) FirstOrInit() (*model.PublishWikiList, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishWikiList), nil
	}
}

func (p publishWikiListDo) FirstOrCreate() (*model.PublishWikiList, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PublishWikiList), nil
	}
}

func (p publishWikiListDo) FindByPage(offset int, limit int) (result []*model.PublishWikiList, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishWikiListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishWikiListDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishWikiListDo) Delete(models ...*model.PublishWikiList) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishWikiListDo) withDO(do gen.Dao) *publishWikiListDo {
	p.DO = *do.(*gen.DO)
	return p
}
