// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRecordCare(db *gorm.DB, opts ...gen.DOOption) recordCare {
	_recordCare := recordCare{}

	_recordCare.recordCareDo.UseDB(db, opts...)
	_recordCare.recordCareDo.UseModel(&model.RecordCare{})

	tableName := _recordCare.recordCareDo.TableName()
	_recordCare.ALL = field.NewAsterisk(tableName)
	_recordCare.RecordCareID = field.NewString(tableName, "record_care_id")
	_recordCare.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_recordCare.WorkCode = field.NewString(tableName, "work_code")
	_recordCare.CreateTime = field.NewString(tableName, "create_time")

	_recordCare.fillFieldMap()

	return _recordCare
}

type recordCare struct {
	recordCareDo

	ALL              field.Asterisk
	RecordCareID     field.String
	HisIssueRecordID field.String
	WorkCode         field.String
	CreateTime       field.String

	fieldMap map[string]field.Expr
}

func (r recordCare) Table(newTableName string) *recordCare {
	r.recordCareDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recordCare) As(alias string) *recordCare {
	r.recordCareDo.DO = *(r.recordCareDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recordCare) updateTableName(table string) *recordCare {
	r.ALL = field.NewAsterisk(table)
	r.RecordCareID = field.NewString(table, "record_care_id")
	r.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	r.WorkCode = field.NewString(table, "work_code")
	r.CreateTime = field.NewString(table, "create_time")

	r.fillFieldMap()

	return r
}

func (r *recordCare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recordCare) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["record_care_id"] = r.RecordCareID
	r.fieldMap["his_issue_record_id"] = r.HisIssueRecordID
	r.fieldMap["work_code"] = r.WorkCode
	r.fieldMap["create_time"] = r.CreateTime
}

func (r recordCare) clone(db *gorm.DB) recordCare {
	r.recordCareDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recordCare) replaceDB(db *gorm.DB) recordCare {
	r.recordCareDo.ReplaceDB(db)
	return r
}

type recordCareDo struct{ gen.DO }

type IRecordCareDo interface {
	gen.SubQuery
	Debug() IRecordCareDo
	WithContext(ctx context.Context) IRecordCareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecordCareDo
	WriteDB() IRecordCareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecordCareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecordCareDo
	Not(conds ...gen.Condition) IRecordCareDo
	Or(conds ...gen.Condition) IRecordCareDo
	Select(conds ...field.Expr) IRecordCareDo
	Where(conds ...gen.Condition) IRecordCareDo
	Order(conds ...field.Expr) IRecordCareDo
	Distinct(cols ...field.Expr) IRecordCareDo
	Omit(cols ...field.Expr) IRecordCareDo
	Join(table schema.Tabler, on ...field.Expr) IRecordCareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecordCareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecordCareDo
	Group(cols ...field.Expr) IRecordCareDo
	Having(conds ...gen.Condition) IRecordCareDo
	Limit(limit int) IRecordCareDo
	Offset(offset int) IRecordCareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordCareDo
	Unscoped() IRecordCareDo
	Create(values ...*model.RecordCare) error
	CreateInBatches(values []*model.RecordCare, batchSize int) error
	Save(values ...*model.RecordCare) error
	First() (*model.RecordCare, error)
	Take() (*model.RecordCare, error)
	Last() (*model.RecordCare, error)
	Find() ([]*model.RecordCare, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordCare, err error)
	FindInBatches(result *[]*model.RecordCare, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecordCare) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecordCareDo
	Assign(attrs ...field.AssignExpr) IRecordCareDo
	Joins(fields ...field.RelationField) IRecordCareDo
	Preload(fields ...field.RelationField) IRecordCareDo
	FirstOrInit() (*model.RecordCare, error)
	FirstOrCreate() (*model.RecordCare, error)
	FindByPage(offset int, limit int) (result []*model.RecordCare, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecordCareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recordCareDo) Debug() IRecordCareDo {
	return r.withDO(r.DO.Debug())
}

func (r recordCareDo) WithContext(ctx context.Context) IRecordCareDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordCareDo) ReadDB() IRecordCareDo {
	return r.Clauses(dbresolver.Read)
}

func (r recordCareDo) WriteDB() IRecordCareDo {
	return r.Clauses(dbresolver.Write)
}

func (r recordCareDo) Session(config *gorm.Session) IRecordCareDo {
	return r.withDO(r.DO.Session(config))
}

func (r recordCareDo) Clauses(conds ...clause.Expression) IRecordCareDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordCareDo) Returning(value interface{}, columns ...string) IRecordCareDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordCareDo) Not(conds ...gen.Condition) IRecordCareDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordCareDo) Or(conds ...gen.Condition) IRecordCareDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordCareDo) Select(conds ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordCareDo) Where(conds ...gen.Condition) IRecordCareDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordCareDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecordCareDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recordCareDo) Order(conds ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordCareDo) Distinct(cols ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordCareDo) Omit(cols ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordCareDo) Join(table schema.Tabler, on ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordCareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordCareDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordCareDo) Group(cols ...field.Expr) IRecordCareDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordCareDo) Having(conds ...gen.Condition) IRecordCareDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordCareDo) Limit(limit int) IRecordCareDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordCareDo) Offset(offset int) IRecordCareDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordCareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordCareDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordCareDo) Unscoped() IRecordCareDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordCareDo) Create(values ...*model.RecordCare) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordCareDo) CreateInBatches(values []*model.RecordCare, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordCareDo) Save(values ...*model.RecordCare) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordCareDo) First() (*model.RecordCare, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCare), nil
	}
}

func (r recordCareDo) Take() (*model.RecordCare, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCare), nil
	}
}

func (r recordCareDo) Last() (*model.RecordCare, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCare), nil
	}
}

func (r recordCareDo) Find() ([]*model.RecordCare, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecordCare), err
}

func (r recordCareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordCare, err error) {
	buf := make([]*model.RecordCare, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordCareDo) FindInBatches(result *[]*model.RecordCare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordCareDo) Attrs(attrs ...field.AssignExpr) IRecordCareDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordCareDo) Assign(attrs ...field.AssignExpr) IRecordCareDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordCareDo) Joins(fields ...field.RelationField) IRecordCareDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordCareDo) Preload(fields ...field.RelationField) IRecordCareDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordCareDo) FirstOrInit() (*model.RecordCare, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCare), nil
	}
}

func (r recordCareDo) FirstOrCreate() (*model.RecordCare, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCare), nil
	}
}

func (r recordCareDo) FindByPage(offset int, limit int) (result []*model.RecordCare, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordCareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recordCareDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recordCareDo) Delete(models ...*model.RecordCare) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recordCareDo) withDO(do gen.Dao) *recordCareDo {
	r.DO = *do.(*gen.DO)
	return r
}
