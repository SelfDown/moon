// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRecordCareInner(db *gorm.DB, opts ...gen.DOOption) recordCareInner {
	_recordCareInner := recordCareInner{}

	_recordCareInner.recordCareInnerDo.UseDB(db, opts...)
	_recordCareInner.recordCareInnerDo.UseModel(&model.RecordCareInner{})

	tableName := _recordCareInner.recordCareInnerDo.TableName()
	_recordCareInner.ALL = field.NewAsterisk(tableName)
	_recordCareInner.RecordCareInnerID = field.NewString(tableName, "record_care_inner_id")
	_recordCareInner.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_recordCareInner.UserID = field.NewString(tableName, "user_id")
	_recordCareInner.CreateTime = field.NewString(tableName, "create_time")

	_recordCareInner.fillFieldMap()

	return _recordCareInner
}

type recordCareInner struct {
	recordCareInnerDo

	ALL               field.Asterisk
	RecordCareInnerID field.String
	HisIssueRecordID  field.String
	UserID            field.String
	CreateTime        field.String

	fieldMap map[string]field.Expr
}

func (r recordCareInner) Table(newTableName string) *recordCareInner {
	r.recordCareInnerDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recordCareInner) As(alias string) *recordCareInner {
	r.recordCareInnerDo.DO = *(r.recordCareInnerDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recordCareInner) updateTableName(table string) *recordCareInner {
	r.ALL = field.NewAsterisk(table)
	r.RecordCareInnerID = field.NewString(table, "record_care_inner_id")
	r.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	r.UserID = field.NewString(table, "user_id")
	r.CreateTime = field.NewString(table, "create_time")

	r.fillFieldMap()

	return r
}

func (r *recordCareInner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recordCareInner) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["record_care_inner_id"] = r.RecordCareInnerID
	r.fieldMap["his_issue_record_id"] = r.HisIssueRecordID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["create_time"] = r.CreateTime
}

func (r recordCareInner) clone(db *gorm.DB) recordCareInner {
	r.recordCareInnerDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recordCareInner) replaceDB(db *gorm.DB) recordCareInner {
	r.recordCareInnerDo.ReplaceDB(db)
	return r
}

type recordCareInnerDo struct{ gen.DO }

type IRecordCareInnerDo interface {
	gen.SubQuery
	Debug() IRecordCareInnerDo
	WithContext(ctx context.Context) IRecordCareInnerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecordCareInnerDo
	WriteDB() IRecordCareInnerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecordCareInnerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecordCareInnerDo
	Not(conds ...gen.Condition) IRecordCareInnerDo
	Or(conds ...gen.Condition) IRecordCareInnerDo
	Select(conds ...field.Expr) IRecordCareInnerDo
	Where(conds ...gen.Condition) IRecordCareInnerDo
	Order(conds ...field.Expr) IRecordCareInnerDo
	Distinct(cols ...field.Expr) IRecordCareInnerDo
	Omit(cols ...field.Expr) IRecordCareInnerDo
	Join(table schema.Tabler, on ...field.Expr) IRecordCareInnerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecordCareInnerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecordCareInnerDo
	Group(cols ...field.Expr) IRecordCareInnerDo
	Having(conds ...gen.Condition) IRecordCareInnerDo
	Limit(limit int) IRecordCareInnerDo
	Offset(offset int) IRecordCareInnerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordCareInnerDo
	Unscoped() IRecordCareInnerDo
	Create(values ...*model.RecordCareInner) error
	CreateInBatches(values []*model.RecordCareInner, batchSize int) error
	Save(values ...*model.RecordCareInner) error
	First() (*model.RecordCareInner, error)
	Take() (*model.RecordCareInner, error)
	Last() (*model.RecordCareInner, error)
	Find() ([]*model.RecordCareInner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordCareInner, err error)
	FindInBatches(result *[]*model.RecordCareInner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecordCareInner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecordCareInnerDo
	Assign(attrs ...field.AssignExpr) IRecordCareInnerDo
	Joins(fields ...field.RelationField) IRecordCareInnerDo
	Preload(fields ...field.RelationField) IRecordCareInnerDo
	FirstOrInit() (*model.RecordCareInner, error)
	FirstOrCreate() (*model.RecordCareInner, error)
	FindByPage(offset int, limit int) (result []*model.RecordCareInner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecordCareInnerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recordCareInnerDo) Debug() IRecordCareInnerDo {
	return r.withDO(r.DO.Debug())
}

func (r recordCareInnerDo) WithContext(ctx context.Context) IRecordCareInnerDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordCareInnerDo) ReadDB() IRecordCareInnerDo {
	return r.Clauses(dbresolver.Read)
}

func (r recordCareInnerDo) WriteDB() IRecordCareInnerDo {
	return r.Clauses(dbresolver.Write)
}

func (r recordCareInnerDo) Session(config *gorm.Session) IRecordCareInnerDo {
	return r.withDO(r.DO.Session(config))
}

func (r recordCareInnerDo) Clauses(conds ...clause.Expression) IRecordCareInnerDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordCareInnerDo) Returning(value interface{}, columns ...string) IRecordCareInnerDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordCareInnerDo) Not(conds ...gen.Condition) IRecordCareInnerDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordCareInnerDo) Or(conds ...gen.Condition) IRecordCareInnerDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordCareInnerDo) Select(conds ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordCareInnerDo) Where(conds ...gen.Condition) IRecordCareInnerDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordCareInnerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecordCareInnerDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recordCareInnerDo) Order(conds ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordCareInnerDo) Distinct(cols ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordCareInnerDo) Omit(cols ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordCareInnerDo) Join(table schema.Tabler, on ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordCareInnerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordCareInnerDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordCareInnerDo) Group(cols ...field.Expr) IRecordCareInnerDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordCareInnerDo) Having(conds ...gen.Condition) IRecordCareInnerDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordCareInnerDo) Limit(limit int) IRecordCareInnerDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordCareInnerDo) Offset(offset int) IRecordCareInnerDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordCareInnerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordCareInnerDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordCareInnerDo) Unscoped() IRecordCareInnerDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordCareInnerDo) Create(values ...*model.RecordCareInner) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordCareInnerDo) CreateInBatches(values []*model.RecordCareInner, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordCareInnerDo) Save(values ...*model.RecordCareInner) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordCareInnerDo) First() (*model.RecordCareInner, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCareInner), nil
	}
}

func (r recordCareInnerDo) Take() (*model.RecordCareInner, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCareInner), nil
	}
}

func (r recordCareInnerDo) Last() (*model.RecordCareInner, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCareInner), nil
	}
}

func (r recordCareInnerDo) Find() ([]*model.RecordCareInner, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecordCareInner), err
}

func (r recordCareInnerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordCareInner, err error) {
	buf := make([]*model.RecordCareInner, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordCareInnerDo) FindInBatches(result *[]*model.RecordCareInner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordCareInnerDo) Attrs(attrs ...field.AssignExpr) IRecordCareInnerDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordCareInnerDo) Assign(attrs ...field.AssignExpr) IRecordCareInnerDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordCareInnerDo) Joins(fields ...field.RelationField) IRecordCareInnerDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordCareInnerDo) Preload(fields ...field.RelationField) IRecordCareInnerDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordCareInnerDo) FirstOrInit() (*model.RecordCareInner, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCareInner), nil
	}
}

func (r recordCareInnerDo) FirstOrCreate() (*model.RecordCareInner, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordCareInner), nil
	}
}

func (r recordCareInnerDo) FindByPage(offset int, limit int) (result []*model.RecordCareInner, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordCareInnerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recordCareInnerDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recordCareInnerDo) Delete(models ...*model.RecordCareInner) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recordCareInnerDo) withDO(do gen.Dao) *recordCareInnerDo {
	r.DO = *do.(*gen.DO)
	return r
}
