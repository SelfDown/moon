// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRecordIssues(db *gorm.DB, opts ...gen.DOOption) recordIssues {
	_recordIssues := recordIssues{}

	_recordIssues.recordIssuesDo.UseDB(db, opts...)
	_recordIssues.recordIssuesDo.UseModel(&model.RecordIssues{})

	tableName := _recordIssues.recordIssuesDo.TableName()
	_recordIssues.ALL = field.NewAsterisk(tableName)
	_recordIssues.RecordIssuesID = field.NewString(tableName, "record_issues_id")
	_recordIssues.HisIssueRecordID = field.NewString(tableName, "his_issue_record_id")
	_recordIssues.IssueKey = field.NewString(tableName, "issue_key")
	_recordIssues.Summary = field.NewString(tableName, "summary")
	_recordIssues.Assignee = field.NewString(tableName, "assignee")
	_recordIssues.Priority = field.NewString(tableName, "priority")
	_recordIssues.FixVersion = field.NewString(tableName, "fix_version")
	_recordIssues.Status = field.NewString(tableName, "status")
	_recordIssues.Tags = field.NewString(tableName, "tags")
	_recordIssues.Duedate = field.NewString(tableName, "duedate")
	_recordIssues.CreateTime = field.NewString(tableName, "create_time")

	_recordIssues.fillFieldMap()

	return _recordIssues
}

type recordIssues struct {
	recordIssuesDo

	ALL              field.Asterisk
	RecordIssuesID   field.String
	HisIssueRecordID field.String
	IssueKey         field.String // 标题
	Summary          field.String
	Assignee         field.String
	Priority         field.String
	FixVersion       field.String
	Status           field.String
	Tags             field.String
	Duedate          field.String
	CreateTime       field.String

	fieldMap map[string]field.Expr
}

func (r recordIssues) Table(newTableName string) *recordIssues {
	r.recordIssuesDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recordIssues) As(alias string) *recordIssues {
	r.recordIssuesDo.DO = *(r.recordIssuesDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recordIssues) updateTableName(table string) *recordIssues {
	r.ALL = field.NewAsterisk(table)
	r.RecordIssuesID = field.NewString(table, "record_issues_id")
	r.HisIssueRecordID = field.NewString(table, "his_issue_record_id")
	r.IssueKey = field.NewString(table, "issue_key")
	r.Summary = field.NewString(table, "summary")
	r.Assignee = field.NewString(table, "assignee")
	r.Priority = field.NewString(table, "priority")
	r.FixVersion = field.NewString(table, "fix_version")
	r.Status = field.NewString(table, "status")
	r.Tags = field.NewString(table, "tags")
	r.Duedate = field.NewString(table, "duedate")
	r.CreateTime = field.NewString(table, "create_time")

	r.fillFieldMap()

	return r
}

func (r *recordIssues) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recordIssues) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["record_issues_id"] = r.RecordIssuesID
	r.fieldMap["his_issue_record_id"] = r.HisIssueRecordID
	r.fieldMap["issue_key"] = r.IssueKey
	r.fieldMap["summary"] = r.Summary
	r.fieldMap["assignee"] = r.Assignee
	r.fieldMap["priority"] = r.Priority
	r.fieldMap["fix_version"] = r.FixVersion
	r.fieldMap["status"] = r.Status
	r.fieldMap["tags"] = r.Tags
	r.fieldMap["duedate"] = r.Duedate
	r.fieldMap["create_time"] = r.CreateTime
}

func (r recordIssues) clone(db *gorm.DB) recordIssues {
	r.recordIssuesDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recordIssues) replaceDB(db *gorm.DB) recordIssues {
	r.recordIssuesDo.ReplaceDB(db)
	return r
}

type recordIssuesDo struct{ gen.DO }

type IRecordIssuesDo interface {
	gen.SubQuery
	Debug() IRecordIssuesDo
	WithContext(ctx context.Context) IRecordIssuesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecordIssuesDo
	WriteDB() IRecordIssuesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecordIssuesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecordIssuesDo
	Not(conds ...gen.Condition) IRecordIssuesDo
	Or(conds ...gen.Condition) IRecordIssuesDo
	Select(conds ...field.Expr) IRecordIssuesDo
	Where(conds ...gen.Condition) IRecordIssuesDo
	Order(conds ...field.Expr) IRecordIssuesDo
	Distinct(cols ...field.Expr) IRecordIssuesDo
	Omit(cols ...field.Expr) IRecordIssuesDo
	Join(table schema.Tabler, on ...field.Expr) IRecordIssuesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecordIssuesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecordIssuesDo
	Group(cols ...field.Expr) IRecordIssuesDo
	Having(conds ...gen.Condition) IRecordIssuesDo
	Limit(limit int) IRecordIssuesDo
	Offset(offset int) IRecordIssuesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordIssuesDo
	Unscoped() IRecordIssuesDo
	Create(values ...*model.RecordIssues) error
	CreateInBatches(values []*model.RecordIssues, batchSize int) error
	Save(values ...*model.RecordIssues) error
	First() (*model.RecordIssues, error)
	Take() (*model.RecordIssues, error)
	Last() (*model.RecordIssues, error)
	Find() ([]*model.RecordIssues, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordIssues, err error)
	FindInBatches(result *[]*model.RecordIssues, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecordIssues) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecordIssuesDo
	Assign(attrs ...field.AssignExpr) IRecordIssuesDo
	Joins(fields ...field.RelationField) IRecordIssuesDo
	Preload(fields ...field.RelationField) IRecordIssuesDo
	FirstOrInit() (*model.RecordIssues, error)
	FirstOrCreate() (*model.RecordIssues, error)
	FindByPage(offset int, limit int) (result []*model.RecordIssues, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecordIssuesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recordIssuesDo) Debug() IRecordIssuesDo {
	return r.withDO(r.DO.Debug())
}

func (r recordIssuesDo) WithContext(ctx context.Context) IRecordIssuesDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordIssuesDo) ReadDB() IRecordIssuesDo {
	return r.Clauses(dbresolver.Read)
}

func (r recordIssuesDo) WriteDB() IRecordIssuesDo {
	return r.Clauses(dbresolver.Write)
}

func (r recordIssuesDo) Session(config *gorm.Session) IRecordIssuesDo {
	return r.withDO(r.DO.Session(config))
}

func (r recordIssuesDo) Clauses(conds ...clause.Expression) IRecordIssuesDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordIssuesDo) Returning(value interface{}, columns ...string) IRecordIssuesDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordIssuesDo) Not(conds ...gen.Condition) IRecordIssuesDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordIssuesDo) Or(conds ...gen.Condition) IRecordIssuesDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordIssuesDo) Select(conds ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordIssuesDo) Where(conds ...gen.Condition) IRecordIssuesDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordIssuesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecordIssuesDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recordIssuesDo) Order(conds ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordIssuesDo) Distinct(cols ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordIssuesDo) Omit(cols ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordIssuesDo) Join(table schema.Tabler, on ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordIssuesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordIssuesDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordIssuesDo) Group(cols ...field.Expr) IRecordIssuesDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordIssuesDo) Having(conds ...gen.Condition) IRecordIssuesDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordIssuesDo) Limit(limit int) IRecordIssuesDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordIssuesDo) Offset(offset int) IRecordIssuesDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordIssuesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordIssuesDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordIssuesDo) Unscoped() IRecordIssuesDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordIssuesDo) Create(values ...*model.RecordIssues) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordIssuesDo) CreateInBatches(values []*model.RecordIssues, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordIssuesDo) Save(values ...*model.RecordIssues) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordIssuesDo) First() (*model.RecordIssues, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordIssues), nil
	}
}

func (r recordIssuesDo) Take() (*model.RecordIssues, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordIssues), nil
	}
}

func (r recordIssuesDo) Last() (*model.RecordIssues, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordIssues), nil
	}
}

func (r recordIssuesDo) Find() ([]*model.RecordIssues, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecordIssues), err
}

func (r recordIssuesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecordIssues, err error) {
	buf := make([]*model.RecordIssues, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordIssuesDo) FindInBatches(result *[]*model.RecordIssues, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordIssuesDo) Attrs(attrs ...field.AssignExpr) IRecordIssuesDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordIssuesDo) Assign(attrs ...field.AssignExpr) IRecordIssuesDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordIssuesDo) Joins(fields ...field.RelationField) IRecordIssuesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordIssuesDo) Preload(fields ...field.RelationField) IRecordIssuesDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordIssuesDo) FirstOrInit() (*model.RecordIssues, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordIssues), nil
	}
}

func (r recordIssuesDo) FirstOrCreate() (*model.RecordIssues, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecordIssues), nil
	}
}

func (r recordIssuesDo) FindByPage(offset int, limit int) (result []*model.RecordIssues, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordIssuesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recordIssuesDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recordIssuesDo) Delete(models ...*model.RecordIssues) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recordIssuesDo) withDO(do gen.Dao) *recordIssuesDo {
	r.DO = *do.(*gen.DO)
	return r
}
