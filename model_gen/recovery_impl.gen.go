// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRecoveryImpl(db *gorm.DB, opts ...gen.DOOption) recoveryImpl {
	_recoveryImpl := recoveryImpl{}

	_recoveryImpl.recoveryImplDo.UseDB(db, opts...)
	_recoveryImpl.recoveryImplDo.UseModel(&model.RecoveryImpl{})

	tableName := _recoveryImpl.recoveryImplDo.TableName()
	_recoveryImpl.ALL = field.NewAsterisk(tableName)
	_recoveryImpl.RecoveryImplID = field.NewString(tableName, "recovery_impl_id")
	_recoveryImpl.RecoverService = field.NewString(tableName, "recover_service")
	_recoveryImpl.RecoverParams = field.NewString(tableName, "recover_params")
	_recoveryImpl.RecoveryImplName = field.NewString(tableName, "recovery_impl_name")
	_recoveryImpl.Note = field.NewString(tableName, "note")
	_recoveryImpl.IsValidate = field.NewString(tableName, "is_validate")
	_recoveryImpl.ResultRecType = field.NewString(tableName, "result_rec_type")

	_recoveryImpl.fillFieldMap()

	return _recoveryImpl
}

type recoveryImpl struct {
	recoveryImplDo

	ALL              field.Asterisk
	RecoveryImplID   field.String // ID
	RecoverService   field.String // 服务方案
	RecoverParams    field.String // 内部方法参数，以Json字符串表达
	RecoveryImplName field.String // 恢复实现方法名称
	Note             field.String // 备注
	IsValidate       field.String // 1、有效  0 无效
	ResultRecType    field.String // 1、默认仅仅记录返回，2发送消息+记录

	fieldMap map[string]field.Expr
}

func (r recoveryImpl) Table(newTableName string) *recoveryImpl {
	r.recoveryImplDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recoveryImpl) As(alias string) *recoveryImpl {
	r.recoveryImplDo.DO = *(r.recoveryImplDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recoveryImpl) updateTableName(table string) *recoveryImpl {
	r.ALL = field.NewAsterisk(table)
	r.RecoveryImplID = field.NewString(table, "recovery_impl_id")
	r.RecoverService = field.NewString(table, "recover_service")
	r.RecoverParams = field.NewString(table, "recover_params")
	r.RecoveryImplName = field.NewString(table, "recovery_impl_name")
	r.Note = field.NewString(table, "note")
	r.IsValidate = field.NewString(table, "is_validate")
	r.ResultRecType = field.NewString(table, "result_rec_type")

	r.fillFieldMap()

	return r
}

func (r *recoveryImpl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recoveryImpl) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["recovery_impl_id"] = r.RecoveryImplID
	r.fieldMap["recover_service"] = r.RecoverService
	r.fieldMap["recover_params"] = r.RecoverParams
	r.fieldMap["recovery_impl_name"] = r.RecoveryImplName
	r.fieldMap["note"] = r.Note
	r.fieldMap["is_validate"] = r.IsValidate
	r.fieldMap["result_rec_type"] = r.ResultRecType
}

func (r recoveryImpl) clone(db *gorm.DB) recoveryImpl {
	r.recoveryImplDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recoveryImpl) replaceDB(db *gorm.DB) recoveryImpl {
	r.recoveryImplDo.ReplaceDB(db)
	return r
}

type recoveryImplDo struct{ gen.DO }

type IRecoveryImplDo interface {
	gen.SubQuery
	Debug() IRecoveryImplDo
	WithContext(ctx context.Context) IRecoveryImplDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecoveryImplDo
	WriteDB() IRecoveryImplDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecoveryImplDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecoveryImplDo
	Not(conds ...gen.Condition) IRecoveryImplDo
	Or(conds ...gen.Condition) IRecoveryImplDo
	Select(conds ...field.Expr) IRecoveryImplDo
	Where(conds ...gen.Condition) IRecoveryImplDo
	Order(conds ...field.Expr) IRecoveryImplDo
	Distinct(cols ...field.Expr) IRecoveryImplDo
	Omit(cols ...field.Expr) IRecoveryImplDo
	Join(table schema.Tabler, on ...field.Expr) IRecoveryImplDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplDo
	Group(cols ...field.Expr) IRecoveryImplDo
	Having(conds ...gen.Condition) IRecoveryImplDo
	Limit(limit int) IRecoveryImplDo
	Offset(offset int) IRecoveryImplDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecoveryImplDo
	Unscoped() IRecoveryImplDo
	Create(values ...*model.RecoveryImpl) error
	CreateInBatches(values []*model.RecoveryImpl, batchSize int) error
	Save(values ...*model.RecoveryImpl) error
	First() (*model.RecoveryImpl, error)
	Take() (*model.RecoveryImpl, error)
	Last() (*model.RecoveryImpl, error)
	Find() ([]*model.RecoveryImpl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecoveryImpl, err error)
	FindInBatches(result *[]*model.RecoveryImpl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecoveryImpl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecoveryImplDo
	Assign(attrs ...field.AssignExpr) IRecoveryImplDo
	Joins(fields ...field.RelationField) IRecoveryImplDo
	Preload(fields ...field.RelationField) IRecoveryImplDo
	FirstOrInit() (*model.RecoveryImpl, error)
	FirstOrCreate() (*model.RecoveryImpl, error)
	FindByPage(offset int, limit int) (result []*model.RecoveryImpl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecoveryImplDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recoveryImplDo) Debug() IRecoveryImplDo {
	return r.withDO(r.DO.Debug())
}

func (r recoveryImplDo) WithContext(ctx context.Context) IRecoveryImplDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recoveryImplDo) ReadDB() IRecoveryImplDo {
	return r.Clauses(dbresolver.Read)
}

func (r recoveryImplDo) WriteDB() IRecoveryImplDo {
	return r.Clauses(dbresolver.Write)
}

func (r recoveryImplDo) Session(config *gorm.Session) IRecoveryImplDo {
	return r.withDO(r.DO.Session(config))
}

func (r recoveryImplDo) Clauses(conds ...clause.Expression) IRecoveryImplDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recoveryImplDo) Returning(value interface{}, columns ...string) IRecoveryImplDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recoveryImplDo) Not(conds ...gen.Condition) IRecoveryImplDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recoveryImplDo) Or(conds ...gen.Condition) IRecoveryImplDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recoveryImplDo) Select(conds ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recoveryImplDo) Where(conds ...gen.Condition) IRecoveryImplDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recoveryImplDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecoveryImplDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recoveryImplDo) Order(conds ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recoveryImplDo) Distinct(cols ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recoveryImplDo) Omit(cols ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recoveryImplDo) Join(table schema.Tabler, on ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recoveryImplDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recoveryImplDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recoveryImplDo) Group(cols ...field.Expr) IRecoveryImplDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recoveryImplDo) Having(conds ...gen.Condition) IRecoveryImplDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recoveryImplDo) Limit(limit int) IRecoveryImplDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recoveryImplDo) Offset(offset int) IRecoveryImplDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recoveryImplDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecoveryImplDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recoveryImplDo) Unscoped() IRecoveryImplDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recoveryImplDo) Create(values ...*model.RecoveryImpl) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recoveryImplDo) CreateInBatches(values []*model.RecoveryImpl, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recoveryImplDo) Save(values ...*model.RecoveryImpl) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recoveryImplDo) First() (*model.RecoveryImpl, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImpl), nil
	}
}

func (r recoveryImplDo) Take() (*model.RecoveryImpl, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImpl), nil
	}
}

func (r recoveryImplDo) Last() (*model.RecoveryImpl, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImpl), nil
	}
}

func (r recoveryImplDo) Find() ([]*model.RecoveryImpl, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecoveryImpl), err
}

func (r recoveryImplDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecoveryImpl, err error) {
	buf := make([]*model.RecoveryImpl, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recoveryImplDo) FindInBatches(result *[]*model.RecoveryImpl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recoveryImplDo) Attrs(attrs ...field.AssignExpr) IRecoveryImplDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recoveryImplDo) Assign(attrs ...field.AssignExpr) IRecoveryImplDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recoveryImplDo) Joins(fields ...field.RelationField) IRecoveryImplDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recoveryImplDo) Preload(fields ...field.RelationField) IRecoveryImplDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recoveryImplDo) FirstOrInit() (*model.RecoveryImpl, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImpl), nil
	}
}

func (r recoveryImplDo) FirstOrCreate() (*model.RecoveryImpl, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImpl), nil
	}
}

func (r recoveryImplDo) FindByPage(offset int, limit int) (result []*model.RecoveryImpl, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recoveryImplDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recoveryImplDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recoveryImplDo) Delete(models ...*model.RecoveryImpl) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recoveryImplDo) withDO(do gen.Dao) *recoveryImplDo {
	r.DO = *do.(*gen.DO)
	return r
}
