// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRecoveryImplResponse(db *gorm.DB, opts ...gen.DOOption) recoveryImplResponse {
	_recoveryImplResponse := recoveryImplResponse{}

	_recoveryImplResponse.recoveryImplResponseDo.UseDB(db, opts...)
	_recoveryImplResponse.recoveryImplResponseDo.UseModel(&model.RecoveryImplResponse{})

	tableName := _recoveryImplResponse.recoveryImplResponseDo.TableName()
	_recoveryImplResponse.ALL = field.NewAsterisk(tableName)
	_recoveryImplResponse.RecoveryImplRespID = field.NewString(tableName, "recovery_impl_resp_id")
	_recoveryImplResponse.RecoveryImplID = field.NewString(tableName, "recovery_impl_id")
	_recoveryImplResponse.RecoveryImplPackageID = field.NewString(tableName, "recovery_impl_package_id")
	_recoveryImplResponse.AlertitemRecordID = field.NewString(tableName, "alertitem_record_id")
	_recoveryImplResponse.RecoveryImplRespStatus = field.NewString(tableName, "recovery_impl_resp_status")
	_recoveryImplResponse.RecoveryImplRespRs = field.NewString(tableName, "recovery_impl_resp_rs")
	_recoveryImplResponse.RecoverImplRespRsType = field.NewString(tableName, "recover_impl_resp_rs_type")
	_recoveryImplResponse.Note = field.NewString(tableName, "note")
	_recoveryImplResponse.AddTime = field.NewTime(tableName, "add_time")

	_recoveryImplResponse.fillFieldMap()

	return _recoveryImplResponse
}

type recoveryImplResponse struct {
	recoveryImplResponseDo

	ALL                    field.Asterisk
	RecoveryImplRespID     field.String // ID
	RecoveryImplID         field.String // ID
	RecoveryImplPackageID  field.String // ID
	AlertitemRecordID      field.String // 预警消息ID
	RecoveryImplRespStatus field.String // 1、成功 2、忽略 3、失败
	RecoveryImplRespRs     field.String // 故障自愈执行结果
	RecoverImplRespRsType  field.String // 结果类型 1、普通文档 2、xml 3、代码
	Note                   field.String // 备注
	AddTime                field.Time   // 添加时间

	fieldMap map[string]field.Expr
}

func (r recoveryImplResponse) Table(newTableName string) *recoveryImplResponse {
	r.recoveryImplResponseDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recoveryImplResponse) As(alias string) *recoveryImplResponse {
	r.recoveryImplResponseDo.DO = *(r.recoveryImplResponseDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recoveryImplResponse) updateTableName(table string) *recoveryImplResponse {
	r.ALL = field.NewAsterisk(table)
	r.RecoveryImplRespID = field.NewString(table, "recovery_impl_resp_id")
	r.RecoveryImplID = field.NewString(table, "recovery_impl_id")
	r.RecoveryImplPackageID = field.NewString(table, "recovery_impl_package_id")
	r.AlertitemRecordID = field.NewString(table, "alertitem_record_id")
	r.RecoveryImplRespStatus = field.NewString(table, "recovery_impl_resp_status")
	r.RecoveryImplRespRs = field.NewString(table, "recovery_impl_resp_rs")
	r.RecoverImplRespRsType = field.NewString(table, "recover_impl_resp_rs_type")
	r.Note = field.NewString(table, "note")
	r.AddTime = field.NewTime(table, "add_time")

	r.fillFieldMap()

	return r
}

func (r *recoveryImplResponse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recoveryImplResponse) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["recovery_impl_resp_id"] = r.RecoveryImplRespID
	r.fieldMap["recovery_impl_id"] = r.RecoveryImplID
	r.fieldMap["recovery_impl_package_id"] = r.RecoveryImplPackageID
	r.fieldMap["alertitem_record_id"] = r.AlertitemRecordID
	r.fieldMap["recovery_impl_resp_status"] = r.RecoveryImplRespStatus
	r.fieldMap["recovery_impl_resp_rs"] = r.RecoveryImplRespRs
	r.fieldMap["recover_impl_resp_rs_type"] = r.RecoverImplRespRsType
	r.fieldMap["note"] = r.Note
	r.fieldMap["add_time"] = r.AddTime
}

func (r recoveryImplResponse) clone(db *gorm.DB) recoveryImplResponse {
	r.recoveryImplResponseDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recoveryImplResponse) replaceDB(db *gorm.DB) recoveryImplResponse {
	r.recoveryImplResponseDo.ReplaceDB(db)
	return r
}

type recoveryImplResponseDo struct{ gen.DO }

type IRecoveryImplResponseDo interface {
	gen.SubQuery
	Debug() IRecoveryImplResponseDo
	WithContext(ctx context.Context) IRecoveryImplResponseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecoveryImplResponseDo
	WriteDB() IRecoveryImplResponseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecoveryImplResponseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecoveryImplResponseDo
	Not(conds ...gen.Condition) IRecoveryImplResponseDo
	Or(conds ...gen.Condition) IRecoveryImplResponseDo
	Select(conds ...field.Expr) IRecoveryImplResponseDo
	Where(conds ...gen.Condition) IRecoveryImplResponseDo
	Order(conds ...field.Expr) IRecoveryImplResponseDo
	Distinct(cols ...field.Expr) IRecoveryImplResponseDo
	Omit(cols ...field.Expr) IRecoveryImplResponseDo
	Join(table schema.Tabler, on ...field.Expr) IRecoveryImplResponseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplResponseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplResponseDo
	Group(cols ...field.Expr) IRecoveryImplResponseDo
	Having(conds ...gen.Condition) IRecoveryImplResponseDo
	Limit(limit int) IRecoveryImplResponseDo
	Offset(offset int) IRecoveryImplResponseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecoveryImplResponseDo
	Unscoped() IRecoveryImplResponseDo
	Create(values ...*model.RecoveryImplResponse) error
	CreateInBatches(values []*model.RecoveryImplResponse, batchSize int) error
	Save(values ...*model.RecoveryImplResponse) error
	First() (*model.RecoveryImplResponse, error)
	Take() (*model.RecoveryImplResponse, error)
	Last() (*model.RecoveryImplResponse, error)
	Find() ([]*model.RecoveryImplResponse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecoveryImplResponse, err error)
	FindInBatches(result *[]*model.RecoveryImplResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecoveryImplResponse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecoveryImplResponseDo
	Assign(attrs ...field.AssignExpr) IRecoveryImplResponseDo
	Joins(fields ...field.RelationField) IRecoveryImplResponseDo
	Preload(fields ...field.RelationField) IRecoveryImplResponseDo
	FirstOrInit() (*model.RecoveryImplResponse, error)
	FirstOrCreate() (*model.RecoveryImplResponse, error)
	FindByPage(offset int, limit int) (result []*model.RecoveryImplResponse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecoveryImplResponseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recoveryImplResponseDo) Debug() IRecoveryImplResponseDo {
	return r.withDO(r.DO.Debug())
}

func (r recoveryImplResponseDo) WithContext(ctx context.Context) IRecoveryImplResponseDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recoveryImplResponseDo) ReadDB() IRecoveryImplResponseDo {
	return r.Clauses(dbresolver.Read)
}

func (r recoveryImplResponseDo) WriteDB() IRecoveryImplResponseDo {
	return r.Clauses(dbresolver.Write)
}

func (r recoveryImplResponseDo) Session(config *gorm.Session) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Session(config))
}

func (r recoveryImplResponseDo) Clauses(conds ...clause.Expression) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recoveryImplResponseDo) Returning(value interface{}, columns ...string) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recoveryImplResponseDo) Not(conds ...gen.Condition) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recoveryImplResponseDo) Or(conds ...gen.Condition) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recoveryImplResponseDo) Select(conds ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recoveryImplResponseDo) Where(conds ...gen.Condition) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recoveryImplResponseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecoveryImplResponseDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recoveryImplResponseDo) Order(conds ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recoveryImplResponseDo) Distinct(cols ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recoveryImplResponseDo) Omit(cols ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recoveryImplResponseDo) Join(table schema.Tabler, on ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recoveryImplResponseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recoveryImplResponseDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recoveryImplResponseDo) Group(cols ...field.Expr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recoveryImplResponseDo) Having(conds ...gen.Condition) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recoveryImplResponseDo) Limit(limit int) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recoveryImplResponseDo) Offset(offset int) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recoveryImplResponseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recoveryImplResponseDo) Unscoped() IRecoveryImplResponseDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recoveryImplResponseDo) Create(values ...*model.RecoveryImplResponse) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recoveryImplResponseDo) CreateInBatches(values []*model.RecoveryImplResponse, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recoveryImplResponseDo) Save(values ...*model.RecoveryImplResponse) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recoveryImplResponseDo) First() (*model.RecoveryImplResponse, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImplResponse), nil
	}
}

func (r recoveryImplResponseDo) Take() (*model.RecoveryImplResponse, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImplResponse), nil
	}
}

func (r recoveryImplResponseDo) Last() (*model.RecoveryImplResponse, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImplResponse), nil
	}
}

func (r recoveryImplResponseDo) Find() ([]*model.RecoveryImplResponse, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecoveryImplResponse), err
}

func (r recoveryImplResponseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecoveryImplResponse, err error) {
	buf := make([]*model.RecoveryImplResponse, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recoveryImplResponseDo) FindInBatches(result *[]*model.RecoveryImplResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recoveryImplResponseDo) Attrs(attrs ...field.AssignExpr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recoveryImplResponseDo) Assign(attrs ...field.AssignExpr) IRecoveryImplResponseDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recoveryImplResponseDo) Joins(fields ...field.RelationField) IRecoveryImplResponseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recoveryImplResponseDo) Preload(fields ...field.RelationField) IRecoveryImplResponseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recoveryImplResponseDo) FirstOrInit() (*model.RecoveryImplResponse, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImplResponse), nil
	}
}

func (r recoveryImplResponseDo) FirstOrCreate() (*model.RecoveryImplResponse, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryImplResponse), nil
	}
}

func (r recoveryImplResponseDo) FindByPage(offset int, limit int) (result []*model.RecoveryImplResponse, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recoveryImplResponseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recoveryImplResponseDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recoveryImplResponseDo) Delete(models ...*model.RecoveryImplResponse) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recoveryImplResponseDo) withDO(do gen.Dao) *recoveryImplResponseDo {
	r.DO = *do.(*gen.DO)
	return r
}
