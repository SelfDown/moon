// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRecoveryStrategy(db *gorm.DB, opts ...gen.DOOption) recoveryStrategy {
	_recoveryStrategy := recoveryStrategy{}

	_recoveryStrategy.recoveryStrategyDo.UseDB(db, opts...)
	_recoveryStrategy.recoveryStrategyDo.UseModel(&model.RecoveryStrategy{})

	tableName := _recoveryStrategy.recoveryStrategyDo.TableName()
	_recoveryStrategy.ALL = field.NewAsterisk(tableName)
	_recoveryStrategy.RecoveryStrategyID = field.NewString(tableName, "recovery_strategy_id")
	_recoveryStrategy.RecoveryImplPackageID = field.NewString(tableName, "recovery_impl_package_id")
	_recoveryStrategy.RecoveryImplID = field.NewString(tableName, "recovery_impl_id")
	_recoveryStrategy.ApplyAlertitems = field.NewString(tableName, "apply_alertitems")
	_recoveryStrategy.ApplyProjects = field.NewString(tableName, "apply_projects")
	_recoveryStrategy.ApplyIps = field.NewString(tableName, "apply_ips")
	_recoveryStrategy.ApplySofts = field.NewString(tableName, "apply_softs")
	_recoveryStrategy.ServerOs = field.NewString(tableName, "server_os")
	_recoveryStrategy.RecoveryStrategyName = field.NewString(tableName, "recovery_strategy_name")
	_recoveryStrategy.SameRecoverSilenceSecs = field.NewFloat64(tableName, "same_recover_silence_secs")
	_recoveryStrategy.DelayRecoverSecs = field.NewFloat64(tableName, "delay_recover_secs")
	_recoveryStrategy.IsValidate = field.NewString(tableName, "is_validate")

	_recoveryStrategy.fillFieldMap()

	return _recoveryStrategy
}

type recoveryStrategy struct {
	recoveryStrategyDo

	ALL                    field.Asterisk
	RecoveryStrategyID     field.String  // ID
	RecoveryImplPackageID  field.String  // ID
	RecoveryImplID         field.String  // ID
	ApplyAlertitems        field.String  // 应用到的预警编码
	ApplyProjects          field.String  // 应用到的项目
	ApplyIps               field.String  // 应用到的IP
	ApplySofts             field.String  // 应用到的软件
	ServerOs               field.String  // 多个逗号分隔
	RecoveryStrategyName   field.String  // 方案名称
	SameRecoverSilenceSecs field.Float64 // 相同对象的同样的自愈N秒内将忽略
	DelayRecoverSecs       field.Float64 // 自愈执行延时N秒后开始
	IsValidate             field.String  // 1、有效  0 无效

	fieldMap map[string]field.Expr
}

func (r recoveryStrategy) Table(newTableName string) *recoveryStrategy {
	r.recoveryStrategyDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recoveryStrategy) As(alias string) *recoveryStrategy {
	r.recoveryStrategyDo.DO = *(r.recoveryStrategyDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recoveryStrategy) updateTableName(table string) *recoveryStrategy {
	r.ALL = field.NewAsterisk(table)
	r.RecoveryStrategyID = field.NewString(table, "recovery_strategy_id")
	r.RecoveryImplPackageID = field.NewString(table, "recovery_impl_package_id")
	r.RecoveryImplID = field.NewString(table, "recovery_impl_id")
	r.ApplyAlertitems = field.NewString(table, "apply_alertitems")
	r.ApplyProjects = field.NewString(table, "apply_projects")
	r.ApplyIps = field.NewString(table, "apply_ips")
	r.ApplySofts = field.NewString(table, "apply_softs")
	r.ServerOs = field.NewString(table, "server_os")
	r.RecoveryStrategyName = field.NewString(table, "recovery_strategy_name")
	r.SameRecoverSilenceSecs = field.NewFloat64(table, "same_recover_silence_secs")
	r.DelayRecoverSecs = field.NewFloat64(table, "delay_recover_secs")
	r.IsValidate = field.NewString(table, "is_validate")

	r.fillFieldMap()

	return r
}

func (r *recoveryStrategy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recoveryStrategy) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 12)
	r.fieldMap["recovery_strategy_id"] = r.RecoveryStrategyID
	r.fieldMap["recovery_impl_package_id"] = r.RecoveryImplPackageID
	r.fieldMap["recovery_impl_id"] = r.RecoveryImplID
	r.fieldMap["apply_alertitems"] = r.ApplyAlertitems
	r.fieldMap["apply_projects"] = r.ApplyProjects
	r.fieldMap["apply_ips"] = r.ApplyIps
	r.fieldMap["apply_softs"] = r.ApplySofts
	r.fieldMap["server_os"] = r.ServerOs
	r.fieldMap["recovery_strategy_name"] = r.RecoveryStrategyName
	r.fieldMap["same_recover_silence_secs"] = r.SameRecoverSilenceSecs
	r.fieldMap["delay_recover_secs"] = r.DelayRecoverSecs
	r.fieldMap["is_validate"] = r.IsValidate
}

func (r recoveryStrategy) clone(db *gorm.DB) recoveryStrategy {
	r.recoveryStrategyDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recoveryStrategy) replaceDB(db *gorm.DB) recoveryStrategy {
	r.recoveryStrategyDo.ReplaceDB(db)
	return r
}

type recoveryStrategyDo struct{ gen.DO }

type IRecoveryStrategyDo interface {
	gen.SubQuery
	Debug() IRecoveryStrategyDo
	WithContext(ctx context.Context) IRecoveryStrategyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecoveryStrategyDo
	WriteDB() IRecoveryStrategyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecoveryStrategyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecoveryStrategyDo
	Not(conds ...gen.Condition) IRecoveryStrategyDo
	Or(conds ...gen.Condition) IRecoveryStrategyDo
	Select(conds ...field.Expr) IRecoveryStrategyDo
	Where(conds ...gen.Condition) IRecoveryStrategyDo
	Order(conds ...field.Expr) IRecoveryStrategyDo
	Distinct(cols ...field.Expr) IRecoveryStrategyDo
	Omit(cols ...field.Expr) IRecoveryStrategyDo
	Join(table schema.Tabler, on ...field.Expr) IRecoveryStrategyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecoveryStrategyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecoveryStrategyDo
	Group(cols ...field.Expr) IRecoveryStrategyDo
	Having(conds ...gen.Condition) IRecoveryStrategyDo
	Limit(limit int) IRecoveryStrategyDo
	Offset(offset int) IRecoveryStrategyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecoveryStrategyDo
	Unscoped() IRecoveryStrategyDo
	Create(values ...*model.RecoveryStrategy) error
	CreateInBatches(values []*model.RecoveryStrategy, batchSize int) error
	Save(values ...*model.RecoveryStrategy) error
	First() (*model.RecoveryStrategy, error)
	Take() (*model.RecoveryStrategy, error)
	Last() (*model.RecoveryStrategy, error)
	Find() ([]*model.RecoveryStrategy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecoveryStrategy, err error)
	FindInBatches(result *[]*model.RecoveryStrategy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RecoveryStrategy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecoveryStrategyDo
	Assign(attrs ...field.AssignExpr) IRecoveryStrategyDo
	Joins(fields ...field.RelationField) IRecoveryStrategyDo
	Preload(fields ...field.RelationField) IRecoveryStrategyDo
	FirstOrInit() (*model.RecoveryStrategy, error)
	FirstOrCreate() (*model.RecoveryStrategy, error)
	FindByPage(offset int, limit int) (result []*model.RecoveryStrategy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecoveryStrategyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recoveryStrategyDo) Debug() IRecoveryStrategyDo {
	return r.withDO(r.DO.Debug())
}

func (r recoveryStrategyDo) WithContext(ctx context.Context) IRecoveryStrategyDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recoveryStrategyDo) ReadDB() IRecoveryStrategyDo {
	return r.Clauses(dbresolver.Read)
}

func (r recoveryStrategyDo) WriteDB() IRecoveryStrategyDo {
	return r.Clauses(dbresolver.Write)
}

func (r recoveryStrategyDo) Session(config *gorm.Session) IRecoveryStrategyDo {
	return r.withDO(r.DO.Session(config))
}

func (r recoveryStrategyDo) Clauses(conds ...clause.Expression) IRecoveryStrategyDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recoveryStrategyDo) Returning(value interface{}, columns ...string) IRecoveryStrategyDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recoveryStrategyDo) Not(conds ...gen.Condition) IRecoveryStrategyDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recoveryStrategyDo) Or(conds ...gen.Condition) IRecoveryStrategyDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recoveryStrategyDo) Select(conds ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recoveryStrategyDo) Where(conds ...gen.Condition) IRecoveryStrategyDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recoveryStrategyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecoveryStrategyDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recoveryStrategyDo) Order(conds ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recoveryStrategyDo) Distinct(cols ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recoveryStrategyDo) Omit(cols ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recoveryStrategyDo) Join(table schema.Tabler, on ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recoveryStrategyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recoveryStrategyDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recoveryStrategyDo) Group(cols ...field.Expr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recoveryStrategyDo) Having(conds ...gen.Condition) IRecoveryStrategyDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recoveryStrategyDo) Limit(limit int) IRecoveryStrategyDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recoveryStrategyDo) Offset(offset int) IRecoveryStrategyDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recoveryStrategyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecoveryStrategyDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recoveryStrategyDo) Unscoped() IRecoveryStrategyDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recoveryStrategyDo) Create(values ...*model.RecoveryStrategy) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recoveryStrategyDo) CreateInBatches(values []*model.RecoveryStrategy, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recoveryStrategyDo) Save(values ...*model.RecoveryStrategy) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recoveryStrategyDo) First() (*model.RecoveryStrategy, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryStrategy), nil
	}
}

func (r recoveryStrategyDo) Take() (*model.RecoveryStrategy, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryStrategy), nil
	}
}

func (r recoveryStrategyDo) Last() (*model.RecoveryStrategy, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryStrategy), nil
	}
}

func (r recoveryStrategyDo) Find() ([]*model.RecoveryStrategy, error) {
	result, err := r.DO.Find()
	return result.([]*model.RecoveryStrategy), err
}

func (r recoveryStrategyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RecoveryStrategy, err error) {
	buf := make([]*model.RecoveryStrategy, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recoveryStrategyDo) FindInBatches(result *[]*model.RecoveryStrategy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recoveryStrategyDo) Attrs(attrs ...field.AssignExpr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recoveryStrategyDo) Assign(attrs ...field.AssignExpr) IRecoveryStrategyDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recoveryStrategyDo) Joins(fields ...field.RelationField) IRecoveryStrategyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recoveryStrategyDo) Preload(fields ...field.RelationField) IRecoveryStrategyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recoveryStrategyDo) FirstOrInit() (*model.RecoveryStrategy, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryStrategy), nil
	}
}

func (r recoveryStrategyDo) FirstOrCreate() (*model.RecoveryStrategy, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RecoveryStrategy), nil
	}
}

func (r recoveryStrategyDo) FindByPage(offset int, limit int) (result []*model.RecoveryStrategy, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recoveryStrategyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recoveryStrategyDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recoveryStrategyDo) Delete(models ...*model.RecoveryStrategy) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recoveryStrategyDo) withDO(do gen.Dao) *recoveryStrategyDo {
	r.DO = *do.(*gen.DO)
	return r
}
