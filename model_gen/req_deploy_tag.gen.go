// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newReqDeployTag(db *gorm.DB, opts ...gen.DOOption) reqDeployTag {
	_reqDeployTag := reqDeployTag{}

	_reqDeployTag.reqDeployTagDo.UseDB(db, opts...)
	_reqDeployTag.reqDeployTagDo.UseModel(&model.ReqDeployTag{})

	tableName := _reqDeployTag.reqDeployTagDo.TableName()
	_reqDeployTag.ALL = field.NewAsterisk(tableName)
	_reqDeployTag.ReqDeployTagID = field.NewString(tableName, "req_deploy_tag_id")
	_reqDeployTag.ReqID = field.NewString(tableName, "req_id")
	_reqDeployTag.SysProjectID = field.NewString(tableName, "sys_project_id")

	_reqDeployTag.fillFieldMap()

	return _reqDeployTag
}

type reqDeployTag struct {
	reqDeployTagDo

	ALL            field.Asterisk
	ReqDeployTagID field.String
	ReqID          field.String
	SysProjectID   field.String // 用户ID

	fieldMap map[string]field.Expr
}

func (r reqDeployTag) Table(newTableName string) *reqDeployTag {
	r.reqDeployTagDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reqDeployTag) As(alias string) *reqDeployTag {
	r.reqDeployTagDo.DO = *(r.reqDeployTagDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reqDeployTag) updateTableName(table string) *reqDeployTag {
	r.ALL = field.NewAsterisk(table)
	r.ReqDeployTagID = field.NewString(table, "req_deploy_tag_id")
	r.ReqID = field.NewString(table, "req_id")
	r.SysProjectID = field.NewString(table, "sys_project_id")

	r.fillFieldMap()

	return r
}

func (r *reqDeployTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reqDeployTag) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["req_deploy_tag_id"] = r.ReqDeployTagID
	r.fieldMap["req_id"] = r.ReqID
	r.fieldMap["sys_project_id"] = r.SysProjectID
}

func (r reqDeployTag) clone(db *gorm.DB) reqDeployTag {
	r.reqDeployTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reqDeployTag) replaceDB(db *gorm.DB) reqDeployTag {
	r.reqDeployTagDo.ReplaceDB(db)
	return r
}

type reqDeployTagDo struct{ gen.DO }

type IReqDeployTagDo interface {
	gen.SubQuery
	Debug() IReqDeployTagDo
	WithContext(ctx context.Context) IReqDeployTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReqDeployTagDo
	WriteDB() IReqDeployTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReqDeployTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReqDeployTagDo
	Not(conds ...gen.Condition) IReqDeployTagDo
	Or(conds ...gen.Condition) IReqDeployTagDo
	Select(conds ...field.Expr) IReqDeployTagDo
	Where(conds ...gen.Condition) IReqDeployTagDo
	Order(conds ...field.Expr) IReqDeployTagDo
	Distinct(cols ...field.Expr) IReqDeployTagDo
	Omit(cols ...field.Expr) IReqDeployTagDo
	Join(table schema.Tabler, on ...field.Expr) IReqDeployTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReqDeployTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReqDeployTagDo
	Group(cols ...field.Expr) IReqDeployTagDo
	Having(conds ...gen.Condition) IReqDeployTagDo
	Limit(limit int) IReqDeployTagDo
	Offset(offset int) IReqDeployTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReqDeployTagDo
	Unscoped() IReqDeployTagDo
	Create(values ...*model.ReqDeployTag) error
	CreateInBatches(values []*model.ReqDeployTag, batchSize int) error
	Save(values ...*model.ReqDeployTag) error
	First() (*model.ReqDeployTag, error)
	Take() (*model.ReqDeployTag, error)
	Last() (*model.ReqDeployTag, error)
	Find() ([]*model.ReqDeployTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqDeployTag, err error)
	FindInBatches(result *[]*model.ReqDeployTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReqDeployTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReqDeployTagDo
	Assign(attrs ...field.AssignExpr) IReqDeployTagDo
	Joins(fields ...field.RelationField) IReqDeployTagDo
	Preload(fields ...field.RelationField) IReqDeployTagDo
	FirstOrInit() (*model.ReqDeployTag, error)
	FirstOrCreate() (*model.ReqDeployTag, error)
	FindByPage(offset int, limit int) (result []*model.ReqDeployTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReqDeployTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reqDeployTagDo) Debug() IReqDeployTagDo {
	return r.withDO(r.DO.Debug())
}

func (r reqDeployTagDo) WithContext(ctx context.Context) IReqDeployTagDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reqDeployTagDo) ReadDB() IReqDeployTagDo {
	return r.Clauses(dbresolver.Read)
}

func (r reqDeployTagDo) WriteDB() IReqDeployTagDo {
	return r.Clauses(dbresolver.Write)
}

func (r reqDeployTagDo) Session(config *gorm.Session) IReqDeployTagDo {
	return r.withDO(r.DO.Session(config))
}

func (r reqDeployTagDo) Clauses(conds ...clause.Expression) IReqDeployTagDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reqDeployTagDo) Returning(value interface{}, columns ...string) IReqDeployTagDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reqDeployTagDo) Not(conds ...gen.Condition) IReqDeployTagDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reqDeployTagDo) Or(conds ...gen.Condition) IReqDeployTagDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reqDeployTagDo) Select(conds ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reqDeployTagDo) Where(conds ...gen.Condition) IReqDeployTagDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reqDeployTagDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReqDeployTagDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reqDeployTagDo) Order(conds ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reqDeployTagDo) Distinct(cols ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reqDeployTagDo) Omit(cols ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reqDeployTagDo) Join(table schema.Tabler, on ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reqDeployTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reqDeployTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reqDeployTagDo) Group(cols ...field.Expr) IReqDeployTagDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reqDeployTagDo) Having(conds ...gen.Condition) IReqDeployTagDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reqDeployTagDo) Limit(limit int) IReqDeployTagDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reqDeployTagDo) Offset(offset int) IReqDeployTagDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reqDeployTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReqDeployTagDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reqDeployTagDo) Unscoped() IReqDeployTagDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reqDeployTagDo) Create(values ...*model.ReqDeployTag) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reqDeployTagDo) CreateInBatches(values []*model.ReqDeployTag, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reqDeployTagDo) Save(values ...*model.ReqDeployTag) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reqDeployTagDo) First() (*model.ReqDeployTag, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqDeployTag), nil
	}
}

func (r reqDeployTagDo) Take() (*model.ReqDeployTag, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqDeployTag), nil
	}
}

func (r reqDeployTagDo) Last() (*model.ReqDeployTag, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqDeployTag), nil
	}
}

func (r reqDeployTagDo) Find() ([]*model.ReqDeployTag, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReqDeployTag), err
}

func (r reqDeployTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqDeployTag, err error) {
	buf := make([]*model.ReqDeployTag, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reqDeployTagDo) FindInBatches(result *[]*model.ReqDeployTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reqDeployTagDo) Attrs(attrs ...field.AssignExpr) IReqDeployTagDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reqDeployTagDo) Assign(attrs ...field.AssignExpr) IReqDeployTagDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reqDeployTagDo) Joins(fields ...field.RelationField) IReqDeployTagDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reqDeployTagDo) Preload(fields ...field.RelationField) IReqDeployTagDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reqDeployTagDo) FirstOrInit() (*model.ReqDeployTag, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqDeployTag), nil
	}
}

func (r reqDeployTagDo) FirstOrCreate() (*model.ReqDeployTag, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqDeployTag), nil
	}
}

func (r reqDeployTagDo) FindByPage(offset int, limit int) (result []*model.ReqDeployTag, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reqDeployTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reqDeployTagDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reqDeployTagDo) Delete(models ...*model.ReqDeployTag) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reqDeployTagDo) withDO(do gen.Dao) *reqDeployTagDo {
	r.DO = *do.(*gen.DO)
	return r
}
