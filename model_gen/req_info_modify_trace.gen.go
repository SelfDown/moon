// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newReqInfoModifyTrace(db *gorm.DB, opts ...gen.DOOption) reqInfoModifyTrace {
	_reqInfoModifyTrace := reqInfoModifyTrace{}

	_reqInfoModifyTrace.reqInfoModifyTraceDo.UseDB(db, opts...)
	_reqInfoModifyTrace.reqInfoModifyTraceDo.UseModel(&model.ReqInfoModifyTrace{})

	tableName := _reqInfoModifyTrace.reqInfoModifyTraceDo.TableName()
	_reqInfoModifyTrace.ALL = field.NewAsterisk(tableName)
	_reqInfoModifyTrace.TraceID = field.NewString(tableName, "trace_id")
	_reqInfoModifyTrace.ReqEventID = field.NewString(tableName, "req_event_id")
	_reqInfoModifyTrace.ReqEventType = field.NewString(tableName, "req_event_type")
	_reqInfoModifyTrace.OpUser = field.NewString(tableName, "op_user")
	_reqInfoModifyTrace.OpTime = field.NewTime(tableName, "op_time")
	_reqInfoModifyTrace.CreateTime = field.NewTime(tableName, "create_time")
	_reqInfoModifyTrace.ModifyTime = field.NewTime(tableName, "modify_time")
	_reqInfoModifyTrace.Comments = field.NewString(tableName, "comments")
	_reqInfoModifyTrace.ReqID = field.NewString(tableName, "req_id")

	_reqInfoModifyTrace.fillFieldMap()

	return _reqInfoModifyTrace
}

type reqInfoModifyTrace struct {
	reqInfoModifyTraceDo

	ALL        field.Asterisk
	TraceID    field.String
	ReqEventID field.String
	/*
		req_event_type 用于描述 请求的类型, 我们定义一些吧,  0 - 升级单的修改  1 -脚本归档的修改 以后还有其他的类型

	*/
	ReqEventType field.String
	OpUser       field.String
	OpTime       field.Time
	CreateTime   field.Time // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time // 记录修改时间（数据库自动写入）
	Comments     field.String
	ReqID        field.String

	fieldMap map[string]field.Expr
}

func (r reqInfoModifyTrace) Table(newTableName string) *reqInfoModifyTrace {
	r.reqInfoModifyTraceDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reqInfoModifyTrace) As(alias string) *reqInfoModifyTrace {
	r.reqInfoModifyTraceDo.DO = *(r.reqInfoModifyTraceDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reqInfoModifyTrace) updateTableName(table string) *reqInfoModifyTrace {
	r.ALL = field.NewAsterisk(table)
	r.TraceID = field.NewString(table, "trace_id")
	r.ReqEventID = field.NewString(table, "req_event_id")
	r.ReqEventType = field.NewString(table, "req_event_type")
	r.OpUser = field.NewString(table, "op_user")
	r.OpTime = field.NewTime(table, "op_time")
	r.CreateTime = field.NewTime(table, "create_time")
	r.ModifyTime = field.NewTime(table, "modify_time")
	r.Comments = field.NewString(table, "comments")
	r.ReqID = field.NewString(table, "req_id")

	r.fillFieldMap()

	return r
}

func (r *reqInfoModifyTrace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reqInfoModifyTrace) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["trace_id"] = r.TraceID
	r.fieldMap["req_event_id"] = r.ReqEventID
	r.fieldMap["req_event_type"] = r.ReqEventType
	r.fieldMap["op_user"] = r.OpUser
	r.fieldMap["op_time"] = r.OpTime
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["modify_time"] = r.ModifyTime
	r.fieldMap["comments"] = r.Comments
	r.fieldMap["req_id"] = r.ReqID
}

func (r reqInfoModifyTrace) clone(db *gorm.DB) reqInfoModifyTrace {
	r.reqInfoModifyTraceDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reqInfoModifyTrace) replaceDB(db *gorm.DB) reqInfoModifyTrace {
	r.reqInfoModifyTraceDo.ReplaceDB(db)
	return r
}

type reqInfoModifyTraceDo struct{ gen.DO }

type IReqInfoModifyTraceDo interface {
	gen.SubQuery
	Debug() IReqInfoModifyTraceDo
	WithContext(ctx context.Context) IReqInfoModifyTraceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReqInfoModifyTraceDo
	WriteDB() IReqInfoModifyTraceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReqInfoModifyTraceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReqInfoModifyTraceDo
	Not(conds ...gen.Condition) IReqInfoModifyTraceDo
	Or(conds ...gen.Condition) IReqInfoModifyTraceDo
	Select(conds ...field.Expr) IReqInfoModifyTraceDo
	Where(conds ...gen.Condition) IReqInfoModifyTraceDo
	Order(conds ...field.Expr) IReqInfoModifyTraceDo
	Distinct(cols ...field.Expr) IReqInfoModifyTraceDo
	Omit(cols ...field.Expr) IReqInfoModifyTraceDo
	Join(table schema.Tabler, on ...field.Expr) IReqInfoModifyTraceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReqInfoModifyTraceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReqInfoModifyTraceDo
	Group(cols ...field.Expr) IReqInfoModifyTraceDo
	Having(conds ...gen.Condition) IReqInfoModifyTraceDo
	Limit(limit int) IReqInfoModifyTraceDo
	Offset(offset int) IReqInfoModifyTraceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReqInfoModifyTraceDo
	Unscoped() IReqInfoModifyTraceDo
	Create(values ...*model.ReqInfoModifyTrace) error
	CreateInBatches(values []*model.ReqInfoModifyTrace, batchSize int) error
	Save(values ...*model.ReqInfoModifyTrace) error
	First() (*model.ReqInfoModifyTrace, error)
	Take() (*model.ReqInfoModifyTrace, error)
	Last() (*model.ReqInfoModifyTrace, error)
	Find() ([]*model.ReqInfoModifyTrace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqInfoModifyTrace, err error)
	FindInBatches(result *[]*model.ReqInfoModifyTrace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReqInfoModifyTrace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReqInfoModifyTraceDo
	Assign(attrs ...field.AssignExpr) IReqInfoModifyTraceDo
	Joins(fields ...field.RelationField) IReqInfoModifyTraceDo
	Preload(fields ...field.RelationField) IReqInfoModifyTraceDo
	FirstOrInit() (*model.ReqInfoModifyTrace, error)
	FirstOrCreate() (*model.ReqInfoModifyTrace, error)
	FindByPage(offset int, limit int) (result []*model.ReqInfoModifyTrace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReqInfoModifyTraceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reqInfoModifyTraceDo) Debug() IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Debug())
}

func (r reqInfoModifyTraceDo) WithContext(ctx context.Context) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reqInfoModifyTraceDo) ReadDB() IReqInfoModifyTraceDo {
	return r.Clauses(dbresolver.Read)
}

func (r reqInfoModifyTraceDo) WriteDB() IReqInfoModifyTraceDo {
	return r.Clauses(dbresolver.Write)
}

func (r reqInfoModifyTraceDo) Session(config *gorm.Session) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Session(config))
}

func (r reqInfoModifyTraceDo) Clauses(conds ...clause.Expression) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reqInfoModifyTraceDo) Returning(value interface{}, columns ...string) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reqInfoModifyTraceDo) Not(conds ...gen.Condition) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reqInfoModifyTraceDo) Or(conds ...gen.Condition) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reqInfoModifyTraceDo) Select(conds ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reqInfoModifyTraceDo) Where(conds ...gen.Condition) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reqInfoModifyTraceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReqInfoModifyTraceDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reqInfoModifyTraceDo) Order(conds ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reqInfoModifyTraceDo) Distinct(cols ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reqInfoModifyTraceDo) Omit(cols ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reqInfoModifyTraceDo) Join(table schema.Tabler, on ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reqInfoModifyTraceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reqInfoModifyTraceDo) RightJoin(table schema.Tabler, on ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reqInfoModifyTraceDo) Group(cols ...field.Expr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reqInfoModifyTraceDo) Having(conds ...gen.Condition) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reqInfoModifyTraceDo) Limit(limit int) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reqInfoModifyTraceDo) Offset(offset int) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reqInfoModifyTraceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reqInfoModifyTraceDo) Unscoped() IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reqInfoModifyTraceDo) Create(values ...*model.ReqInfoModifyTrace) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reqInfoModifyTraceDo) CreateInBatches(values []*model.ReqInfoModifyTrace, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reqInfoModifyTraceDo) Save(values ...*model.ReqInfoModifyTrace) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reqInfoModifyTraceDo) First() (*model.ReqInfoModifyTrace, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqInfoModifyTrace), nil
	}
}

func (r reqInfoModifyTraceDo) Take() (*model.ReqInfoModifyTrace, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqInfoModifyTrace), nil
	}
}

func (r reqInfoModifyTraceDo) Last() (*model.ReqInfoModifyTrace, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqInfoModifyTrace), nil
	}
}

func (r reqInfoModifyTraceDo) Find() ([]*model.ReqInfoModifyTrace, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReqInfoModifyTrace), err
}

func (r reqInfoModifyTraceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqInfoModifyTrace, err error) {
	buf := make([]*model.ReqInfoModifyTrace, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reqInfoModifyTraceDo) FindInBatches(result *[]*model.ReqInfoModifyTrace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reqInfoModifyTraceDo) Attrs(attrs ...field.AssignExpr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reqInfoModifyTraceDo) Assign(attrs ...field.AssignExpr) IReqInfoModifyTraceDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reqInfoModifyTraceDo) Joins(fields ...field.RelationField) IReqInfoModifyTraceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reqInfoModifyTraceDo) Preload(fields ...field.RelationField) IReqInfoModifyTraceDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reqInfoModifyTraceDo) FirstOrInit() (*model.ReqInfoModifyTrace, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqInfoModifyTrace), nil
	}
}

func (r reqInfoModifyTraceDo) FirstOrCreate() (*model.ReqInfoModifyTrace, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqInfoModifyTrace), nil
	}
}

func (r reqInfoModifyTraceDo) FindByPage(offset int, limit int) (result []*model.ReqInfoModifyTrace, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reqInfoModifyTraceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reqInfoModifyTraceDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reqInfoModifyTraceDo) Delete(models ...*model.ReqInfoModifyTrace) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reqInfoModifyTraceDo) withDO(do gen.Dao) *reqInfoModifyTraceDo {
	r.DO = *do.(*gen.DO)
	return r
}
