// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newReqIssueRecordImg(db *gorm.DB, opts ...gen.DOOption) reqIssueRecordImg {
	_reqIssueRecordImg := reqIssueRecordImg{}

	_reqIssueRecordImg.reqIssueRecordImgDo.UseDB(db, opts...)
	_reqIssueRecordImg.reqIssueRecordImgDo.UseModel(&model.ReqIssueRecordImg{})

	tableName := _reqIssueRecordImg.reqIssueRecordImgDo.TableName()
	_reqIssueRecordImg.ALL = field.NewAsterisk(tableName)
	_reqIssueRecordImg.ReqIssueRecordImgID = field.NewString(tableName, "req_issue_record_img_id")
	_reqIssueRecordImg.IssueImgID = field.NewString(tableName, "issue_img_id")
	_reqIssueRecordImg.ReqIssueRecordID = field.NewString(tableName, "req_issue_record_id")

	_reqIssueRecordImg.fillFieldMap()

	return _reqIssueRecordImg
}

type reqIssueRecordImg struct {
	reqIssueRecordImgDo

	ALL                 field.Asterisk
	ReqIssueRecordImgID field.String
	IssueImgID          field.String // 文件内容id
	ReqIssueRecordID    field.String

	fieldMap map[string]field.Expr
}

func (r reqIssueRecordImg) Table(newTableName string) *reqIssueRecordImg {
	r.reqIssueRecordImgDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reqIssueRecordImg) As(alias string) *reqIssueRecordImg {
	r.reqIssueRecordImgDo.DO = *(r.reqIssueRecordImgDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reqIssueRecordImg) updateTableName(table string) *reqIssueRecordImg {
	r.ALL = field.NewAsterisk(table)
	r.ReqIssueRecordImgID = field.NewString(table, "req_issue_record_img_id")
	r.IssueImgID = field.NewString(table, "issue_img_id")
	r.ReqIssueRecordID = field.NewString(table, "req_issue_record_id")

	r.fillFieldMap()

	return r
}

func (r *reqIssueRecordImg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reqIssueRecordImg) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["req_issue_record_img_id"] = r.ReqIssueRecordImgID
	r.fieldMap["issue_img_id"] = r.IssueImgID
	r.fieldMap["req_issue_record_id"] = r.ReqIssueRecordID
}

func (r reqIssueRecordImg) clone(db *gorm.DB) reqIssueRecordImg {
	r.reqIssueRecordImgDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reqIssueRecordImg) replaceDB(db *gorm.DB) reqIssueRecordImg {
	r.reqIssueRecordImgDo.ReplaceDB(db)
	return r
}

type reqIssueRecordImgDo struct{ gen.DO }

type IReqIssueRecordImgDo interface {
	gen.SubQuery
	Debug() IReqIssueRecordImgDo
	WithContext(ctx context.Context) IReqIssueRecordImgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReqIssueRecordImgDo
	WriteDB() IReqIssueRecordImgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReqIssueRecordImgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReqIssueRecordImgDo
	Not(conds ...gen.Condition) IReqIssueRecordImgDo
	Or(conds ...gen.Condition) IReqIssueRecordImgDo
	Select(conds ...field.Expr) IReqIssueRecordImgDo
	Where(conds ...gen.Condition) IReqIssueRecordImgDo
	Order(conds ...field.Expr) IReqIssueRecordImgDo
	Distinct(cols ...field.Expr) IReqIssueRecordImgDo
	Omit(cols ...field.Expr) IReqIssueRecordImgDo
	Join(table schema.Tabler, on ...field.Expr) IReqIssueRecordImgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReqIssueRecordImgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReqIssueRecordImgDo
	Group(cols ...field.Expr) IReqIssueRecordImgDo
	Having(conds ...gen.Condition) IReqIssueRecordImgDo
	Limit(limit int) IReqIssueRecordImgDo
	Offset(offset int) IReqIssueRecordImgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReqIssueRecordImgDo
	Unscoped() IReqIssueRecordImgDo
	Create(values ...*model.ReqIssueRecordImg) error
	CreateInBatches(values []*model.ReqIssueRecordImg, batchSize int) error
	Save(values ...*model.ReqIssueRecordImg) error
	First() (*model.ReqIssueRecordImg, error)
	Take() (*model.ReqIssueRecordImg, error)
	Last() (*model.ReqIssueRecordImg, error)
	Find() ([]*model.ReqIssueRecordImg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqIssueRecordImg, err error)
	FindInBatches(result *[]*model.ReqIssueRecordImg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReqIssueRecordImg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReqIssueRecordImgDo
	Assign(attrs ...field.AssignExpr) IReqIssueRecordImgDo
	Joins(fields ...field.RelationField) IReqIssueRecordImgDo
	Preload(fields ...field.RelationField) IReqIssueRecordImgDo
	FirstOrInit() (*model.ReqIssueRecordImg, error)
	FirstOrCreate() (*model.ReqIssueRecordImg, error)
	FindByPage(offset int, limit int) (result []*model.ReqIssueRecordImg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReqIssueRecordImgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reqIssueRecordImgDo) Debug() IReqIssueRecordImgDo {
	return r.withDO(r.DO.Debug())
}

func (r reqIssueRecordImgDo) WithContext(ctx context.Context) IReqIssueRecordImgDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reqIssueRecordImgDo) ReadDB() IReqIssueRecordImgDo {
	return r.Clauses(dbresolver.Read)
}

func (r reqIssueRecordImgDo) WriteDB() IReqIssueRecordImgDo {
	return r.Clauses(dbresolver.Write)
}

func (r reqIssueRecordImgDo) Session(config *gorm.Session) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Session(config))
}

func (r reqIssueRecordImgDo) Clauses(conds ...clause.Expression) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reqIssueRecordImgDo) Returning(value interface{}, columns ...string) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reqIssueRecordImgDo) Not(conds ...gen.Condition) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reqIssueRecordImgDo) Or(conds ...gen.Condition) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reqIssueRecordImgDo) Select(conds ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reqIssueRecordImgDo) Where(conds ...gen.Condition) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reqIssueRecordImgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReqIssueRecordImgDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reqIssueRecordImgDo) Order(conds ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reqIssueRecordImgDo) Distinct(cols ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reqIssueRecordImgDo) Omit(cols ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reqIssueRecordImgDo) Join(table schema.Tabler, on ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reqIssueRecordImgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reqIssueRecordImgDo) RightJoin(table schema.Tabler, on ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reqIssueRecordImgDo) Group(cols ...field.Expr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reqIssueRecordImgDo) Having(conds ...gen.Condition) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reqIssueRecordImgDo) Limit(limit int) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reqIssueRecordImgDo) Offset(offset int) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reqIssueRecordImgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reqIssueRecordImgDo) Unscoped() IReqIssueRecordImgDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reqIssueRecordImgDo) Create(values ...*model.ReqIssueRecordImg) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reqIssueRecordImgDo) CreateInBatches(values []*model.ReqIssueRecordImg, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reqIssueRecordImgDo) Save(values ...*model.ReqIssueRecordImg) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reqIssueRecordImgDo) First() (*model.ReqIssueRecordImg, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqIssueRecordImg), nil
	}
}

func (r reqIssueRecordImgDo) Take() (*model.ReqIssueRecordImg, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqIssueRecordImg), nil
	}
}

func (r reqIssueRecordImgDo) Last() (*model.ReqIssueRecordImg, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqIssueRecordImg), nil
	}
}

func (r reqIssueRecordImgDo) Find() ([]*model.ReqIssueRecordImg, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReqIssueRecordImg), err
}

func (r reqIssueRecordImgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqIssueRecordImg, err error) {
	buf := make([]*model.ReqIssueRecordImg, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reqIssueRecordImgDo) FindInBatches(result *[]*model.ReqIssueRecordImg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reqIssueRecordImgDo) Attrs(attrs ...field.AssignExpr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reqIssueRecordImgDo) Assign(attrs ...field.AssignExpr) IReqIssueRecordImgDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reqIssueRecordImgDo) Joins(fields ...field.RelationField) IReqIssueRecordImgDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reqIssueRecordImgDo) Preload(fields ...field.RelationField) IReqIssueRecordImgDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reqIssueRecordImgDo) FirstOrInit() (*model.ReqIssueRecordImg, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqIssueRecordImg), nil
	}
}

func (r reqIssueRecordImgDo) FirstOrCreate() (*model.ReqIssueRecordImg, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqIssueRecordImg), nil
	}
}

func (r reqIssueRecordImgDo) FindByPage(offset int, limit int) (result []*model.ReqIssueRecordImg, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reqIssueRecordImgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reqIssueRecordImgDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reqIssueRecordImgDo) Delete(models ...*model.ReqIssueRecordImg) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reqIssueRecordImgDo) withDO(do gen.Dao) *reqIssueRecordImgDo {
	r.DO = *do.(*gen.DO)
	return r
}
