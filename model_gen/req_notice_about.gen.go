// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newReqNoticeAbout(db *gorm.DB, opts ...gen.DOOption) reqNoticeAbout {
	_reqNoticeAbout := reqNoticeAbout{}

	_reqNoticeAbout.reqNoticeAboutDo.UseDB(db, opts...)
	_reqNoticeAbout.reqNoticeAboutDo.UseModel(&model.ReqNoticeAbout{})

	tableName := _reqNoticeAbout.reqNoticeAboutDo.TableName()
	_reqNoticeAbout.ALL = field.NewAsterisk(tableName)
	_reqNoticeAbout.NoticeID = field.NewString(tableName, "notice_id")
	_reqNoticeAbout.ReqID = field.NewString(tableName, "req_id")
	_reqNoticeAbout.ID = field.NewString(tableName, "id")
	_reqNoticeAbout.CreateTime = field.NewString(tableName, "create_time")

	_reqNoticeAbout.fillFieldMap()

	return _reqNoticeAbout
}

type reqNoticeAbout struct {
	reqNoticeAboutDo

	ALL        field.Asterisk
	NoticeID   field.String
	ReqID      field.String
	ID         field.String
	CreateTime field.String

	fieldMap map[string]field.Expr
}

func (r reqNoticeAbout) Table(newTableName string) *reqNoticeAbout {
	r.reqNoticeAboutDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reqNoticeAbout) As(alias string) *reqNoticeAbout {
	r.reqNoticeAboutDo.DO = *(r.reqNoticeAboutDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reqNoticeAbout) updateTableName(table string) *reqNoticeAbout {
	r.ALL = field.NewAsterisk(table)
	r.NoticeID = field.NewString(table, "notice_id")
	r.ReqID = field.NewString(table, "req_id")
	r.ID = field.NewString(table, "id")
	r.CreateTime = field.NewString(table, "create_time")

	r.fillFieldMap()

	return r
}

func (r *reqNoticeAbout) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reqNoticeAbout) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["notice_id"] = r.NoticeID
	r.fieldMap["req_id"] = r.ReqID
	r.fieldMap["id"] = r.ID
	r.fieldMap["create_time"] = r.CreateTime
}

func (r reqNoticeAbout) clone(db *gorm.DB) reqNoticeAbout {
	r.reqNoticeAboutDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reqNoticeAbout) replaceDB(db *gorm.DB) reqNoticeAbout {
	r.reqNoticeAboutDo.ReplaceDB(db)
	return r
}

type reqNoticeAboutDo struct{ gen.DO }

type IReqNoticeAboutDo interface {
	gen.SubQuery
	Debug() IReqNoticeAboutDo
	WithContext(ctx context.Context) IReqNoticeAboutDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReqNoticeAboutDo
	WriteDB() IReqNoticeAboutDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReqNoticeAboutDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReqNoticeAboutDo
	Not(conds ...gen.Condition) IReqNoticeAboutDo
	Or(conds ...gen.Condition) IReqNoticeAboutDo
	Select(conds ...field.Expr) IReqNoticeAboutDo
	Where(conds ...gen.Condition) IReqNoticeAboutDo
	Order(conds ...field.Expr) IReqNoticeAboutDo
	Distinct(cols ...field.Expr) IReqNoticeAboutDo
	Omit(cols ...field.Expr) IReqNoticeAboutDo
	Join(table schema.Tabler, on ...field.Expr) IReqNoticeAboutDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReqNoticeAboutDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReqNoticeAboutDo
	Group(cols ...field.Expr) IReqNoticeAboutDo
	Having(conds ...gen.Condition) IReqNoticeAboutDo
	Limit(limit int) IReqNoticeAboutDo
	Offset(offset int) IReqNoticeAboutDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReqNoticeAboutDo
	Unscoped() IReqNoticeAboutDo
	Create(values ...*model.ReqNoticeAbout) error
	CreateInBatches(values []*model.ReqNoticeAbout, batchSize int) error
	Save(values ...*model.ReqNoticeAbout) error
	First() (*model.ReqNoticeAbout, error)
	Take() (*model.ReqNoticeAbout, error)
	Last() (*model.ReqNoticeAbout, error)
	Find() ([]*model.ReqNoticeAbout, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqNoticeAbout, err error)
	FindInBatches(result *[]*model.ReqNoticeAbout, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReqNoticeAbout) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReqNoticeAboutDo
	Assign(attrs ...field.AssignExpr) IReqNoticeAboutDo
	Joins(fields ...field.RelationField) IReqNoticeAboutDo
	Preload(fields ...field.RelationField) IReqNoticeAboutDo
	FirstOrInit() (*model.ReqNoticeAbout, error)
	FirstOrCreate() (*model.ReqNoticeAbout, error)
	FindByPage(offset int, limit int) (result []*model.ReqNoticeAbout, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReqNoticeAboutDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reqNoticeAboutDo) Debug() IReqNoticeAboutDo {
	return r.withDO(r.DO.Debug())
}

func (r reqNoticeAboutDo) WithContext(ctx context.Context) IReqNoticeAboutDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reqNoticeAboutDo) ReadDB() IReqNoticeAboutDo {
	return r.Clauses(dbresolver.Read)
}

func (r reqNoticeAboutDo) WriteDB() IReqNoticeAboutDo {
	return r.Clauses(dbresolver.Write)
}

func (r reqNoticeAboutDo) Session(config *gorm.Session) IReqNoticeAboutDo {
	return r.withDO(r.DO.Session(config))
}

func (r reqNoticeAboutDo) Clauses(conds ...clause.Expression) IReqNoticeAboutDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reqNoticeAboutDo) Returning(value interface{}, columns ...string) IReqNoticeAboutDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reqNoticeAboutDo) Not(conds ...gen.Condition) IReqNoticeAboutDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reqNoticeAboutDo) Or(conds ...gen.Condition) IReqNoticeAboutDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reqNoticeAboutDo) Select(conds ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reqNoticeAboutDo) Where(conds ...gen.Condition) IReqNoticeAboutDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reqNoticeAboutDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReqNoticeAboutDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r reqNoticeAboutDo) Order(conds ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reqNoticeAboutDo) Distinct(cols ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reqNoticeAboutDo) Omit(cols ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reqNoticeAboutDo) Join(table schema.Tabler, on ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reqNoticeAboutDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reqNoticeAboutDo) RightJoin(table schema.Tabler, on ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reqNoticeAboutDo) Group(cols ...field.Expr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reqNoticeAboutDo) Having(conds ...gen.Condition) IReqNoticeAboutDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reqNoticeAboutDo) Limit(limit int) IReqNoticeAboutDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reqNoticeAboutDo) Offset(offset int) IReqNoticeAboutDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reqNoticeAboutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReqNoticeAboutDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reqNoticeAboutDo) Unscoped() IReqNoticeAboutDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reqNoticeAboutDo) Create(values ...*model.ReqNoticeAbout) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reqNoticeAboutDo) CreateInBatches(values []*model.ReqNoticeAbout, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reqNoticeAboutDo) Save(values ...*model.ReqNoticeAbout) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reqNoticeAboutDo) First() (*model.ReqNoticeAbout, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqNoticeAbout), nil
	}
}

func (r reqNoticeAboutDo) Take() (*model.ReqNoticeAbout, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqNoticeAbout), nil
	}
}

func (r reqNoticeAboutDo) Last() (*model.ReqNoticeAbout, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqNoticeAbout), nil
	}
}

func (r reqNoticeAboutDo) Find() ([]*model.ReqNoticeAbout, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReqNoticeAbout), err
}

func (r reqNoticeAboutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqNoticeAbout, err error) {
	buf := make([]*model.ReqNoticeAbout, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reqNoticeAboutDo) FindInBatches(result *[]*model.ReqNoticeAbout, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reqNoticeAboutDo) Attrs(attrs ...field.AssignExpr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reqNoticeAboutDo) Assign(attrs ...field.AssignExpr) IReqNoticeAboutDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reqNoticeAboutDo) Joins(fields ...field.RelationField) IReqNoticeAboutDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reqNoticeAboutDo) Preload(fields ...field.RelationField) IReqNoticeAboutDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reqNoticeAboutDo) FirstOrInit() (*model.ReqNoticeAbout, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqNoticeAbout), nil
	}
}

func (r reqNoticeAboutDo) FirstOrCreate() (*model.ReqNoticeAbout, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqNoticeAbout), nil
	}
}

func (r reqNoticeAboutDo) FindByPage(offset int, limit int) (result []*model.ReqNoticeAbout, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reqNoticeAboutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reqNoticeAboutDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reqNoticeAboutDo) Delete(models ...*model.ReqNoticeAbout) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reqNoticeAboutDo) withDO(do gen.Dao) *reqNoticeAboutDo {
	r.DO = *do.(*gen.DO)
	return r
}
