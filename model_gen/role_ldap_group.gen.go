// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newRoleLdapGroup(db *gorm.DB, opts ...gen.DOOption) roleLdapGroup {
	_roleLdapGroup := roleLdapGroup{}

	_roleLdapGroup.roleLdapGroupDo.UseDB(db, opts...)
	_roleLdapGroup.roleLdapGroupDo.UseModel(&model.RoleLdapGroup{})

	tableName := _roleLdapGroup.roleLdapGroupDo.TableName()
	_roleLdapGroup.ALL = field.NewAsterisk(tableName)
	_roleLdapGroup.RoleLdapGroupID = field.NewString(tableName, "role_ldap_group_id")
	_roleLdapGroup.RoleID = field.NewString(tableName, "role_id")
	_roleLdapGroup.LdapGroupID = field.NewString(tableName, "ldap_group_id")

	_roleLdapGroup.fillFieldMap()

	return _roleLdapGroup
}

type roleLdapGroup struct {
	roleLdapGroupDo

	ALL             field.Asterisk
	RoleLdapGroupID field.String
	RoleID          field.String
	LdapGroupID     field.String

	fieldMap map[string]field.Expr
}

func (r roleLdapGroup) Table(newTableName string) *roleLdapGroup {
	r.roleLdapGroupDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleLdapGroup) As(alias string) *roleLdapGroup {
	r.roleLdapGroupDo.DO = *(r.roleLdapGroupDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleLdapGroup) updateTableName(table string) *roleLdapGroup {
	r.ALL = field.NewAsterisk(table)
	r.RoleLdapGroupID = field.NewString(table, "role_ldap_group_id")
	r.RoleID = field.NewString(table, "role_id")
	r.LdapGroupID = field.NewString(table, "ldap_group_id")

	r.fillFieldMap()

	return r
}

func (r *roleLdapGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleLdapGroup) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["role_ldap_group_id"] = r.RoleLdapGroupID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["ldap_group_id"] = r.LdapGroupID
}

func (r roleLdapGroup) clone(db *gorm.DB) roleLdapGroup {
	r.roleLdapGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleLdapGroup) replaceDB(db *gorm.DB) roleLdapGroup {
	r.roleLdapGroupDo.ReplaceDB(db)
	return r
}

type roleLdapGroupDo struct{ gen.DO }

type IRoleLdapGroupDo interface {
	gen.SubQuery
	Debug() IRoleLdapGroupDo
	WithContext(ctx context.Context) IRoleLdapGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleLdapGroupDo
	WriteDB() IRoleLdapGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleLdapGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleLdapGroupDo
	Not(conds ...gen.Condition) IRoleLdapGroupDo
	Or(conds ...gen.Condition) IRoleLdapGroupDo
	Select(conds ...field.Expr) IRoleLdapGroupDo
	Where(conds ...gen.Condition) IRoleLdapGroupDo
	Order(conds ...field.Expr) IRoleLdapGroupDo
	Distinct(cols ...field.Expr) IRoleLdapGroupDo
	Omit(cols ...field.Expr) IRoleLdapGroupDo
	Join(table schema.Tabler, on ...field.Expr) IRoleLdapGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleLdapGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleLdapGroupDo
	Group(cols ...field.Expr) IRoleLdapGroupDo
	Having(conds ...gen.Condition) IRoleLdapGroupDo
	Limit(limit int) IRoleLdapGroupDo
	Offset(offset int) IRoleLdapGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleLdapGroupDo
	Unscoped() IRoleLdapGroupDo
	Create(values ...*model.RoleLdapGroup) error
	CreateInBatches(values []*model.RoleLdapGroup, batchSize int) error
	Save(values ...*model.RoleLdapGroup) error
	First() (*model.RoleLdapGroup, error)
	Take() (*model.RoleLdapGroup, error)
	Last() (*model.RoleLdapGroup, error)
	Find() ([]*model.RoleLdapGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleLdapGroup, err error)
	FindInBatches(result *[]*model.RoleLdapGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoleLdapGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleLdapGroupDo
	Assign(attrs ...field.AssignExpr) IRoleLdapGroupDo
	Joins(fields ...field.RelationField) IRoleLdapGroupDo
	Preload(fields ...field.RelationField) IRoleLdapGroupDo
	FirstOrInit() (*model.RoleLdapGroup, error)
	FirstOrCreate() (*model.RoleLdapGroup, error)
	FindByPage(offset int, limit int) (result []*model.RoleLdapGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleLdapGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roleLdapGroupDo) Debug() IRoleLdapGroupDo {
	return r.withDO(r.DO.Debug())
}

func (r roleLdapGroupDo) WithContext(ctx context.Context) IRoleLdapGroupDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleLdapGroupDo) ReadDB() IRoleLdapGroupDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleLdapGroupDo) WriteDB() IRoleLdapGroupDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleLdapGroupDo) Session(config *gorm.Session) IRoleLdapGroupDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleLdapGroupDo) Clauses(conds ...clause.Expression) IRoleLdapGroupDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleLdapGroupDo) Returning(value interface{}, columns ...string) IRoleLdapGroupDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleLdapGroupDo) Not(conds ...gen.Condition) IRoleLdapGroupDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleLdapGroupDo) Or(conds ...gen.Condition) IRoleLdapGroupDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleLdapGroupDo) Select(conds ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleLdapGroupDo) Where(conds ...gen.Condition) IRoleLdapGroupDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleLdapGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRoleLdapGroupDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r roleLdapGroupDo) Order(conds ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleLdapGroupDo) Distinct(cols ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleLdapGroupDo) Omit(cols ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleLdapGroupDo) Join(table schema.Tabler, on ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleLdapGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleLdapGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleLdapGroupDo) Group(cols ...field.Expr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleLdapGroupDo) Having(conds ...gen.Condition) IRoleLdapGroupDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleLdapGroupDo) Limit(limit int) IRoleLdapGroupDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleLdapGroupDo) Offset(offset int) IRoleLdapGroupDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleLdapGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleLdapGroupDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleLdapGroupDo) Unscoped() IRoleLdapGroupDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleLdapGroupDo) Create(values ...*model.RoleLdapGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleLdapGroupDo) CreateInBatches(values []*model.RoleLdapGroup, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleLdapGroupDo) Save(values ...*model.RoleLdapGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleLdapGroupDo) First() (*model.RoleLdapGroup, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleLdapGroup), nil
	}
}

func (r roleLdapGroupDo) Take() (*model.RoleLdapGroup, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleLdapGroup), nil
	}
}

func (r roleLdapGroupDo) Last() (*model.RoleLdapGroup, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleLdapGroup), nil
	}
}

func (r roleLdapGroupDo) Find() ([]*model.RoleLdapGroup, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleLdapGroup), err
}

func (r roleLdapGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleLdapGroup, err error) {
	buf := make([]*model.RoleLdapGroup, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleLdapGroupDo) FindInBatches(result *[]*model.RoleLdapGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleLdapGroupDo) Attrs(attrs ...field.AssignExpr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleLdapGroupDo) Assign(attrs ...field.AssignExpr) IRoleLdapGroupDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleLdapGroupDo) Joins(fields ...field.RelationField) IRoleLdapGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleLdapGroupDo) Preload(fields ...field.RelationField) IRoleLdapGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleLdapGroupDo) FirstOrInit() (*model.RoleLdapGroup, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleLdapGroup), nil
	}
}

func (r roleLdapGroupDo) FirstOrCreate() (*model.RoleLdapGroup, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleLdapGroup), nil
	}
}

func (r roleLdapGroupDo) FindByPage(offset int, limit int) (result []*model.RoleLdapGroup, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleLdapGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleLdapGroupDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleLdapGroupDo) Delete(models ...*model.RoleLdapGroup) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleLdapGroupDo) withDO(do gen.Dao) *roleLdapGroupDo {
	r.DO = *do.(*gen.DO)
	return r
}
