// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSentryRecordIssues(db *gorm.DB, opts ...gen.DOOption) sentryRecordIssues {
	_sentryRecordIssues := sentryRecordIssues{}

	_sentryRecordIssues.sentryRecordIssuesDo.UseDB(db, opts...)
	_sentryRecordIssues.sentryRecordIssuesDo.UseModel(&model.SentryRecordIssues{})

	tableName := _sentryRecordIssues.sentryRecordIssuesDo.TableName()
	_sentryRecordIssues.ALL = field.NewAsterisk(tableName)
	_sentryRecordIssues.SentryRecordIssuesID = field.NewString(tableName, "sentry_record_issues_id")
	_sentryRecordIssues.SentryIssuesID = field.NewString(tableName, "sentry_issues_id")
	_sentryRecordIssues.IssueKey = field.NewString(tableName, "issue_key")
	_sentryRecordIssues.Summary = field.NewString(tableName, "summary")
	_sentryRecordIssues.Assignee = field.NewString(tableName, "assignee")
	_sentryRecordIssues.Priority = field.NewString(tableName, "priority")
	_sentryRecordIssues.FixVersion = field.NewString(tableName, "fix_version")
	_sentryRecordIssues.Status = field.NewString(tableName, "status")
	_sentryRecordIssues.Tags = field.NewString(tableName, "tags")
	_sentryRecordIssues.Duedate = field.NewString(tableName, "duedate")
	_sentryRecordIssues.CreateTime = field.NewString(tableName, "create_time")

	_sentryRecordIssues.fillFieldMap()

	return _sentryRecordIssues
}

type sentryRecordIssues struct {
	sentryRecordIssuesDo

	ALL                  field.Asterisk
	SentryRecordIssuesID field.String
	SentryIssuesID       field.String
	IssueKey             field.String // 标题
	Summary              field.String
	Assignee             field.String
	Priority             field.String
	FixVersion           field.String
	Status               field.String
	Tags                 field.String
	Duedate              field.String
	CreateTime           field.String

	fieldMap map[string]field.Expr
}

func (s sentryRecordIssues) Table(newTableName string) *sentryRecordIssues {
	s.sentryRecordIssuesDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sentryRecordIssues) As(alias string) *sentryRecordIssues {
	s.sentryRecordIssuesDo.DO = *(s.sentryRecordIssuesDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sentryRecordIssues) updateTableName(table string) *sentryRecordIssues {
	s.ALL = field.NewAsterisk(table)
	s.SentryRecordIssuesID = field.NewString(table, "sentry_record_issues_id")
	s.SentryIssuesID = field.NewString(table, "sentry_issues_id")
	s.IssueKey = field.NewString(table, "issue_key")
	s.Summary = field.NewString(table, "summary")
	s.Assignee = field.NewString(table, "assignee")
	s.Priority = field.NewString(table, "priority")
	s.FixVersion = field.NewString(table, "fix_version")
	s.Status = field.NewString(table, "status")
	s.Tags = field.NewString(table, "tags")
	s.Duedate = field.NewString(table, "duedate")
	s.CreateTime = field.NewString(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *sentryRecordIssues) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sentryRecordIssues) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["sentry_record_issues_id"] = s.SentryRecordIssuesID
	s.fieldMap["sentry_issues_id"] = s.SentryIssuesID
	s.fieldMap["issue_key"] = s.IssueKey
	s.fieldMap["summary"] = s.Summary
	s.fieldMap["assignee"] = s.Assignee
	s.fieldMap["priority"] = s.Priority
	s.fieldMap["fix_version"] = s.FixVersion
	s.fieldMap["status"] = s.Status
	s.fieldMap["tags"] = s.Tags
	s.fieldMap["duedate"] = s.Duedate
	s.fieldMap["create_time"] = s.CreateTime
}

func (s sentryRecordIssues) clone(db *gorm.DB) sentryRecordIssues {
	s.sentryRecordIssuesDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sentryRecordIssues) replaceDB(db *gorm.DB) sentryRecordIssues {
	s.sentryRecordIssuesDo.ReplaceDB(db)
	return s
}

type sentryRecordIssuesDo struct{ gen.DO }

type ISentryRecordIssuesDo interface {
	gen.SubQuery
	Debug() ISentryRecordIssuesDo
	WithContext(ctx context.Context) ISentryRecordIssuesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISentryRecordIssuesDo
	WriteDB() ISentryRecordIssuesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISentryRecordIssuesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISentryRecordIssuesDo
	Not(conds ...gen.Condition) ISentryRecordIssuesDo
	Or(conds ...gen.Condition) ISentryRecordIssuesDo
	Select(conds ...field.Expr) ISentryRecordIssuesDo
	Where(conds ...gen.Condition) ISentryRecordIssuesDo
	Order(conds ...field.Expr) ISentryRecordIssuesDo
	Distinct(cols ...field.Expr) ISentryRecordIssuesDo
	Omit(cols ...field.Expr) ISentryRecordIssuesDo
	Join(table schema.Tabler, on ...field.Expr) ISentryRecordIssuesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISentryRecordIssuesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISentryRecordIssuesDo
	Group(cols ...field.Expr) ISentryRecordIssuesDo
	Having(conds ...gen.Condition) ISentryRecordIssuesDo
	Limit(limit int) ISentryRecordIssuesDo
	Offset(offset int) ISentryRecordIssuesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISentryRecordIssuesDo
	Unscoped() ISentryRecordIssuesDo
	Create(values ...*model.SentryRecordIssues) error
	CreateInBatches(values []*model.SentryRecordIssues, batchSize int) error
	Save(values ...*model.SentryRecordIssues) error
	First() (*model.SentryRecordIssues, error)
	Take() (*model.SentryRecordIssues, error)
	Last() (*model.SentryRecordIssues, error)
	Find() ([]*model.SentryRecordIssues, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SentryRecordIssues, err error)
	FindInBatches(result *[]*model.SentryRecordIssues, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SentryRecordIssues) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISentryRecordIssuesDo
	Assign(attrs ...field.AssignExpr) ISentryRecordIssuesDo
	Joins(fields ...field.RelationField) ISentryRecordIssuesDo
	Preload(fields ...field.RelationField) ISentryRecordIssuesDo
	FirstOrInit() (*model.SentryRecordIssues, error)
	FirstOrCreate() (*model.SentryRecordIssues, error)
	FindByPage(offset int, limit int) (result []*model.SentryRecordIssues, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISentryRecordIssuesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sentryRecordIssuesDo) Debug() ISentryRecordIssuesDo {
	return s.withDO(s.DO.Debug())
}

func (s sentryRecordIssuesDo) WithContext(ctx context.Context) ISentryRecordIssuesDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sentryRecordIssuesDo) ReadDB() ISentryRecordIssuesDo {
	return s.Clauses(dbresolver.Read)
}

func (s sentryRecordIssuesDo) WriteDB() ISentryRecordIssuesDo {
	return s.Clauses(dbresolver.Write)
}

func (s sentryRecordIssuesDo) Session(config *gorm.Session) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Session(config))
}

func (s sentryRecordIssuesDo) Clauses(conds ...clause.Expression) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sentryRecordIssuesDo) Returning(value interface{}, columns ...string) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sentryRecordIssuesDo) Not(conds ...gen.Condition) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sentryRecordIssuesDo) Or(conds ...gen.Condition) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sentryRecordIssuesDo) Select(conds ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sentryRecordIssuesDo) Where(conds ...gen.Condition) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sentryRecordIssuesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISentryRecordIssuesDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sentryRecordIssuesDo) Order(conds ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sentryRecordIssuesDo) Distinct(cols ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sentryRecordIssuesDo) Omit(cols ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sentryRecordIssuesDo) Join(table schema.Tabler, on ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sentryRecordIssuesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sentryRecordIssuesDo) RightJoin(table schema.Tabler, on ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sentryRecordIssuesDo) Group(cols ...field.Expr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sentryRecordIssuesDo) Having(conds ...gen.Condition) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sentryRecordIssuesDo) Limit(limit int) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sentryRecordIssuesDo) Offset(offset int) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sentryRecordIssuesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sentryRecordIssuesDo) Unscoped() ISentryRecordIssuesDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sentryRecordIssuesDo) Create(values ...*model.SentryRecordIssues) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sentryRecordIssuesDo) CreateInBatches(values []*model.SentryRecordIssues, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sentryRecordIssuesDo) Save(values ...*model.SentryRecordIssues) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sentryRecordIssuesDo) First() (*model.SentryRecordIssues, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SentryRecordIssues), nil
	}
}

func (s sentryRecordIssuesDo) Take() (*model.SentryRecordIssues, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SentryRecordIssues), nil
	}
}

func (s sentryRecordIssuesDo) Last() (*model.SentryRecordIssues, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SentryRecordIssues), nil
	}
}

func (s sentryRecordIssuesDo) Find() ([]*model.SentryRecordIssues, error) {
	result, err := s.DO.Find()
	return result.([]*model.SentryRecordIssues), err
}

func (s sentryRecordIssuesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SentryRecordIssues, err error) {
	buf := make([]*model.SentryRecordIssues, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sentryRecordIssuesDo) FindInBatches(result *[]*model.SentryRecordIssues, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sentryRecordIssuesDo) Attrs(attrs ...field.AssignExpr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sentryRecordIssuesDo) Assign(attrs ...field.AssignExpr) ISentryRecordIssuesDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sentryRecordIssuesDo) Joins(fields ...field.RelationField) ISentryRecordIssuesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sentryRecordIssuesDo) Preload(fields ...field.RelationField) ISentryRecordIssuesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sentryRecordIssuesDo) FirstOrInit() (*model.SentryRecordIssues, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SentryRecordIssues), nil
	}
}

func (s sentryRecordIssuesDo) FirstOrCreate() (*model.SentryRecordIssues, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SentryRecordIssues), nil
	}
}

func (s sentryRecordIssuesDo) FindByPage(offset int, limit int) (result []*model.SentryRecordIssues, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sentryRecordIssuesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sentryRecordIssuesDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sentryRecordIssuesDo) Delete(models ...*model.SentryRecordIssues) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sentryRecordIssuesDo) withDO(do gen.Dao) *sentryRecordIssuesDo {
	s.DO = *do.(*gen.DO)
	return s
}
