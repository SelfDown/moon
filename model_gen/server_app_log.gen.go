// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerAppLog(db *gorm.DB, opts ...gen.DOOption) serverAppLog {
	_serverAppLog := serverAppLog{}

	_serverAppLog.serverAppLogDo.UseDB(db, opts...)
	_serverAppLog.serverAppLogDo.UseModel(&model.ServerAppLog{})

	tableName := _serverAppLog.serverAppLogDo.TableName()
	_serverAppLog.ALL = field.NewAsterisk(tableName)
	_serverAppLog.ServerAppLogID = field.NewString(tableName, "server_app_log_id")
	_serverAppLog.AppLogText = field.NewString(tableName, "app_log_text")
	_serverAppLog.OpTime = field.NewTime(tableName, "op_time")
	_serverAppLog.OpUser = field.NewString(tableName, "op_user")
	_serverAppLog.BusiID = field.NewString(tableName, "busi_id")
	_serverAppLog.CreateTime = field.NewTime(tableName, "create_time")
	_serverAppLog.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverAppLog.Comments = field.NewString(tableName, "comments")

	_serverAppLog.fillFieldMap()

	return _serverAppLog
}

type serverAppLog struct {
	serverAppLogDo

	ALL            field.Asterisk
	ServerAppLogID field.String
	AppLogText     field.String
	OpTime         field.Time
	OpUser         field.String
	BusiID         field.String
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s serverAppLog) Table(newTableName string) *serverAppLog {
	s.serverAppLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverAppLog) As(alias string) *serverAppLog {
	s.serverAppLogDo.DO = *(s.serverAppLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverAppLog) updateTableName(table string) *serverAppLog {
	s.ALL = field.NewAsterisk(table)
	s.ServerAppLogID = field.NewString(table, "server_app_log_id")
	s.AppLogText = field.NewString(table, "app_log_text")
	s.OpTime = field.NewTime(table, "op_time")
	s.OpUser = field.NewString(table, "op_user")
	s.BusiID = field.NewString(table, "busi_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *serverAppLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverAppLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["server_app_log_id"] = s.ServerAppLogID
	s.fieldMap["app_log_text"] = s.AppLogText
	s.fieldMap["op_time"] = s.OpTime
	s.fieldMap["op_user"] = s.OpUser
	s.fieldMap["busi_id"] = s.BusiID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s serverAppLog) clone(db *gorm.DB) serverAppLog {
	s.serverAppLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverAppLog) replaceDB(db *gorm.DB) serverAppLog {
	s.serverAppLogDo.ReplaceDB(db)
	return s
}

type serverAppLogDo struct{ gen.DO }

type IServerAppLogDo interface {
	gen.SubQuery
	Debug() IServerAppLogDo
	WithContext(ctx context.Context) IServerAppLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerAppLogDo
	WriteDB() IServerAppLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerAppLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerAppLogDo
	Not(conds ...gen.Condition) IServerAppLogDo
	Or(conds ...gen.Condition) IServerAppLogDo
	Select(conds ...field.Expr) IServerAppLogDo
	Where(conds ...gen.Condition) IServerAppLogDo
	Order(conds ...field.Expr) IServerAppLogDo
	Distinct(cols ...field.Expr) IServerAppLogDo
	Omit(cols ...field.Expr) IServerAppLogDo
	Join(table schema.Tabler, on ...field.Expr) IServerAppLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerAppLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerAppLogDo
	Group(cols ...field.Expr) IServerAppLogDo
	Having(conds ...gen.Condition) IServerAppLogDo
	Limit(limit int) IServerAppLogDo
	Offset(offset int) IServerAppLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerAppLogDo
	Unscoped() IServerAppLogDo
	Create(values ...*model.ServerAppLog) error
	CreateInBatches(values []*model.ServerAppLog, batchSize int) error
	Save(values ...*model.ServerAppLog) error
	First() (*model.ServerAppLog, error)
	Take() (*model.ServerAppLog, error)
	Last() (*model.ServerAppLog, error)
	Find() ([]*model.ServerAppLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerAppLog, err error)
	FindInBatches(result *[]*model.ServerAppLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerAppLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerAppLogDo
	Assign(attrs ...field.AssignExpr) IServerAppLogDo
	Joins(fields ...field.RelationField) IServerAppLogDo
	Preload(fields ...field.RelationField) IServerAppLogDo
	FirstOrInit() (*model.ServerAppLog, error)
	FirstOrCreate() (*model.ServerAppLog, error)
	FindByPage(offset int, limit int) (result []*model.ServerAppLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerAppLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverAppLogDo) Debug() IServerAppLogDo {
	return s.withDO(s.DO.Debug())
}

func (s serverAppLogDo) WithContext(ctx context.Context) IServerAppLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverAppLogDo) ReadDB() IServerAppLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverAppLogDo) WriteDB() IServerAppLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverAppLogDo) Session(config *gorm.Session) IServerAppLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverAppLogDo) Clauses(conds ...clause.Expression) IServerAppLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverAppLogDo) Returning(value interface{}, columns ...string) IServerAppLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverAppLogDo) Not(conds ...gen.Condition) IServerAppLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverAppLogDo) Or(conds ...gen.Condition) IServerAppLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverAppLogDo) Select(conds ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverAppLogDo) Where(conds ...gen.Condition) IServerAppLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverAppLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerAppLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverAppLogDo) Order(conds ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverAppLogDo) Distinct(cols ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverAppLogDo) Omit(cols ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverAppLogDo) Join(table schema.Tabler, on ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverAppLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverAppLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverAppLogDo) Group(cols ...field.Expr) IServerAppLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverAppLogDo) Having(conds ...gen.Condition) IServerAppLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverAppLogDo) Limit(limit int) IServerAppLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverAppLogDo) Offset(offset int) IServerAppLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverAppLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerAppLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverAppLogDo) Unscoped() IServerAppLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverAppLogDo) Create(values ...*model.ServerAppLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverAppLogDo) CreateInBatches(values []*model.ServerAppLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverAppLogDo) Save(values ...*model.ServerAppLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverAppLogDo) First() (*model.ServerAppLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerAppLog), nil
	}
}

func (s serverAppLogDo) Take() (*model.ServerAppLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerAppLog), nil
	}
}

func (s serverAppLogDo) Last() (*model.ServerAppLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerAppLog), nil
	}
}

func (s serverAppLogDo) Find() ([]*model.ServerAppLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerAppLog), err
}

func (s serverAppLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerAppLog, err error) {
	buf := make([]*model.ServerAppLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverAppLogDo) FindInBatches(result *[]*model.ServerAppLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverAppLogDo) Attrs(attrs ...field.AssignExpr) IServerAppLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverAppLogDo) Assign(attrs ...field.AssignExpr) IServerAppLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverAppLogDo) Joins(fields ...field.RelationField) IServerAppLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverAppLogDo) Preload(fields ...field.RelationField) IServerAppLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverAppLogDo) FirstOrInit() (*model.ServerAppLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerAppLog), nil
	}
}

func (s serverAppLogDo) FirstOrCreate() (*model.ServerAppLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerAppLog), nil
	}
}

func (s serverAppLogDo) FindByPage(offset int, limit int) (result []*model.ServerAppLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverAppLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverAppLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverAppLogDo) Delete(models ...*model.ServerAppLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverAppLogDo) withDO(do gen.Dao) *serverAppLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
