// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerDbsyncDetail(db *gorm.DB, opts ...gen.DOOption) serverDbsyncDetail {
	_serverDbsyncDetail := serverDbsyncDetail{}

	_serverDbsyncDetail.serverDbsyncDetailDo.UseDB(db, opts...)
	_serverDbsyncDetail.serverDbsyncDetailDo.UseModel(&model.ServerDbsyncDetail{})

	tableName := _serverDbsyncDetail.serverDbsyncDetailDo.TableName()
	_serverDbsyncDetail.ALL = field.NewAsterisk(tableName)
	_serverDbsyncDetail.ServerOracleSyncDetailID = field.NewString(tableName, "server_oracle_sync_detail_id")
	_serverDbsyncDetail.CreateTime = field.NewTime(tableName, "create_time")
	_serverDbsyncDetail.OpUser = field.NewString(tableName, "op_user")
	_serverDbsyncDetail.Note = field.NewString(tableName, "note")
	_serverDbsyncDetail.SrcServerEnvID = field.NewString(tableName, "src_server_env_id")
	_serverDbsyncDetail.DestServerEnvID = field.NewString(tableName, "dest_server_env_id")
	_serverDbsyncDetail.SyncTime = field.NewTime(tableName, "sync_time")
	_serverDbsyncDetail.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverDbsyncDetail.Comments = field.NewString(tableName, "comments")

	_serverDbsyncDetail.fillFieldMap()

	return _serverDbsyncDetail
}

type serverDbsyncDetail struct {
	serverDbsyncDetailDo

	ALL                      field.Asterisk
	ServerOracleSyncDetailID field.String
	CreateTime               field.Time // 记录创建时间（数据库自动写入）
	OpUser                   field.String
	Note                     field.String
	SrcServerEnvID           field.String // 数据来源数据库项目点
	DestServerEnvID          field.String // 数据同步目标数据库项目点
	SyncTime                 field.Time   // 数据库同步时间
	ModifyTime               field.Time   // 记录修改时间（数据库自动写入）
	Comments                 field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s serverDbsyncDetail) Table(newTableName string) *serverDbsyncDetail {
	s.serverDbsyncDetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverDbsyncDetail) As(alias string) *serverDbsyncDetail {
	s.serverDbsyncDetailDo.DO = *(s.serverDbsyncDetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverDbsyncDetail) updateTableName(table string) *serverDbsyncDetail {
	s.ALL = field.NewAsterisk(table)
	s.ServerOracleSyncDetailID = field.NewString(table, "server_oracle_sync_detail_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.OpUser = field.NewString(table, "op_user")
	s.Note = field.NewString(table, "note")
	s.SrcServerEnvID = field.NewString(table, "src_server_env_id")
	s.DestServerEnvID = field.NewString(table, "dest_server_env_id")
	s.SyncTime = field.NewTime(table, "sync_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *serverDbsyncDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverDbsyncDetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["server_oracle_sync_detail_id"] = s.ServerOracleSyncDetailID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["op_user"] = s.OpUser
	s.fieldMap["note"] = s.Note
	s.fieldMap["src_server_env_id"] = s.SrcServerEnvID
	s.fieldMap["dest_server_env_id"] = s.DestServerEnvID
	s.fieldMap["sync_time"] = s.SyncTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s serverDbsyncDetail) clone(db *gorm.DB) serverDbsyncDetail {
	s.serverDbsyncDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverDbsyncDetail) replaceDB(db *gorm.DB) serverDbsyncDetail {
	s.serverDbsyncDetailDo.ReplaceDB(db)
	return s
}

type serverDbsyncDetailDo struct{ gen.DO }

type IServerDbsyncDetailDo interface {
	gen.SubQuery
	Debug() IServerDbsyncDetailDo
	WithContext(ctx context.Context) IServerDbsyncDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerDbsyncDetailDo
	WriteDB() IServerDbsyncDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerDbsyncDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerDbsyncDetailDo
	Not(conds ...gen.Condition) IServerDbsyncDetailDo
	Or(conds ...gen.Condition) IServerDbsyncDetailDo
	Select(conds ...field.Expr) IServerDbsyncDetailDo
	Where(conds ...gen.Condition) IServerDbsyncDetailDo
	Order(conds ...field.Expr) IServerDbsyncDetailDo
	Distinct(cols ...field.Expr) IServerDbsyncDetailDo
	Omit(cols ...field.Expr) IServerDbsyncDetailDo
	Join(table schema.Tabler, on ...field.Expr) IServerDbsyncDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerDbsyncDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerDbsyncDetailDo
	Group(cols ...field.Expr) IServerDbsyncDetailDo
	Having(conds ...gen.Condition) IServerDbsyncDetailDo
	Limit(limit int) IServerDbsyncDetailDo
	Offset(offset int) IServerDbsyncDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerDbsyncDetailDo
	Unscoped() IServerDbsyncDetailDo
	Create(values ...*model.ServerDbsyncDetail) error
	CreateInBatches(values []*model.ServerDbsyncDetail, batchSize int) error
	Save(values ...*model.ServerDbsyncDetail) error
	First() (*model.ServerDbsyncDetail, error)
	Take() (*model.ServerDbsyncDetail, error)
	Last() (*model.ServerDbsyncDetail, error)
	Find() ([]*model.ServerDbsyncDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerDbsyncDetail, err error)
	FindInBatches(result *[]*model.ServerDbsyncDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerDbsyncDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerDbsyncDetailDo
	Assign(attrs ...field.AssignExpr) IServerDbsyncDetailDo
	Joins(fields ...field.RelationField) IServerDbsyncDetailDo
	Preload(fields ...field.RelationField) IServerDbsyncDetailDo
	FirstOrInit() (*model.ServerDbsyncDetail, error)
	FirstOrCreate() (*model.ServerDbsyncDetail, error)
	FindByPage(offset int, limit int) (result []*model.ServerDbsyncDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerDbsyncDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverDbsyncDetailDo) Debug() IServerDbsyncDetailDo {
	return s.withDO(s.DO.Debug())
}

func (s serverDbsyncDetailDo) WithContext(ctx context.Context) IServerDbsyncDetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverDbsyncDetailDo) ReadDB() IServerDbsyncDetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverDbsyncDetailDo) WriteDB() IServerDbsyncDetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverDbsyncDetailDo) Session(config *gorm.Session) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverDbsyncDetailDo) Clauses(conds ...clause.Expression) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverDbsyncDetailDo) Returning(value interface{}, columns ...string) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverDbsyncDetailDo) Not(conds ...gen.Condition) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverDbsyncDetailDo) Or(conds ...gen.Condition) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverDbsyncDetailDo) Select(conds ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverDbsyncDetailDo) Where(conds ...gen.Condition) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverDbsyncDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerDbsyncDetailDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverDbsyncDetailDo) Order(conds ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverDbsyncDetailDo) Distinct(cols ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverDbsyncDetailDo) Omit(cols ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverDbsyncDetailDo) Join(table schema.Tabler, on ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverDbsyncDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverDbsyncDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverDbsyncDetailDo) Group(cols ...field.Expr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverDbsyncDetailDo) Having(conds ...gen.Condition) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverDbsyncDetailDo) Limit(limit int) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverDbsyncDetailDo) Offset(offset int) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverDbsyncDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverDbsyncDetailDo) Unscoped() IServerDbsyncDetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverDbsyncDetailDo) Create(values ...*model.ServerDbsyncDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverDbsyncDetailDo) CreateInBatches(values []*model.ServerDbsyncDetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverDbsyncDetailDo) Save(values ...*model.ServerDbsyncDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverDbsyncDetailDo) First() (*model.ServerDbsyncDetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerDbsyncDetail), nil
	}
}

func (s serverDbsyncDetailDo) Take() (*model.ServerDbsyncDetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerDbsyncDetail), nil
	}
}

func (s serverDbsyncDetailDo) Last() (*model.ServerDbsyncDetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerDbsyncDetail), nil
	}
}

func (s serverDbsyncDetailDo) Find() ([]*model.ServerDbsyncDetail, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerDbsyncDetail), err
}

func (s serverDbsyncDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerDbsyncDetail, err error) {
	buf := make([]*model.ServerDbsyncDetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverDbsyncDetailDo) FindInBatches(result *[]*model.ServerDbsyncDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverDbsyncDetailDo) Attrs(attrs ...field.AssignExpr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverDbsyncDetailDo) Assign(attrs ...field.AssignExpr) IServerDbsyncDetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverDbsyncDetailDo) Joins(fields ...field.RelationField) IServerDbsyncDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverDbsyncDetailDo) Preload(fields ...field.RelationField) IServerDbsyncDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverDbsyncDetailDo) FirstOrInit() (*model.ServerDbsyncDetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerDbsyncDetail), nil
	}
}

func (s serverDbsyncDetailDo) FirstOrCreate() (*model.ServerDbsyncDetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerDbsyncDetail), nil
	}
}

func (s serverDbsyncDetailDo) FindByPage(offset int, limit int) (result []*model.ServerDbsyncDetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverDbsyncDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverDbsyncDetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverDbsyncDetailDo) Delete(models ...*model.ServerDbsyncDetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverDbsyncDetailDo) withDO(do gen.Dao) *serverDbsyncDetailDo {
	s.DO = *do.(*gen.DO)
	return s
}
