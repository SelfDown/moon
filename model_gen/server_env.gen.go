// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerEnv(db *gorm.DB, opts ...gen.DOOption) serverEnv {
	_serverEnv := serverEnv{}

	_serverEnv.serverEnvDo.UseDB(db, opts...)
	_serverEnv.serverEnvDo.UseModel(&model.ServerEnv{})

	tableName := _serverEnv.serverEnvDo.TableName()
	_serverEnv.ALL = field.NewAsterisk(tableName)
	_serverEnv.ServerEnvID = field.NewString(tableName, "server_env_id")
	_serverEnv.ServerEnvName = field.NewString(tableName, "server_env_name")
	_serverEnv.Notes = field.NewString(tableName, "notes")
	_serverEnv.HospitalCode = field.NewString(tableName, "hospital_code")
	_serverEnv.EnvCode = field.NewString(tableName, "env_code")
	_serverEnv.FlagDel = field.NewString(tableName, "flag_del")
	_serverEnv.Leader = field.NewString(tableName, "leader")
	_serverEnv.SysProjectID = field.NewString(tableName, "sys_project_id")
	_serverEnv.RoleAuthLevel = field.NewInt32(tableName, "role_auth_level")
	_serverEnv.EnvDocURL = field.NewString(tableName, "env_doc_url")
	_serverEnv.EnableHaDeploy = field.NewString(tableName, "enable_ha_deploy")
	_serverEnv.CreateTime = field.NewTime(tableName, "create_time")
	_serverEnv.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverEnv.Comments = field.NewString(tableName, "comments")
	_serverEnv.LeaderTel = field.NewString(tableName, "leader_tel")
	_serverEnv.OrderID = field.NewInt32(tableName, "order_id")
	_serverEnv.ServerEnvCode = field.NewString(tableName, "server_env_code")
	_serverEnv.ServerGroupID = field.NewString(tableName, "server_group_id")
	_serverEnv.ParentID = field.NewString(tableName, "parent_id")

	_serverEnv.fillFieldMap()

	return _serverEnv
}

type serverEnv struct {
	serverEnvDo

	ALL           field.Asterisk
	ServerEnvID   field.String // 服务器分组ID
	ServerEnvName field.String // 服务器分组名称
	Notes         field.String // 备注
	HospitalCode  field.String
	EnvCode       field.String
	FlagDel       field.String // 逻辑删除 1删除 0 未删除
	Leader        field.String // 环境负责人
	SysProjectID  field.String // 所属项目ID
	RoleAuthLevel field.Int32  // 角色权限等级
	EnvDocURL     field.String // 环境实例文档URL
	/*
		是否开启不间断部署
		0：禁用
		1：启用
	*/
	EnableHaDeploy field.String
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明
	LeaderTel      field.String
	OrderID        field.Int32
	ServerEnvCode  field.String
	ServerGroupID  field.String
	ParentID       field.String

	fieldMap map[string]field.Expr
}

func (s serverEnv) Table(newTableName string) *serverEnv {
	s.serverEnvDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverEnv) As(alias string) *serverEnv {
	s.serverEnvDo.DO = *(s.serverEnvDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverEnv) updateTableName(table string) *serverEnv {
	s.ALL = field.NewAsterisk(table)
	s.ServerEnvID = field.NewString(table, "server_env_id")
	s.ServerEnvName = field.NewString(table, "server_env_name")
	s.Notes = field.NewString(table, "notes")
	s.HospitalCode = field.NewString(table, "hospital_code")
	s.EnvCode = field.NewString(table, "env_code")
	s.FlagDel = field.NewString(table, "flag_del")
	s.Leader = field.NewString(table, "leader")
	s.SysProjectID = field.NewString(table, "sys_project_id")
	s.RoleAuthLevel = field.NewInt32(table, "role_auth_level")
	s.EnvDocURL = field.NewString(table, "env_doc_url")
	s.EnableHaDeploy = field.NewString(table, "enable_ha_deploy")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.LeaderTel = field.NewString(table, "leader_tel")
	s.OrderID = field.NewInt32(table, "order_id")
	s.ServerEnvCode = field.NewString(table, "server_env_code")
	s.ServerGroupID = field.NewString(table, "server_group_id")
	s.ParentID = field.NewString(table, "parent_id")

	s.fillFieldMap()

	return s
}

func (s *serverEnv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverEnv) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["server_env_id"] = s.ServerEnvID
	s.fieldMap["server_env_name"] = s.ServerEnvName
	s.fieldMap["notes"] = s.Notes
	s.fieldMap["hospital_code"] = s.HospitalCode
	s.fieldMap["env_code"] = s.EnvCode
	s.fieldMap["flag_del"] = s.FlagDel
	s.fieldMap["leader"] = s.Leader
	s.fieldMap["sys_project_id"] = s.SysProjectID
	s.fieldMap["role_auth_level"] = s.RoleAuthLevel
	s.fieldMap["env_doc_url"] = s.EnvDocURL
	s.fieldMap["enable_ha_deploy"] = s.EnableHaDeploy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["leader_tel"] = s.LeaderTel
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["server_env_code"] = s.ServerEnvCode
	s.fieldMap["server_group_id"] = s.ServerGroupID
	s.fieldMap["parent_id"] = s.ParentID
}

func (s serverEnv) clone(db *gorm.DB) serverEnv {
	s.serverEnvDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverEnv) replaceDB(db *gorm.DB) serverEnv {
	s.serverEnvDo.ReplaceDB(db)
	return s
}

type serverEnvDo struct{ gen.DO }

type IServerEnvDo interface {
	gen.SubQuery
	Debug() IServerEnvDo
	WithContext(ctx context.Context) IServerEnvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerEnvDo
	WriteDB() IServerEnvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerEnvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerEnvDo
	Not(conds ...gen.Condition) IServerEnvDo
	Or(conds ...gen.Condition) IServerEnvDo
	Select(conds ...field.Expr) IServerEnvDo
	Where(conds ...gen.Condition) IServerEnvDo
	Order(conds ...field.Expr) IServerEnvDo
	Distinct(cols ...field.Expr) IServerEnvDo
	Omit(cols ...field.Expr) IServerEnvDo
	Join(table schema.Tabler, on ...field.Expr) IServerEnvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerEnvDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerEnvDo
	Group(cols ...field.Expr) IServerEnvDo
	Having(conds ...gen.Condition) IServerEnvDo
	Limit(limit int) IServerEnvDo
	Offset(offset int) IServerEnvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerEnvDo
	Unscoped() IServerEnvDo
	Create(values ...*model.ServerEnv) error
	CreateInBatches(values []*model.ServerEnv, batchSize int) error
	Save(values ...*model.ServerEnv) error
	First() (*model.ServerEnv, error)
	Take() (*model.ServerEnv, error)
	Last() (*model.ServerEnv, error)
	Find() ([]*model.ServerEnv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerEnv, err error)
	FindInBatches(result *[]*model.ServerEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerEnv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerEnvDo
	Assign(attrs ...field.AssignExpr) IServerEnvDo
	Joins(fields ...field.RelationField) IServerEnvDo
	Preload(fields ...field.RelationField) IServerEnvDo
	FirstOrInit() (*model.ServerEnv, error)
	FirstOrCreate() (*model.ServerEnv, error)
	FindByPage(offset int, limit int) (result []*model.ServerEnv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerEnvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverEnvDo) Debug() IServerEnvDo {
	return s.withDO(s.DO.Debug())
}

func (s serverEnvDo) WithContext(ctx context.Context) IServerEnvDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverEnvDo) ReadDB() IServerEnvDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverEnvDo) WriteDB() IServerEnvDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverEnvDo) Session(config *gorm.Session) IServerEnvDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverEnvDo) Clauses(conds ...clause.Expression) IServerEnvDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverEnvDo) Returning(value interface{}, columns ...string) IServerEnvDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverEnvDo) Not(conds ...gen.Condition) IServerEnvDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverEnvDo) Or(conds ...gen.Condition) IServerEnvDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverEnvDo) Select(conds ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverEnvDo) Where(conds ...gen.Condition) IServerEnvDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverEnvDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerEnvDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverEnvDo) Order(conds ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverEnvDo) Distinct(cols ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverEnvDo) Omit(cols ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverEnvDo) Join(table schema.Tabler, on ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverEnvDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverEnvDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverEnvDo) Group(cols ...field.Expr) IServerEnvDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverEnvDo) Having(conds ...gen.Condition) IServerEnvDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverEnvDo) Limit(limit int) IServerEnvDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverEnvDo) Offset(offset int) IServerEnvDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverEnvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerEnvDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverEnvDo) Unscoped() IServerEnvDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverEnvDo) Create(values ...*model.ServerEnv) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverEnvDo) CreateInBatches(values []*model.ServerEnv, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverEnvDo) Save(values ...*model.ServerEnv) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverEnvDo) First() (*model.ServerEnv, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerEnv), nil
	}
}

func (s serverEnvDo) Take() (*model.ServerEnv, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerEnv), nil
	}
}

func (s serverEnvDo) Last() (*model.ServerEnv, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerEnv), nil
	}
}

func (s serverEnvDo) Find() ([]*model.ServerEnv, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerEnv), err
}

func (s serverEnvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerEnv, err error) {
	buf := make([]*model.ServerEnv, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverEnvDo) FindInBatches(result *[]*model.ServerEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverEnvDo) Attrs(attrs ...field.AssignExpr) IServerEnvDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverEnvDo) Assign(attrs ...field.AssignExpr) IServerEnvDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverEnvDo) Joins(fields ...field.RelationField) IServerEnvDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverEnvDo) Preload(fields ...field.RelationField) IServerEnvDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverEnvDo) FirstOrInit() (*model.ServerEnv, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerEnv), nil
	}
}

func (s serverEnvDo) FirstOrCreate() (*model.ServerEnv, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerEnv), nil
	}
}

func (s serverEnvDo) FindByPage(offset int, limit int) (result []*model.ServerEnv, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverEnvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverEnvDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverEnvDo) Delete(models ...*model.ServerEnv) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverEnvDo) withDO(do gen.Dao) *serverEnvDo {
	s.DO = *do.(*gen.DO)
	return s
}
