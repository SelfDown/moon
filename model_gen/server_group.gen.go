// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerGroup(db *gorm.DB, opts ...gen.DOOption) serverGroup {
	_serverGroup := serverGroup{}

	_serverGroup.serverGroupDo.UseDB(db, opts...)
	_serverGroup.serverGroupDo.UseModel(&model.ServerGroup{})

	tableName := _serverGroup.serverGroupDo.TableName()
	_serverGroup.ALL = field.NewAsterisk(tableName)
	_serverGroup.ServerGroupID = field.NewString(tableName, "server_group_id")
	_serverGroup.Comments = field.NewString(tableName, "comments")
	_serverGroup.ServerGroup = field.NewString(tableName, "server_group")
	_serverGroup.CreateTime = field.NewTime(tableName, "create_time")
	_serverGroup.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverGroup.ServerGroupName = field.NewString(tableName, "server_group_name")

	_serverGroup.fillFieldMap()

	return _serverGroup
}

type serverGroup struct {
	serverGroupDo

	ALL           field.Asterisk
	ServerGroupID field.String // 主键\n
	Comments      field.String
	/*
		环境分组名称

	*/
	ServerGroup     field.String
	CreateTime      field.Time // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time // 记录修改时间（数据库自动写入）
	ServerGroupName field.String

	fieldMap map[string]field.Expr
}

func (s serverGroup) Table(newTableName string) *serverGroup {
	s.serverGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverGroup) As(alias string) *serverGroup {
	s.serverGroupDo.DO = *(s.serverGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverGroup) updateTableName(table string) *serverGroup {
	s.ALL = field.NewAsterisk(table)
	s.ServerGroupID = field.NewString(table, "server_group_id")
	s.Comments = field.NewString(table, "comments")
	s.ServerGroup = field.NewString(table, "server_group")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.ServerGroupName = field.NewString(table, "server_group_name")

	s.fillFieldMap()

	return s
}

func (s *serverGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["server_group_id"] = s.ServerGroupID
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["server_group"] = s.ServerGroup
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["server_group_name"] = s.ServerGroupName
}

func (s serverGroup) clone(db *gorm.DB) serverGroup {
	s.serverGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverGroup) replaceDB(db *gorm.DB) serverGroup {
	s.serverGroupDo.ReplaceDB(db)
	return s
}

type serverGroupDo struct{ gen.DO }

type IServerGroupDo interface {
	gen.SubQuery
	Debug() IServerGroupDo
	WithContext(ctx context.Context) IServerGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerGroupDo
	WriteDB() IServerGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerGroupDo
	Not(conds ...gen.Condition) IServerGroupDo
	Or(conds ...gen.Condition) IServerGroupDo
	Select(conds ...field.Expr) IServerGroupDo
	Where(conds ...gen.Condition) IServerGroupDo
	Order(conds ...field.Expr) IServerGroupDo
	Distinct(cols ...field.Expr) IServerGroupDo
	Omit(cols ...field.Expr) IServerGroupDo
	Join(table schema.Tabler, on ...field.Expr) IServerGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerGroupDo
	Group(cols ...field.Expr) IServerGroupDo
	Having(conds ...gen.Condition) IServerGroupDo
	Limit(limit int) IServerGroupDo
	Offset(offset int) IServerGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerGroupDo
	Unscoped() IServerGroupDo
	Create(values ...*model.ServerGroup) error
	CreateInBatches(values []*model.ServerGroup, batchSize int) error
	Save(values ...*model.ServerGroup) error
	First() (*model.ServerGroup, error)
	Take() (*model.ServerGroup, error)
	Last() (*model.ServerGroup, error)
	Find() ([]*model.ServerGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerGroup, err error)
	FindInBatches(result *[]*model.ServerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerGroupDo
	Assign(attrs ...field.AssignExpr) IServerGroupDo
	Joins(fields ...field.RelationField) IServerGroupDo
	Preload(fields ...field.RelationField) IServerGroupDo
	FirstOrInit() (*model.ServerGroup, error)
	FirstOrCreate() (*model.ServerGroup, error)
	FindByPage(offset int, limit int) (result []*model.ServerGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverGroupDo) Debug() IServerGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s serverGroupDo) WithContext(ctx context.Context) IServerGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverGroupDo) ReadDB() IServerGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverGroupDo) WriteDB() IServerGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverGroupDo) Session(config *gorm.Session) IServerGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverGroupDo) Clauses(conds ...clause.Expression) IServerGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverGroupDo) Returning(value interface{}, columns ...string) IServerGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverGroupDo) Not(conds ...gen.Condition) IServerGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverGroupDo) Or(conds ...gen.Condition) IServerGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverGroupDo) Select(conds ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverGroupDo) Where(conds ...gen.Condition) IServerGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerGroupDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverGroupDo) Order(conds ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverGroupDo) Distinct(cols ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverGroupDo) Omit(cols ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverGroupDo) Join(table schema.Tabler, on ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverGroupDo) Group(cols ...field.Expr) IServerGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverGroupDo) Having(conds ...gen.Condition) IServerGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverGroupDo) Limit(limit int) IServerGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverGroupDo) Offset(offset int) IServerGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverGroupDo) Unscoped() IServerGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverGroupDo) Create(values ...*model.ServerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverGroupDo) CreateInBatches(values []*model.ServerGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverGroupDo) Save(values ...*model.ServerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverGroupDo) First() (*model.ServerGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerGroup), nil
	}
}

func (s serverGroupDo) Take() (*model.ServerGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerGroup), nil
	}
}

func (s serverGroupDo) Last() (*model.ServerGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerGroup), nil
	}
}

func (s serverGroupDo) Find() ([]*model.ServerGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerGroup), err
}

func (s serverGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerGroup, err error) {
	buf := make([]*model.ServerGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverGroupDo) FindInBatches(result *[]*model.ServerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverGroupDo) Attrs(attrs ...field.AssignExpr) IServerGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverGroupDo) Assign(attrs ...field.AssignExpr) IServerGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverGroupDo) Joins(fields ...field.RelationField) IServerGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverGroupDo) Preload(fields ...field.RelationField) IServerGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverGroupDo) FirstOrInit() (*model.ServerGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerGroup), nil
	}
}

func (s serverGroupDo) FirstOrCreate() (*model.ServerGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerGroup), nil
	}
}

func (s serverGroupDo) FindByPage(offset int, limit int) (result []*model.ServerGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverGroupDo) Delete(models ...*model.ServerGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverGroupDo) withDO(do gen.Dao) *serverGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
