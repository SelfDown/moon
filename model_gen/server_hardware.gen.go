// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerHardware(db *gorm.DB, opts ...gen.DOOption) serverHardware {
	_serverHardware := serverHardware{}

	_serverHardware.serverHardwareDo.UseDB(db, opts...)
	_serverHardware.serverHardwareDo.UseModel(&model.ServerHardware{})

	tableName := _serverHardware.serverHardwareDo.TableName()
	_serverHardware.ALL = field.NewAsterisk(tableName)
	_serverHardware.ServerHardwareID = field.NewString(tableName, "server_hardware_id")
	_serverHardware.CPUCores = field.NewInt32(tableName, "cpu_cores")
	_serverHardware.CPUFrequency = field.NewString(tableName, "cpu_frequency")
	_serverHardware.CPULogicCount = field.NewInt32(tableName, "cpu_logic_count")
	_serverHardware.CPUPhysicalCount = field.NewInt32(tableName, "cpu_physical_count")
	_serverHardware.CPUCache = field.NewInt32(tableName, "cpu_cache")
	_serverHardware.MemorySize = field.NewInt32(tableName, "memory_size")
	_serverHardware.DiskTotalSize = field.NewInt32(tableName, "disk_total_size")
	_serverHardware.DiskCount = field.NewInt32(tableName, "disk_count")
	_serverHardware.Comments = field.NewString(tableName, "comments")
	_serverHardware.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverHardware.CreateTime = field.NewTime(tableName, "create_time")

	_serverHardware.fillFieldMap()

	return _serverHardware
}

type serverHardware struct {
	serverHardwareDo

	ALL              field.Asterisk
	ServerHardwareID field.String // 主键UUID
	CPUCores         field.Int32  // cpu核心查看每颗CPU封装的是几核
	CPUFrequency     field.String // 如：Intel(R) Xeon(R) CPU E7-4830 v4 @ 2.00GHz
	CPULogicCount    field.Int32  // 逻辑核数
	CPUPhysicalCount field.Int32  // 物理核数
	CPUCache         field.Int32  // cpu缓存(单位KB)
	MemorySize       field.Int32  // 内存大小，单位MB
	DiskTotalSize    field.Int32  // 服务器磁盘总容量（单位GB）
	DiskCount        field.Int32  // 磁盘数量
	Comments         field.String // 备注说明
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）

	fieldMap map[string]field.Expr
}

func (s serverHardware) Table(newTableName string) *serverHardware {
	s.serverHardwareDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverHardware) As(alias string) *serverHardware {
	s.serverHardwareDo.DO = *(s.serverHardwareDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverHardware) updateTableName(table string) *serverHardware {
	s.ALL = field.NewAsterisk(table)
	s.ServerHardwareID = field.NewString(table, "server_hardware_id")
	s.CPUCores = field.NewInt32(table, "cpu_cores")
	s.CPUFrequency = field.NewString(table, "cpu_frequency")
	s.CPULogicCount = field.NewInt32(table, "cpu_logic_count")
	s.CPUPhysicalCount = field.NewInt32(table, "cpu_physical_count")
	s.CPUCache = field.NewInt32(table, "cpu_cache")
	s.MemorySize = field.NewInt32(table, "memory_size")
	s.DiskTotalSize = field.NewInt32(table, "disk_total_size")
	s.DiskCount = field.NewInt32(table, "disk_count")
	s.Comments = field.NewString(table, "comments")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *serverHardware) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverHardware) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["server_hardware_id"] = s.ServerHardwareID
	s.fieldMap["cpu_cores"] = s.CPUCores
	s.fieldMap["cpu_frequency"] = s.CPUFrequency
	s.fieldMap["cpu_logic_count"] = s.CPULogicCount
	s.fieldMap["cpu_physical_count"] = s.CPUPhysicalCount
	s.fieldMap["cpu_cache"] = s.CPUCache
	s.fieldMap["memory_size"] = s.MemorySize
	s.fieldMap["disk_total_size"] = s.DiskTotalSize
	s.fieldMap["disk_count"] = s.DiskCount
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["create_time"] = s.CreateTime
}

func (s serverHardware) clone(db *gorm.DB) serverHardware {
	s.serverHardwareDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverHardware) replaceDB(db *gorm.DB) serverHardware {
	s.serverHardwareDo.ReplaceDB(db)
	return s
}

type serverHardwareDo struct{ gen.DO }

type IServerHardwareDo interface {
	gen.SubQuery
	Debug() IServerHardwareDo
	WithContext(ctx context.Context) IServerHardwareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerHardwareDo
	WriteDB() IServerHardwareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerHardwareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerHardwareDo
	Not(conds ...gen.Condition) IServerHardwareDo
	Or(conds ...gen.Condition) IServerHardwareDo
	Select(conds ...field.Expr) IServerHardwareDo
	Where(conds ...gen.Condition) IServerHardwareDo
	Order(conds ...field.Expr) IServerHardwareDo
	Distinct(cols ...field.Expr) IServerHardwareDo
	Omit(cols ...field.Expr) IServerHardwareDo
	Join(table schema.Tabler, on ...field.Expr) IServerHardwareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerHardwareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerHardwareDo
	Group(cols ...field.Expr) IServerHardwareDo
	Having(conds ...gen.Condition) IServerHardwareDo
	Limit(limit int) IServerHardwareDo
	Offset(offset int) IServerHardwareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerHardwareDo
	Unscoped() IServerHardwareDo
	Create(values ...*model.ServerHardware) error
	CreateInBatches(values []*model.ServerHardware, batchSize int) error
	Save(values ...*model.ServerHardware) error
	First() (*model.ServerHardware, error)
	Take() (*model.ServerHardware, error)
	Last() (*model.ServerHardware, error)
	Find() ([]*model.ServerHardware, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerHardware, err error)
	FindInBatches(result *[]*model.ServerHardware, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerHardware) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerHardwareDo
	Assign(attrs ...field.AssignExpr) IServerHardwareDo
	Joins(fields ...field.RelationField) IServerHardwareDo
	Preload(fields ...field.RelationField) IServerHardwareDo
	FirstOrInit() (*model.ServerHardware, error)
	FirstOrCreate() (*model.ServerHardware, error)
	FindByPage(offset int, limit int) (result []*model.ServerHardware, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerHardwareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverHardwareDo) Debug() IServerHardwareDo {
	return s.withDO(s.DO.Debug())
}

func (s serverHardwareDo) WithContext(ctx context.Context) IServerHardwareDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverHardwareDo) ReadDB() IServerHardwareDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverHardwareDo) WriteDB() IServerHardwareDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverHardwareDo) Session(config *gorm.Session) IServerHardwareDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverHardwareDo) Clauses(conds ...clause.Expression) IServerHardwareDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverHardwareDo) Returning(value interface{}, columns ...string) IServerHardwareDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverHardwareDo) Not(conds ...gen.Condition) IServerHardwareDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverHardwareDo) Or(conds ...gen.Condition) IServerHardwareDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverHardwareDo) Select(conds ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverHardwareDo) Where(conds ...gen.Condition) IServerHardwareDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverHardwareDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerHardwareDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverHardwareDo) Order(conds ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverHardwareDo) Distinct(cols ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverHardwareDo) Omit(cols ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverHardwareDo) Join(table schema.Tabler, on ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverHardwareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverHardwareDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverHardwareDo) Group(cols ...field.Expr) IServerHardwareDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverHardwareDo) Having(conds ...gen.Condition) IServerHardwareDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverHardwareDo) Limit(limit int) IServerHardwareDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverHardwareDo) Offset(offset int) IServerHardwareDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverHardwareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerHardwareDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverHardwareDo) Unscoped() IServerHardwareDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverHardwareDo) Create(values ...*model.ServerHardware) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverHardwareDo) CreateInBatches(values []*model.ServerHardware, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverHardwareDo) Save(values ...*model.ServerHardware) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverHardwareDo) First() (*model.ServerHardware, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerHardware), nil
	}
}

func (s serverHardwareDo) Take() (*model.ServerHardware, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerHardware), nil
	}
}

func (s serverHardwareDo) Last() (*model.ServerHardware, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerHardware), nil
	}
}

func (s serverHardwareDo) Find() ([]*model.ServerHardware, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerHardware), err
}

func (s serverHardwareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerHardware, err error) {
	buf := make([]*model.ServerHardware, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverHardwareDo) FindInBatches(result *[]*model.ServerHardware, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverHardwareDo) Attrs(attrs ...field.AssignExpr) IServerHardwareDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverHardwareDo) Assign(attrs ...field.AssignExpr) IServerHardwareDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverHardwareDo) Joins(fields ...field.RelationField) IServerHardwareDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverHardwareDo) Preload(fields ...field.RelationField) IServerHardwareDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverHardwareDo) FirstOrInit() (*model.ServerHardware, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerHardware), nil
	}
}

func (s serverHardwareDo) FirstOrCreate() (*model.ServerHardware, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerHardware), nil
	}
}

func (s serverHardwareDo) FindByPage(offset int, limit int) (result []*model.ServerHardware, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverHardwareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverHardwareDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverHardwareDo) Delete(models ...*model.ServerHardware) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverHardwareDo) withDO(do gen.Dao) *serverHardwareDo {
	s.DO = *do.(*gen.DO)
	return s
}
