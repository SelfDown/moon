// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerInstallSoftTemplate(db *gorm.DB, opts ...gen.DOOption) serverInstallSoftTemplate {
	_serverInstallSoftTemplate := serverInstallSoftTemplate{}

	_serverInstallSoftTemplate.serverInstallSoftTemplateDo.UseDB(db, opts...)
	_serverInstallSoftTemplate.serverInstallSoftTemplateDo.UseModel(&model.ServerInstallSoftTemplate{})

	tableName := _serverInstallSoftTemplate.serverInstallSoftTemplateDo.TableName()
	_serverInstallSoftTemplate.ALL = field.NewAsterisk(tableName)
	_serverInstallSoftTemplate.SoftTemplateID = field.NewString(tableName, "soft_template_id")
	_serverInstallSoftTemplate.SoftTemplateName = field.NewString(tableName, "soft_template_name")
	_serverInstallSoftTemplate.SoftTemplateType = field.NewString(tableName, "soft_template_type")
	_serverInstallSoftTemplate.ServicePort = field.NewString(tableName, "service_port")
	_serverInstallSoftTemplate.ServerID = field.NewString(tableName, "server_id")
	_serverInstallSoftTemplate.SoftName = field.NewString(tableName, "soft_name")
	_serverInstallSoftTemplate.SoftType = field.NewString(tableName, "soft_type")
	_serverInstallSoftTemplate.SoftHome = field.NewString(tableName, "soft_home")
	_serverInstallSoftTemplate.Portoffset = field.NewString(tableName, "portoffset")
	_serverInstallSoftTemplate.CreateTime = field.NewTime(tableName, "create_time")
	_serverInstallSoftTemplate.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverInstallSoftTemplate.Comments = field.NewString(tableName, "comments")
	_serverInstallSoftTemplate.DockerContainerName = field.NewString(tableName, "docker_container_name")
	_serverInstallSoftTemplate.StartSoftwareCommand = field.NewString(tableName, "start_software_command")
	_serverInstallSoftTemplate.StopSoftwareCommand = field.NewString(tableName, "stop_software_command")
	_serverInstallSoftTemplate.RestartSoftwareCommand = field.NewString(tableName, "restart_software_command")
	_serverInstallSoftTemplate.ServerSoftLogPath = field.NewString(tableName, "server_soft_log_path")
	_serverInstallSoftTemplate.ServerSoftLogsID = field.NewString(tableName, "server_soft_logs_id")
	_serverInstallSoftTemplate.ServerOsUserID = field.NewInt32(tableName, "server_os_user_id")
	_serverInstallSoftTemplate.SoftID = field.NewInt32(tableName, "soft_id")
	_serverInstallSoftTemplate.SoftwareLiveCheckCommand = field.NewString(tableName, "software_live_check_command")
	_serverInstallSoftTemplate.IsMainSoft = field.NewString(tableName, "is_main_soft")
	_serverInstallSoftTemplate.IsDocker = field.NewString(tableName, "is_docker")
	_serverInstallSoftTemplate.LastUseTime = field.NewTime(tableName, "last_use_time")

	_serverInstallSoftTemplate.fillFieldMap()

	return _serverInstallSoftTemplate
}

type serverInstallSoftTemplate struct {
	serverInstallSoftTemplateDo

	ALL                      field.Asterisk
	SoftTemplateID           field.String
	SoftTemplateName         field.String
	SoftTemplateType         field.String
	ServicePort              field.String
	ServerID                 field.String
	SoftName                 field.String
	SoftType                 field.String
	SoftHome                 field.String
	Portoffset               field.String
	CreateTime               field.Time
	ModifyTime               field.Time
	Comments                 field.String
	DockerContainerName      field.String
	StartSoftwareCommand     field.String
	StopSoftwareCommand      field.String
	RestartSoftwareCommand   field.String
	ServerSoftLogPath        field.String
	ServerSoftLogsID         field.String
	ServerOsUserID           field.Int32
	SoftID                   field.Int32
	SoftwareLiveCheckCommand field.String
	IsMainSoft               field.String
	IsDocker                 field.String
	LastUseTime              field.Time

	fieldMap map[string]field.Expr
}

func (s serverInstallSoftTemplate) Table(newTableName string) *serverInstallSoftTemplate {
	s.serverInstallSoftTemplateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverInstallSoftTemplate) As(alias string) *serverInstallSoftTemplate {
	s.serverInstallSoftTemplateDo.DO = *(s.serverInstallSoftTemplateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverInstallSoftTemplate) updateTableName(table string) *serverInstallSoftTemplate {
	s.ALL = field.NewAsterisk(table)
	s.SoftTemplateID = field.NewString(table, "soft_template_id")
	s.SoftTemplateName = field.NewString(table, "soft_template_name")
	s.SoftTemplateType = field.NewString(table, "soft_template_type")
	s.ServicePort = field.NewString(table, "service_port")
	s.ServerID = field.NewString(table, "server_id")
	s.SoftName = field.NewString(table, "soft_name")
	s.SoftType = field.NewString(table, "soft_type")
	s.SoftHome = field.NewString(table, "soft_home")
	s.Portoffset = field.NewString(table, "portoffset")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.DockerContainerName = field.NewString(table, "docker_container_name")
	s.StartSoftwareCommand = field.NewString(table, "start_software_command")
	s.StopSoftwareCommand = field.NewString(table, "stop_software_command")
	s.RestartSoftwareCommand = field.NewString(table, "restart_software_command")
	s.ServerSoftLogPath = field.NewString(table, "server_soft_log_path")
	s.ServerSoftLogsID = field.NewString(table, "server_soft_logs_id")
	s.ServerOsUserID = field.NewInt32(table, "server_os_user_id")
	s.SoftID = field.NewInt32(table, "soft_id")
	s.SoftwareLiveCheckCommand = field.NewString(table, "software_live_check_command")
	s.IsMainSoft = field.NewString(table, "is_main_soft")
	s.IsDocker = field.NewString(table, "is_docker")
	s.LastUseTime = field.NewTime(table, "last_use_time")

	s.fillFieldMap()

	return s
}

func (s *serverInstallSoftTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverInstallSoftTemplate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["soft_template_id"] = s.SoftTemplateID
	s.fieldMap["soft_template_name"] = s.SoftTemplateName
	s.fieldMap["soft_template_type"] = s.SoftTemplateType
	s.fieldMap["service_port"] = s.ServicePort
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["soft_name"] = s.SoftName
	s.fieldMap["soft_type"] = s.SoftType
	s.fieldMap["soft_home"] = s.SoftHome
	s.fieldMap["portoffset"] = s.Portoffset
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["docker_container_name"] = s.DockerContainerName
	s.fieldMap["start_software_command"] = s.StartSoftwareCommand
	s.fieldMap["stop_software_command"] = s.StopSoftwareCommand
	s.fieldMap["restart_software_command"] = s.RestartSoftwareCommand
	s.fieldMap["server_soft_log_path"] = s.ServerSoftLogPath
	s.fieldMap["server_soft_logs_id"] = s.ServerSoftLogsID
	s.fieldMap["server_os_user_id"] = s.ServerOsUserID
	s.fieldMap["soft_id"] = s.SoftID
	s.fieldMap["software_live_check_command"] = s.SoftwareLiveCheckCommand
	s.fieldMap["is_main_soft"] = s.IsMainSoft
	s.fieldMap["is_docker"] = s.IsDocker
	s.fieldMap["last_use_time"] = s.LastUseTime
}

func (s serverInstallSoftTemplate) clone(db *gorm.DB) serverInstallSoftTemplate {
	s.serverInstallSoftTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverInstallSoftTemplate) replaceDB(db *gorm.DB) serverInstallSoftTemplate {
	s.serverInstallSoftTemplateDo.ReplaceDB(db)
	return s
}

type serverInstallSoftTemplateDo struct{ gen.DO }

type IServerInstallSoftTemplateDo interface {
	gen.SubQuery
	Debug() IServerInstallSoftTemplateDo
	WithContext(ctx context.Context) IServerInstallSoftTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerInstallSoftTemplateDo
	WriteDB() IServerInstallSoftTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerInstallSoftTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerInstallSoftTemplateDo
	Not(conds ...gen.Condition) IServerInstallSoftTemplateDo
	Or(conds ...gen.Condition) IServerInstallSoftTemplateDo
	Select(conds ...field.Expr) IServerInstallSoftTemplateDo
	Where(conds ...gen.Condition) IServerInstallSoftTemplateDo
	Order(conds ...field.Expr) IServerInstallSoftTemplateDo
	Distinct(cols ...field.Expr) IServerInstallSoftTemplateDo
	Omit(cols ...field.Expr) IServerInstallSoftTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IServerInstallSoftTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerInstallSoftTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerInstallSoftTemplateDo
	Group(cols ...field.Expr) IServerInstallSoftTemplateDo
	Having(conds ...gen.Condition) IServerInstallSoftTemplateDo
	Limit(limit int) IServerInstallSoftTemplateDo
	Offset(offset int) IServerInstallSoftTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerInstallSoftTemplateDo
	Unscoped() IServerInstallSoftTemplateDo
	Create(values ...*model.ServerInstallSoftTemplate) error
	CreateInBatches(values []*model.ServerInstallSoftTemplate, batchSize int) error
	Save(values ...*model.ServerInstallSoftTemplate) error
	First() (*model.ServerInstallSoftTemplate, error)
	Take() (*model.ServerInstallSoftTemplate, error)
	Last() (*model.ServerInstallSoftTemplate, error)
	Find() ([]*model.ServerInstallSoftTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerInstallSoftTemplate, err error)
	FindInBatches(result *[]*model.ServerInstallSoftTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerInstallSoftTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerInstallSoftTemplateDo
	Assign(attrs ...field.AssignExpr) IServerInstallSoftTemplateDo
	Joins(fields ...field.RelationField) IServerInstallSoftTemplateDo
	Preload(fields ...field.RelationField) IServerInstallSoftTemplateDo
	FirstOrInit() (*model.ServerInstallSoftTemplate, error)
	FirstOrCreate() (*model.ServerInstallSoftTemplate, error)
	FindByPage(offset int, limit int) (result []*model.ServerInstallSoftTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerInstallSoftTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverInstallSoftTemplateDo) Debug() IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Debug())
}

func (s serverInstallSoftTemplateDo) WithContext(ctx context.Context) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverInstallSoftTemplateDo) ReadDB() IServerInstallSoftTemplateDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverInstallSoftTemplateDo) WriteDB() IServerInstallSoftTemplateDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverInstallSoftTemplateDo) Session(config *gorm.Session) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverInstallSoftTemplateDo) Clauses(conds ...clause.Expression) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverInstallSoftTemplateDo) Returning(value interface{}, columns ...string) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverInstallSoftTemplateDo) Not(conds ...gen.Condition) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverInstallSoftTemplateDo) Or(conds ...gen.Condition) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverInstallSoftTemplateDo) Select(conds ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverInstallSoftTemplateDo) Where(conds ...gen.Condition) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverInstallSoftTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerInstallSoftTemplateDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverInstallSoftTemplateDo) Order(conds ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverInstallSoftTemplateDo) Distinct(cols ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverInstallSoftTemplateDo) Omit(cols ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverInstallSoftTemplateDo) Join(table schema.Tabler, on ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverInstallSoftTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverInstallSoftTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverInstallSoftTemplateDo) Group(cols ...field.Expr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverInstallSoftTemplateDo) Having(conds ...gen.Condition) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverInstallSoftTemplateDo) Limit(limit int) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverInstallSoftTemplateDo) Offset(offset int) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverInstallSoftTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverInstallSoftTemplateDo) Unscoped() IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverInstallSoftTemplateDo) Create(values ...*model.ServerInstallSoftTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverInstallSoftTemplateDo) CreateInBatches(values []*model.ServerInstallSoftTemplate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverInstallSoftTemplateDo) Save(values ...*model.ServerInstallSoftTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverInstallSoftTemplateDo) First() (*model.ServerInstallSoftTemplate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstallSoftTemplate), nil
	}
}

func (s serverInstallSoftTemplateDo) Take() (*model.ServerInstallSoftTemplate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstallSoftTemplate), nil
	}
}

func (s serverInstallSoftTemplateDo) Last() (*model.ServerInstallSoftTemplate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstallSoftTemplate), nil
	}
}

func (s serverInstallSoftTemplateDo) Find() ([]*model.ServerInstallSoftTemplate, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerInstallSoftTemplate), err
}

func (s serverInstallSoftTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerInstallSoftTemplate, err error) {
	buf := make([]*model.ServerInstallSoftTemplate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverInstallSoftTemplateDo) FindInBatches(result *[]*model.ServerInstallSoftTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverInstallSoftTemplateDo) Attrs(attrs ...field.AssignExpr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverInstallSoftTemplateDo) Assign(attrs ...field.AssignExpr) IServerInstallSoftTemplateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverInstallSoftTemplateDo) Joins(fields ...field.RelationField) IServerInstallSoftTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverInstallSoftTemplateDo) Preload(fields ...field.RelationField) IServerInstallSoftTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverInstallSoftTemplateDo) FirstOrInit() (*model.ServerInstallSoftTemplate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstallSoftTemplate), nil
	}
}

func (s serverInstallSoftTemplateDo) FirstOrCreate() (*model.ServerInstallSoftTemplate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstallSoftTemplate), nil
	}
}

func (s serverInstallSoftTemplateDo) FindByPage(offset int, limit int) (result []*model.ServerInstallSoftTemplate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverInstallSoftTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverInstallSoftTemplateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverInstallSoftTemplateDo) Delete(models ...*model.ServerInstallSoftTemplate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverInstallSoftTemplateDo) withDO(do gen.Dao) *serverInstallSoftTemplateDo {
	s.DO = *do.(*gen.DO)
	return s
}
