// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerInstance(db *gorm.DB, opts ...gen.DOOption) serverInstance {
	_serverInstance := serverInstance{}

	_serverInstance.serverInstanceDo.UseDB(db, opts...)
	_serverInstance.serverInstanceDo.UseModel(&model.ServerInstance{})

	tableName := _serverInstance.serverInstanceDo.TableName()
	_serverInstance.ALL = field.NewAsterisk(tableName)
	_serverInstance.ServerID = field.NewString(tableName, "server_id")
	_serverInstance.ServerEnvID = field.NewString(tableName, "server_env_id")
	_serverInstance.ServerIP = field.NewString(tableName, "server_ip")
	_serverInstance.ServerName = field.NewString(tableName, "server_name")
	_serverInstance.ServerPort = field.NewString(tableName, "server_port")
	_serverInstance.ServerUser = field.NewString(tableName, "server_user")
	_serverInstance.ServerPwd = field.NewString(tableName, "server_pwd")
	_serverInstance.ServerStatu = field.NewString(tableName, "server_statu")
	_serverInstance.Notes = field.NewString(tableName, "notes")
	_serverInstance.SuperUser = field.NewString(tableName, "super_user")
	_serverInstance.SuperPwd = field.NewString(tableName, "super_pwd")
	_serverInstance.CheckUser = field.NewString(tableName, "check_user")
	_serverInstance.CheckPasswd = field.NewString(tableName, "check_passwd")
	_serverInstance.OraclePwd = field.NewString(tableName, "oracle_pwd")
	_serverInstance.ServerType = field.NewString(tableName, "server_type")
	_serverInstance.OracleUser = field.NewString(tableName, "oracle_user")
	_serverInstance.ServerOs = field.NewString(tableName, "server_os")
	_serverInstance.DblinkDump = field.NewString(tableName, "dblink_dump")
	_serverInstance.DbaPwd = field.NewString(tableName, "dba_pwd")
	_serverInstance.DbaUser = field.NewString(tableName, "dba_user")
	_serverInstance.DbSid = field.NewString(tableName, "db_sid")
	_serverInstance.OsInfo = field.NewString(tableName, "os_info")
	_serverInstance.ServerGroupID = field.NewString(tableName, "server_group_id")
	_serverInstance.DestVMName = field.NewString(tableName, "dest_vm_name")
	_serverInstance.SrcVMName = field.NewString(tableName, "src_vm_name")
	_serverInstance.CreateTime = field.NewTime(tableName, "create_time")
	_serverInstance.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverInstance.Comments = field.NewString(tableName, "comments")
	_serverInstance.ZabbixHostid = field.NewString(tableName, "zabbix_hostid")
	_serverInstance.ServerHardwareID = field.NewString(tableName, "server_hardware_id")
	_serverInstance.ServerVirtualizationType = field.NewString(tableName, "server_virtualization_type")
	_serverInstance.ServerServiceType = field.NewString(tableName, "server_service_type")
	_serverInstance.ServerOsUsersID = field.NewString(tableName, "server_os_users_id")
	_serverInstance.VMHostsID = field.NewString(tableName, "vm_hosts_id")
	_serverInstance.InternetAddress = field.NewString(tableName, "internet_address")
	_serverInstance.IsActived = field.NewString(tableName, "is_actived")
	_serverInstance.Location = field.NewString(tableName, "location")
	_serverInstance.ServerOsVersion = field.NewString(tableName, "server_os_version")
	_serverInstance.IsDel = field.NewString(tableName, "is_del")
	_serverInstance.OsLogPath = field.NewString(tableName, "os_log_path")
	_serverInstance.ConnectProtocolType = field.NewString(tableName, "connect_protocol_type")
	_serverInstance.ServerBusiName = field.NewString(tableName, "server_busi_name")
	_serverInstance.ProfessionalName = field.NewString(tableName, "professional_name")
	_serverInstance.MemorySize = field.NewString(tableName, "memory_size")
	_serverInstance.DiskTotalSize = field.NewString(tableName, "disk_total_size")
	_serverInstance.CPUCores = field.NewString(tableName, "cpu_cores")
	_serverInstance.CPULogicCount = field.NewString(tableName, "cpu_logic_count")
	_serverInstance.IsEnable = field.NewString(tableName, "is_enable")
	_serverInstance.Vip = field.NewString(tableName, "vip")

	_serverInstance.fillFieldMap()

	return _serverInstance
}

type serverInstance struct {
	serverInstanceDo

	ALL         field.Asterisk
	ServerID    field.String // 主键
	ServerEnvID field.String
	ServerIP    field.String
	ServerName  field.String
	ServerPort  field.String
	ServerUser  field.String
	ServerPwd   field.String
	ServerStatu field.String // 服务器状态 1、正常 0、异常
	Notes       field.String // 备注
	SuperUser   field.String // linux超级管理员
	SuperPwd    field.String // linux超级管理员密码
	CheckUser   field.String // 用户系统巡检时使用的用户
	CheckPasswd field.String // 用户系统巡检时使用的密码
	OraclePwd   field.String // oracle密码
	/*
		与 sys_server_type关联
		服务提供类型
	*/
	ServerType               field.String
	OracleUser               field.String // Oracle用户名
	ServerOs                 field.String
	DblinkDump               field.String // 用于数据泵导出导出数据时候使用的dblink
	DbaPwd                   field.String // 数据库管理员密码
	DbaUser                  field.String // 数据库管理员用户名
	DbSid                    field.String // 数据库实例名称，多个用英文逗号分开。
	OsInfo                   field.String // 操作系统软硬件信息（废弃）
	ServerGroupID            field.String // 关联 server_group_id
	DestVMName               field.String // vps名称
	SrcVMName                field.String // vps 克隆来自于
	CreateTime               field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime               field.Time   // 记录修改时间（数据库自动写入）
	Comments                 field.String // 备注说明
	ZabbixHostid             field.String // 对应的zabbix hostid
	ServerHardwareID         field.String // 关联server_hardware.server_hardware_id
	ServerVirtualizationType field.String // 主机类型见码表
	ServerServiceType        field.String // 提供的服务类型分类
	ServerOsUsersID          field.String // 操作系统用户 （server_os_users.server_os_users_id）
	VMHostsID                field.String // vm_hosts.vm_hosts_id
	InternetAddress          field.String
	IsActived                field.String
	Location                 field.String
	ServerOsVersion          field.String
	IsDel                    field.String
	OsLogPath                field.String
	ConnectProtocolType      field.String
	ServerBusiName           field.String
	ProfessionalName         field.String
	MemorySize               field.String
	DiskTotalSize            field.String
	CPUCores                 field.String
	CPULogicCount            field.String
	IsEnable                 field.String
	Vip                      field.String

	fieldMap map[string]field.Expr
}

func (s serverInstance) Table(newTableName string) *serverInstance {
	s.serverInstanceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverInstance) As(alias string) *serverInstance {
	s.serverInstanceDo.DO = *(s.serverInstanceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverInstance) updateTableName(table string) *serverInstance {
	s.ALL = field.NewAsterisk(table)
	s.ServerID = field.NewString(table, "server_id")
	s.ServerEnvID = field.NewString(table, "server_env_id")
	s.ServerIP = field.NewString(table, "server_ip")
	s.ServerName = field.NewString(table, "server_name")
	s.ServerPort = field.NewString(table, "server_port")
	s.ServerUser = field.NewString(table, "server_user")
	s.ServerPwd = field.NewString(table, "server_pwd")
	s.ServerStatu = field.NewString(table, "server_statu")
	s.Notes = field.NewString(table, "notes")
	s.SuperUser = field.NewString(table, "super_user")
	s.SuperPwd = field.NewString(table, "super_pwd")
	s.CheckUser = field.NewString(table, "check_user")
	s.CheckPasswd = field.NewString(table, "check_passwd")
	s.OraclePwd = field.NewString(table, "oracle_pwd")
	s.ServerType = field.NewString(table, "server_type")
	s.OracleUser = field.NewString(table, "oracle_user")
	s.ServerOs = field.NewString(table, "server_os")
	s.DblinkDump = field.NewString(table, "dblink_dump")
	s.DbaPwd = field.NewString(table, "dba_pwd")
	s.DbaUser = field.NewString(table, "dba_user")
	s.DbSid = field.NewString(table, "db_sid")
	s.OsInfo = field.NewString(table, "os_info")
	s.ServerGroupID = field.NewString(table, "server_group_id")
	s.DestVMName = field.NewString(table, "dest_vm_name")
	s.SrcVMName = field.NewString(table, "src_vm_name")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.ZabbixHostid = field.NewString(table, "zabbix_hostid")
	s.ServerHardwareID = field.NewString(table, "server_hardware_id")
	s.ServerVirtualizationType = field.NewString(table, "server_virtualization_type")
	s.ServerServiceType = field.NewString(table, "server_service_type")
	s.ServerOsUsersID = field.NewString(table, "server_os_users_id")
	s.VMHostsID = field.NewString(table, "vm_hosts_id")
	s.InternetAddress = field.NewString(table, "internet_address")
	s.IsActived = field.NewString(table, "is_actived")
	s.Location = field.NewString(table, "location")
	s.ServerOsVersion = field.NewString(table, "server_os_version")
	s.IsDel = field.NewString(table, "is_del")
	s.OsLogPath = field.NewString(table, "os_log_path")
	s.ConnectProtocolType = field.NewString(table, "connect_protocol_type")
	s.ServerBusiName = field.NewString(table, "server_busi_name")
	s.ProfessionalName = field.NewString(table, "professional_name")
	s.MemorySize = field.NewString(table, "memory_size")
	s.DiskTotalSize = field.NewString(table, "disk_total_size")
	s.CPUCores = field.NewString(table, "cpu_cores")
	s.CPULogicCount = field.NewString(table, "cpu_logic_count")
	s.IsEnable = field.NewString(table, "is_enable")
	s.Vip = field.NewString(table, "vip")

	s.fillFieldMap()

	return s
}

func (s *serverInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverInstance) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 49)
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["server_env_id"] = s.ServerEnvID
	s.fieldMap["server_ip"] = s.ServerIP
	s.fieldMap["server_name"] = s.ServerName
	s.fieldMap["server_port"] = s.ServerPort
	s.fieldMap["server_user"] = s.ServerUser
	s.fieldMap["server_pwd"] = s.ServerPwd
	s.fieldMap["server_statu"] = s.ServerStatu
	s.fieldMap["notes"] = s.Notes
	s.fieldMap["super_user"] = s.SuperUser
	s.fieldMap["super_pwd"] = s.SuperPwd
	s.fieldMap["check_user"] = s.CheckUser
	s.fieldMap["check_passwd"] = s.CheckPasswd
	s.fieldMap["oracle_pwd"] = s.OraclePwd
	s.fieldMap["server_type"] = s.ServerType
	s.fieldMap["oracle_user"] = s.OracleUser
	s.fieldMap["server_os"] = s.ServerOs
	s.fieldMap["dblink_dump"] = s.DblinkDump
	s.fieldMap["dba_pwd"] = s.DbaPwd
	s.fieldMap["dba_user"] = s.DbaUser
	s.fieldMap["db_sid"] = s.DbSid
	s.fieldMap["os_info"] = s.OsInfo
	s.fieldMap["server_group_id"] = s.ServerGroupID
	s.fieldMap["dest_vm_name"] = s.DestVMName
	s.fieldMap["src_vm_name"] = s.SrcVMName
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["zabbix_hostid"] = s.ZabbixHostid
	s.fieldMap["server_hardware_id"] = s.ServerHardwareID
	s.fieldMap["server_virtualization_type"] = s.ServerVirtualizationType
	s.fieldMap["server_service_type"] = s.ServerServiceType
	s.fieldMap["server_os_users_id"] = s.ServerOsUsersID
	s.fieldMap["vm_hosts_id"] = s.VMHostsID
	s.fieldMap["internet_address"] = s.InternetAddress
	s.fieldMap["is_actived"] = s.IsActived
	s.fieldMap["location"] = s.Location
	s.fieldMap["server_os_version"] = s.ServerOsVersion
	s.fieldMap["is_del"] = s.IsDel
	s.fieldMap["os_log_path"] = s.OsLogPath
	s.fieldMap["connect_protocol_type"] = s.ConnectProtocolType
	s.fieldMap["server_busi_name"] = s.ServerBusiName
	s.fieldMap["professional_name"] = s.ProfessionalName
	s.fieldMap["memory_size"] = s.MemorySize
	s.fieldMap["disk_total_size"] = s.DiskTotalSize
	s.fieldMap["cpu_cores"] = s.CPUCores
	s.fieldMap["cpu_logic_count"] = s.CPULogicCount
	s.fieldMap["is_enable"] = s.IsEnable
	s.fieldMap["vip"] = s.Vip
}

func (s serverInstance) clone(db *gorm.DB) serverInstance {
	s.serverInstanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverInstance) replaceDB(db *gorm.DB) serverInstance {
	s.serverInstanceDo.ReplaceDB(db)
	return s
}

type serverInstanceDo struct{ gen.DO }

type IServerInstanceDo interface {
	gen.SubQuery
	Debug() IServerInstanceDo
	WithContext(ctx context.Context) IServerInstanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerInstanceDo
	WriteDB() IServerInstanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerInstanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerInstanceDo
	Not(conds ...gen.Condition) IServerInstanceDo
	Or(conds ...gen.Condition) IServerInstanceDo
	Select(conds ...field.Expr) IServerInstanceDo
	Where(conds ...gen.Condition) IServerInstanceDo
	Order(conds ...field.Expr) IServerInstanceDo
	Distinct(cols ...field.Expr) IServerInstanceDo
	Omit(cols ...field.Expr) IServerInstanceDo
	Join(table schema.Tabler, on ...field.Expr) IServerInstanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerInstanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerInstanceDo
	Group(cols ...field.Expr) IServerInstanceDo
	Having(conds ...gen.Condition) IServerInstanceDo
	Limit(limit int) IServerInstanceDo
	Offset(offset int) IServerInstanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerInstanceDo
	Unscoped() IServerInstanceDo
	Create(values ...*model.ServerInstance) error
	CreateInBatches(values []*model.ServerInstance, batchSize int) error
	Save(values ...*model.ServerInstance) error
	First() (*model.ServerInstance, error)
	Take() (*model.ServerInstance, error)
	Last() (*model.ServerInstance, error)
	Find() ([]*model.ServerInstance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerInstance, err error)
	FindInBatches(result *[]*model.ServerInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerInstance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerInstanceDo
	Assign(attrs ...field.AssignExpr) IServerInstanceDo
	Joins(fields ...field.RelationField) IServerInstanceDo
	Preload(fields ...field.RelationField) IServerInstanceDo
	FirstOrInit() (*model.ServerInstance, error)
	FirstOrCreate() (*model.ServerInstance, error)
	FindByPage(offset int, limit int) (result []*model.ServerInstance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerInstanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverInstanceDo) Debug() IServerInstanceDo {
	return s.withDO(s.DO.Debug())
}

func (s serverInstanceDo) WithContext(ctx context.Context) IServerInstanceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverInstanceDo) ReadDB() IServerInstanceDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverInstanceDo) WriteDB() IServerInstanceDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverInstanceDo) Session(config *gorm.Session) IServerInstanceDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverInstanceDo) Clauses(conds ...clause.Expression) IServerInstanceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverInstanceDo) Returning(value interface{}, columns ...string) IServerInstanceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverInstanceDo) Not(conds ...gen.Condition) IServerInstanceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverInstanceDo) Or(conds ...gen.Condition) IServerInstanceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverInstanceDo) Select(conds ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverInstanceDo) Where(conds ...gen.Condition) IServerInstanceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverInstanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerInstanceDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverInstanceDo) Order(conds ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverInstanceDo) Distinct(cols ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverInstanceDo) Omit(cols ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverInstanceDo) Join(table schema.Tabler, on ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverInstanceDo) Group(cols ...field.Expr) IServerInstanceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverInstanceDo) Having(conds ...gen.Condition) IServerInstanceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverInstanceDo) Limit(limit int) IServerInstanceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverInstanceDo) Offset(offset int) IServerInstanceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerInstanceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverInstanceDo) Unscoped() IServerInstanceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverInstanceDo) Create(values ...*model.ServerInstance) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverInstanceDo) CreateInBatches(values []*model.ServerInstance, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverInstanceDo) Save(values ...*model.ServerInstance) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverInstanceDo) First() (*model.ServerInstance, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstance), nil
	}
}

func (s serverInstanceDo) Take() (*model.ServerInstance, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstance), nil
	}
}

func (s serverInstanceDo) Last() (*model.ServerInstance, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstance), nil
	}
}

func (s serverInstanceDo) Find() ([]*model.ServerInstance, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerInstance), err
}

func (s serverInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerInstance, err error) {
	buf := make([]*model.ServerInstance, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverInstanceDo) FindInBatches(result *[]*model.ServerInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverInstanceDo) Attrs(attrs ...field.AssignExpr) IServerInstanceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverInstanceDo) Assign(attrs ...field.AssignExpr) IServerInstanceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverInstanceDo) Joins(fields ...field.RelationField) IServerInstanceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverInstanceDo) Preload(fields ...field.RelationField) IServerInstanceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverInstanceDo) FirstOrInit() (*model.ServerInstance, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstance), nil
	}
}

func (s serverInstanceDo) FirstOrCreate() (*model.ServerInstance, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstance), nil
	}
}

func (s serverInstanceDo) FindByPage(offset int, limit int) (result []*model.ServerInstance, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverInstanceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverInstanceDo) Delete(models ...*model.ServerInstance) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverInstanceDo) withDO(do gen.Dao) *serverInstanceDo {
	s.DO = *do.(*gen.DO)
	return s
}
