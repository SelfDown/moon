// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerInstanceCopy(db *gorm.DB, opts ...gen.DOOption) serverInstanceCopy {
	_serverInstanceCopy := serverInstanceCopy{}

	_serverInstanceCopy.serverInstanceCopyDo.UseDB(db, opts...)
	_serverInstanceCopy.serverInstanceCopyDo.UseModel(&model.ServerInstanceCopy{})

	tableName := _serverInstanceCopy.serverInstanceCopyDo.TableName()
	_serverInstanceCopy.ALL = field.NewAsterisk(tableName)
	_serverInstanceCopy.ServerID = field.NewString(tableName, "server_id")
	_serverInstanceCopy.ServerEnvID = field.NewString(tableName, "server_env_id")
	_serverInstanceCopy.ServerIP = field.NewString(tableName, "server_ip")
	_serverInstanceCopy.ServerName = field.NewString(tableName, "server_name")
	_serverInstanceCopy.ServerPort = field.NewString(tableName, "server_port")
	_serverInstanceCopy.ServerUser = field.NewString(tableName, "server_user")
	_serverInstanceCopy.ServerPwd = field.NewString(tableName, "server_pwd")
	_serverInstanceCopy.ServerStatu = field.NewString(tableName, "server_statu")
	_serverInstanceCopy.Notes = field.NewString(tableName, "notes")
	_serverInstanceCopy.SuperUser = field.NewString(tableName, "super_user")
	_serverInstanceCopy.SuperPwd = field.NewString(tableName, "super_pwd")
	_serverInstanceCopy.CheckUser = field.NewString(tableName, "check_user")
	_serverInstanceCopy.CheckPasswd = field.NewString(tableName, "check_passwd")
	_serverInstanceCopy.OraclePwd = field.NewString(tableName, "oracle_pwd")
	_serverInstanceCopy.ServerType = field.NewString(tableName, "server_type")
	_serverInstanceCopy.OracleUser = field.NewString(tableName, "oracle_user")
	_serverInstanceCopy.ServerOs = field.NewString(tableName, "server_os")
	_serverInstanceCopy.DblinkDump = field.NewString(tableName, "dblink_dump")
	_serverInstanceCopy.DbaPwd = field.NewString(tableName, "dba_pwd")
	_serverInstanceCopy.DbaUser = field.NewString(tableName, "dba_user")
	_serverInstanceCopy.DbSid = field.NewString(tableName, "db_sid")
	_serverInstanceCopy.OsInfo = field.NewString(tableName, "os_info")
	_serverInstanceCopy.ServerGroupID = field.NewString(tableName, "server_group_id")
	_serverInstanceCopy.DestVMName = field.NewString(tableName, "dest_vm_name")
	_serverInstanceCopy.SrcVMName = field.NewString(tableName, "src_vm_name")
	_serverInstanceCopy.CreateTime = field.NewTime(tableName, "create_time")
	_serverInstanceCopy.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverInstanceCopy.Comments = field.NewString(tableName, "comments")
	_serverInstanceCopy.ZabbixHostid = field.NewString(tableName, "zabbix_hostid")
	_serverInstanceCopy.ServerHardwareID = field.NewString(tableName, "server_hardware_id")
	_serverInstanceCopy.ServerVirtualizationType = field.NewString(tableName, "server_virtualization_type")
	_serverInstanceCopy.ServerServiceType = field.NewString(tableName, "server_service_type")
	_serverInstanceCopy.ServerOsUsersID = field.NewString(tableName, "server_os_users_id")
	_serverInstanceCopy.VMHostsID = field.NewString(tableName, "vm_hosts_id")

	_serverInstanceCopy.fillFieldMap()

	return _serverInstanceCopy
}

type serverInstanceCopy struct {
	serverInstanceCopyDo

	ALL                      field.Asterisk
	ServerID                 field.String // 主键
	ServerEnvID              field.String
	ServerIP                 field.String
	ServerName               field.String
	ServerPort               field.String
	ServerUser               field.String
	ServerPwd                field.String
	ServerStatu              field.String // 服务器状态 1、正常 0、异常
	Notes                    field.String // 备注
	SuperUser                field.String // linux超级管理员
	SuperPwd                 field.String // linux超级管理员密码
	CheckUser                field.String // 用户系统巡检时使用的用户
	CheckPasswd              field.String // 用户系统巡检时使用的密码
	OraclePwd                field.String // oracle密码
	ServerType               field.String // 与 sys_server_type关联\n服务提供类型
	OracleUser               field.String // Oracle用户名
	ServerOs                 field.String
	DblinkDump               field.String // 用于数据泵导出导出数据时候使用的dblink
	DbaPwd                   field.String // 数据库管理员密码
	DbaUser                  field.String // 数据库管理员用户名
	DbSid                    field.String // 数据库实例名称，多个用英文逗号分开。
	OsInfo                   field.String // 操作系统软硬件信息（废弃）
	ServerGroupID            field.String // 关联 server_group_id
	DestVMName               field.String // vps名称
	SrcVMName                field.String // vps 克隆来自于
	CreateTime               field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime               field.Time   // 记录修改时间（数据库自动写入）
	Comments                 field.String // 备注说明
	ZabbixHostid             field.String // 对应的zabbix hostid
	ServerHardwareID         field.String // 关联server_hardware.server_hardware_id
	ServerVirtualizationType field.String // 主机类型见码表
	ServerServiceType        field.String // 提供的服务类型分类
	ServerOsUsersID          field.String // 操作系统用户 （server_os_users.server_os_users_id）
	VMHostsID                field.String // vm_hosts.vm_hosts_id

	fieldMap map[string]field.Expr
}

func (s serverInstanceCopy) Table(newTableName string) *serverInstanceCopy {
	s.serverInstanceCopyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverInstanceCopy) As(alias string) *serverInstanceCopy {
	s.serverInstanceCopyDo.DO = *(s.serverInstanceCopyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverInstanceCopy) updateTableName(table string) *serverInstanceCopy {
	s.ALL = field.NewAsterisk(table)
	s.ServerID = field.NewString(table, "server_id")
	s.ServerEnvID = field.NewString(table, "server_env_id")
	s.ServerIP = field.NewString(table, "server_ip")
	s.ServerName = field.NewString(table, "server_name")
	s.ServerPort = field.NewString(table, "server_port")
	s.ServerUser = field.NewString(table, "server_user")
	s.ServerPwd = field.NewString(table, "server_pwd")
	s.ServerStatu = field.NewString(table, "server_statu")
	s.Notes = field.NewString(table, "notes")
	s.SuperUser = field.NewString(table, "super_user")
	s.SuperPwd = field.NewString(table, "super_pwd")
	s.CheckUser = field.NewString(table, "check_user")
	s.CheckPasswd = field.NewString(table, "check_passwd")
	s.OraclePwd = field.NewString(table, "oracle_pwd")
	s.ServerType = field.NewString(table, "server_type")
	s.OracleUser = field.NewString(table, "oracle_user")
	s.ServerOs = field.NewString(table, "server_os")
	s.DblinkDump = field.NewString(table, "dblink_dump")
	s.DbaPwd = field.NewString(table, "dba_pwd")
	s.DbaUser = field.NewString(table, "dba_user")
	s.DbSid = field.NewString(table, "db_sid")
	s.OsInfo = field.NewString(table, "os_info")
	s.ServerGroupID = field.NewString(table, "server_group_id")
	s.DestVMName = field.NewString(table, "dest_vm_name")
	s.SrcVMName = field.NewString(table, "src_vm_name")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.ZabbixHostid = field.NewString(table, "zabbix_hostid")
	s.ServerHardwareID = field.NewString(table, "server_hardware_id")
	s.ServerVirtualizationType = field.NewString(table, "server_virtualization_type")
	s.ServerServiceType = field.NewString(table, "server_service_type")
	s.ServerOsUsersID = field.NewString(table, "server_os_users_id")
	s.VMHostsID = field.NewString(table, "vm_hosts_id")

	s.fillFieldMap()

	return s
}

func (s *serverInstanceCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverInstanceCopy) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 34)
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["server_env_id"] = s.ServerEnvID
	s.fieldMap["server_ip"] = s.ServerIP
	s.fieldMap["server_name"] = s.ServerName
	s.fieldMap["server_port"] = s.ServerPort
	s.fieldMap["server_user"] = s.ServerUser
	s.fieldMap["server_pwd"] = s.ServerPwd
	s.fieldMap["server_statu"] = s.ServerStatu
	s.fieldMap["notes"] = s.Notes
	s.fieldMap["super_user"] = s.SuperUser
	s.fieldMap["super_pwd"] = s.SuperPwd
	s.fieldMap["check_user"] = s.CheckUser
	s.fieldMap["check_passwd"] = s.CheckPasswd
	s.fieldMap["oracle_pwd"] = s.OraclePwd
	s.fieldMap["server_type"] = s.ServerType
	s.fieldMap["oracle_user"] = s.OracleUser
	s.fieldMap["server_os"] = s.ServerOs
	s.fieldMap["dblink_dump"] = s.DblinkDump
	s.fieldMap["dba_pwd"] = s.DbaPwd
	s.fieldMap["dba_user"] = s.DbaUser
	s.fieldMap["db_sid"] = s.DbSid
	s.fieldMap["os_info"] = s.OsInfo
	s.fieldMap["server_group_id"] = s.ServerGroupID
	s.fieldMap["dest_vm_name"] = s.DestVMName
	s.fieldMap["src_vm_name"] = s.SrcVMName
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["zabbix_hostid"] = s.ZabbixHostid
	s.fieldMap["server_hardware_id"] = s.ServerHardwareID
	s.fieldMap["server_virtualization_type"] = s.ServerVirtualizationType
	s.fieldMap["server_service_type"] = s.ServerServiceType
	s.fieldMap["server_os_users_id"] = s.ServerOsUsersID
	s.fieldMap["vm_hosts_id"] = s.VMHostsID
}

func (s serverInstanceCopy) clone(db *gorm.DB) serverInstanceCopy {
	s.serverInstanceCopyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverInstanceCopy) replaceDB(db *gorm.DB) serverInstanceCopy {
	s.serverInstanceCopyDo.ReplaceDB(db)
	return s
}

type serverInstanceCopyDo struct{ gen.DO }

type IServerInstanceCopyDo interface {
	gen.SubQuery
	Debug() IServerInstanceCopyDo
	WithContext(ctx context.Context) IServerInstanceCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerInstanceCopyDo
	WriteDB() IServerInstanceCopyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerInstanceCopyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerInstanceCopyDo
	Not(conds ...gen.Condition) IServerInstanceCopyDo
	Or(conds ...gen.Condition) IServerInstanceCopyDo
	Select(conds ...field.Expr) IServerInstanceCopyDo
	Where(conds ...gen.Condition) IServerInstanceCopyDo
	Order(conds ...field.Expr) IServerInstanceCopyDo
	Distinct(cols ...field.Expr) IServerInstanceCopyDo
	Omit(cols ...field.Expr) IServerInstanceCopyDo
	Join(table schema.Tabler, on ...field.Expr) IServerInstanceCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerInstanceCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerInstanceCopyDo
	Group(cols ...field.Expr) IServerInstanceCopyDo
	Having(conds ...gen.Condition) IServerInstanceCopyDo
	Limit(limit int) IServerInstanceCopyDo
	Offset(offset int) IServerInstanceCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerInstanceCopyDo
	Unscoped() IServerInstanceCopyDo
	Create(values ...*model.ServerInstanceCopy) error
	CreateInBatches(values []*model.ServerInstanceCopy, batchSize int) error
	Save(values ...*model.ServerInstanceCopy) error
	First() (*model.ServerInstanceCopy, error)
	Take() (*model.ServerInstanceCopy, error)
	Last() (*model.ServerInstanceCopy, error)
	Find() ([]*model.ServerInstanceCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerInstanceCopy, err error)
	FindInBatches(result *[]*model.ServerInstanceCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerInstanceCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerInstanceCopyDo
	Assign(attrs ...field.AssignExpr) IServerInstanceCopyDo
	Joins(fields ...field.RelationField) IServerInstanceCopyDo
	Preload(fields ...field.RelationField) IServerInstanceCopyDo
	FirstOrInit() (*model.ServerInstanceCopy, error)
	FirstOrCreate() (*model.ServerInstanceCopy, error)
	FindByPage(offset int, limit int) (result []*model.ServerInstanceCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerInstanceCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverInstanceCopyDo) Debug() IServerInstanceCopyDo {
	return s.withDO(s.DO.Debug())
}

func (s serverInstanceCopyDo) WithContext(ctx context.Context) IServerInstanceCopyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverInstanceCopyDo) ReadDB() IServerInstanceCopyDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverInstanceCopyDo) WriteDB() IServerInstanceCopyDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverInstanceCopyDo) Session(config *gorm.Session) IServerInstanceCopyDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverInstanceCopyDo) Clauses(conds ...clause.Expression) IServerInstanceCopyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverInstanceCopyDo) Returning(value interface{}, columns ...string) IServerInstanceCopyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverInstanceCopyDo) Not(conds ...gen.Condition) IServerInstanceCopyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverInstanceCopyDo) Or(conds ...gen.Condition) IServerInstanceCopyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverInstanceCopyDo) Select(conds ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverInstanceCopyDo) Where(conds ...gen.Condition) IServerInstanceCopyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverInstanceCopyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerInstanceCopyDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverInstanceCopyDo) Order(conds ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverInstanceCopyDo) Distinct(cols ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverInstanceCopyDo) Omit(cols ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverInstanceCopyDo) Join(table schema.Tabler, on ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverInstanceCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverInstanceCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverInstanceCopyDo) Group(cols ...field.Expr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverInstanceCopyDo) Having(conds ...gen.Condition) IServerInstanceCopyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverInstanceCopyDo) Limit(limit int) IServerInstanceCopyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverInstanceCopyDo) Offset(offset int) IServerInstanceCopyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverInstanceCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerInstanceCopyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverInstanceCopyDo) Unscoped() IServerInstanceCopyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverInstanceCopyDo) Create(values ...*model.ServerInstanceCopy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverInstanceCopyDo) CreateInBatches(values []*model.ServerInstanceCopy, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverInstanceCopyDo) Save(values ...*model.ServerInstanceCopy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverInstanceCopyDo) First() (*model.ServerInstanceCopy, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstanceCopy), nil
	}
}

func (s serverInstanceCopyDo) Take() (*model.ServerInstanceCopy, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstanceCopy), nil
	}
}

func (s serverInstanceCopyDo) Last() (*model.ServerInstanceCopy, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstanceCopy), nil
	}
}

func (s serverInstanceCopyDo) Find() ([]*model.ServerInstanceCopy, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerInstanceCopy), err
}

func (s serverInstanceCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerInstanceCopy, err error) {
	buf := make([]*model.ServerInstanceCopy, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverInstanceCopyDo) FindInBatches(result *[]*model.ServerInstanceCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverInstanceCopyDo) Attrs(attrs ...field.AssignExpr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverInstanceCopyDo) Assign(attrs ...field.AssignExpr) IServerInstanceCopyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverInstanceCopyDo) Joins(fields ...field.RelationField) IServerInstanceCopyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverInstanceCopyDo) Preload(fields ...field.RelationField) IServerInstanceCopyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverInstanceCopyDo) FirstOrInit() (*model.ServerInstanceCopy, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstanceCopy), nil
	}
}

func (s serverInstanceCopyDo) FirstOrCreate() (*model.ServerInstanceCopy, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerInstanceCopy), nil
	}
}

func (s serverInstanceCopyDo) FindByPage(offset int, limit int) (result []*model.ServerInstanceCopy, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverInstanceCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverInstanceCopyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverInstanceCopyDo) Delete(models ...*model.ServerInstanceCopy) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverInstanceCopyDo) withDO(do gen.Dao) *serverInstanceCopyDo {
	s.DO = *do.(*gen.DO)
	return s
}
