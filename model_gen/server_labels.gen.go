// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerLabels(db *gorm.DB, opts ...gen.DOOption) serverLabels {
	_serverLabels := serverLabels{}

	_serverLabels.serverLabelsDo.UseDB(db, opts...)
	_serverLabels.serverLabelsDo.UseModel(&model.ServerLabels{})

	tableName := _serverLabels.serverLabelsDo.TableName()
	_serverLabels.ALL = field.NewAsterisk(tableName)
	_serverLabels.ServerLabelsID = field.NewString(tableName, "server_labels_id")
	_serverLabels.ServerID = field.NewString(tableName, "server_id")
	_serverLabels.LabelID = field.NewString(tableName, "label_id")
	_serverLabels.OperatorUser = field.NewString(tableName, "operator_user")
	_serverLabels.OperatorTime = field.NewTime(tableName, "operator_time")

	_serverLabels.fillFieldMap()

	return _serverLabels
}

type serverLabels struct {
	serverLabelsDo

	ALL            field.Asterisk
	ServerLabelsID field.String
	ServerID       field.String
	LabelID        field.String
	OperatorUser   field.String
	OperatorTime   field.Time

	fieldMap map[string]field.Expr
}

func (s serverLabels) Table(newTableName string) *serverLabels {
	s.serverLabelsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverLabels) As(alias string) *serverLabels {
	s.serverLabelsDo.DO = *(s.serverLabelsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverLabels) updateTableName(table string) *serverLabels {
	s.ALL = field.NewAsterisk(table)
	s.ServerLabelsID = field.NewString(table, "server_labels_id")
	s.ServerID = field.NewString(table, "server_id")
	s.LabelID = field.NewString(table, "label_id")
	s.OperatorUser = field.NewString(table, "operator_user")
	s.OperatorTime = field.NewTime(table, "operator_time")

	s.fillFieldMap()

	return s
}

func (s *serverLabels) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverLabels) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["server_labels_id"] = s.ServerLabelsID
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["label_id"] = s.LabelID
	s.fieldMap["operator_user"] = s.OperatorUser
	s.fieldMap["operator_time"] = s.OperatorTime
}

func (s serverLabels) clone(db *gorm.DB) serverLabels {
	s.serverLabelsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverLabels) replaceDB(db *gorm.DB) serverLabels {
	s.serverLabelsDo.ReplaceDB(db)
	return s
}

type serverLabelsDo struct{ gen.DO }

type IServerLabelsDo interface {
	gen.SubQuery
	Debug() IServerLabelsDo
	WithContext(ctx context.Context) IServerLabelsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerLabelsDo
	WriteDB() IServerLabelsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerLabelsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerLabelsDo
	Not(conds ...gen.Condition) IServerLabelsDo
	Or(conds ...gen.Condition) IServerLabelsDo
	Select(conds ...field.Expr) IServerLabelsDo
	Where(conds ...gen.Condition) IServerLabelsDo
	Order(conds ...field.Expr) IServerLabelsDo
	Distinct(cols ...field.Expr) IServerLabelsDo
	Omit(cols ...field.Expr) IServerLabelsDo
	Join(table schema.Tabler, on ...field.Expr) IServerLabelsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerLabelsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerLabelsDo
	Group(cols ...field.Expr) IServerLabelsDo
	Having(conds ...gen.Condition) IServerLabelsDo
	Limit(limit int) IServerLabelsDo
	Offset(offset int) IServerLabelsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerLabelsDo
	Unscoped() IServerLabelsDo
	Create(values ...*model.ServerLabels) error
	CreateInBatches(values []*model.ServerLabels, batchSize int) error
	Save(values ...*model.ServerLabels) error
	First() (*model.ServerLabels, error)
	Take() (*model.ServerLabels, error)
	Last() (*model.ServerLabels, error)
	Find() ([]*model.ServerLabels, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerLabels, err error)
	FindInBatches(result *[]*model.ServerLabels, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerLabels) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerLabelsDo
	Assign(attrs ...field.AssignExpr) IServerLabelsDo
	Joins(fields ...field.RelationField) IServerLabelsDo
	Preload(fields ...field.RelationField) IServerLabelsDo
	FirstOrInit() (*model.ServerLabels, error)
	FirstOrCreate() (*model.ServerLabels, error)
	FindByPage(offset int, limit int) (result []*model.ServerLabels, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerLabelsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverLabelsDo) Debug() IServerLabelsDo {
	return s.withDO(s.DO.Debug())
}

func (s serverLabelsDo) WithContext(ctx context.Context) IServerLabelsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverLabelsDo) ReadDB() IServerLabelsDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverLabelsDo) WriteDB() IServerLabelsDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverLabelsDo) Session(config *gorm.Session) IServerLabelsDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverLabelsDo) Clauses(conds ...clause.Expression) IServerLabelsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverLabelsDo) Returning(value interface{}, columns ...string) IServerLabelsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverLabelsDo) Not(conds ...gen.Condition) IServerLabelsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverLabelsDo) Or(conds ...gen.Condition) IServerLabelsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverLabelsDo) Select(conds ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverLabelsDo) Where(conds ...gen.Condition) IServerLabelsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverLabelsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerLabelsDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverLabelsDo) Order(conds ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverLabelsDo) Distinct(cols ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverLabelsDo) Omit(cols ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverLabelsDo) Join(table schema.Tabler, on ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverLabelsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverLabelsDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverLabelsDo) Group(cols ...field.Expr) IServerLabelsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverLabelsDo) Having(conds ...gen.Condition) IServerLabelsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverLabelsDo) Limit(limit int) IServerLabelsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverLabelsDo) Offset(offset int) IServerLabelsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverLabelsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerLabelsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverLabelsDo) Unscoped() IServerLabelsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverLabelsDo) Create(values ...*model.ServerLabels) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverLabelsDo) CreateInBatches(values []*model.ServerLabels, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverLabelsDo) Save(values ...*model.ServerLabels) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverLabelsDo) First() (*model.ServerLabels, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLabels), nil
	}
}

func (s serverLabelsDo) Take() (*model.ServerLabels, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLabels), nil
	}
}

func (s serverLabelsDo) Last() (*model.ServerLabels, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLabels), nil
	}
}

func (s serverLabelsDo) Find() ([]*model.ServerLabels, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerLabels), err
}

func (s serverLabelsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerLabels, err error) {
	buf := make([]*model.ServerLabels, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverLabelsDo) FindInBatches(result *[]*model.ServerLabels, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverLabelsDo) Attrs(attrs ...field.AssignExpr) IServerLabelsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverLabelsDo) Assign(attrs ...field.AssignExpr) IServerLabelsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverLabelsDo) Joins(fields ...field.RelationField) IServerLabelsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverLabelsDo) Preload(fields ...field.RelationField) IServerLabelsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverLabelsDo) FirstOrInit() (*model.ServerLabels, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLabels), nil
	}
}

func (s serverLabelsDo) FirstOrCreate() (*model.ServerLabels, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerLabels), nil
	}
}

func (s serverLabelsDo) FindByPage(offset int, limit int) (result []*model.ServerLabels, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverLabelsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverLabelsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverLabelsDo) Delete(models ...*model.ServerLabels) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverLabelsDo) withDO(do gen.Dao) *serverLabelsDo {
	s.DO = *do.(*gen.DO)
	return s
}
