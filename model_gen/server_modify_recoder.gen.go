// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerModifyRecoder(db *gorm.DB, opts ...gen.DOOption) serverModifyRecoder {
	_serverModifyRecoder := serverModifyRecoder{}

	_serverModifyRecoder.serverModifyRecoderDo.UseDB(db, opts...)
	_serverModifyRecoder.serverModifyRecoderDo.UseModel(&model.ServerModifyRecoder{})

	tableName := _serverModifyRecoder.serverModifyRecoderDo.TableName()
	_serverModifyRecoder.ALL = field.NewAsterisk(tableName)
	_serverModifyRecoder.ServerModifyRecoderID = field.NewString(tableName, "server_modify_recoder_id")
	_serverModifyRecoder.ModifyProperty = field.NewString(tableName, "modify_property")
	_serverModifyRecoder.ServerID = field.NewString(tableName, "server_id")
	_serverModifyRecoder.ModifyBefore = field.NewString(tableName, "modify_before")
	_serverModifyRecoder.ModifyAfter = field.NewString(tableName, "modify_after")
	_serverModifyRecoder.OperatorTime = field.NewTime(tableName, "operator_time")
	_serverModifyRecoder.OperatorUser = field.NewString(tableName, "operator_user")
	_serverModifyRecoder.ModifyRecoderType = field.NewString(tableName, "modify_recoder_type")
	_serverModifyRecoder.Operation = field.NewString(tableName, "operation")

	_serverModifyRecoder.fillFieldMap()

	return _serverModifyRecoder
}

type serverModifyRecoder struct {
	serverModifyRecoderDo

	ALL                   field.Asterisk
	ServerModifyRecoderID field.String // 主键
	ModifyProperty        field.String // 修改属性
	ServerID              field.String // 主键
	ModifyBefore          field.String // 修改前
	ModifyAfter           field.String // 修改后
	OperatorTime          field.Time   // 修改时间
	OperatorUser          field.String // 操作者
	ModifyRecoderType     field.String
	Operation             field.String

	fieldMap map[string]field.Expr
}

func (s serverModifyRecoder) Table(newTableName string) *serverModifyRecoder {
	s.serverModifyRecoderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverModifyRecoder) As(alias string) *serverModifyRecoder {
	s.serverModifyRecoderDo.DO = *(s.serverModifyRecoderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverModifyRecoder) updateTableName(table string) *serverModifyRecoder {
	s.ALL = field.NewAsterisk(table)
	s.ServerModifyRecoderID = field.NewString(table, "server_modify_recoder_id")
	s.ModifyProperty = field.NewString(table, "modify_property")
	s.ServerID = field.NewString(table, "server_id")
	s.ModifyBefore = field.NewString(table, "modify_before")
	s.ModifyAfter = field.NewString(table, "modify_after")
	s.OperatorTime = field.NewTime(table, "operator_time")
	s.OperatorUser = field.NewString(table, "operator_user")
	s.ModifyRecoderType = field.NewString(table, "modify_recoder_type")
	s.Operation = field.NewString(table, "operation")

	s.fillFieldMap()

	return s
}

func (s *serverModifyRecoder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverModifyRecoder) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["server_modify_recoder_id"] = s.ServerModifyRecoderID
	s.fieldMap["modify_property"] = s.ModifyProperty
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["modify_before"] = s.ModifyBefore
	s.fieldMap["modify_after"] = s.ModifyAfter
	s.fieldMap["operator_time"] = s.OperatorTime
	s.fieldMap["operator_user"] = s.OperatorUser
	s.fieldMap["modify_recoder_type"] = s.ModifyRecoderType
	s.fieldMap["operation"] = s.Operation
}

func (s serverModifyRecoder) clone(db *gorm.DB) serverModifyRecoder {
	s.serverModifyRecoderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverModifyRecoder) replaceDB(db *gorm.DB) serverModifyRecoder {
	s.serverModifyRecoderDo.ReplaceDB(db)
	return s
}

type serverModifyRecoderDo struct{ gen.DO }

type IServerModifyRecoderDo interface {
	gen.SubQuery
	Debug() IServerModifyRecoderDo
	WithContext(ctx context.Context) IServerModifyRecoderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerModifyRecoderDo
	WriteDB() IServerModifyRecoderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerModifyRecoderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerModifyRecoderDo
	Not(conds ...gen.Condition) IServerModifyRecoderDo
	Or(conds ...gen.Condition) IServerModifyRecoderDo
	Select(conds ...field.Expr) IServerModifyRecoderDo
	Where(conds ...gen.Condition) IServerModifyRecoderDo
	Order(conds ...field.Expr) IServerModifyRecoderDo
	Distinct(cols ...field.Expr) IServerModifyRecoderDo
	Omit(cols ...field.Expr) IServerModifyRecoderDo
	Join(table schema.Tabler, on ...field.Expr) IServerModifyRecoderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerModifyRecoderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerModifyRecoderDo
	Group(cols ...field.Expr) IServerModifyRecoderDo
	Having(conds ...gen.Condition) IServerModifyRecoderDo
	Limit(limit int) IServerModifyRecoderDo
	Offset(offset int) IServerModifyRecoderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerModifyRecoderDo
	Unscoped() IServerModifyRecoderDo
	Create(values ...*model.ServerModifyRecoder) error
	CreateInBatches(values []*model.ServerModifyRecoder, batchSize int) error
	Save(values ...*model.ServerModifyRecoder) error
	First() (*model.ServerModifyRecoder, error)
	Take() (*model.ServerModifyRecoder, error)
	Last() (*model.ServerModifyRecoder, error)
	Find() ([]*model.ServerModifyRecoder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerModifyRecoder, err error)
	FindInBatches(result *[]*model.ServerModifyRecoder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerModifyRecoder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerModifyRecoderDo
	Assign(attrs ...field.AssignExpr) IServerModifyRecoderDo
	Joins(fields ...field.RelationField) IServerModifyRecoderDo
	Preload(fields ...field.RelationField) IServerModifyRecoderDo
	FirstOrInit() (*model.ServerModifyRecoder, error)
	FirstOrCreate() (*model.ServerModifyRecoder, error)
	FindByPage(offset int, limit int) (result []*model.ServerModifyRecoder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerModifyRecoderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverModifyRecoderDo) Debug() IServerModifyRecoderDo {
	return s.withDO(s.DO.Debug())
}

func (s serverModifyRecoderDo) WithContext(ctx context.Context) IServerModifyRecoderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverModifyRecoderDo) ReadDB() IServerModifyRecoderDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverModifyRecoderDo) WriteDB() IServerModifyRecoderDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverModifyRecoderDo) Session(config *gorm.Session) IServerModifyRecoderDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverModifyRecoderDo) Clauses(conds ...clause.Expression) IServerModifyRecoderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverModifyRecoderDo) Returning(value interface{}, columns ...string) IServerModifyRecoderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverModifyRecoderDo) Not(conds ...gen.Condition) IServerModifyRecoderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverModifyRecoderDo) Or(conds ...gen.Condition) IServerModifyRecoderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverModifyRecoderDo) Select(conds ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverModifyRecoderDo) Where(conds ...gen.Condition) IServerModifyRecoderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverModifyRecoderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerModifyRecoderDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverModifyRecoderDo) Order(conds ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverModifyRecoderDo) Distinct(cols ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverModifyRecoderDo) Omit(cols ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverModifyRecoderDo) Join(table schema.Tabler, on ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverModifyRecoderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverModifyRecoderDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverModifyRecoderDo) Group(cols ...field.Expr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverModifyRecoderDo) Having(conds ...gen.Condition) IServerModifyRecoderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverModifyRecoderDo) Limit(limit int) IServerModifyRecoderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverModifyRecoderDo) Offset(offset int) IServerModifyRecoderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverModifyRecoderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerModifyRecoderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverModifyRecoderDo) Unscoped() IServerModifyRecoderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverModifyRecoderDo) Create(values ...*model.ServerModifyRecoder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverModifyRecoderDo) CreateInBatches(values []*model.ServerModifyRecoder, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverModifyRecoderDo) Save(values ...*model.ServerModifyRecoder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverModifyRecoderDo) First() (*model.ServerModifyRecoder, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerModifyRecoder), nil
	}
}

func (s serverModifyRecoderDo) Take() (*model.ServerModifyRecoder, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerModifyRecoder), nil
	}
}

func (s serverModifyRecoderDo) Last() (*model.ServerModifyRecoder, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerModifyRecoder), nil
	}
}

func (s serverModifyRecoderDo) Find() ([]*model.ServerModifyRecoder, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerModifyRecoder), err
}

func (s serverModifyRecoderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerModifyRecoder, err error) {
	buf := make([]*model.ServerModifyRecoder, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverModifyRecoderDo) FindInBatches(result *[]*model.ServerModifyRecoder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverModifyRecoderDo) Attrs(attrs ...field.AssignExpr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverModifyRecoderDo) Assign(attrs ...field.AssignExpr) IServerModifyRecoderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverModifyRecoderDo) Joins(fields ...field.RelationField) IServerModifyRecoderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverModifyRecoderDo) Preload(fields ...field.RelationField) IServerModifyRecoderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverModifyRecoderDo) FirstOrInit() (*model.ServerModifyRecoder, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerModifyRecoder), nil
	}
}

func (s serverModifyRecoderDo) FirstOrCreate() (*model.ServerModifyRecoder, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerModifyRecoder), nil
	}
}

func (s serverModifyRecoderDo) FindByPage(offset int, limit int) (result []*model.ServerModifyRecoder, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverModifyRecoderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverModifyRecoderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverModifyRecoderDo) Delete(models ...*model.ServerModifyRecoder) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverModifyRecoderDo) withDO(do gen.Dao) *serverModifyRecoderDo {
	s.DO = *do.(*gen.DO)
	return s
}
