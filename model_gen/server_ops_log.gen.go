// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerOpsLog(db *gorm.DB, opts ...gen.DOOption) serverOpsLog {
	_serverOpsLog := serverOpsLog{}

	_serverOpsLog.serverOpsLogDo.UseDB(db, opts...)
	_serverOpsLog.serverOpsLogDo.UseModel(&model.ServerOpsLog{})

	tableName := _serverOpsLog.serverOpsLogDo.TableName()
	_serverOpsLog.ALL = field.NewAsterisk(tableName)
	_serverOpsLog.OpsLogID = field.NewString(tableName, "ops_log_id")
	_serverOpsLog.ServerID = field.NewString(tableName, "server_id")
	_serverOpsLog.ActionName = field.NewString(tableName, "action_name")
	_serverOpsLog.OsUser = field.NewString(tableName, "os_user")
	_serverOpsLog.OperatorUser = field.NewString(tableName, "operator_user")
	_serverOpsLog.OperatorTime = field.NewTime(tableName, "operator_time")
	_serverOpsLog.ActionNote = field.NewString(tableName, "action_note")
	_serverOpsLog.ActionStatus = field.NewString(tableName, "action_status")
	_serverOpsLog.SoftTypeName = field.NewString(tableName, "soft_type_name")
	_serverOpsLog.InstallSoftID = field.NewString(tableName, "install_soft_id")

	_serverOpsLog.fillFieldMap()

	return _serverOpsLog
}

type serverOpsLog struct {
	serverOpsLogDo

	ALL           field.Asterisk
	OpsLogID      field.String
	ServerID      field.String
	ActionName    field.String
	OsUser        field.String
	OperatorUser  field.String
	OperatorTime  field.Time
	ActionNote    field.String
	ActionStatus  field.String
	SoftTypeName  field.String
	InstallSoftID field.String

	fieldMap map[string]field.Expr
}

func (s serverOpsLog) Table(newTableName string) *serverOpsLog {
	s.serverOpsLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverOpsLog) As(alias string) *serverOpsLog {
	s.serverOpsLogDo.DO = *(s.serverOpsLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverOpsLog) updateTableName(table string) *serverOpsLog {
	s.ALL = field.NewAsterisk(table)
	s.OpsLogID = field.NewString(table, "ops_log_id")
	s.ServerID = field.NewString(table, "server_id")
	s.ActionName = field.NewString(table, "action_name")
	s.OsUser = field.NewString(table, "os_user")
	s.OperatorUser = field.NewString(table, "operator_user")
	s.OperatorTime = field.NewTime(table, "operator_time")
	s.ActionNote = field.NewString(table, "action_note")
	s.ActionStatus = field.NewString(table, "action_status")
	s.SoftTypeName = field.NewString(table, "soft_type_name")
	s.InstallSoftID = field.NewString(table, "install_soft_id")

	s.fillFieldMap()

	return s
}

func (s *serverOpsLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverOpsLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["ops_log_id"] = s.OpsLogID
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["action_name"] = s.ActionName
	s.fieldMap["os_user"] = s.OsUser
	s.fieldMap["operator_user"] = s.OperatorUser
	s.fieldMap["operator_time"] = s.OperatorTime
	s.fieldMap["action_note"] = s.ActionNote
	s.fieldMap["action_status"] = s.ActionStatus
	s.fieldMap["soft_type_name"] = s.SoftTypeName
	s.fieldMap["install_soft_id"] = s.InstallSoftID
}

func (s serverOpsLog) clone(db *gorm.DB) serverOpsLog {
	s.serverOpsLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverOpsLog) replaceDB(db *gorm.DB) serverOpsLog {
	s.serverOpsLogDo.ReplaceDB(db)
	return s
}

type serverOpsLogDo struct{ gen.DO }

type IServerOpsLogDo interface {
	gen.SubQuery
	Debug() IServerOpsLogDo
	WithContext(ctx context.Context) IServerOpsLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerOpsLogDo
	WriteDB() IServerOpsLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerOpsLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerOpsLogDo
	Not(conds ...gen.Condition) IServerOpsLogDo
	Or(conds ...gen.Condition) IServerOpsLogDo
	Select(conds ...field.Expr) IServerOpsLogDo
	Where(conds ...gen.Condition) IServerOpsLogDo
	Order(conds ...field.Expr) IServerOpsLogDo
	Distinct(cols ...field.Expr) IServerOpsLogDo
	Omit(cols ...field.Expr) IServerOpsLogDo
	Join(table schema.Tabler, on ...field.Expr) IServerOpsLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDo
	Group(cols ...field.Expr) IServerOpsLogDo
	Having(conds ...gen.Condition) IServerOpsLogDo
	Limit(limit int) IServerOpsLogDo
	Offset(offset int) IServerOpsLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerOpsLogDo
	Unscoped() IServerOpsLogDo
	Create(values ...*model.ServerOpsLog) error
	CreateInBatches(values []*model.ServerOpsLog, batchSize int) error
	Save(values ...*model.ServerOpsLog) error
	First() (*model.ServerOpsLog, error)
	Take() (*model.ServerOpsLog, error)
	Last() (*model.ServerOpsLog, error)
	Find() ([]*model.ServerOpsLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerOpsLog, err error)
	FindInBatches(result *[]*model.ServerOpsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerOpsLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerOpsLogDo
	Assign(attrs ...field.AssignExpr) IServerOpsLogDo
	Joins(fields ...field.RelationField) IServerOpsLogDo
	Preload(fields ...field.RelationField) IServerOpsLogDo
	FirstOrInit() (*model.ServerOpsLog, error)
	FirstOrCreate() (*model.ServerOpsLog, error)
	FindByPage(offset int, limit int) (result []*model.ServerOpsLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerOpsLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverOpsLogDo) Debug() IServerOpsLogDo {
	return s.withDO(s.DO.Debug())
}

func (s serverOpsLogDo) WithContext(ctx context.Context) IServerOpsLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverOpsLogDo) ReadDB() IServerOpsLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverOpsLogDo) WriteDB() IServerOpsLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverOpsLogDo) Session(config *gorm.Session) IServerOpsLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverOpsLogDo) Clauses(conds ...clause.Expression) IServerOpsLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverOpsLogDo) Returning(value interface{}, columns ...string) IServerOpsLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverOpsLogDo) Not(conds ...gen.Condition) IServerOpsLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverOpsLogDo) Or(conds ...gen.Condition) IServerOpsLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverOpsLogDo) Select(conds ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverOpsLogDo) Where(conds ...gen.Condition) IServerOpsLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverOpsLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerOpsLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverOpsLogDo) Order(conds ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverOpsLogDo) Distinct(cols ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverOpsLogDo) Omit(cols ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverOpsLogDo) Join(table schema.Tabler, on ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverOpsLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverOpsLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverOpsLogDo) Group(cols ...field.Expr) IServerOpsLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverOpsLogDo) Having(conds ...gen.Condition) IServerOpsLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverOpsLogDo) Limit(limit int) IServerOpsLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverOpsLogDo) Offset(offset int) IServerOpsLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverOpsLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerOpsLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverOpsLogDo) Unscoped() IServerOpsLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverOpsLogDo) Create(values ...*model.ServerOpsLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverOpsLogDo) CreateInBatches(values []*model.ServerOpsLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverOpsLogDo) Save(values ...*model.ServerOpsLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverOpsLogDo) First() (*model.ServerOpsLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLog), nil
	}
}

func (s serverOpsLogDo) Take() (*model.ServerOpsLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLog), nil
	}
}

func (s serverOpsLogDo) Last() (*model.ServerOpsLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLog), nil
	}
}

func (s serverOpsLogDo) Find() ([]*model.ServerOpsLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerOpsLog), err
}

func (s serverOpsLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerOpsLog, err error) {
	buf := make([]*model.ServerOpsLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverOpsLogDo) FindInBatches(result *[]*model.ServerOpsLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverOpsLogDo) Attrs(attrs ...field.AssignExpr) IServerOpsLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverOpsLogDo) Assign(attrs ...field.AssignExpr) IServerOpsLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverOpsLogDo) Joins(fields ...field.RelationField) IServerOpsLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverOpsLogDo) Preload(fields ...field.RelationField) IServerOpsLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverOpsLogDo) FirstOrInit() (*model.ServerOpsLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLog), nil
	}
}

func (s serverOpsLogDo) FirstOrCreate() (*model.ServerOpsLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLog), nil
	}
}

func (s serverOpsLogDo) FindByPage(offset int, limit int) (result []*model.ServerOpsLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverOpsLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverOpsLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverOpsLogDo) Delete(models ...*model.ServerOpsLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverOpsLogDo) withDO(do gen.Dao) *serverOpsLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
