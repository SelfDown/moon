// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerOpsLogDetail(db *gorm.DB, opts ...gen.DOOption) serverOpsLogDetail {
	_serverOpsLogDetail := serverOpsLogDetail{}

	_serverOpsLogDetail.serverOpsLogDetailDo.UseDB(db, opts...)
	_serverOpsLogDetail.serverOpsLogDetailDo.UseModel(&model.ServerOpsLogDetail{})

	tableName := _serverOpsLogDetail.serverOpsLogDetailDo.TableName()
	_serverOpsLogDetail.ALL = field.NewAsterisk(tableName)
	_serverOpsLogDetail.ServerOpsLogDetailID = field.NewString(tableName, "server_ops_log_detail_id")
	_serverOpsLogDetail.Msg = field.NewString(tableName, "msg")
	_serverOpsLogDetail.ServerOpsLogID = field.NewString(tableName, "server_ops_log_id")
	_serverOpsLogDetail.CreateTime = field.NewTime(tableName, "create_time")

	_serverOpsLogDetail.fillFieldMap()

	return _serverOpsLogDetail
}

type serverOpsLogDetail struct {
	serverOpsLogDetailDo

	ALL                  field.Asterisk
	ServerOpsLogDetailID field.String
	Msg                  field.String
	ServerOpsLogID       field.String
	CreateTime           field.Time

	fieldMap map[string]field.Expr
}

func (s serverOpsLogDetail) Table(newTableName string) *serverOpsLogDetail {
	s.serverOpsLogDetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverOpsLogDetail) As(alias string) *serverOpsLogDetail {
	s.serverOpsLogDetailDo.DO = *(s.serverOpsLogDetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverOpsLogDetail) updateTableName(table string) *serverOpsLogDetail {
	s.ALL = field.NewAsterisk(table)
	s.ServerOpsLogDetailID = field.NewString(table, "server_ops_log_detail_id")
	s.Msg = field.NewString(table, "msg")
	s.ServerOpsLogID = field.NewString(table, "server_ops_log_id")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *serverOpsLogDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverOpsLogDetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["server_ops_log_detail_id"] = s.ServerOpsLogDetailID
	s.fieldMap["msg"] = s.Msg
	s.fieldMap["server_ops_log_id"] = s.ServerOpsLogID
	s.fieldMap["create_time"] = s.CreateTime
}

func (s serverOpsLogDetail) clone(db *gorm.DB) serverOpsLogDetail {
	s.serverOpsLogDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverOpsLogDetail) replaceDB(db *gorm.DB) serverOpsLogDetail {
	s.serverOpsLogDetailDo.ReplaceDB(db)
	return s
}

type serverOpsLogDetailDo struct{ gen.DO }

type IServerOpsLogDetailDo interface {
	gen.SubQuery
	Debug() IServerOpsLogDetailDo
	WithContext(ctx context.Context) IServerOpsLogDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerOpsLogDetailDo
	WriteDB() IServerOpsLogDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerOpsLogDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerOpsLogDetailDo
	Not(conds ...gen.Condition) IServerOpsLogDetailDo
	Or(conds ...gen.Condition) IServerOpsLogDetailDo
	Select(conds ...field.Expr) IServerOpsLogDetailDo
	Where(conds ...gen.Condition) IServerOpsLogDetailDo
	Order(conds ...field.Expr) IServerOpsLogDetailDo
	Distinct(cols ...field.Expr) IServerOpsLogDetailDo
	Omit(cols ...field.Expr) IServerOpsLogDetailDo
	Join(table schema.Tabler, on ...field.Expr) IServerOpsLogDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDetailDo
	Group(cols ...field.Expr) IServerOpsLogDetailDo
	Having(conds ...gen.Condition) IServerOpsLogDetailDo
	Limit(limit int) IServerOpsLogDetailDo
	Offset(offset int) IServerOpsLogDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerOpsLogDetailDo
	Unscoped() IServerOpsLogDetailDo
	Create(values ...*model.ServerOpsLogDetail) error
	CreateInBatches(values []*model.ServerOpsLogDetail, batchSize int) error
	Save(values ...*model.ServerOpsLogDetail) error
	First() (*model.ServerOpsLogDetail, error)
	Take() (*model.ServerOpsLogDetail, error)
	Last() (*model.ServerOpsLogDetail, error)
	Find() ([]*model.ServerOpsLogDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerOpsLogDetail, err error)
	FindInBatches(result *[]*model.ServerOpsLogDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerOpsLogDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerOpsLogDetailDo
	Assign(attrs ...field.AssignExpr) IServerOpsLogDetailDo
	Joins(fields ...field.RelationField) IServerOpsLogDetailDo
	Preload(fields ...field.RelationField) IServerOpsLogDetailDo
	FirstOrInit() (*model.ServerOpsLogDetail, error)
	FirstOrCreate() (*model.ServerOpsLogDetail, error)
	FindByPage(offset int, limit int) (result []*model.ServerOpsLogDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerOpsLogDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverOpsLogDetailDo) Debug() IServerOpsLogDetailDo {
	return s.withDO(s.DO.Debug())
}

func (s serverOpsLogDetailDo) WithContext(ctx context.Context) IServerOpsLogDetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverOpsLogDetailDo) ReadDB() IServerOpsLogDetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverOpsLogDetailDo) WriteDB() IServerOpsLogDetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverOpsLogDetailDo) Session(config *gorm.Session) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverOpsLogDetailDo) Clauses(conds ...clause.Expression) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverOpsLogDetailDo) Returning(value interface{}, columns ...string) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverOpsLogDetailDo) Not(conds ...gen.Condition) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverOpsLogDetailDo) Or(conds ...gen.Condition) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverOpsLogDetailDo) Select(conds ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverOpsLogDetailDo) Where(conds ...gen.Condition) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverOpsLogDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerOpsLogDetailDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverOpsLogDetailDo) Order(conds ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverOpsLogDetailDo) Distinct(cols ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverOpsLogDetailDo) Omit(cols ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverOpsLogDetailDo) Join(table schema.Tabler, on ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverOpsLogDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverOpsLogDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverOpsLogDetailDo) Group(cols ...field.Expr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverOpsLogDetailDo) Having(conds ...gen.Condition) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverOpsLogDetailDo) Limit(limit int) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverOpsLogDetailDo) Offset(offset int) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverOpsLogDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverOpsLogDetailDo) Unscoped() IServerOpsLogDetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverOpsLogDetailDo) Create(values ...*model.ServerOpsLogDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverOpsLogDetailDo) CreateInBatches(values []*model.ServerOpsLogDetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverOpsLogDetailDo) Save(values ...*model.ServerOpsLogDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverOpsLogDetailDo) First() (*model.ServerOpsLogDetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLogDetail), nil
	}
}

func (s serverOpsLogDetailDo) Take() (*model.ServerOpsLogDetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLogDetail), nil
	}
}

func (s serverOpsLogDetailDo) Last() (*model.ServerOpsLogDetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLogDetail), nil
	}
}

func (s serverOpsLogDetailDo) Find() ([]*model.ServerOpsLogDetail, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerOpsLogDetail), err
}

func (s serverOpsLogDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerOpsLogDetail, err error) {
	buf := make([]*model.ServerOpsLogDetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverOpsLogDetailDo) FindInBatches(result *[]*model.ServerOpsLogDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverOpsLogDetailDo) Attrs(attrs ...field.AssignExpr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverOpsLogDetailDo) Assign(attrs ...field.AssignExpr) IServerOpsLogDetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverOpsLogDetailDo) Joins(fields ...field.RelationField) IServerOpsLogDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverOpsLogDetailDo) Preload(fields ...field.RelationField) IServerOpsLogDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverOpsLogDetailDo) FirstOrInit() (*model.ServerOpsLogDetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLogDetail), nil
	}
}

func (s serverOpsLogDetailDo) FirstOrCreate() (*model.ServerOpsLogDetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerOpsLogDetail), nil
	}
}

func (s serverOpsLogDetailDo) FindByPage(offset int, limit int) (result []*model.ServerOpsLogDetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverOpsLogDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverOpsLogDetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverOpsLogDetailDo) Delete(models ...*model.ServerOpsLogDetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverOpsLogDetailDo) withDO(do gen.Dao) *serverOpsLogDetailDo {
	s.DO = *do.(*gen.DO)
	return s
}
