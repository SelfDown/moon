// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerServiceType(db *gorm.DB, opts ...gen.DOOption) serverServiceType {
	_serverServiceType := serverServiceType{}

	_serverServiceType.serverServiceTypeDo.UseDB(db, opts...)
	_serverServiceType.serverServiceTypeDo.UseModel(&model.ServerServiceType{})

	tableName := _serverServiceType.serverServiceTypeDo.TableName()
	_serverServiceType.ALL = field.NewAsterisk(tableName)
	_serverServiceType.ServerServiceTypeID = field.NewString(tableName, "server_service_type_id")
	_serverServiceType.ServerServiceTypeCode = field.NewString(tableName, "server_service_type_code")
	_serverServiceType.CreateTime = field.NewTime(tableName, "create_time")
	_serverServiceType.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverServiceType.Comments = field.NewString(tableName, "comments")

	_serverServiceType.fillFieldMap()

	return _serverServiceType
}

type serverServiceType struct {
	serverServiceTypeDo

	ALL                   field.Asterisk
	ServerServiceTypeID   field.String
	ServerServiceTypeCode field.String // 类型码值
	CreateTime            field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime            field.Time   // 记录修改时间（数据库自动写入）
	Comments              field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s serverServiceType) Table(newTableName string) *serverServiceType {
	s.serverServiceTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverServiceType) As(alias string) *serverServiceType {
	s.serverServiceTypeDo.DO = *(s.serverServiceTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverServiceType) updateTableName(table string) *serverServiceType {
	s.ALL = field.NewAsterisk(table)
	s.ServerServiceTypeID = field.NewString(table, "server_service_type_id")
	s.ServerServiceTypeCode = field.NewString(table, "server_service_type_code")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *serverServiceType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverServiceType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["server_service_type_id"] = s.ServerServiceTypeID
	s.fieldMap["server_service_type_code"] = s.ServerServiceTypeCode
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s serverServiceType) clone(db *gorm.DB) serverServiceType {
	s.serverServiceTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverServiceType) replaceDB(db *gorm.DB) serverServiceType {
	s.serverServiceTypeDo.ReplaceDB(db)
	return s
}

type serverServiceTypeDo struct{ gen.DO }

type IServerServiceTypeDo interface {
	gen.SubQuery
	Debug() IServerServiceTypeDo
	WithContext(ctx context.Context) IServerServiceTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerServiceTypeDo
	WriteDB() IServerServiceTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerServiceTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerServiceTypeDo
	Not(conds ...gen.Condition) IServerServiceTypeDo
	Or(conds ...gen.Condition) IServerServiceTypeDo
	Select(conds ...field.Expr) IServerServiceTypeDo
	Where(conds ...gen.Condition) IServerServiceTypeDo
	Order(conds ...field.Expr) IServerServiceTypeDo
	Distinct(cols ...field.Expr) IServerServiceTypeDo
	Omit(cols ...field.Expr) IServerServiceTypeDo
	Join(table schema.Tabler, on ...field.Expr) IServerServiceTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerServiceTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerServiceTypeDo
	Group(cols ...field.Expr) IServerServiceTypeDo
	Having(conds ...gen.Condition) IServerServiceTypeDo
	Limit(limit int) IServerServiceTypeDo
	Offset(offset int) IServerServiceTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerServiceTypeDo
	Unscoped() IServerServiceTypeDo
	Create(values ...*model.ServerServiceType) error
	CreateInBatches(values []*model.ServerServiceType, batchSize int) error
	Save(values ...*model.ServerServiceType) error
	First() (*model.ServerServiceType, error)
	Take() (*model.ServerServiceType, error)
	Last() (*model.ServerServiceType, error)
	Find() ([]*model.ServerServiceType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerServiceType, err error)
	FindInBatches(result *[]*model.ServerServiceType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerServiceType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerServiceTypeDo
	Assign(attrs ...field.AssignExpr) IServerServiceTypeDo
	Joins(fields ...field.RelationField) IServerServiceTypeDo
	Preload(fields ...field.RelationField) IServerServiceTypeDo
	FirstOrInit() (*model.ServerServiceType, error)
	FirstOrCreate() (*model.ServerServiceType, error)
	FindByPage(offset int, limit int) (result []*model.ServerServiceType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerServiceTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverServiceTypeDo) Debug() IServerServiceTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s serverServiceTypeDo) WithContext(ctx context.Context) IServerServiceTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverServiceTypeDo) ReadDB() IServerServiceTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverServiceTypeDo) WriteDB() IServerServiceTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverServiceTypeDo) Session(config *gorm.Session) IServerServiceTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverServiceTypeDo) Clauses(conds ...clause.Expression) IServerServiceTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverServiceTypeDo) Returning(value interface{}, columns ...string) IServerServiceTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverServiceTypeDo) Not(conds ...gen.Condition) IServerServiceTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverServiceTypeDo) Or(conds ...gen.Condition) IServerServiceTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverServiceTypeDo) Select(conds ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverServiceTypeDo) Where(conds ...gen.Condition) IServerServiceTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverServiceTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerServiceTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverServiceTypeDo) Order(conds ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverServiceTypeDo) Distinct(cols ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverServiceTypeDo) Omit(cols ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverServiceTypeDo) Join(table schema.Tabler, on ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverServiceTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverServiceTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverServiceTypeDo) Group(cols ...field.Expr) IServerServiceTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverServiceTypeDo) Having(conds ...gen.Condition) IServerServiceTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverServiceTypeDo) Limit(limit int) IServerServiceTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverServiceTypeDo) Offset(offset int) IServerServiceTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverServiceTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerServiceTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverServiceTypeDo) Unscoped() IServerServiceTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverServiceTypeDo) Create(values ...*model.ServerServiceType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverServiceTypeDo) CreateInBatches(values []*model.ServerServiceType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverServiceTypeDo) Save(values ...*model.ServerServiceType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverServiceTypeDo) First() (*model.ServerServiceType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerServiceType), nil
	}
}

func (s serverServiceTypeDo) Take() (*model.ServerServiceType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerServiceType), nil
	}
}

func (s serverServiceTypeDo) Last() (*model.ServerServiceType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerServiceType), nil
	}
}

func (s serverServiceTypeDo) Find() ([]*model.ServerServiceType, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerServiceType), err
}

func (s serverServiceTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerServiceType, err error) {
	buf := make([]*model.ServerServiceType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverServiceTypeDo) FindInBatches(result *[]*model.ServerServiceType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverServiceTypeDo) Attrs(attrs ...field.AssignExpr) IServerServiceTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverServiceTypeDo) Assign(attrs ...field.AssignExpr) IServerServiceTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverServiceTypeDo) Joins(fields ...field.RelationField) IServerServiceTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverServiceTypeDo) Preload(fields ...field.RelationField) IServerServiceTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverServiceTypeDo) FirstOrInit() (*model.ServerServiceType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerServiceType), nil
	}
}

func (s serverServiceTypeDo) FirstOrCreate() (*model.ServerServiceType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerServiceType), nil
	}
}

func (s serverServiceTypeDo) FindByPage(offset int, limit int) (result []*model.ServerServiceType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverServiceTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverServiceTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverServiceTypeDo) Delete(models ...*model.ServerServiceType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverServiceTypeDo) withDO(do gen.Dao) *serverServiceTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
