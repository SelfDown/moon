// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerSoftConf(db *gorm.DB, opts ...gen.DOOption) serverSoftConf {
	_serverSoftConf := serverSoftConf{}

	_serverSoftConf.serverSoftConfDo.UseDB(db, opts...)
	_serverSoftConf.serverSoftConfDo.UseModel(&model.ServerSoftConf{})

	tableName := _serverSoftConf.serverSoftConfDo.TableName()
	_serverSoftConf.ALL = field.NewAsterisk(tableName)
	_serverSoftConf.ID = field.NewInt32(tableName, "id")
	_serverSoftConf.SoftName = field.NewString(tableName, "soft_name")
	_serverSoftConf.DefaultSoftVersions = field.NewString(tableName, "default_soft_versions")
	_serverSoftConf.SoftGitPath = field.NewString(tableName, "soft_git_path")
	_serverSoftConf.SoftHomePath = field.NewString(tableName, "soft_home_path")

	_serverSoftConf.fillFieldMap()

	return _serverSoftConf
}

type serverSoftConf struct {
	serverSoftConfDo

	ALL                 field.Asterisk
	ID                  field.Int32
	SoftName            field.String
	DefaultSoftVersions field.String
	SoftGitPath         field.String
	SoftHomePath        field.String

	fieldMap map[string]field.Expr
}

func (s serverSoftConf) Table(newTableName string) *serverSoftConf {
	s.serverSoftConfDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverSoftConf) As(alias string) *serverSoftConf {
	s.serverSoftConfDo.DO = *(s.serverSoftConfDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverSoftConf) updateTableName(table string) *serverSoftConf {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SoftName = field.NewString(table, "soft_name")
	s.DefaultSoftVersions = field.NewString(table, "default_soft_versions")
	s.SoftGitPath = field.NewString(table, "soft_git_path")
	s.SoftHomePath = field.NewString(table, "soft_home_path")

	s.fillFieldMap()

	return s
}

func (s *serverSoftConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverSoftConf) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["soft_name"] = s.SoftName
	s.fieldMap["default_soft_versions"] = s.DefaultSoftVersions
	s.fieldMap["soft_git_path"] = s.SoftGitPath
	s.fieldMap["soft_home_path"] = s.SoftHomePath
}

func (s serverSoftConf) clone(db *gorm.DB) serverSoftConf {
	s.serverSoftConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverSoftConf) replaceDB(db *gorm.DB) serverSoftConf {
	s.serverSoftConfDo.ReplaceDB(db)
	return s
}

type serverSoftConfDo struct{ gen.DO }

type IServerSoftConfDo interface {
	gen.SubQuery
	Debug() IServerSoftConfDo
	WithContext(ctx context.Context) IServerSoftConfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerSoftConfDo
	WriteDB() IServerSoftConfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerSoftConfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerSoftConfDo
	Not(conds ...gen.Condition) IServerSoftConfDo
	Or(conds ...gen.Condition) IServerSoftConfDo
	Select(conds ...field.Expr) IServerSoftConfDo
	Where(conds ...gen.Condition) IServerSoftConfDo
	Order(conds ...field.Expr) IServerSoftConfDo
	Distinct(cols ...field.Expr) IServerSoftConfDo
	Omit(cols ...field.Expr) IServerSoftConfDo
	Join(table schema.Tabler, on ...field.Expr) IServerSoftConfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDo
	Group(cols ...field.Expr) IServerSoftConfDo
	Having(conds ...gen.Condition) IServerSoftConfDo
	Limit(limit int) IServerSoftConfDo
	Offset(offset int) IServerSoftConfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftConfDo
	Unscoped() IServerSoftConfDo
	Create(values ...*model.ServerSoftConf) error
	CreateInBatches(values []*model.ServerSoftConf, batchSize int) error
	Save(values ...*model.ServerSoftConf) error
	First() (*model.ServerSoftConf, error)
	Take() (*model.ServerSoftConf, error)
	Last() (*model.ServerSoftConf, error)
	Find() ([]*model.ServerSoftConf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftConf, err error)
	FindInBatches(result *[]*model.ServerSoftConf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerSoftConf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerSoftConfDo
	Assign(attrs ...field.AssignExpr) IServerSoftConfDo
	Joins(fields ...field.RelationField) IServerSoftConfDo
	Preload(fields ...field.RelationField) IServerSoftConfDo
	FirstOrInit() (*model.ServerSoftConf, error)
	FirstOrCreate() (*model.ServerSoftConf, error)
	FindByPage(offset int, limit int) (result []*model.ServerSoftConf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerSoftConfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverSoftConfDo) Debug() IServerSoftConfDo {
	return s.withDO(s.DO.Debug())
}

func (s serverSoftConfDo) WithContext(ctx context.Context) IServerSoftConfDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverSoftConfDo) ReadDB() IServerSoftConfDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverSoftConfDo) WriteDB() IServerSoftConfDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverSoftConfDo) Session(config *gorm.Session) IServerSoftConfDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverSoftConfDo) Clauses(conds ...clause.Expression) IServerSoftConfDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverSoftConfDo) Returning(value interface{}, columns ...string) IServerSoftConfDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverSoftConfDo) Not(conds ...gen.Condition) IServerSoftConfDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverSoftConfDo) Or(conds ...gen.Condition) IServerSoftConfDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverSoftConfDo) Select(conds ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverSoftConfDo) Where(conds ...gen.Condition) IServerSoftConfDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverSoftConfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerSoftConfDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverSoftConfDo) Order(conds ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverSoftConfDo) Distinct(cols ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverSoftConfDo) Omit(cols ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverSoftConfDo) Join(table schema.Tabler, on ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverSoftConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverSoftConfDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverSoftConfDo) Group(cols ...field.Expr) IServerSoftConfDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverSoftConfDo) Having(conds ...gen.Condition) IServerSoftConfDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverSoftConfDo) Limit(limit int) IServerSoftConfDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverSoftConfDo) Offset(offset int) IServerSoftConfDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverSoftConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftConfDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverSoftConfDo) Unscoped() IServerSoftConfDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverSoftConfDo) Create(values ...*model.ServerSoftConf) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverSoftConfDo) CreateInBatches(values []*model.ServerSoftConf, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverSoftConfDo) Save(values ...*model.ServerSoftConf) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverSoftConfDo) First() (*model.ServerSoftConf, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConf), nil
	}
}

func (s serverSoftConfDo) Take() (*model.ServerSoftConf, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConf), nil
	}
}

func (s serverSoftConfDo) Last() (*model.ServerSoftConf, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConf), nil
	}
}

func (s serverSoftConfDo) Find() ([]*model.ServerSoftConf, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerSoftConf), err
}

func (s serverSoftConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftConf, err error) {
	buf := make([]*model.ServerSoftConf, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverSoftConfDo) FindInBatches(result *[]*model.ServerSoftConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverSoftConfDo) Attrs(attrs ...field.AssignExpr) IServerSoftConfDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverSoftConfDo) Assign(attrs ...field.AssignExpr) IServerSoftConfDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverSoftConfDo) Joins(fields ...field.RelationField) IServerSoftConfDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverSoftConfDo) Preload(fields ...field.RelationField) IServerSoftConfDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverSoftConfDo) FirstOrInit() (*model.ServerSoftConf, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConf), nil
	}
}

func (s serverSoftConfDo) FirstOrCreate() (*model.ServerSoftConf, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConf), nil
	}
}

func (s serverSoftConfDo) FindByPage(offset int, limit int) (result []*model.ServerSoftConf, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverSoftConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverSoftConfDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverSoftConfDo) Delete(models ...*model.ServerSoftConf) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverSoftConfDo) withDO(do gen.Dao) *serverSoftConfDo {
	s.DO = *do.(*gen.DO)
	return s
}
