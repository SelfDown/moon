// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerSoftConfDef(db *gorm.DB, opts ...gen.DOOption) serverSoftConfDef {
	_serverSoftConfDef := serverSoftConfDef{}

	_serverSoftConfDef.serverSoftConfDefDo.UseDB(db, opts...)
	_serverSoftConfDef.serverSoftConfDefDo.UseModel(&model.ServerSoftConfDef{})

	tableName := _serverSoftConfDef.serverSoftConfDefDo.TableName()
	_serverSoftConfDef.ALL = field.NewAsterisk(tableName)
	_serverSoftConfDef.ServerSoftConfDefID = field.NewString(tableName, "server_soft_conf_def_id")
	_serverSoftConfDef.SoftName = field.NewString(tableName, "soft_name")
	_serverSoftConfDef.SoftConfSrc = field.NewString(tableName, "soft_conf_src")
	_serverSoftConfDef.SoftConfFiles = field.NewString(tableName, "soft_conf_files")
	_serverSoftConfDef.SoftConfDefType = field.NewString(tableName, "soft_conf_def_type")
	_serverSoftConfDef.SrcAccessUname = field.NewString(tableName, "src_access_uname")
	_serverSoftConfDef.SrcAccessPwd = field.NewString(tableName, "src_access_pwd")
	_serverSoftConfDef.GitBranch = field.NewString(tableName, "git_branch")
	_serverSoftConfDef.Comments = field.NewString(tableName, "comments")
	_serverSoftConfDef.SoftConfMainDir = field.NewString(tableName, "soft_conf_main_dir")
	_serverSoftConfDef.SoftType = field.NewString(tableName, "soft_type")

	_serverSoftConfDef.fillFieldMap()

	return _serverSoftConfDef
}

type serverSoftConfDef struct {
	serverSoftConfDefDo

	ALL                 field.Asterisk
	ServerSoftConfDefID field.String
	SoftName            field.String
	SoftConfSrc         field.String
	SoftConfFiles       field.String
	SoftConfDefType     field.String
	SrcAccessUname      field.String
	SrcAccessPwd        field.String
	GitBranch           field.String
	Comments            field.String
	SoftConfMainDir     field.String
	SoftType            field.String

	fieldMap map[string]field.Expr
}

func (s serverSoftConfDef) Table(newTableName string) *serverSoftConfDef {
	s.serverSoftConfDefDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverSoftConfDef) As(alias string) *serverSoftConfDef {
	s.serverSoftConfDefDo.DO = *(s.serverSoftConfDefDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverSoftConfDef) updateTableName(table string) *serverSoftConfDef {
	s.ALL = field.NewAsterisk(table)
	s.ServerSoftConfDefID = field.NewString(table, "server_soft_conf_def_id")
	s.SoftName = field.NewString(table, "soft_name")
	s.SoftConfSrc = field.NewString(table, "soft_conf_src")
	s.SoftConfFiles = field.NewString(table, "soft_conf_files")
	s.SoftConfDefType = field.NewString(table, "soft_conf_def_type")
	s.SrcAccessUname = field.NewString(table, "src_access_uname")
	s.SrcAccessPwd = field.NewString(table, "src_access_pwd")
	s.GitBranch = field.NewString(table, "git_branch")
	s.Comments = field.NewString(table, "comments")
	s.SoftConfMainDir = field.NewString(table, "soft_conf_main_dir")
	s.SoftType = field.NewString(table, "soft_type")

	s.fillFieldMap()

	return s
}

func (s *serverSoftConfDef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverSoftConfDef) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["server_soft_conf_def_id"] = s.ServerSoftConfDefID
	s.fieldMap["soft_name"] = s.SoftName
	s.fieldMap["soft_conf_src"] = s.SoftConfSrc
	s.fieldMap["soft_conf_files"] = s.SoftConfFiles
	s.fieldMap["soft_conf_def_type"] = s.SoftConfDefType
	s.fieldMap["src_access_uname"] = s.SrcAccessUname
	s.fieldMap["src_access_pwd"] = s.SrcAccessPwd
	s.fieldMap["git_branch"] = s.GitBranch
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["soft_conf_main_dir"] = s.SoftConfMainDir
	s.fieldMap["soft_type"] = s.SoftType
}

func (s serverSoftConfDef) clone(db *gorm.DB) serverSoftConfDef {
	s.serverSoftConfDefDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverSoftConfDef) replaceDB(db *gorm.DB) serverSoftConfDef {
	s.serverSoftConfDefDo.ReplaceDB(db)
	return s
}

type serverSoftConfDefDo struct{ gen.DO }

type IServerSoftConfDefDo interface {
	gen.SubQuery
	Debug() IServerSoftConfDefDo
	WithContext(ctx context.Context) IServerSoftConfDefDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerSoftConfDefDo
	WriteDB() IServerSoftConfDefDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerSoftConfDefDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerSoftConfDefDo
	Not(conds ...gen.Condition) IServerSoftConfDefDo
	Or(conds ...gen.Condition) IServerSoftConfDefDo
	Select(conds ...field.Expr) IServerSoftConfDefDo
	Where(conds ...gen.Condition) IServerSoftConfDefDo
	Order(conds ...field.Expr) IServerSoftConfDefDo
	Distinct(cols ...field.Expr) IServerSoftConfDefDo
	Omit(cols ...field.Expr) IServerSoftConfDefDo
	Join(table schema.Tabler, on ...field.Expr) IServerSoftConfDefDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDefDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDefDo
	Group(cols ...field.Expr) IServerSoftConfDefDo
	Having(conds ...gen.Condition) IServerSoftConfDefDo
	Limit(limit int) IServerSoftConfDefDo
	Offset(offset int) IServerSoftConfDefDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftConfDefDo
	Unscoped() IServerSoftConfDefDo
	Create(values ...*model.ServerSoftConfDef) error
	CreateInBatches(values []*model.ServerSoftConfDef, batchSize int) error
	Save(values ...*model.ServerSoftConfDef) error
	First() (*model.ServerSoftConfDef, error)
	Take() (*model.ServerSoftConfDef, error)
	Last() (*model.ServerSoftConfDef, error)
	Find() ([]*model.ServerSoftConfDef, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftConfDef, err error)
	FindInBatches(result *[]*model.ServerSoftConfDef, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerSoftConfDef) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerSoftConfDefDo
	Assign(attrs ...field.AssignExpr) IServerSoftConfDefDo
	Joins(fields ...field.RelationField) IServerSoftConfDefDo
	Preload(fields ...field.RelationField) IServerSoftConfDefDo
	FirstOrInit() (*model.ServerSoftConfDef, error)
	FirstOrCreate() (*model.ServerSoftConfDef, error)
	FindByPage(offset int, limit int) (result []*model.ServerSoftConfDef, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerSoftConfDefDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverSoftConfDefDo) Debug() IServerSoftConfDefDo {
	return s.withDO(s.DO.Debug())
}

func (s serverSoftConfDefDo) WithContext(ctx context.Context) IServerSoftConfDefDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverSoftConfDefDo) ReadDB() IServerSoftConfDefDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverSoftConfDefDo) WriteDB() IServerSoftConfDefDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverSoftConfDefDo) Session(config *gorm.Session) IServerSoftConfDefDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverSoftConfDefDo) Clauses(conds ...clause.Expression) IServerSoftConfDefDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverSoftConfDefDo) Returning(value interface{}, columns ...string) IServerSoftConfDefDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverSoftConfDefDo) Not(conds ...gen.Condition) IServerSoftConfDefDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverSoftConfDefDo) Or(conds ...gen.Condition) IServerSoftConfDefDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverSoftConfDefDo) Select(conds ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverSoftConfDefDo) Where(conds ...gen.Condition) IServerSoftConfDefDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverSoftConfDefDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerSoftConfDefDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverSoftConfDefDo) Order(conds ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverSoftConfDefDo) Distinct(cols ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverSoftConfDefDo) Omit(cols ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverSoftConfDefDo) Join(table schema.Tabler, on ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverSoftConfDefDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverSoftConfDefDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverSoftConfDefDo) Group(cols ...field.Expr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverSoftConfDefDo) Having(conds ...gen.Condition) IServerSoftConfDefDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverSoftConfDefDo) Limit(limit int) IServerSoftConfDefDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverSoftConfDefDo) Offset(offset int) IServerSoftConfDefDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverSoftConfDefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftConfDefDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverSoftConfDefDo) Unscoped() IServerSoftConfDefDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverSoftConfDefDo) Create(values ...*model.ServerSoftConfDef) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverSoftConfDefDo) CreateInBatches(values []*model.ServerSoftConfDef, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverSoftConfDefDo) Save(values ...*model.ServerSoftConfDef) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverSoftConfDefDo) First() (*model.ServerSoftConfDef, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConfDef), nil
	}
}

func (s serverSoftConfDefDo) Take() (*model.ServerSoftConfDef, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConfDef), nil
	}
}

func (s serverSoftConfDefDo) Last() (*model.ServerSoftConfDef, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConfDef), nil
	}
}

func (s serverSoftConfDefDo) Find() ([]*model.ServerSoftConfDef, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerSoftConfDef), err
}

func (s serverSoftConfDefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftConfDef, err error) {
	buf := make([]*model.ServerSoftConfDef, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverSoftConfDefDo) FindInBatches(result *[]*model.ServerSoftConfDef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverSoftConfDefDo) Attrs(attrs ...field.AssignExpr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverSoftConfDefDo) Assign(attrs ...field.AssignExpr) IServerSoftConfDefDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverSoftConfDefDo) Joins(fields ...field.RelationField) IServerSoftConfDefDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverSoftConfDefDo) Preload(fields ...field.RelationField) IServerSoftConfDefDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverSoftConfDefDo) FirstOrInit() (*model.ServerSoftConfDef, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConfDef), nil
	}
}

func (s serverSoftConfDefDo) FirstOrCreate() (*model.ServerSoftConfDef, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftConfDef), nil
	}
}

func (s serverSoftConfDefDo) FindByPage(offset int, limit int) (result []*model.ServerSoftConfDef, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverSoftConfDefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverSoftConfDefDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverSoftConfDefDo) Delete(models ...*model.ServerSoftConfDef) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverSoftConfDefDo) withDO(do gen.Dao) *serverSoftConfDefDo {
	s.DO = *do.(*gen.DO)
	return s
}
