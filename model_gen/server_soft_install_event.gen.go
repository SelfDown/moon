// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerSoftInstallEvent(db *gorm.DB, opts ...gen.DOOption) serverSoftInstallEvent {
	_serverSoftInstallEvent := serverSoftInstallEvent{}

	_serverSoftInstallEvent.serverSoftInstallEventDo.UseDB(db, opts...)
	_serverSoftInstallEvent.serverSoftInstallEventDo.UseModel(&model.ServerSoftInstallEvent{})

	tableName := _serverSoftInstallEvent.serverSoftInstallEventDo.TableName()
	_serverSoftInstallEvent.ALL = field.NewAsterisk(tableName)
	_serverSoftInstallEvent.SoftInstallEventID = field.NewString(tableName, "soft_install_event_id")
	_serverSoftInstallEvent.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_serverSoftInstallEvent.OpsConfigGroupID = field.NewString(tableName, "ops_config_group_id")
	_serverSoftInstallEvent.SoftHome = field.NewString(tableName, "soft_home")
	_serverSoftInstallEvent.InstallStatus = field.NewString(tableName, "install_status")
	_serverSoftInstallEvent.InstallLog = field.NewString(tableName, "install_log")
	_serverSoftInstallEvent.InstallScript = field.NewString(tableName, "install_script")
	_serverSoftInstallEvent.UninstallScript = field.NewString(tableName, "uninstall_script")
	_serverSoftInstallEvent.InstallType = field.NewString(tableName, "install_type")
	_serverSoftInstallEvent.InstallSourceType = field.NewString(tableName, "install_source_type")
	_serverSoftInstallEvent.InstallSrcPath = field.NewString(tableName, "install_src_path")
	_serverSoftInstallEvent.InstallOsUser = field.NewString(tableName, "install_os_user")
	_serverSoftInstallEvent.CreateTime = field.NewTime(tableName, "create_time")
	_serverSoftInstallEvent.Msg = field.NewString(tableName, "msg")
	_serverSoftInstallEvent.OpType = field.NewString(tableName, "op_type")

	_serverSoftInstallEvent.fillFieldMap()

	return _serverSoftInstallEvent
}

type serverSoftInstallEvent struct {
	serverSoftInstallEventDo

	ALL                field.Asterisk
	SoftInstallEventID field.String
	InstallSoftID      field.String
	OpsConfigGroupID   field.String
	SoftHome           field.String
	InstallStatus      field.String
	InstallLog         field.String
	InstallScript      field.String
	UninstallScript    field.String
	InstallType        field.String
	InstallSourceType  field.String
	InstallSrcPath     field.String
	InstallOsUser      field.String
	CreateTime         field.Time
	Msg                field.String
	OpType             field.String

	fieldMap map[string]field.Expr
}

func (s serverSoftInstallEvent) Table(newTableName string) *serverSoftInstallEvent {
	s.serverSoftInstallEventDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverSoftInstallEvent) As(alias string) *serverSoftInstallEvent {
	s.serverSoftInstallEventDo.DO = *(s.serverSoftInstallEventDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverSoftInstallEvent) updateTableName(table string) *serverSoftInstallEvent {
	s.ALL = field.NewAsterisk(table)
	s.SoftInstallEventID = field.NewString(table, "soft_install_event_id")
	s.InstallSoftID = field.NewString(table, "install_soft_id")
	s.OpsConfigGroupID = field.NewString(table, "ops_config_group_id")
	s.SoftHome = field.NewString(table, "soft_home")
	s.InstallStatus = field.NewString(table, "install_status")
	s.InstallLog = field.NewString(table, "install_log")
	s.InstallScript = field.NewString(table, "install_script")
	s.UninstallScript = field.NewString(table, "uninstall_script")
	s.InstallType = field.NewString(table, "install_type")
	s.InstallSourceType = field.NewString(table, "install_source_type")
	s.InstallSrcPath = field.NewString(table, "install_src_path")
	s.InstallOsUser = field.NewString(table, "install_os_user")
	s.CreateTime = field.NewTime(table, "create_time")
	s.Msg = field.NewString(table, "msg")
	s.OpType = field.NewString(table, "op_type")

	s.fillFieldMap()

	return s
}

func (s *serverSoftInstallEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverSoftInstallEvent) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["soft_install_event_id"] = s.SoftInstallEventID
	s.fieldMap["install_soft_id"] = s.InstallSoftID
	s.fieldMap["ops_config_group_id"] = s.OpsConfigGroupID
	s.fieldMap["soft_home"] = s.SoftHome
	s.fieldMap["install_status"] = s.InstallStatus
	s.fieldMap["install_log"] = s.InstallLog
	s.fieldMap["install_script"] = s.InstallScript
	s.fieldMap["uninstall_script"] = s.UninstallScript
	s.fieldMap["install_type"] = s.InstallType
	s.fieldMap["install_source_type"] = s.InstallSourceType
	s.fieldMap["install_src_path"] = s.InstallSrcPath
	s.fieldMap["install_os_user"] = s.InstallOsUser
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["msg"] = s.Msg
	s.fieldMap["op_type"] = s.OpType
}

func (s serverSoftInstallEvent) clone(db *gorm.DB) serverSoftInstallEvent {
	s.serverSoftInstallEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverSoftInstallEvent) replaceDB(db *gorm.DB) serverSoftInstallEvent {
	s.serverSoftInstallEventDo.ReplaceDB(db)
	return s
}

type serverSoftInstallEventDo struct{ gen.DO }

type IServerSoftInstallEventDo interface {
	gen.SubQuery
	Debug() IServerSoftInstallEventDo
	WithContext(ctx context.Context) IServerSoftInstallEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerSoftInstallEventDo
	WriteDB() IServerSoftInstallEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerSoftInstallEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerSoftInstallEventDo
	Not(conds ...gen.Condition) IServerSoftInstallEventDo
	Or(conds ...gen.Condition) IServerSoftInstallEventDo
	Select(conds ...field.Expr) IServerSoftInstallEventDo
	Where(conds ...gen.Condition) IServerSoftInstallEventDo
	Order(conds ...field.Expr) IServerSoftInstallEventDo
	Distinct(cols ...field.Expr) IServerSoftInstallEventDo
	Omit(cols ...field.Expr) IServerSoftInstallEventDo
	Join(table schema.Tabler, on ...field.Expr) IServerSoftInstallEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftInstallEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftInstallEventDo
	Group(cols ...field.Expr) IServerSoftInstallEventDo
	Having(conds ...gen.Condition) IServerSoftInstallEventDo
	Limit(limit int) IServerSoftInstallEventDo
	Offset(offset int) IServerSoftInstallEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftInstallEventDo
	Unscoped() IServerSoftInstallEventDo
	Create(values ...*model.ServerSoftInstallEvent) error
	CreateInBatches(values []*model.ServerSoftInstallEvent, batchSize int) error
	Save(values ...*model.ServerSoftInstallEvent) error
	First() (*model.ServerSoftInstallEvent, error)
	Take() (*model.ServerSoftInstallEvent, error)
	Last() (*model.ServerSoftInstallEvent, error)
	Find() ([]*model.ServerSoftInstallEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftInstallEvent, err error)
	FindInBatches(result *[]*model.ServerSoftInstallEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerSoftInstallEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerSoftInstallEventDo
	Assign(attrs ...field.AssignExpr) IServerSoftInstallEventDo
	Joins(fields ...field.RelationField) IServerSoftInstallEventDo
	Preload(fields ...field.RelationField) IServerSoftInstallEventDo
	FirstOrInit() (*model.ServerSoftInstallEvent, error)
	FirstOrCreate() (*model.ServerSoftInstallEvent, error)
	FindByPage(offset int, limit int) (result []*model.ServerSoftInstallEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerSoftInstallEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverSoftInstallEventDo) Debug() IServerSoftInstallEventDo {
	return s.withDO(s.DO.Debug())
}

func (s serverSoftInstallEventDo) WithContext(ctx context.Context) IServerSoftInstallEventDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverSoftInstallEventDo) ReadDB() IServerSoftInstallEventDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverSoftInstallEventDo) WriteDB() IServerSoftInstallEventDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverSoftInstallEventDo) Session(config *gorm.Session) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverSoftInstallEventDo) Clauses(conds ...clause.Expression) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverSoftInstallEventDo) Returning(value interface{}, columns ...string) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverSoftInstallEventDo) Not(conds ...gen.Condition) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverSoftInstallEventDo) Or(conds ...gen.Condition) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverSoftInstallEventDo) Select(conds ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverSoftInstallEventDo) Where(conds ...gen.Condition) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverSoftInstallEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerSoftInstallEventDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverSoftInstallEventDo) Order(conds ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverSoftInstallEventDo) Distinct(cols ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverSoftInstallEventDo) Omit(cols ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverSoftInstallEventDo) Join(table schema.Tabler, on ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverSoftInstallEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverSoftInstallEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverSoftInstallEventDo) Group(cols ...field.Expr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverSoftInstallEventDo) Having(conds ...gen.Condition) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverSoftInstallEventDo) Limit(limit int) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverSoftInstallEventDo) Offset(offset int) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverSoftInstallEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverSoftInstallEventDo) Unscoped() IServerSoftInstallEventDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverSoftInstallEventDo) Create(values ...*model.ServerSoftInstallEvent) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverSoftInstallEventDo) CreateInBatches(values []*model.ServerSoftInstallEvent, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverSoftInstallEventDo) Save(values ...*model.ServerSoftInstallEvent) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverSoftInstallEventDo) First() (*model.ServerSoftInstallEvent, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftInstallEvent), nil
	}
}

func (s serverSoftInstallEventDo) Take() (*model.ServerSoftInstallEvent, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftInstallEvent), nil
	}
}

func (s serverSoftInstallEventDo) Last() (*model.ServerSoftInstallEvent, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftInstallEvent), nil
	}
}

func (s serverSoftInstallEventDo) Find() ([]*model.ServerSoftInstallEvent, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerSoftInstallEvent), err
}

func (s serverSoftInstallEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftInstallEvent, err error) {
	buf := make([]*model.ServerSoftInstallEvent, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverSoftInstallEventDo) FindInBatches(result *[]*model.ServerSoftInstallEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverSoftInstallEventDo) Attrs(attrs ...field.AssignExpr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverSoftInstallEventDo) Assign(attrs ...field.AssignExpr) IServerSoftInstallEventDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverSoftInstallEventDo) Joins(fields ...field.RelationField) IServerSoftInstallEventDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverSoftInstallEventDo) Preload(fields ...field.RelationField) IServerSoftInstallEventDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverSoftInstallEventDo) FirstOrInit() (*model.ServerSoftInstallEvent, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftInstallEvent), nil
	}
}

func (s serverSoftInstallEventDo) FirstOrCreate() (*model.ServerSoftInstallEvent, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftInstallEvent), nil
	}
}

func (s serverSoftInstallEventDo) FindByPage(offset int, limit int) (result []*model.ServerSoftInstallEvent, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverSoftInstallEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverSoftInstallEventDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverSoftInstallEventDo) Delete(models ...*model.ServerSoftInstallEvent) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverSoftInstallEventDo) withDO(do gen.Dao) *serverSoftInstallEventDo {
	s.DO = *do.(*gen.DO)
	return s
}
