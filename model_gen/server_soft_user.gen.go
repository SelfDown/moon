// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerSoftUser(db *gorm.DB, opts ...gen.DOOption) serverSoftUser {
	_serverSoftUser := serverSoftUser{}

	_serverSoftUser.serverSoftUserDo.UseDB(db, opts...)
	_serverSoftUser.serverSoftUserDo.UseModel(&model.ServerSoftUser{})

	tableName := _serverSoftUser.serverSoftUserDo.TableName()
	_serverSoftUser.ALL = field.NewAsterisk(tableName)
	_serverSoftUser.SoftUserID = field.NewString(tableName, "soft_user_id")
	_serverSoftUser.OssoftUserGroupID = field.NewString(tableName, "ossoft_user_group_id")
	_serverSoftUser.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_serverSoftUser.UserName = field.NewString(tableName, "user_name")
	_serverSoftUser.UserPwd = field.NewString(tableName, "user_pwd")
	_serverSoftUser.IsForbid = field.NewString(tableName, "is_forbid")
	_serverSoftUser.PwdEncodeType = field.NewString(tableName, "pwd_encode_type")
	_serverSoftUser.AddTime = field.NewTime(tableName, "add_time")
	_serverSoftUser.InitScript = field.NewString(tableName, "init_script")
	_serverSoftUser.IsDefaultUse = field.NewString(tableName, "is_default_use")
	_serverSoftUser.Comments = field.NewString(tableName, "comments")
	_serverSoftUser.UserOrgType = field.NewString(tableName, "user_org_type")
	_serverSoftUser.UserOrgRelID = field.NewString(tableName, "user_org_rel_id")

	_serverSoftUser.fillFieldMap()

	return _serverSoftUser
}

type serverSoftUser struct {
	serverSoftUserDo

	ALL               field.Asterisk
	SoftUserID        field.String
	OssoftUserGroupID field.String
	InstallSoftID     field.String
	UserName          field.String
	UserPwd           field.String
	IsForbid          field.String
	PwdEncodeType     field.String
	AddTime           field.Time
	InitScript        field.String
	IsDefaultUse      field.String
	Comments          field.String
	UserOrgType       field.String
	UserOrgRelID      field.String

	fieldMap map[string]field.Expr
}

func (s serverSoftUser) Table(newTableName string) *serverSoftUser {
	s.serverSoftUserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverSoftUser) As(alias string) *serverSoftUser {
	s.serverSoftUserDo.DO = *(s.serverSoftUserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverSoftUser) updateTableName(table string) *serverSoftUser {
	s.ALL = field.NewAsterisk(table)
	s.SoftUserID = field.NewString(table, "soft_user_id")
	s.OssoftUserGroupID = field.NewString(table, "ossoft_user_group_id")
	s.InstallSoftID = field.NewString(table, "install_soft_id")
	s.UserName = field.NewString(table, "user_name")
	s.UserPwd = field.NewString(table, "user_pwd")
	s.IsForbid = field.NewString(table, "is_forbid")
	s.PwdEncodeType = field.NewString(table, "pwd_encode_type")
	s.AddTime = field.NewTime(table, "add_time")
	s.InitScript = field.NewString(table, "init_script")
	s.IsDefaultUse = field.NewString(table, "is_default_use")
	s.Comments = field.NewString(table, "comments")
	s.UserOrgType = field.NewString(table, "user_org_type")
	s.UserOrgRelID = field.NewString(table, "user_org_rel_id")

	s.fillFieldMap()

	return s
}

func (s *serverSoftUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverSoftUser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["soft_user_id"] = s.SoftUserID
	s.fieldMap["ossoft_user_group_id"] = s.OssoftUserGroupID
	s.fieldMap["install_soft_id"] = s.InstallSoftID
	s.fieldMap["user_name"] = s.UserName
	s.fieldMap["user_pwd"] = s.UserPwd
	s.fieldMap["is_forbid"] = s.IsForbid
	s.fieldMap["pwd_encode_type"] = s.PwdEncodeType
	s.fieldMap["add_time"] = s.AddTime
	s.fieldMap["init_script"] = s.InitScript
	s.fieldMap["is_default_use"] = s.IsDefaultUse
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["user_org_type"] = s.UserOrgType
	s.fieldMap["user_org_rel_id"] = s.UserOrgRelID
}

func (s serverSoftUser) clone(db *gorm.DB) serverSoftUser {
	s.serverSoftUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverSoftUser) replaceDB(db *gorm.DB) serverSoftUser {
	s.serverSoftUserDo.ReplaceDB(db)
	return s
}

type serverSoftUserDo struct{ gen.DO }

type IServerSoftUserDo interface {
	gen.SubQuery
	Debug() IServerSoftUserDo
	WithContext(ctx context.Context) IServerSoftUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerSoftUserDo
	WriteDB() IServerSoftUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerSoftUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerSoftUserDo
	Not(conds ...gen.Condition) IServerSoftUserDo
	Or(conds ...gen.Condition) IServerSoftUserDo
	Select(conds ...field.Expr) IServerSoftUserDo
	Where(conds ...gen.Condition) IServerSoftUserDo
	Order(conds ...field.Expr) IServerSoftUserDo
	Distinct(cols ...field.Expr) IServerSoftUserDo
	Omit(cols ...field.Expr) IServerSoftUserDo
	Join(table schema.Tabler, on ...field.Expr) IServerSoftUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserDo
	Group(cols ...field.Expr) IServerSoftUserDo
	Having(conds ...gen.Condition) IServerSoftUserDo
	Limit(limit int) IServerSoftUserDo
	Offset(offset int) IServerSoftUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftUserDo
	Unscoped() IServerSoftUserDo
	Create(values ...*model.ServerSoftUser) error
	CreateInBatches(values []*model.ServerSoftUser, batchSize int) error
	Save(values ...*model.ServerSoftUser) error
	First() (*model.ServerSoftUser, error)
	Take() (*model.ServerSoftUser, error)
	Last() (*model.ServerSoftUser, error)
	Find() ([]*model.ServerSoftUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftUser, err error)
	FindInBatches(result *[]*model.ServerSoftUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerSoftUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerSoftUserDo
	Assign(attrs ...field.AssignExpr) IServerSoftUserDo
	Joins(fields ...field.RelationField) IServerSoftUserDo
	Preload(fields ...field.RelationField) IServerSoftUserDo
	FirstOrInit() (*model.ServerSoftUser, error)
	FirstOrCreate() (*model.ServerSoftUser, error)
	FindByPage(offset int, limit int) (result []*model.ServerSoftUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerSoftUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverSoftUserDo) Debug() IServerSoftUserDo {
	return s.withDO(s.DO.Debug())
}

func (s serverSoftUserDo) WithContext(ctx context.Context) IServerSoftUserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverSoftUserDo) ReadDB() IServerSoftUserDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverSoftUserDo) WriteDB() IServerSoftUserDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverSoftUserDo) Session(config *gorm.Session) IServerSoftUserDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverSoftUserDo) Clauses(conds ...clause.Expression) IServerSoftUserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverSoftUserDo) Returning(value interface{}, columns ...string) IServerSoftUserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverSoftUserDo) Not(conds ...gen.Condition) IServerSoftUserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverSoftUserDo) Or(conds ...gen.Condition) IServerSoftUserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverSoftUserDo) Select(conds ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverSoftUserDo) Where(conds ...gen.Condition) IServerSoftUserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverSoftUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerSoftUserDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverSoftUserDo) Order(conds ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverSoftUserDo) Distinct(cols ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverSoftUserDo) Omit(cols ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverSoftUserDo) Join(table schema.Tabler, on ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverSoftUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverSoftUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverSoftUserDo) Group(cols ...field.Expr) IServerSoftUserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverSoftUserDo) Having(conds ...gen.Condition) IServerSoftUserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverSoftUserDo) Limit(limit int) IServerSoftUserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverSoftUserDo) Offset(offset int) IServerSoftUserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverSoftUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftUserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverSoftUserDo) Unscoped() IServerSoftUserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverSoftUserDo) Create(values ...*model.ServerSoftUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverSoftUserDo) CreateInBatches(values []*model.ServerSoftUser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverSoftUserDo) Save(values ...*model.ServerSoftUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverSoftUserDo) First() (*model.ServerSoftUser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUser), nil
	}
}

func (s serverSoftUserDo) Take() (*model.ServerSoftUser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUser), nil
	}
}

func (s serverSoftUserDo) Last() (*model.ServerSoftUser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUser), nil
	}
}

func (s serverSoftUserDo) Find() ([]*model.ServerSoftUser, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerSoftUser), err
}

func (s serverSoftUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftUser, err error) {
	buf := make([]*model.ServerSoftUser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverSoftUserDo) FindInBatches(result *[]*model.ServerSoftUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverSoftUserDo) Attrs(attrs ...field.AssignExpr) IServerSoftUserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverSoftUserDo) Assign(attrs ...field.AssignExpr) IServerSoftUserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverSoftUserDo) Joins(fields ...field.RelationField) IServerSoftUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverSoftUserDo) Preload(fields ...field.RelationField) IServerSoftUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverSoftUserDo) FirstOrInit() (*model.ServerSoftUser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUser), nil
	}
}

func (s serverSoftUserDo) FirstOrCreate() (*model.ServerSoftUser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUser), nil
	}
}

func (s serverSoftUserDo) FindByPage(offset int, limit int) (result []*model.ServerSoftUser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverSoftUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverSoftUserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverSoftUserDo) Delete(models ...*model.ServerSoftUser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverSoftUserDo) withDO(do gen.Dao) *serverSoftUserDo {
	s.DO = *do.(*gen.DO)
	return s
}
