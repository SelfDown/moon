// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerSoftUserGroupRolerel(db *gorm.DB, opts ...gen.DOOption) serverSoftUserGroupRolerel {
	_serverSoftUserGroupRolerel := serverSoftUserGroupRolerel{}

	_serverSoftUserGroupRolerel.serverSoftUserGroupRolerelDo.UseDB(db, opts...)
	_serverSoftUserGroupRolerel.serverSoftUserGroupRolerelDo.UseModel(&model.ServerSoftUserGroupRolerel{})

	tableName := _serverSoftUserGroupRolerel.serverSoftUserGroupRolerelDo.TableName()
	_serverSoftUserGroupRolerel.ALL = field.NewAsterisk(tableName)
	_serverSoftUserGroupRolerel.UserGroupRolerelID = field.NewString(tableName, "user_group_rolerel_id")
	_serverSoftUserGroupRolerel.RoleID = field.NewString(tableName, "role_id")
	_serverSoftUserGroupRolerel.SoftUserID = field.NewString(tableName, "soft_user_id")

	_serverSoftUserGroupRolerel.fillFieldMap()

	return _serverSoftUserGroupRolerel
}

type serverSoftUserGroupRolerel struct {
	serverSoftUserGroupRolerelDo

	ALL                field.Asterisk
	UserGroupRolerelID field.String
	RoleID             field.String
	SoftUserID         field.String

	fieldMap map[string]field.Expr
}

func (s serverSoftUserGroupRolerel) Table(newTableName string) *serverSoftUserGroupRolerel {
	s.serverSoftUserGroupRolerelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverSoftUserGroupRolerel) As(alias string) *serverSoftUserGroupRolerel {
	s.serverSoftUserGroupRolerelDo.DO = *(s.serverSoftUserGroupRolerelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverSoftUserGroupRolerel) updateTableName(table string) *serverSoftUserGroupRolerel {
	s.ALL = field.NewAsterisk(table)
	s.UserGroupRolerelID = field.NewString(table, "user_group_rolerel_id")
	s.RoleID = field.NewString(table, "role_id")
	s.SoftUserID = field.NewString(table, "soft_user_id")

	s.fillFieldMap()

	return s
}

func (s *serverSoftUserGroupRolerel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverSoftUserGroupRolerel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["user_group_rolerel_id"] = s.UserGroupRolerelID
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["soft_user_id"] = s.SoftUserID
}

func (s serverSoftUserGroupRolerel) clone(db *gorm.DB) serverSoftUserGroupRolerel {
	s.serverSoftUserGroupRolerelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverSoftUserGroupRolerel) replaceDB(db *gorm.DB) serverSoftUserGroupRolerel {
	s.serverSoftUserGroupRolerelDo.ReplaceDB(db)
	return s
}

type serverSoftUserGroupRolerelDo struct{ gen.DO }

type IServerSoftUserGroupRolerelDo interface {
	gen.SubQuery
	Debug() IServerSoftUserGroupRolerelDo
	WithContext(ctx context.Context) IServerSoftUserGroupRolerelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerSoftUserGroupRolerelDo
	WriteDB() IServerSoftUserGroupRolerelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerSoftUserGroupRolerelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerSoftUserGroupRolerelDo
	Not(conds ...gen.Condition) IServerSoftUserGroupRolerelDo
	Or(conds ...gen.Condition) IServerSoftUserGroupRolerelDo
	Select(conds ...field.Expr) IServerSoftUserGroupRolerelDo
	Where(conds ...gen.Condition) IServerSoftUserGroupRolerelDo
	Order(conds ...field.Expr) IServerSoftUserGroupRolerelDo
	Distinct(cols ...field.Expr) IServerSoftUserGroupRolerelDo
	Omit(cols ...field.Expr) IServerSoftUserGroupRolerelDo
	Join(table schema.Tabler, on ...field.Expr) IServerSoftUserGroupRolerelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserGroupRolerelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserGroupRolerelDo
	Group(cols ...field.Expr) IServerSoftUserGroupRolerelDo
	Having(conds ...gen.Condition) IServerSoftUserGroupRolerelDo
	Limit(limit int) IServerSoftUserGroupRolerelDo
	Offset(offset int) IServerSoftUserGroupRolerelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftUserGroupRolerelDo
	Unscoped() IServerSoftUserGroupRolerelDo
	Create(values ...*model.ServerSoftUserGroupRolerel) error
	CreateInBatches(values []*model.ServerSoftUserGroupRolerel, batchSize int) error
	Save(values ...*model.ServerSoftUserGroupRolerel) error
	First() (*model.ServerSoftUserGroupRolerel, error)
	Take() (*model.ServerSoftUserGroupRolerel, error)
	Last() (*model.ServerSoftUserGroupRolerel, error)
	Find() ([]*model.ServerSoftUserGroupRolerel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftUserGroupRolerel, err error)
	FindInBatches(result *[]*model.ServerSoftUserGroupRolerel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerSoftUserGroupRolerel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerSoftUserGroupRolerelDo
	Assign(attrs ...field.AssignExpr) IServerSoftUserGroupRolerelDo
	Joins(fields ...field.RelationField) IServerSoftUserGroupRolerelDo
	Preload(fields ...field.RelationField) IServerSoftUserGroupRolerelDo
	FirstOrInit() (*model.ServerSoftUserGroupRolerel, error)
	FirstOrCreate() (*model.ServerSoftUserGroupRolerel, error)
	FindByPage(offset int, limit int) (result []*model.ServerSoftUserGroupRolerel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerSoftUserGroupRolerelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverSoftUserGroupRolerelDo) Debug() IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Debug())
}

func (s serverSoftUserGroupRolerelDo) WithContext(ctx context.Context) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverSoftUserGroupRolerelDo) ReadDB() IServerSoftUserGroupRolerelDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverSoftUserGroupRolerelDo) WriteDB() IServerSoftUserGroupRolerelDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverSoftUserGroupRolerelDo) Session(config *gorm.Session) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverSoftUserGroupRolerelDo) Clauses(conds ...clause.Expression) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverSoftUserGroupRolerelDo) Returning(value interface{}, columns ...string) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverSoftUserGroupRolerelDo) Not(conds ...gen.Condition) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverSoftUserGroupRolerelDo) Or(conds ...gen.Condition) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverSoftUserGroupRolerelDo) Select(conds ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverSoftUserGroupRolerelDo) Where(conds ...gen.Condition) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverSoftUserGroupRolerelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerSoftUserGroupRolerelDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverSoftUserGroupRolerelDo) Order(conds ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverSoftUserGroupRolerelDo) Distinct(cols ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverSoftUserGroupRolerelDo) Omit(cols ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverSoftUserGroupRolerelDo) Join(table schema.Tabler, on ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverSoftUserGroupRolerelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverSoftUserGroupRolerelDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverSoftUserGroupRolerelDo) Group(cols ...field.Expr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverSoftUserGroupRolerelDo) Having(conds ...gen.Condition) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverSoftUserGroupRolerelDo) Limit(limit int) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverSoftUserGroupRolerelDo) Offset(offset int) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverSoftUserGroupRolerelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverSoftUserGroupRolerelDo) Unscoped() IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverSoftUserGroupRolerelDo) Create(values ...*model.ServerSoftUserGroupRolerel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverSoftUserGroupRolerelDo) CreateInBatches(values []*model.ServerSoftUserGroupRolerel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverSoftUserGroupRolerelDo) Save(values ...*model.ServerSoftUserGroupRolerel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverSoftUserGroupRolerelDo) First() (*model.ServerSoftUserGroupRolerel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUserGroupRolerel), nil
	}
}

func (s serverSoftUserGroupRolerelDo) Take() (*model.ServerSoftUserGroupRolerel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUserGroupRolerel), nil
	}
}

func (s serverSoftUserGroupRolerelDo) Last() (*model.ServerSoftUserGroupRolerel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUserGroupRolerel), nil
	}
}

func (s serverSoftUserGroupRolerelDo) Find() ([]*model.ServerSoftUserGroupRolerel, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerSoftUserGroupRolerel), err
}

func (s serverSoftUserGroupRolerelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerSoftUserGroupRolerel, err error) {
	buf := make([]*model.ServerSoftUserGroupRolerel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverSoftUserGroupRolerelDo) FindInBatches(result *[]*model.ServerSoftUserGroupRolerel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverSoftUserGroupRolerelDo) Attrs(attrs ...field.AssignExpr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverSoftUserGroupRolerelDo) Assign(attrs ...field.AssignExpr) IServerSoftUserGroupRolerelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverSoftUserGroupRolerelDo) Joins(fields ...field.RelationField) IServerSoftUserGroupRolerelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverSoftUserGroupRolerelDo) Preload(fields ...field.RelationField) IServerSoftUserGroupRolerelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverSoftUserGroupRolerelDo) FirstOrInit() (*model.ServerSoftUserGroupRolerel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUserGroupRolerel), nil
	}
}

func (s serverSoftUserGroupRolerelDo) FirstOrCreate() (*model.ServerSoftUserGroupRolerel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerSoftUserGroupRolerel), nil
	}
}

func (s serverSoftUserGroupRolerelDo) FindByPage(offset int, limit int) (result []*model.ServerSoftUserGroupRolerel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverSoftUserGroupRolerelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverSoftUserGroupRolerelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverSoftUserGroupRolerelDo) Delete(models ...*model.ServerSoftUserGroupRolerel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverSoftUserGroupRolerelDo) withDO(do gen.Dao) *serverSoftUserGroupRolerelDo {
	s.DO = *do.(*gen.DO)
	return s
}
