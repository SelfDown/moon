// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newServerVsphere(db *gorm.DB, opts ...gen.DOOption) serverVsphere {
	_serverVsphere := serverVsphere{}

	_serverVsphere.serverVsphereDo.UseDB(db, opts...)
	_serverVsphere.serverVsphereDo.UseModel(&model.ServerVsphere{})

	tableName := _serverVsphere.serverVsphereDo.TableName()
	_serverVsphere.ALL = field.NewAsterisk(tableName)
	_serverVsphere.ServerVsphereID = field.NewInt32(tableName, "server_vsphere_id")
	_serverVsphere.ServerEnvID = field.NewString(tableName, "server_env_id")
	_serverVsphere.VsphereServerIP = field.NewString(tableName, "vsphere_server_ip")
	_serverVsphere.VsphereUser = field.NewString(tableName, "vsphere_user")
	_serverVsphere.VspherePwd = field.NewString(tableName, "vsphere_pwd")
	_serverVsphere.DefaultDatacenter = field.NewString(tableName, "default_datacenter")
	_serverVsphere.DefaultCluster = field.NewString(tableName, "default_cluster")
	_serverVsphere.CreateTime = field.NewTime(tableName, "create_time")
	_serverVsphere.ModifyTime = field.NewTime(tableName, "modify_time")
	_serverVsphere.Comment = field.NewString(tableName, "comment")
	_serverVsphere.Comments = field.NewString(tableName, "comments")

	_serverVsphere.fillFieldMap()

	return _serverVsphere
}

type serverVsphere struct {
	serverVsphereDo

	ALL             field.Asterisk
	ServerVsphereID field.Int32 // 主键\\n
	/*
		环境ID

	*/
	ServerEnvID     field.String
	VsphereServerIP field.String // vsphere server ip
	VsphereUser     field.String // vsphere用户名和密码
	/*
		vsphere登陆密码

	*/
	VspherePwd        field.String
	DefaultDatacenter field.String // 默认数据中心
	DefaultCluster    field.String // 默认集群
	CreateTime        field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime        field.Time
	Comment           field.String
	Comments          field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s serverVsphere) Table(newTableName string) *serverVsphere {
	s.serverVsphereDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverVsphere) As(alias string) *serverVsphere {
	s.serverVsphereDo.DO = *(s.serverVsphereDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverVsphere) updateTableName(table string) *serverVsphere {
	s.ALL = field.NewAsterisk(table)
	s.ServerVsphereID = field.NewInt32(table, "server_vsphere_id")
	s.ServerEnvID = field.NewString(table, "server_env_id")
	s.VsphereServerIP = field.NewString(table, "vsphere_server_ip")
	s.VsphereUser = field.NewString(table, "vsphere_user")
	s.VspherePwd = field.NewString(table, "vsphere_pwd")
	s.DefaultDatacenter = field.NewString(table, "default_datacenter")
	s.DefaultCluster = field.NewString(table, "default_cluster")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comment = field.NewString(table, "comment")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *serverVsphere) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverVsphere) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["server_vsphere_id"] = s.ServerVsphereID
	s.fieldMap["server_env_id"] = s.ServerEnvID
	s.fieldMap["vsphere_server_ip"] = s.VsphereServerIP
	s.fieldMap["vsphere_user"] = s.VsphereUser
	s.fieldMap["vsphere_pwd"] = s.VspherePwd
	s.fieldMap["default_datacenter"] = s.DefaultDatacenter
	s.fieldMap["default_cluster"] = s.DefaultCluster
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comment"] = s.Comment
	s.fieldMap["comments"] = s.Comments
}

func (s serverVsphere) clone(db *gorm.DB) serverVsphere {
	s.serverVsphereDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverVsphere) replaceDB(db *gorm.DB) serverVsphere {
	s.serverVsphereDo.ReplaceDB(db)
	return s
}

type serverVsphereDo struct{ gen.DO }

type IServerVsphereDo interface {
	gen.SubQuery
	Debug() IServerVsphereDo
	WithContext(ctx context.Context) IServerVsphereDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServerVsphereDo
	WriteDB() IServerVsphereDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServerVsphereDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServerVsphereDo
	Not(conds ...gen.Condition) IServerVsphereDo
	Or(conds ...gen.Condition) IServerVsphereDo
	Select(conds ...field.Expr) IServerVsphereDo
	Where(conds ...gen.Condition) IServerVsphereDo
	Order(conds ...field.Expr) IServerVsphereDo
	Distinct(cols ...field.Expr) IServerVsphereDo
	Omit(cols ...field.Expr) IServerVsphereDo
	Join(table schema.Tabler, on ...field.Expr) IServerVsphereDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServerVsphereDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServerVsphereDo
	Group(cols ...field.Expr) IServerVsphereDo
	Having(conds ...gen.Condition) IServerVsphereDo
	Limit(limit int) IServerVsphereDo
	Offset(offset int) IServerVsphereDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServerVsphereDo
	Unscoped() IServerVsphereDo
	Create(values ...*model.ServerVsphere) error
	CreateInBatches(values []*model.ServerVsphere, batchSize int) error
	Save(values ...*model.ServerVsphere) error
	First() (*model.ServerVsphere, error)
	Take() (*model.ServerVsphere, error)
	Last() (*model.ServerVsphere, error)
	Find() ([]*model.ServerVsphere, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerVsphere, err error)
	FindInBatches(result *[]*model.ServerVsphere, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServerVsphere) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServerVsphereDo
	Assign(attrs ...field.AssignExpr) IServerVsphereDo
	Joins(fields ...field.RelationField) IServerVsphereDo
	Preload(fields ...field.RelationField) IServerVsphereDo
	FirstOrInit() (*model.ServerVsphere, error)
	FirstOrCreate() (*model.ServerVsphere, error)
	FindByPage(offset int, limit int) (result []*model.ServerVsphere, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServerVsphereDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serverVsphereDo) Debug() IServerVsphereDo {
	return s.withDO(s.DO.Debug())
}

func (s serverVsphereDo) WithContext(ctx context.Context) IServerVsphereDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverVsphereDo) ReadDB() IServerVsphereDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverVsphereDo) WriteDB() IServerVsphereDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverVsphereDo) Session(config *gorm.Session) IServerVsphereDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverVsphereDo) Clauses(conds ...clause.Expression) IServerVsphereDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverVsphereDo) Returning(value interface{}, columns ...string) IServerVsphereDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverVsphereDo) Not(conds ...gen.Condition) IServerVsphereDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverVsphereDo) Or(conds ...gen.Condition) IServerVsphereDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverVsphereDo) Select(conds ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverVsphereDo) Where(conds ...gen.Condition) IServerVsphereDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverVsphereDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IServerVsphereDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverVsphereDo) Order(conds ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverVsphereDo) Distinct(cols ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverVsphereDo) Omit(cols ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverVsphereDo) Join(table schema.Tabler, on ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverVsphereDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverVsphereDo) RightJoin(table schema.Tabler, on ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverVsphereDo) Group(cols ...field.Expr) IServerVsphereDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverVsphereDo) Having(conds ...gen.Condition) IServerVsphereDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverVsphereDo) Limit(limit int) IServerVsphereDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverVsphereDo) Offset(offset int) IServerVsphereDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverVsphereDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServerVsphereDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverVsphereDo) Unscoped() IServerVsphereDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverVsphereDo) Create(values ...*model.ServerVsphere) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverVsphereDo) CreateInBatches(values []*model.ServerVsphere, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverVsphereDo) Save(values ...*model.ServerVsphere) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverVsphereDo) First() (*model.ServerVsphere, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerVsphere), nil
	}
}

func (s serverVsphereDo) Take() (*model.ServerVsphere, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerVsphere), nil
	}
}

func (s serverVsphereDo) Last() (*model.ServerVsphere, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerVsphere), nil
	}
}

func (s serverVsphereDo) Find() ([]*model.ServerVsphere, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerVsphere), err
}

func (s serverVsphereDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerVsphere, err error) {
	buf := make([]*model.ServerVsphere, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverVsphereDo) FindInBatches(result *[]*model.ServerVsphere, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverVsphereDo) Attrs(attrs ...field.AssignExpr) IServerVsphereDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverVsphereDo) Assign(attrs ...field.AssignExpr) IServerVsphereDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverVsphereDo) Joins(fields ...field.RelationField) IServerVsphereDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverVsphereDo) Preload(fields ...field.RelationField) IServerVsphereDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverVsphereDo) FirstOrInit() (*model.ServerVsphere, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerVsphere), nil
	}
}

func (s serverVsphereDo) FirstOrCreate() (*model.ServerVsphere, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerVsphere), nil
	}
}

func (s serverVsphereDo) FindByPage(offset int, limit int) (result []*model.ServerVsphere, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverVsphereDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverVsphereDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverVsphereDo) Delete(models ...*model.ServerVsphere) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverVsphereDo) withDO(do gen.Dao) *serverVsphereDo {
	s.DO = *do.(*gen.DO)
	return s
}
