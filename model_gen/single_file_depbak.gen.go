// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSingleFileDepbak(db *gorm.DB, opts ...gen.DOOption) singleFileDepbak {
	_singleFileDepbak := singleFileDepbak{}

	_singleFileDepbak.singleFileDepbakDo.UseDB(db, opts...)
	_singleFileDepbak.singleFileDepbakDo.UseModel(&model.SingleFileDepbak{})

	tableName := _singleFileDepbak.singleFileDepbakDo.TableName()
	_singleFileDepbak.ALL = field.NewAsterisk(tableName)
	_singleFileDepbak.DepbakID = field.NewString(tableName, "depbak_id")
	_singleFileDepbak.DepEventID = field.NewString(tableName, "dep_event_id")
	_singleFileDepbak.BakFilePath = field.NewString(tableName, "bak_file_path")
	_singleFileDepbak.AddTime = field.NewTime(tableName, "add_time")
	_singleFileDepbak.AddUser = field.NewString(tableName, "add_user")
	_singleFileDepbak.HeadVersion = field.NewString(tableName, "head_version")

	_singleFileDepbak.fillFieldMap()

	return _singleFileDepbak
}

type singleFileDepbak struct {
	singleFileDepbakDo

	ALL         field.Asterisk
	DepbakID    field.String // ID
	DepEventID  field.String // 主键流水
	BakFilePath field.String // 全量备份路径
	AddTime     field.Time   // 添加时间
	AddUser     field.String // 添加用户
	HeadVersion field.String

	fieldMap map[string]field.Expr
}

func (s singleFileDepbak) Table(newTableName string) *singleFileDepbak {
	s.singleFileDepbakDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s singleFileDepbak) As(alias string) *singleFileDepbak {
	s.singleFileDepbakDo.DO = *(s.singleFileDepbakDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *singleFileDepbak) updateTableName(table string) *singleFileDepbak {
	s.ALL = field.NewAsterisk(table)
	s.DepbakID = field.NewString(table, "depbak_id")
	s.DepEventID = field.NewString(table, "dep_event_id")
	s.BakFilePath = field.NewString(table, "bak_file_path")
	s.AddTime = field.NewTime(table, "add_time")
	s.AddUser = field.NewString(table, "add_user")
	s.HeadVersion = field.NewString(table, "head_version")

	s.fillFieldMap()

	return s
}

func (s *singleFileDepbak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *singleFileDepbak) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["depbak_id"] = s.DepbakID
	s.fieldMap["dep_event_id"] = s.DepEventID
	s.fieldMap["bak_file_path"] = s.BakFilePath
	s.fieldMap["add_time"] = s.AddTime
	s.fieldMap["add_user"] = s.AddUser
	s.fieldMap["head_version"] = s.HeadVersion
}

func (s singleFileDepbak) clone(db *gorm.DB) singleFileDepbak {
	s.singleFileDepbakDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s singleFileDepbak) replaceDB(db *gorm.DB) singleFileDepbak {
	s.singleFileDepbakDo.ReplaceDB(db)
	return s
}

type singleFileDepbakDo struct{ gen.DO }

type ISingleFileDepbakDo interface {
	gen.SubQuery
	Debug() ISingleFileDepbakDo
	WithContext(ctx context.Context) ISingleFileDepbakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISingleFileDepbakDo
	WriteDB() ISingleFileDepbakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISingleFileDepbakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISingleFileDepbakDo
	Not(conds ...gen.Condition) ISingleFileDepbakDo
	Or(conds ...gen.Condition) ISingleFileDepbakDo
	Select(conds ...field.Expr) ISingleFileDepbakDo
	Where(conds ...gen.Condition) ISingleFileDepbakDo
	Order(conds ...field.Expr) ISingleFileDepbakDo
	Distinct(cols ...field.Expr) ISingleFileDepbakDo
	Omit(cols ...field.Expr) ISingleFileDepbakDo
	Join(table schema.Tabler, on ...field.Expr) ISingleFileDepbakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISingleFileDepbakDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISingleFileDepbakDo
	Group(cols ...field.Expr) ISingleFileDepbakDo
	Having(conds ...gen.Condition) ISingleFileDepbakDo
	Limit(limit int) ISingleFileDepbakDo
	Offset(offset int) ISingleFileDepbakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleFileDepbakDo
	Unscoped() ISingleFileDepbakDo
	Create(values ...*model.SingleFileDepbak) error
	CreateInBatches(values []*model.SingleFileDepbak, batchSize int) error
	Save(values ...*model.SingleFileDepbak) error
	First() (*model.SingleFileDepbak, error)
	Take() (*model.SingleFileDepbak, error)
	Last() (*model.SingleFileDepbak, error)
	Find() ([]*model.SingleFileDepbak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SingleFileDepbak, err error)
	FindInBatches(result *[]*model.SingleFileDepbak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SingleFileDepbak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISingleFileDepbakDo
	Assign(attrs ...field.AssignExpr) ISingleFileDepbakDo
	Joins(fields ...field.RelationField) ISingleFileDepbakDo
	Preload(fields ...field.RelationField) ISingleFileDepbakDo
	FirstOrInit() (*model.SingleFileDepbak, error)
	FirstOrCreate() (*model.SingleFileDepbak, error)
	FindByPage(offset int, limit int) (result []*model.SingleFileDepbak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISingleFileDepbakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s singleFileDepbakDo) Debug() ISingleFileDepbakDo {
	return s.withDO(s.DO.Debug())
}

func (s singleFileDepbakDo) WithContext(ctx context.Context) ISingleFileDepbakDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s singleFileDepbakDo) ReadDB() ISingleFileDepbakDo {
	return s.Clauses(dbresolver.Read)
}

func (s singleFileDepbakDo) WriteDB() ISingleFileDepbakDo {
	return s.Clauses(dbresolver.Write)
}

func (s singleFileDepbakDo) Session(config *gorm.Session) ISingleFileDepbakDo {
	return s.withDO(s.DO.Session(config))
}

func (s singleFileDepbakDo) Clauses(conds ...clause.Expression) ISingleFileDepbakDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s singleFileDepbakDo) Returning(value interface{}, columns ...string) ISingleFileDepbakDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s singleFileDepbakDo) Not(conds ...gen.Condition) ISingleFileDepbakDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s singleFileDepbakDo) Or(conds ...gen.Condition) ISingleFileDepbakDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s singleFileDepbakDo) Select(conds ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s singleFileDepbakDo) Where(conds ...gen.Condition) ISingleFileDepbakDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s singleFileDepbakDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISingleFileDepbakDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s singleFileDepbakDo) Order(conds ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s singleFileDepbakDo) Distinct(cols ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s singleFileDepbakDo) Omit(cols ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s singleFileDepbakDo) Join(table schema.Tabler, on ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s singleFileDepbakDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s singleFileDepbakDo) RightJoin(table schema.Tabler, on ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s singleFileDepbakDo) Group(cols ...field.Expr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s singleFileDepbakDo) Having(conds ...gen.Condition) ISingleFileDepbakDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s singleFileDepbakDo) Limit(limit int) ISingleFileDepbakDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s singleFileDepbakDo) Offset(offset int) ISingleFileDepbakDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s singleFileDepbakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISingleFileDepbakDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s singleFileDepbakDo) Unscoped() ISingleFileDepbakDo {
	return s.withDO(s.DO.Unscoped())
}

func (s singleFileDepbakDo) Create(values ...*model.SingleFileDepbak) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s singleFileDepbakDo) CreateInBatches(values []*model.SingleFileDepbak, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s singleFileDepbakDo) Save(values ...*model.SingleFileDepbak) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s singleFileDepbakDo) First() (*model.SingleFileDepbak, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleFileDepbak), nil
	}
}

func (s singleFileDepbakDo) Take() (*model.SingleFileDepbak, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleFileDepbak), nil
	}
}

func (s singleFileDepbakDo) Last() (*model.SingleFileDepbak, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleFileDepbak), nil
	}
}

func (s singleFileDepbakDo) Find() ([]*model.SingleFileDepbak, error) {
	result, err := s.DO.Find()
	return result.([]*model.SingleFileDepbak), err
}

func (s singleFileDepbakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SingleFileDepbak, err error) {
	buf := make([]*model.SingleFileDepbak, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s singleFileDepbakDo) FindInBatches(result *[]*model.SingleFileDepbak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s singleFileDepbakDo) Attrs(attrs ...field.AssignExpr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s singleFileDepbakDo) Assign(attrs ...field.AssignExpr) ISingleFileDepbakDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s singleFileDepbakDo) Joins(fields ...field.RelationField) ISingleFileDepbakDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s singleFileDepbakDo) Preload(fields ...field.RelationField) ISingleFileDepbakDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s singleFileDepbakDo) FirstOrInit() (*model.SingleFileDepbak, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleFileDepbak), nil
	}
}

func (s singleFileDepbakDo) FirstOrCreate() (*model.SingleFileDepbak, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SingleFileDepbak), nil
	}
}

func (s singleFileDepbakDo) FindByPage(offset int, limit int) (result []*model.SingleFileDepbak, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s singleFileDepbakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s singleFileDepbakDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s singleFileDepbakDo) Delete(models ...*model.SingleFileDepbak) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *singleFileDepbakDo) withDO(do gen.Dao) *singleFileDepbakDo {
	s.DO = *do.(*gen.DO)
	return s
}
