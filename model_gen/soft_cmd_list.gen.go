// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSoftCmdList(db *gorm.DB, opts ...gen.DOOption) softCmdList {
	_softCmdList := softCmdList{}

	_softCmdList.softCmdListDo.UseDB(db, opts...)
	_softCmdList.softCmdListDo.UseModel(&model.SoftCmdList{})

	tableName := _softCmdList.softCmdListDo.TableName()
	_softCmdList.ALL = field.NewAsterisk(tableName)
	_softCmdList.ID = field.NewInt32(tableName, "id")
	_softCmdList.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_softCmdList.Cmd = field.NewString(tableName, "cmd")
	_softCmdList.CmdTypeCode = field.NewString(tableName, "cmd_type_code")

	_softCmdList.fillFieldMap()

	return _softCmdList
}

type softCmdList struct {
	softCmdListDo

	ALL           field.Asterisk
	ID            field.Int32
	InstallSoftID field.String // server_install_soft.install_soft_id
	Cmd           field.String // 执行命令
	CmdTypeCode   field.String // 启动关闭等命令类型ID,soft_cmd_type.cmd_type_code

	fieldMap map[string]field.Expr
}

func (s softCmdList) Table(newTableName string) *softCmdList {
	s.softCmdListDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s softCmdList) As(alias string) *softCmdList {
	s.softCmdListDo.DO = *(s.softCmdListDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *softCmdList) updateTableName(table string) *softCmdList {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.InstallSoftID = field.NewString(table, "install_soft_id")
	s.Cmd = field.NewString(table, "cmd")
	s.CmdTypeCode = field.NewString(table, "cmd_type_code")

	s.fillFieldMap()

	return s
}

func (s *softCmdList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *softCmdList) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["install_soft_id"] = s.InstallSoftID
	s.fieldMap["cmd"] = s.Cmd
	s.fieldMap["cmd_type_code"] = s.CmdTypeCode
}

func (s softCmdList) clone(db *gorm.DB) softCmdList {
	s.softCmdListDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s softCmdList) replaceDB(db *gorm.DB) softCmdList {
	s.softCmdListDo.ReplaceDB(db)
	return s
}

type softCmdListDo struct{ gen.DO }

type ISoftCmdListDo interface {
	gen.SubQuery
	Debug() ISoftCmdListDo
	WithContext(ctx context.Context) ISoftCmdListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISoftCmdListDo
	WriteDB() ISoftCmdListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISoftCmdListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISoftCmdListDo
	Not(conds ...gen.Condition) ISoftCmdListDo
	Or(conds ...gen.Condition) ISoftCmdListDo
	Select(conds ...field.Expr) ISoftCmdListDo
	Where(conds ...gen.Condition) ISoftCmdListDo
	Order(conds ...field.Expr) ISoftCmdListDo
	Distinct(cols ...field.Expr) ISoftCmdListDo
	Omit(cols ...field.Expr) ISoftCmdListDo
	Join(table schema.Tabler, on ...field.Expr) ISoftCmdListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISoftCmdListDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISoftCmdListDo
	Group(cols ...field.Expr) ISoftCmdListDo
	Having(conds ...gen.Condition) ISoftCmdListDo
	Limit(limit int) ISoftCmdListDo
	Offset(offset int) ISoftCmdListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftCmdListDo
	Unscoped() ISoftCmdListDo
	Create(values ...*model.SoftCmdList) error
	CreateInBatches(values []*model.SoftCmdList, batchSize int) error
	Save(values ...*model.SoftCmdList) error
	First() (*model.SoftCmdList, error)
	Take() (*model.SoftCmdList, error)
	Last() (*model.SoftCmdList, error)
	Find() ([]*model.SoftCmdList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftCmdList, err error)
	FindInBatches(result *[]*model.SoftCmdList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SoftCmdList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISoftCmdListDo
	Assign(attrs ...field.AssignExpr) ISoftCmdListDo
	Joins(fields ...field.RelationField) ISoftCmdListDo
	Preload(fields ...field.RelationField) ISoftCmdListDo
	FirstOrInit() (*model.SoftCmdList, error)
	FirstOrCreate() (*model.SoftCmdList, error)
	FindByPage(offset int, limit int) (result []*model.SoftCmdList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISoftCmdListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s softCmdListDo) Debug() ISoftCmdListDo {
	return s.withDO(s.DO.Debug())
}

func (s softCmdListDo) WithContext(ctx context.Context) ISoftCmdListDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s softCmdListDo) ReadDB() ISoftCmdListDo {
	return s.Clauses(dbresolver.Read)
}

func (s softCmdListDo) WriteDB() ISoftCmdListDo {
	return s.Clauses(dbresolver.Write)
}

func (s softCmdListDo) Session(config *gorm.Session) ISoftCmdListDo {
	return s.withDO(s.DO.Session(config))
}

func (s softCmdListDo) Clauses(conds ...clause.Expression) ISoftCmdListDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s softCmdListDo) Returning(value interface{}, columns ...string) ISoftCmdListDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s softCmdListDo) Not(conds ...gen.Condition) ISoftCmdListDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s softCmdListDo) Or(conds ...gen.Condition) ISoftCmdListDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s softCmdListDo) Select(conds ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s softCmdListDo) Where(conds ...gen.Condition) ISoftCmdListDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s softCmdListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISoftCmdListDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s softCmdListDo) Order(conds ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s softCmdListDo) Distinct(cols ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s softCmdListDo) Omit(cols ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s softCmdListDo) Join(table schema.Tabler, on ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s softCmdListDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s softCmdListDo) RightJoin(table schema.Tabler, on ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s softCmdListDo) Group(cols ...field.Expr) ISoftCmdListDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s softCmdListDo) Having(conds ...gen.Condition) ISoftCmdListDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s softCmdListDo) Limit(limit int) ISoftCmdListDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s softCmdListDo) Offset(offset int) ISoftCmdListDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s softCmdListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftCmdListDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s softCmdListDo) Unscoped() ISoftCmdListDo {
	return s.withDO(s.DO.Unscoped())
}

func (s softCmdListDo) Create(values ...*model.SoftCmdList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s softCmdListDo) CreateInBatches(values []*model.SoftCmdList, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s softCmdListDo) Save(values ...*model.SoftCmdList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s softCmdListDo) First() (*model.SoftCmdList, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdList), nil
	}
}

func (s softCmdListDo) Take() (*model.SoftCmdList, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdList), nil
	}
}

func (s softCmdListDo) Last() (*model.SoftCmdList, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdList), nil
	}
}

func (s softCmdListDo) Find() ([]*model.SoftCmdList, error) {
	result, err := s.DO.Find()
	return result.([]*model.SoftCmdList), err
}

func (s softCmdListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftCmdList, err error) {
	buf := make([]*model.SoftCmdList, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s softCmdListDo) FindInBatches(result *[]*model.SoftCmdList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s softCmdListDo) Attrs(attrs ...field.AssignExpr) ISoftCmdListDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s softCmdListDo) Assign(attrs ...field.AssignExpr) ISoftCmdListDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s softCmdListDo) Joins(fields ...field.RelationField) ISoftCmdListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s softCmdListDo) Preload(fields ...field.RelationField) ISoftCmdListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s softCmdListDo) FirstOrInit() (*model.SoftCmdList, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdList), nil
	}
}

func (s softCmdListDo) FirstOrCreate() (*model.SoftCmdList, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdList), nil
	}
}

func (s softCmdListDo) FindByPage(offset int, limit int) (result []*model.SoftCmdList, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s softCmdListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s softCmdListDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s softCmdListDo) Delete(models ...*model.SoftCmdList) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *softCmdListDo) withDO(do gen.Dao) *softCmdListDo {
	s.DO = *do.(*gen.DO)
	return s
}
