// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSoftCmdType(db *gorm.DB, opts ...gen.DOOption) softCmdType {
	_softCmdType := softCmdType{}

	_softCmdType.softCmdTypeDo.UseDB(db, opts...)
	_softCmdType.softCmdTypeDo.UseModel(&model.SoftCmdType{})

	tableName := _softCmdType.softCmdTypeDo.TableName()
	_softCmdType.ALL = field.NewAsterisk(tableName)
	_softCmdType.SoftTypeCode = field.NewString(tableName, "soft_type_code")
	_softCmdType.SoftTypeText = field.NewString(tableName, "soft_type_text")
	_softCmdType.Comment = field.NewString(tableName, "comment")

	_softCmdType.fillFieldMap()

	return _softCmdType
}

type softCmdType struct {
	softCmdTypeDo

	ALL          field.Asterisk
	SoftTypeCode field.String
	SoftTypeText field.String
	Comment      field.String

	fieldMap map[string]field.Expr
}

func (s softCmdType) Table(newTableName string) *softCmdType {
	s.softCmdTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s softCmdType) As(alias string) *softCmdType {
	s.softCmdTypeDo.DO = *(s.softCmdTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *softCmdType) updateTableName(table string) *softCmdType {
	s.ALL = field.NewAsterisk(table)
	s.SoftTypeCode = field.NewString(table, "soft_type_code")
	s.SoftTypeText = field.NewString(table, "soft_type_text")
	s.Comment = field.NewString(table, "comment")

	s.fillFieldMap()

	return s
}

func (s *softCmdType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *softCmdType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["soft_type_code"] = s.SoftTypeCode
	s.fieldMap["soft_type_text"] = s.SoftTypeText
	s.fieldMap["comment"] = s.Comment
}

func (s softCmdType) clone(db *gorm.DB) softCmdType {
	s.softCmdTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s softCmdType) replaceDB(db *gorm.DB) softCmdType {
	s.softCmdTypeDo.ReplaceDB(db)
	return s
}

type softCmdTypeDo struct{ gen.DO }

type ISoftCmdTypeDo interface {
	gen.SubQuery
	Debug() ISoftCmdTypeDo
	WithContext(ctx context.Context) ISoftCmdTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISoftCmdTypeDo
	WriteDB() ISoftCmdTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISoftCmdTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISoftCmdTypeDo
	Not(conds ...gen.Condition) ISoftCmdTypeDo
	Or(conds ...gen.Condition) ISoftCmdTypeDo
	Select(conds ...field.Expr) ISoftCmdTypeDo
	Where(conds ...gen.Condition) ISoftCmdTypeDo
	Order(conds ...field.Expr) ISoftCmdTypeDo
	Distinct(cols ...field.Expr) ISoftCmdTypeDo
	Omit(cols ...field.Expr) ISoftCmdTypeDo
	Join(table schema.Tabler, on ...field.Expr) ISoftCmdTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISoftCmdTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISoftCmdTypeDo
	Group(cols ...field.Expr) ISoftCmdTypeDo
	Having(conds ...gen.Condition) ISoftCmdTypeDo
	Limit(limit int) ISoftCmdTypeDo
	Offset(offset int) ISoftCmdTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftCmdTypeDo
	Unscoped() ISoftCmdTypeDo
	Create(values ...*model.SoftCmdType) error
	CreateInBatches(values []*model.SoftCmdType, batchSize int) error
	Save(values ...*model.SoftCmdType) error
	First() (*model.SoftCmdType, error)
	Take() (*model.SoftCmdType, error)
	Last() (*model.SoftCmdType, error)
	Find() ([]*model.SoftCmdType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftCmdType, err error)
	FindInBatches(result *[]*model.SoftCmdType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SoftCmdType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISoftCmdTypeDo
	Assign(attrs ...field.AssignExpr) ISoftCmdTypeDo
	Joins(fields ...field.RelationField) ISoftCmdTypeDo
	Preload(fields ...field.RelationField) ISoftCmdTypeDo
	FirstOrInit() (*model.SoftCmdType, error)
	FirstOrCreate() (*model.SoftCmdType, error)
	FindByPage(offset int, limit int) (result []*model.SoftCmdType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISoftCmdTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s softCmdTypeDo) Debug() ISoftCmdTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s softCmdTypeDo) WithContext(ctx context.Context) ISoftCmdTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s softCmdTypeDo) ReadDB() ISoftCmdTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s softCmdTypeDo) WriteDB() ISoftCmdTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s softCmdTypeDo) Session(config *gorm.Session) ISoftCmdTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s softCmdTypeDo) Clauses(conds ...clause.Expression) ISoftCmdTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s softCmdTypeDo) Returning(value interface{}, columns ...string) ISoftCmdTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s softCmdTypeDo) Not(conds ...gen.Condition) ISoftCmdTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s softCmdTypeDo) Or(conds ...gen.Condition) ISoftCmdTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s softCmdTypeDo) Select(conds ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s softCmdTypeDo) Where(conds ...gen.Condition) ISoftCmdTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s softCmdTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISoftCmdTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s softCmdTypeDo) Order(conds ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s softCmdTypeDo) Distinct(cols ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s softCmdTypeDo) Omit(cols ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s softCmdTypeDo) Join(table schema.Tabler, on ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s softCmdTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s softCmdTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s softCmdTypeDo) Group(cols ...field.Expr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s softCmdTypeDo) Having(conds ...gen.Condition) ISoftCmdTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s softCmdTypeDo) Limit(limit int) ISoftCmdTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s softCmdTypeDo) Offset(offset int) ISoftCmdTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s softCmdTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftCmdTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s softCmdTypeDo) Unscoped() ISoftCmdTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s softCmdTypeDo) Create(values ...*model.SoftCmdType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s softCmdTypeDo) CreateInBatches(values []*model.SoftCmdType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s softCmdTypeDo) Save(values ...*model.SoftCmdType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s softCmdTypeDo) First() (*model.SoftCmdType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdType), nil
	}
}

func (s softCmdTypeDo) Take() (*model.SoftCmdType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdType), nil
	}
}

func (s softCmdTypeDo) Last() (*model.SoftCmdType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdType), nil
	}
}

func (s softCmdTypeDo) Find() ([]*model.SoftCmdType, error) {
	result, err := s.DO.Find()
	return result.([]*model.SoftCmdType), err
}

func (s softCmdTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftCmdType, err error) {
	buf := make([]*model.SoftCmdType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s softCmdTypeDo) FindInBatches(result *[]*model.SoftCmdType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s softCmdTypeDo) Attrs(attrs ...field.AssignExpr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s softCmdTypeDo) Assign(attrs ...field.AssignExpr) ISoftCmdTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s softCmdTypeDo) Joins(fields ...field.RelationField) ISoftCmdTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s softCmdTypeDo) Preload(fields ...field.RelationField) ISoftCmdTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s softCmdTypeDo) FirstOrInit() (*model.SoftCmdType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdType), nil
	}
}

func (s softCmdTypeDo) FirstOrCreate() (*model.SoftCmdType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftCmdType), nil
	}
}

func (s softCmdTypeDo) FindByPage(offset int, limit int) (result []*model.SoftCmdType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s softCmdTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s softCmdTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s softCmdTypeDo) Delete(models ...*model.SoftCmdType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *softCmdTypeDo) withDO(do gen.Dao) *softCmdTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
