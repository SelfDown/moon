// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSoftLogs(db *gorm.DB, opts ...gen.DOOption) softLogs {
	_softLogs := softLogs{}

	_softLogs.softLogsDo.UseDB(db, opts...)
	_softLogs.softLogsDo.UseModel(&model.SoftLogs{})

	tableName := _softLogs.softLogsDo.TableName()
	_softLogs.ALL = field.NewAsterisk(tableName)
	_softLogs.SoftID = field.NewInt32(tableName, "soft_id")
	_softLogs.SoftLogID = field.NewString(tableName, "soft_log_id")
	_softLogs.ServerSoftLogPath = field.NewString(tableName, "server_soft_log_path")
	_softLogs.Comments = field.NewString(tableName, "comments")
	_softLogs.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_softLogs.SoftLogMain = field.NewString(tableName, "soft_log_main")
	_softLogs.Name = field.NewString(tableName, "name")

	_softLogs.fillFieldMap()

	return _softLogs
}

type softLogs struct {
	softLogsDo

	ALL               field.Asterisk
	SoftID            field.Int32
	SoftLogID         field.String
	ServerSoftLogPath field.String
	Comments          field.String
	InstallSoftID     field.String
	SoftLogMain       field.String
	Name              field.String

	fieldMap map[string]field.Expr
}

func (s softLogs) Table(newTableName string) *softLogs {
	s.softLogsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s softLogs) As(alias string) *softLogs {
	s.softLogsDo.DO = *(s.softLogsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *softLogs) updateTableName(table string) *softLogs {
	s.ALL = field.NewAsterisk(table)
	s.SoftID = field.NewInt32(table, "soft_id")
	s.SoftLogID = field.NewString(table, "soft_log_id")
	s.ServerSoftLogPath = field.NewString(table, "server_soft_log_path")
	s.Comments = field.NewString(table, "comments")
	s.InstallSoftID = field.NewString(table, "install_soft_id")
	s.SoftLogMain = field.NewString(table, "soft_log_main")
	s.Name = field.NewString(table, "name")

	s.fillFieldMap()

	return s
}

func (s *softLogs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *softLogs) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["soft_id"] = s.SoftID
	s.fieldMap["soft_log_id"] = s.SoftLogID
	s.fieldMap["server_soft_log_path"] = s.ServerSoftLogPath
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["install_soft_id"] = s.InstallSoftID
	s.fieldMap["soft_log_main"] = s.SoftLogMain
	s.fieldMap["name"] = s.Name
}

func (s softLogs) clone(db *gorm.DB) softLogs {
	s.softLogsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s softLogs) replaceDB(db *gorm.DB) softLogs {
	s.softLogsDo.ReplaceDB(db)
	return s
}

type softLogsDo struct{ gen.DO }

type ISoftLogsDo interface {
	gen.SubQuery
	Debug() ISoftLogsDo
	WithContext(ctx context.Context) ISoftLogsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISoftLogsDo
	WriteDB() ISoftLogsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISoftLogsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISoftLogsDo
	Not(conds ...gen.Condition) ISoftLogsDo
	Or(conds ...gen.Condition) ISoftLogsDo
	Select(conds ...field.Expr) ISoftLogsDo
	Where(conds ...gen.Condition) ISoftLogsDo
	Order(conds ...field.Expr) ISoftLogsDo
	Distinct(cols ...field.Expr) ISoftLogsDo
	Omit(cols ...field.Expr) ISoftLogsDo
	Join(table schema.Tabler, on ...field.Expr) ISoftLogsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISoftLogsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISoftLogsDo
	Group(cols ...field.Expr) ISoftLogsDo
	Having(conds ...gen.Condition) ISoftLogsDo
	Limit(limit int) ISoftLogsDo
	Offset(offset int) ISoftLogsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftLogsDo
	Unscoped() ISoftLogsDo
	Create(values ...*model.SoftLogs) error
	CreateInBatches(values []*model.SoftLogs, batchSize int) error
	Save(values ...*model.SoftLogs) error
	First() (*model.SoftLogs, error)
	Take() (*model.SoftLogs, error)
	Last() (*model.SoftLogs, error)
	Find() ([]*model.SoftLogs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftLogs, err error)
	FindInBatches(result *[]*model.SoftLogs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SoftLogs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISoftLogsDo
	Assign(attrs ...field.AssignExpr) ISoftLogsDo
	Joins(fields ...field.RelationField) ISoftLogsDo
	Preload(fields ...field.RelationField) ISoftLogsDo
	FirstOrInit() (*model.SoftLogs, error)
	FirstOrCreate() (*model.SoftLogs, error)
	FindByPage(offset int, limit int) (result []*model.SoftLogs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISoftLogsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s softLogsDo) Debug() ISoftLogsDo {
	return s.withDO(s.DO.Debug())
}

func (s softLogsDo) WithContext(ctx context.Context) ISoftLogsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s softLogsDo) ReadDB() ISoftLogsDo {
	return s.Clauses(dbresolver.Read)
}

func (s softLogsDo) WriteDB() ISoftLogsDo {
	return s.Clauses(dbresolver.Write)
}

func (s softLogsDo) Session(config *gorm.Session) ISoftLogsDo {
	return s.withDO(s.DO.Session(config))
}

func (s softLogsDo) Clauses(conds ...clause.Expression) ISoftLogsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s softLogsDo) Returning(value interface{}, columns ...string) ISoftLogsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s softLogsDo) Not(conds ...gen.Condition) ISoftLogsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s softLogsDo) Or(conds ...gen.Condition) ISoftLogsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s softLogsDo) Select(conds ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s softLogsDo) Where(conds ...gen.Condition) ISoftLogsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s softLogsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISoftLogsDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s softLogsDo) Order(conds ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s softLogsDo) Distinct(cols ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s softLogsDo) Omit(cols ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s softLogsDo) Join(table schema.Tabler, on ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s softLogsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s softLogsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s softLogsDo) Group(cols ...field.Expr) ISoftLogsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s softLogsDo) Having(conds ...gen.Condition) ISoftLogsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s softLogsDo) Limit(limit int) ISoftLogsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s softLogsDo) Offset(offset int) ISoftLogsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s softLogsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftLogsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s softLogsDo) Unscoped() ISoftLogsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s softLogsDo) Create(values ...*model.SoftLogs) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s softLogsDo) CreateInBatches(values []*model.SoftLogs, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s softLogsDo) Save(values ...*model.SoftLogs) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s softLogsDo) First() (*model.SoftLogs, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftLogs), nil
	}
}

func (s softLogsDo) Take() (*model.SoftLogs, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftLogs), nil
	}
}

func (s softLogsDo) Last() (*model.SoftLogs, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftLogs), nil
	}
}

func (s softLogsDo) Find() ([]*model.SoftLogs, error) {
	result, err := s.DO.Find()
	return result.([]*model.SoftLogs), err
}

func (s softLogsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftLogs, err error) {
	buf := make([]*model.SoftLogs, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s softLogsDo) FindInBatches(result *[]*model.SoftLogs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s softLogsDo) Attrs(attrs ...field.AssignExpr) ISoftLogsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s softLogsDo) Assign(attrs ...field.AssignExpr) ISoftLogsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s softLogsDo) Joins(fields ...field.RelationField) ISoftLogsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s softLogsDo) Preload(fields ...field.RelationField) ISoftLogsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s softLogsDo) FirstOrInit() (*model.SoftLogs, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftLogs), nil
	}
}

func (s softLogsDo) FirstOrCreate() (*model.SoftLogs, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftLogs), nil
	}
}

func (s softLogsDo) FindByPage(offset int, limit int) (result []*model.SoftLogs, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s softLogsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s softLogsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s softLogsDo) Delete(models ...*model.SoftLogs) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *softLogsDo) withDO(do gen.Dao) *softLogsDo {
	s.DO = *do.(*gen.DO)
	return s
}
