// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSoftSlaveIP(db *gorm.DB, opts ...gen.DOOption) softSlaveIP {
	_softSlaveIP := softSlaveIP{}

	_softSlaveIP.softSlaveIPDo.UseDB(db, opts...)
	_softSlaveIP.softSlaveIPDo.UseModel(&model.SoftSlaveIP{})

	tableName := _softSlaveIP.softSlaveIPDo.TableName()
	_softSlaveIP.ALL = field.NewAsterisk(tableName)
	_softSlaveIP.SoftSlaveIPID = field.NewString(tableName, "soft_slave_ip_id")
	_softSlaveIP.InstallSoftID = field.NewString(tableName, "install_soft_id")
	_softSlaveIP.SlaveIP = field.NewString(tableName, "slave_ip")
	_softSlaveIP.SlavePort = field.NewString(tableName, "slave_port")
	_softSlaveIP.CreateTime = field.NewString(tableName, "create_time")

	_softSlaveIP.fillFieldMap()

	return _softSlaveIP
}

type softSlaveIP struct {
	softSlaveIPDo

	ALL           field.Asterisk
	SoftSlaveIPID field.String
	InstallSoftID field.String
	SlaveIP       field.String
	SlavePort     field.String // 标题
	CreateTime    field.String

	fieldMap map[string]field.Expr
}

func (s softSlaveIP) Table(newTableName string) *softSlaveIP {
	s.softSlaveIPDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s softSlaveIP) As(alias string) *softSlaveIP {
	s.softSlaveIPDo.DO = *(s.softSlaveIPDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *softSlaveIP) updateTableName(table string) *softSlaveIP {
	s.ALL = field.NewAsterisk(table)
	s.SoftSlaveIPID = field.NewString(table, "soft_slave_ip_id")
	s.InstallSoftID = field.NewString(table, "install_soft_id")
	s.SlaveIP = field.NewString(table, "slave_ip")
	s.SlavePort = field.NewString(table, "slave_port")
	s.CreateTime = field.NewString(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *softSlaveIP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *softSlaveIP) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["soft_slave_ip_id"] = s.SoftSlaveIPID
	s.fieldMap["install_soft_id"] = s.InstallSoftID
	s.fieldMap["slave_ip"] = s.SlaveIP
	s.fieldMap["slave_port"] = s.SlavePort
	s.fieldMap["create_time"] = s.CreateTime
}

func (s softSlaveIP) clone(db *gorm.DB) softSlaveIP {
	s.softSlaveIPDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s softSlaveIP) replaceDB(db *gorm.DB) softSlaveIP {
	s.softSlaveIPDo.ReplaceDB(db)
	return s
}

type softSlaveIPDo struct{ gen.DO }

type ISoftSlaveIPDo interface {
	gen.SubQuery
	Debug() ISoftSlaveIPDo
	WithContext(ctx context.Context) ISoftSlaveIPDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISoftSlaveIPDo
	WriteDB() ISoftSlaveIPDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISoftSlaveIPDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISoftSlaveIPDo
	Not(conds ...gen.Condition) ISoftSlaveIPDo
	Or(conds ...gen.Condition) ISoftSlaveIPDo
	Select(conds ...field.Expr) ISoftSlaveIPDo
	Where(conds ...gen.Condition) ISoftSlaveIPDo
	Order(conds ...field.Expr) ISoftSlaveIPDo
	Distinct(cols ...field.Expr) ISoftSlaveIPDo
	Omit(cols ...field.Expr) ISoftSlaveIPDo
	Join(table schema.Tabler, on ...field.Expr) ISoftSlaveIPDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISoftSlaveIPDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISoftSlaveIPDo
	Group(cols ...field.Expr) ISoftSlaveIPDo
	Having(conds ...gen.Condition) ISoftSlaveIPDo
	Limit(limit int) ISoftSlaveIPDo
	Offset(offset int) ISoftSlaveIPDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftSlaveIPDo
	Unscoped() ISoftSlaveIPDo
	Create(values ...*model.SoftSlaveIP) error
	CreateInBatches(values []*model.SoftSlaveIP, batchSize int) error
	Save(values ...*model.SoftSlaveIP) error
	First() (*model.SoftSlaveIP, error)
	Take() (*model.SoftSlaveIP, error)
	Last() (*model.SoftSlaveIP, error)
	Find() ([]*model.SoftSlaveIP, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftSlaveIP, err error)
	FindInBatches(result *[]*model.SoftSlaveIP, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SoftSlaveIP) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISoftSlaveIPDo
	Assign(attrs ...field.AssignExpr) ISoftSlaveIPDo
	Joins(fields ...field.RelationField) ISoftSlaveIPDo
	Preload(fields ...field.RelationField) ISoftSlaveIPDo
	FirstOrInit() (*model.SoftSlaveIP, error)
	FirstOrCreate() (*model.SoftSlaveIP, error)
	FindByPage(offset int, limit int) (result []*model.SoftSlaveIP, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISoftSlaveIPDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s softSlaveIPDo) Debug() ISoftSlaveIPDo {
	return s.withDO(s.DO.Debug())
}

func (s softSlaveIPDo) WithContext(ctx context.Context) ISoftSlaveIPDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s softSlaveIPDo) ReadDB() ISoftSlaveIPDo {
	return s.Clauses(dbresolver.Read)
}

func (s softSlaveIPDo) WriteDB() ISoftSlaveIPDo {
	return s.Clauses(dbresolver.Write)
}

func (s softSlaveIPDo) Session(config *gorm.Session) ISoftSlaveIPDo {
	return s.withDO(s.DO.Session(config))
}

func (s softSlaveIPDo) Clauses(conds ...clause.Expression) ISoftSlaveIPDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s softSlaveIPDo) Returning(value interface{}, columns ...string) ISoftSlaveIPDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s softSlaveIPDo) Not(conds ...gen.Condition) ISoftSlaveIPDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s softSlaveIPDo) Or(conds ...gen.Condition) ISoftSlaveIPDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s softSlaveIPDo) Select(conds ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s softSlaveIPDo) Where(conds ...gen.Condition) ISoftSlaveIPDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s softSlaveIPDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISoftSlaveIPDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s softSlaveIPDo) Order(conds ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s softSlaveIPDo) Distinct(cols ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s softSlaveIPDo) Omit(cols ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s softSlaveIPDo) Join(table schema.Tabler, on ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s softSlaveIPDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s softSlaveIPDo) RightJoin(table schema.Tabler, on ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s softSlaveIPDo) Group(cols ...field.Expr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s softSlaveIPDo) Having(conds ...gen.Condition) ISoftSlaveIPDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s softSlaveIPDo) Limit(limit int) ISoftSlaveIPDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s softSlaveIPDo) Offset(offset int) ISoftSlaveIPDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s softSlaveIPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISoftSlaveIPDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s softSlaveIPDo) Unscoped() ISoftSlaveIPDo {
	return s.withDO(s.DO.Unscoped())
}

func (s softSlaveIPDo) Create(values ...*model.SoftSlaveIP) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s softSlaveIPDo) CreateInBatches(values []*model.SoftSlaveIP, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s softSlaveIPDo) Save(values ...*model.SoftSlaveIP) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s softSlaveIPDo) First() (*model.SoftSlaveIP, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftSlaveIP), nil
	}
}

func (s softSlaveIPDo) Take() (*model.SoftSlaveIP, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftSlaveIP), nil
	}
}

func (s softSlaveIPDo) Last() (*model.SoftSlaveIP, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftSlaveIP), nil
	}
}

func (s softSlaveIPDo) Find() ([]*model.SoftSlaveIP, error) {
	result, err := s.DO.Find()
	return result.([]*model.SoftSlaveIP), err
}

func (s softSlaveIPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SoftSlaveIP, err error) {
	buf := make([]*model.SoftSlaveIP, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s softSlaveIPDo) FindInBatches(result *[]*model.SoftSlaveIP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s softSlaveIPDo) Attrs(attrs ...field.AssignExpr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s softSlaveIPDo) Assign(attrs ...field.AssignExpr) ISoftSlaveIPDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s softSlaveIPDo) Joins(fields ...field.RelationField) ISoftSlaveIPDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s softSlaveIPDo) Preload(fields ...field.RelationField) ISoftSlaveIPDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s softSlaveIPDo) FirstOrInit() (*model.SoftSlaveIP, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftSlaveIP), nil
	}
}

func (s softSlaveIPDo) FirstOrCreate() (*model.SoftSlaveIP, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SoftSlaveIP), nil
	}
}

func (s softSlaveIPDo) FindByPage(offset int, limit int) (result []*model.SoftSlaveIP, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s softSlaveIPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s softSlaveIPDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s softSlaveIPDo) Delete(models ...*model.SoftSlaveIP) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *softSlaveIPDo) withDO(do gen.Dao) *softSlaveIPDo {
	s.DO = *do.(*gen.DO)
	return s
}
