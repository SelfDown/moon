// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlAdminFavorite(db *gorm.DB, opts ...gen.DOOption) sqlAdminFavorite {
	_sqlAdminFavorite := sqlAdminFavorite{}

	_sqlAdminFavorite.sqlAdminFavoriteDo.UseDB(db, opts...)
	_sqlAdminFavorite.sqlAdminFavoriteDo.UseModel(&model.SqlAdminFavorite{})

	tableName := _sqlAdminFavorite.sqlAdminFavoriteDo.TableName()
	_sqlAdminFavorite.ALL = field.NewAsterisk(tableName)
	_sqlAdminFavorite.SqlAdminFavoriteID = field.NewString(tableName, "sql_admin_favorite_id")
	_sqlAdminFavorite.FavoriteName = field.NewString(tableName, "favorite_name")
	_sqlAdminFavorite.FavoriteType = field.NewString(tableName, "favorite_type")
	_sqlAdminFavorite.UserID = field.NewString(tableName, "user_id")
	_sqlAdminFavorite.SqlText = field.NewString(tableName, "sql_text")
	_sqlAdminFavorite.CreateTime = field.NewTime(tableName, "create_time")
	_sqlAdminFavorite.ModifyTime = field.NewTime(tableName, "modify_time")
	_sqlAdminFavorite.Comments = field.NewString(tableName, "comments")

	_sqlAdminFavorite.fillFieldMap()

	return _sqlAdminFavorite
}

type sqlAdminFavorite struct {
	sqlAdminFavoriteDo

	ALL                field.Asterisk
	SqlAdminFavoriteID field.String
	FavoriteName       field.String
	/*
		公共
		私人
	*/
	FavoriteType field.String
	UserID       field.String // 如果是私有类型的收藏，则是私有用户userid
	SqlText      field.String // 收藏的脚本内容
	CreateTime   field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time   // 记录修改时间（数据库自动写入）
	Comments     field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sqlAdminFavorite) Table(newTableName string) *sqlAdminFavorite {
	s.sqlAdminFavoriteDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlAdminFavorite) As(alias string) *sqlAdminFavorite {
	s.sqlAdminFavoriteDo.DO = *(s.sqlAdminFavoriteDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlAdminFavorite) updateTableName(table string) *sqlAdminFavorite {
	s.ALL = field.NewAsterisk(table)
	s.SqlAdminFavoriteID = field.NewString(table, "sql_admin_favorite_id")
	s.FavoriteName = field.NewString(table, "favorite_name")
	s.FavoriteType = field.NewString(table, "favorite_type")
	s.UserID = field.NewString(table, "user_id")
	s.SqlText = field.NewString(table, "sql_text")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sqlAdminFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlAdminFavorite) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["sql_admin_favorite_id"] = s.SqlAdminFavoriteID
	s.fieldMap["favorite_name"] = s.FavoriteName
	s.fieldMap["favorite_type"] = s.FavoriteType
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["sql_text"] = s.SqlText
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s sqlAdminFavorite) clone(db *gorm.DB) sqlAdminFavorite {
	s.sqlAdminFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlAdminFavorite) replaceDB(db *gorm.DB) sqlAdminFavorite {
	s.sqlAdminFavoriteDo.ReplaceDB(db)
	return s
}

type sqlAdminFavoriteDo struct{ gen.DO }

type ISqlAdminFavoriteDo interface {
	gen.SubQuery
	Debug() ISqlAdminFavoriteDo
	WithContext(ctx context.Context) ISqlAdminFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlAdminFavoriteDo
	WriteDB() ISqlAdminFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlAdminFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlAdminFavoriteDo
	Not(conds ...gen.Condition) ISqlAdminFavoriteDo
	Or(conds ...gen.Condition) ISqlAdminFavoriteDo
	Select(conds ...field.Expr) ISqlAdminFavoriteDo
	Where(conds ...gen.Condition) ISqlAdminFavoriteDo
	Order(conds ...field.Expr) ISqlAdminFavoriteDo
	Distinct(cols ...field.Expr) ISqlAdminFavoriteDo
	Omit(cols ...field.Expr) ISqlAdminFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) ISqlAdminFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminFavoriteDo
	Group(cols ...field.Expr) ISqlAdminFavoriteDo
	Having(conds ...gen.Condition) ISqlAdminFavoriteDo
	Limit(limit int) ISqlAdminFavoriteDo
	Offset(offset int) ISqlAdminFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminFavoriteDo
	Unscoped() ISqlAdminFavoriteDo
	Create(values ...*model.SqlAdminFavorite) error
	CreateInBatches(values []*model.SqlAdminFavorite, batchSize int) error
	Save(values ...*model.SqlAdminFavorite) error
	First() (*model.SqlAdminFavorite, error)
	Take() (*model.SqlAdminFavorite, error)
	Last() (*model.SqlAdminFavorite, error)
	Find() ([]*model.SqlAdminFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminFavorite, err error)
	FindInBatches(result *[]*model.SqlAdminFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlAdminFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlAdminFavoriteDo
	Assign(attrs ...field.AssignExpr) ISqlAdminFavoriteDo
	Joins(fields ...field.RelationField) ISqlAdminFavoriteDo
	Preload(fields ...field.RelationField) ISqlAdminFavoriteDo
	FirstOrInit() (*model.SqlAdminFavorite, error)
	FirstOrCreate() (*model.SqlAdminFavorite, error)
	FindByPage(offset int, limit int) (result []*model.SqlAdminFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlAdminFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlAdminFavoriteDo) Debug() ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlAdminFavoriteDo) WithContext(ctx context.Context) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlAdminFavoriteDo) ReadDB() ISqlAdminFavoriteDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlAdminFavoriteDo) WriteDB() ISqlAdminFavoriteDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlAdminFavoriteDo) Session(config *gorm.Session) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlAdminFavoriteDo) Clauses(conds ...clause.Expression) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlAdminFavoriteDo) Returning(value interface{}, columns ...string) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlAdminFavoriteDo) Not(conds ...gen.Condition) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlAdminFavoriteDo) Or(conds ...gen.Condition) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlAdminFavoriteDo) Select(conds ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlAdminFavoriteDo) Where(conds ...gen.Condition) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlAdminFavoriteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlAdminFavoriteDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlAdminFavoriteDo) Order(conds ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlAdminFavoriteDo) Distinct(cols ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlAdminFavoriteDo) Omit(cols ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlAdminFavoriteDo) Join(table schema.Tabler, on ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlAdminFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlAdminFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlAdminFavoriteDo) Group(cols ...field.Expr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlAdminFavoriteDo) Having(conds ...gen.Condition) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlAdminFavoriteDo) Limit(limit int) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlAdminFavoriteDo) Offset(offset int) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlAdminFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlAdminFavoriteDo) Unscoped() ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlAdminFavoriteDo) Create(values ...*model.SqlAdminFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlAdminFavoriteDo) CreateInBatches(values []*model.SqlAdminFavorite, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlAdminFavoriteDo) Save(values ...*model.SqlAdminFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlAdminFavoriteDo) First() (*model.SqlAdminFavorite, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminFavorite), nil
	}
}

func (s sqlAdminFavoriteDo) Take() (*model.SqlAdminFavorite, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminFavorite), nil
	}
}

func (s sqlAdminFavoriteDo) Last() (*model.SqlAdminFavorite, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminFavorite), nil
	}
}

func (s sqlAdminFavoriteDo) Find() ([]*model.SqlAdminFavorite, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlAdminFavorite), err
}

func (s sqlAdminFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminFavorite, err error) {
	buf := make([]*model.SqlAdminFavorite, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlAdminFavoriteDo) FindInBatches(result *[]*model.SqlAdminFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlAdminFavoriteDo) Attrs(attrs ...field.AssignExpr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlAdminFavoriteDo) Assign(attrs ...field.AssignExpr) ISqlAdminFavoriteDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlAdminFavoriteDo) Joins(fields ...field.RelationField) ISqlAdminFavoriteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlAdminFavoriteDo) Preload(fields ...field.RelationField) ISqlAdminFavoriteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlAdminFavoriteDo) FirstOrInit() (*model.SqlAdminFavorite, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminFavorite), nil
	}
}

func (s sqlAdminFavoriteDo) FirstOrCreate() (*model.SqlAdminFavorite, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminFavorite), nil
	}
}

func (s sqlAdminFavoriteDo) FindByPage(offset int, limit int) (result []*model.SqlAdminFavorite, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlAdminFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlAdminFavoriteDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlAdminFavoriteDo) Delete(models ...*model.SqlAdminFavorite) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlAdminFavoriteDo) withDO(do gen.Dao) *sqlAdminFavoriteDo {
	s.DO = *do.(*gen.DO)
	return s
}
