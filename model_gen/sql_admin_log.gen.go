// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlAdminLog(db *gorm.DB, opts ...gen.DOOption) sqlAdminLog {
	_sqlAdminLog := sqlAdminLog{}

	_sqlAdminLog.sqlAdminLogDo.UseDB(db, opts...)
	_sqlAdminLog.sqlAdminLogDo.UseModel(&model.SqlAdminLog{})

	tableName := _sqlAdminLog.sqlAdminLogDo.TableName()
	_sqlAdminLog.ALL = field.NewAsterisk(tableName)
	_sqlAdminLog.ID = field.NewInt32(tableName, "id")
	_sqlAdminLog.UserID = field.NewString(tableName, "user_id")
	_sqlAdminLog.SqlAdminLogID = field.NewString(tableName, "sql_admin_log_id")
	_sqlAdminLog.ServerEnvID = field.NewString(tableName, "server_env_id")
	_sqlAdminLog.OracleInstanceID = field.NewString(tableName, "oracle_instance_id")
	_sqlAdminLog.SqlAdminRoleID = field.NewString(tableName, "sql_admin_role_id")
	_sqlAdminLog.ExecSql = field.NewString(tableName, "exec_sql")
	_sqlAdminLog.ExecTake = field.NewString(tableName, "exec_take")
	_sqlAdminLog.ExecStatus = field.NewString(tableName, "exec_status")
	_sqlAdminLog.ExecDetail = field.NewString(tableName, "exec_detail")
	_sqlAdminLog.CreateTime = field.NewTime(tableName, "create_time")
	_sqlAdminLog.ModifyTime = field.NewTime(tableName, "modify_time")
	_sqlAdminLog.Comments = field.NewString(tableName, "comments")
	_sqlAdminLog.InstallSoftID = field.NewString(tableName, "install_soft_id")

	_sqlAdminLog.fillFieldMap()

	return _sqlAdminLog
}

type sqlAdminLog struct {
	sqlAdminLogDo

	ALL              field.Asterisk
	ID               field.Int32
	UserID           field.String
	SqlAdminLogID    field.String // 主键
	ServerEnvID      field.String
	OracleInstanceID field.String // 关联 oracle_instance.oracle_instance_id
	SqlAdminRoleID   field.String // 关联 sql_admin_role.sql_admin_role_id
	ExecSql          field.String // 执行的SQL
	ExecTake         field.String // 执行SQL消耗的时间 单位是秒
	/*
		执行结果
		成功
		失败
	*/
	ExecStatus    field.String
	ExecDetail    field.String // 执行结果
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明
	InstallSoftID field.String

	fieldMap map[string]field.Expr
}

func (s sqlAdminLog) Table(newTableName string) *sqlAdminLog {
	s.sqlAdminLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlAdminLog) As(alias string) *sqlAdminLog {
	s.sqlAdminLogDo.DO = *(s.sqlAdminLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlAdminLog) updateTableName(table string) *sqlAdminLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.SqlAdminLogID = field.NewString(table, "sql_admin_log_id")
	s.ServerEnvID = field.NewString(table, "server_env_id")
	s.OracleInstanceID = field.NewString(table, "oracle_instance_id")
	s.SqlAdminRoleID = field.NewString(table, "sql_admin_role_id")
	s.ExecSql = field.NewString(table, "exec_sql")
	s.ExecTake = field.NewString(table, "exec_take")
	s.ExecStatus = field.NewString(table, "exec_status")
	s.ExecDetail = field.NewString(table, "exec_detail")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.InstallSoftID = field.NewString(table, "install_soft_id")

	s.fillFieldMap()

	return s
}

func (s *sqlAdminLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlAdminLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["sql_admin_log_id"] = s.SqlAdminLogID
	s.fieldMap["server_env_id"] = s.ServerEnvID
	s.fieldMap["oracle_instance_id"] = s.OracleInstanceID
	s.fieldMap["sql_admin_role_id"] = s.SqlAdminRoleID
	s.fieldMap["exec_sql"] = s.ExecSql
	s.fieldMap["exec_take"] = s.ExecTake
	s.fieldMap["exec_status"] = s.ExecStatus
	s.fieldMap["exec_detail"] = s.ExecDetail
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["install_soft_id"] = s.InstallSoftID
}

func (s sqlAdminLog) clone(db *gorm.DB) sqlAdminLog {
	s.sqlAdminLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlAdminLog) replaceDB(db *gorm.DB) sqlAdminLog {
	s.sqlAdminLogDo.ReplaceDB(db)
	return s
}

type sqlAdminLogDo struct{ gen.DO }

type ISqlAdminLogDo interface {
	gen.SubQuery
	Debug() ISqlAdminLogDo
	WithContext(ctx context.Context) ISqlAdminLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlAdminLogDo
	WriteDB() ISqlAdminLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlAdminLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlAdminLogDo
	Not(conds ...gen.Condition) ISqlAdminLogDo
	Or(conds ...gen.Condition) ISqlAdminLogDo
	Select(conds ...field.Expr) ISqlAdminLogDo
	Where(conds ...gen.Condition) ISqlAdminLogDo
	Order(conds ...field.Expr) ISqlAdminLogDo
	Distinct(cols ...field.Expr) ISqlAdminLogDo
	Omit(cols ...field.Expr) ISqlAdminLogDo
	Join(table schema.Tabler, on ...field.Expr) ISqlAdminLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminLogDo
	Group(cols ...field.Expr) ISqlAdminLogDo
	Having(conds ...gen.Condition) ISqlAdminLogDo
	Limit(limit int) ISqlAdminLogDo
	Offset(offset int) ISqlAdminLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminLogDo
	Unscoped() ISqlAdminLogDo
	Create(values ...*model.SqlAdminLog) error
	CreateInBatches(values []*model.SqlAdminLog, batchSize int) error
	Save(values ...*model.SqlAdminLog) error
	First() (*model.SqlAdminLog, error)
	Take() (*model.SqlAdminLog, error)
	Last() (*model.SqlAdminLog, error)
	Find() ([]*model.SqlAdminLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminLog, err error)
	FindInBatches(result *[]*model.SqlAdminLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlAdminLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlAdminLogDo
	Assign(attrs ...field.AssignExpr) ISqlAdminLogDo
	Joins(fields ...field.RelationField) ISqlAdminLogDo
	Preload(fields ...field.RelationField) ISqlAdminLogDo
	FirstOrInit() (*model.SqlAdminLog, error)
	FirstOrCreate() (*model.SqlAdminLog, error)
	FindByPage(offset int, limit int) (result []*model.SqlAdminLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlAdminLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlAdminLogDo) Debug() ISqlAdminLogDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlAdminLogDo) WithContext(ctx context.Context) ISqlAdminLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlAdminLogDo) ReadDB() ISqlAdminLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlAdminLogDo) WriteDB() ISqlAdminLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlAdminLogDo) Session(config *gorm.Session) ISqlAdminLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlAdminLogDo) Clauses(conds ...clause.Expression) ISqlAdminLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlAdminLogDo) Returning(value interface{}, columns ...string) ISqlAdminLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlAdminLogDo) Not(conds ...gen.Condition) ISqlAdminLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlAdminLogDo) Or(conds ...gen.Condition) ISqlAdminLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlAdminLogDo) Select(conds ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlAdminLogDo) Where(conds ...gen.Condition) ISqlAdminLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlAdminLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlAdminLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlAdminLogDo) Order(conds ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlAdminLogDo) Distinct(cols ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlAdminLogDo) Omit(cols ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlAdminLogDo) Join(table schema.Tabler, on ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlAdminLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlAdminLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlAdminLogDo) Group(cols ...field.Expr) ISqlAdminLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlAdminLogDo) Having(conds ...gen.Condition) ISqlAdminLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlAdminLogDo) Limit(limit int) ISqlAdminLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlAdminLogDo) Offset(offset int) ISqlAdminLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlAdminLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlAdminLogDo) Unscoped() ISqlAdminLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlAdminLogDo) Create(values ...*model.SqlAdminLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlAdminLogDo) CreateInBatches(values []*model.SqlAdminLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlAdminLogDo) Save(values ...*model.SqlAdminLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlAdminLogDo) First() (*model.SqlAdminLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminLog), nil
	}
}

func (s sqlAdminLogDo) Take() (*model.SqlAdminLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminLog), nil
	}
}

func (s sqlAdminLogDo) Last() (*model.SqlAdminLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminLog), nil
	}
}

func (s sqlAdminLogDo) Find() ([]*model.SqlAdminLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlAdminLog), err
}

func (s sqlAdminLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminLog, err error) {
	buf := make([]*model.SqlAdminLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlAdminLogDo) FindInBatches(result *[]*model.SqlAdminLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlAdminLogDo) Attrs(attrs ...field.AssignExpr) ISqlAdminLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlAdminLogDo) Assign(attrs ...field.AssignExpr) ISqlAdminLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlAdminLogDo) Joins(fields ...field.RelationField) ISqlAdminLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlAdminLogDo) Preload(fields ...field.RelationField) ISqlAdminLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlAdminLogDo) FirstOrInit() (*model.SqlAdminLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminLog), nil
	}
}

func (s sqlAdminLogDo) FirstOrCreate() (*model.SqlAdminLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminLog), nil
	}
}

func (s sqlAdminLogDo) FindByPage(offset int, limit int) (result []*model.SqlAdminLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlAdminLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlAdminLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlAdminLogDo) Delete(models ...*model.SqlAdminLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlAdminLogDo) withDO(do gen.Dao) *sqlAdminLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
