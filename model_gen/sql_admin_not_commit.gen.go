// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlAdminNotCommit(db *gorm.DB, opts ...gen.DOOption) sqlAdminNotCommit {
	_sqlAdminNotCommit := sqlAdminNotCommit{}

	_sqlAdminNotCommit.sqlAdminNotCommitDo.UseDB(db, opts...)
	_sqlAdminNotCommit.sqlAdminNotCommitDo.UseModel(&model.SqlAdminNotCommit{})

	tableName := _sqlAdminNotCommit.sqlAdminNotCommitDo.TableName()
	_sqlAdminNotCommit.ALL = field.NewAsterisk(tableName)
	_sqlAdminNotCommit.ID = field.NewString(tableName, "id")
	_sqlAdminNotCommit.Username = field.NewString(tableName, "username")
	_sqlAdminNotCommit.Project = field.NewString(tableName, "project")
	_sqlAdminNotCommit.CreateTime = field.NewTime(tableName, "create_time")
	_sqlAdminNotCommit.NotCommitTime = field.NewInt32(tableName, "not_commit_time")
	_sqlAdminNotCommit.Comments = field.NewString(tableName, "comments")

	_sqlAdminNotCommit.fillFieldMap()

	return _sqlAdminNotCommit
}

type sqlAdminNotCommit struct {
	sqlAdminNotCommitDo

	ALL           field.Asterisk
	ID            field.String
	Username      field.String
	Project       field.String
	CreateTime    field.Time
	NotCommitTime field.Int32
	Comments      field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sqlAdminNotCommit) Table(newTableName string) *sqlAdminNotCommit {
	s.sqlAdminNotCommitDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlAdminNotCommit) As(alias string) *sqlAdminNotCommit {
	s.sqlAdminNotCommitDo.DO = *(s.sqlAdminNotCommitDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlAdminNotCommit) updateTableName(table string) *sqlAdminNotCommit {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Username = field.NewString(table, "username")
	s.Project = field.NewString(table, "project")
	s.CreateTime = field.NewTime(table, "create_time")
	s.NotCommitTime = field.NewInt32(table, "not_commit_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sqlAdminNotCommit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlAdminNotCommit) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["project"] = s.Project
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["not_commit_time"] = s.NotCommitTime
	s.fieldMap["comments"] = s.Comments
}

func (s sqlAdminNotCommit) clone(db *gorm.DB) sqlAdminNotCommit {
	s.sqlAdminNotCommitDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlAdminNotCommit) replaceDB(db *gorm.DB) sqlAdminNotCommit {
	s.sqlAdminNotCommitDo.ReplaceDB(db)
	return s
}

type sqlAdminNotCommitDo struct{ gen.DO }

type ISqlAdminNotCommitDo interface {
	gen.SubQuery
	Debug() ISqlAdminNotCommitDo
	WithContext(ctx context.Context) ISqlAdminNotCommitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlAdminNotCommitDo
	WriteDB() ISqlAdminNotCommitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlAdminNotCommitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlAdminNotCommitDo
	Not(conds ...gen.Condition) ISqlAdminNotCommitDo
	Or(conds ...gen.Condition) ISqlAdminNotCommitDo
	Select(conds ...field.Expr) ISqlAdminNotCommitDo
	Where(conds ...gen.Condition) ISqlAdminNotCommitDo
	Order(conds ...field.Expr) ISqlAdminNotCommitDo
	Distinct(cols ...field.Expr) ISqlAdminNotCommitDo
	Omit(cols ...field.Expr) ISqlAdminNotCommitDo
	Join(table schema.Tabler, on ...field.Expr) ISqlAdminNotCommitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminNotCommitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminNotCommitDo
	Group(cols ...field.Expr) ISqlAdminNotCommitDo
	Having(conds ...gen.Condition) ISqlAdminNotCommitDo
	Limit(limit int) ISqlAdminNotCommitDo
	Offset(offset int) ISqlAdminNotCommitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminNotCommitDo
	Unscoped() ISqlAdminNotCommitDo
	Create(values ...*model.SqlAdminNotCommit) error
	CreateInBatches(values []*model.SqlAdminNotCommit, batchSize int) error
	Save(values ...*model.SqlAdminNotCommit) error
	First() (*model.SqlAdminNotCommit, error)
	Take() (*model.SqlAdminNotCommit, error)
	Last() (*model.SqlAdminNotCommit, error)
	Find() ([]*model.SqlAdminNotCommit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminNotCommit, err error)
	FindInBatches(result *[]*model.SqlAdminNotCommit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlAdminNotCommit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlAdminNotCommitDo
	Assign(attrs ...field.AssignExpr) ISqlAdminNotCommitDo
	Joins(fields ...field.RelationField) ISqlAdminNotCommitDo
	Preload(fields ...field.RelationField) ISqlAdminNotCommitDo
	FirstOrInit() (*model.SqlAdminNotCommit, error)
	FirstOrCreate() (*model.SqlAdminNotCommit, error)
	FindByPage(offset int, limit int) (result []*model.SqlAdminNotCommit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlAdminNotCommitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlAdminNotCommitDo) Debug() ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlAdminNotCommitDo) WithContext(ctx context.Context) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlAdminNotCommitDo) ReadDB() ISqlAdminNotCommitDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlAdminNotCommitDo) WriteDB() ISqlAdminNotCommitDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlAdminNotCommitDo) Session(config *gorm.Session) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlAdminNotCommitDo) Clauses(conds ...clause.Expression) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlAdminNotCommitDo) Returning(value interface{}, columns ...string) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlAdminNotCommitDo) Not(conds ...gen.Condition) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlAdminNotCommitDo) Or(conds ...gen.Condition) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlAdminNotCommitDo) Select(conds ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlAdminNotCommitDo) Where(conds ...gen.Condition) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlAdminNotCommitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlAdminNotCommitDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlAdminNotCommitDo) Order(conds ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlAdminNotCommitDo) Distinct(cols ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlAdminNotCommitDo) Omit(cols ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlAdminNotCommitDo) Join(table schema.Tabler, on ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlAdminNotCommitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlAdminNotCommitDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlAdminNotCommitDo) Group(cols ...field.Expr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlAdminNotCommitDo) Having(conds ...gen.Condition) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlAdminNotCommitDo) Limit(limit int) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlAdminNotCommitDo) Offset(offset int) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlAdminNotCommitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlAdminNotCommitDo) Unscoped() ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlAdminNotCommitDo) Create(values ...*model.SqlAdminNotCommit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlAdminNotCommitDo) CreateInBatches(values []*model.SqlAdminNotCommit, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlAdminNotCommitDo) Save(values ...*model.SqlAdminNotCommit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlAdminNotCommitDo) First() (*model.SqlAdminNotCommit, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminNotCommit), nil
	}
}

func (s sqlAdminNotCommitDo) Take() (*model.SqlAdminNotCommit, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminNotCommit), nil
	}
}

func (s sqlAdminNotCommitDo) Last() (*model.SqlAdminNotCommit, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminNotCommit), nil
	}
}

func (s sqlAdminNotCommitDo) Find() ([]*model.SqlAdminNotCommit, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlAdminNotCommit), err
}

func (s sqlAdminNotCommitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminNotCommit, err error) {
	buf := make([]*model.SqlAdminNotCommit, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlAdminNotCommitDo) FindInBatches(result *[]*model.SqlAdminNotCommit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlAdminNotCommitDo) Attrs(attrs ...field.AssignExpr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlAdminNotCommitDo) Assign(attrs ...field.AssignExpr) ISqlAdminNotCommitDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlAdminNotCommitDo) Joins(fields ...field.RelationField) ISqlAdminNotCommitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlAdminNotCommitDo) Preload(fields ...field.RelationField) ISqlAdminNotCommitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlAdminNotCommitDo) FirstOrInit() (*model.SqlAdminNotCommit, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminNotCommit), nil
	}
}

func (s sqlAdminNotCommitDo) FirstOrCreate() (*model.SqlAdminNotCommit, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminNotCommit), nil
	}
}

func (s sqlAdminNotCommitDo) FindByPage(offset int, limit int) (result []*model.SqlAdminNotCommit, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlAdminNotCommitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlAdminNotCommitDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlAdminNotCommitDo) Delete(models ...*model.SqlAdminNotCommit) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlAdminNotCommitDo) withDO(do gen.Dao) *sqlAdminNotCommitDo {
	s.DO = *do.(*gen.DO)
	return s
}
