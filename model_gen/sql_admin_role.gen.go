// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlAdminRole(db *gorm.DB, opts ...gen.DOOption) sqlAdminRole {
	_sqlAdminRole := sqlAdminRole{}

	_sqlAdminRole.sqlAdminRoleDo.UseDB(db, opts...)
	_sqlAdminRole.sqlAdminRoleDo.UseModel(&model.SqlAdminRole{})

	tableName := _sqlAdminRole.sqlAdminRoleDo.TableName()
	_sqlAdminRole.ALL = field.NewAsterisk(tableName)
	_sqlAdminRole.SqlAdminRoleID = field.NewString(tableName, "sql_admin_role_id")
	_sqlAdminRole.SqlAdminRoleText = field.NewString(tableName, "sql_admin_role_text")
	_sqlAdminRole.CreateTime = field.NewTime(tableName, "create_time")
	_sqlAdminRole.ModifyTime = field.NewTime(tableName, "modify_time")
	_sqlAdminRole.Comments = field.NewString(tableName, "comments")
	_sqlAdminRole.DbUser = field.NewString(tableName, "db_user")
	_sqlAdminRole.DbPwd = field.NewString(tableName, "db_pwd")

	_sqlAdminRole.fillFieldMap()

	return _sqlAdminRole
}

type sqlAdminRole struct {
	sqlAdminRoleDo

	ALL              field.Asterisk
	SqlAdminRoleID   field.String
	SqlAdminRoleText field.String // 角色名称
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明
	DbUser           field.String // 数据库用户名称
	DbPwd            field.String

	fieldMap map[string]field.Expr
}

func (s sqlAdminRole) Table(newTableName string) *sqlAdminRole {
	s.sqlAdminRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlAdminRole) As(alias string) *sqlAdminRole {
	s.sqlAdminRoleDo.DO = *(s.sqlAdminRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlAdminRole) updateTableName(table string) *sqlAdminRole {
	s.ALL = field.NewAsterisk(table)
	s.SqlAdminRoleID = field.NewString(table, "sql_admin_role_id")
	s.SqlAdminRoleText = field.NewString(table, "sql_admin_role_text")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.DbUser = field.NewString(table, "db_user")
	s.DbPwd = field.NewString(table, "db_pwd")

	s.fillFieldMap()

	return s
}

func (s *sqlAdminRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlAdminRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["sql_admin_role_id"] = s.SqlAdminRoleID
	s.fieldMap["sql_admin_role_text"] = s.SqlAdminRoleText
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["db_user"] = s.DbUser
	s.fieldMap["db_pwd"] = s.DbPwd
}

func (s sqlAdminRole) clone(db *gorm.DB) sqlAdminRole {
	s.sqlAdminRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlAdminRole) replaceDB(db *gorm.DB) sqlAdminRole {
	s.sqlAdminRoleDo.ReplaceDB(db)
	return s
}

type sqlAdminRoleDo struct{ gen.DO }

type ISqlAdminRoleDo interface {
	gen.SubQuery
	Debug() ISqlAdminRoleDo
	WithContext(ctx context.Context) ISqlAdminRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlAdminRoleDo
	WriteDB() ISqlAdminRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlAdminRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlAdminRoleDo
	Not(conds ...gen.Condition) ISqlAdminRoleDo
	Or(conds ...gen.Condition) ISqlAdminRoleDo
	Select(conds ...field.Expr) ISqlAdminRoleDo
	Where(conds ...gen.Condition) ISqlAdminRoleDo
	Order(conds ...field.Expr) ISqlAdminRoleDo
	Distinct(cols ...field.Expr) ISqlAdminRoleDo
	Omit(cols ...field.Expr) ISqlAdminRoleDo
	Join(table schema.Tabler, on ...field.Expr) ISqlAdminRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminRoleDo
	Group(cols ...field.Expr) ISqlAdminRoleDo
	Having(conds ...gen.Condition) ISqlAdminRoleDo
	Limit(limit int) ISqlAdminRoleDo
	Offset(offset int) ISqlAdminRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminRoleDo
	Unscoped() ISqlAdminRoleDo
	Create(values ...*model.SqlAdminRole) error
	CreateInBatches(values []*model.SqlAdminRole, batchSize int) error
	Save(values ...*model.SqlAdminRole) error
	First() (*model.SqlAdminRole, error)
	Take() (*model.SqlAdminRole, error)
	Last() (*model.SqlAdminRole, error)
	Find() ([]*model.SqlAdminRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminRole, err error)
	FindInBatches(result *[]*model.SqlAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlAdminRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlAdminRoleDo
	Assign(attrs ...field.AssignExpr) ISqlAdminRoleDo
	Joins(fields ...field.RelationField) ISqlAdminRoleDo
	Preload(fields ...field.RelationField) ISqlAdminRoleDo
	FirstOrInit() (*model.SqlAdminRole, error)
	FirstOrCreate() (*model.SqlAdminRole, error)
	FindByPage(offset int, limit int) (result []*model.SqlAdminRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlAdminRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlAdminRoleDo) Debug() ISqlAdminRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlAdminRoleDo) WithContext(ctx context.Context) ISqlAdminRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlAdminRoleDo) ReadDB() ISqlAdminRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlAdminRoleDo) WriteDB() ISqlAdminRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlAdminRoleDo) Session(config *gorm.Session) ISqlAdminRoleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlAdminRoleDo) Clauses(conds ...clause.Expression) ISqlAdminRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlAdminRoleDo) Returning(value interface{}, columns ...string) ISqlAdminRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlAdminRoleDo) Not(conds ...gen.Condition) ISqlAdminRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlAdminRoleDo) Or(conds ...gen.Condition) ISqlAdminRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlAdminRoleDo) Select(conds ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlAdminRoleDo) Where(conds ...gen.Condition) ISqlAdminRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlAdminRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlAdminRoleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlAdminRoleDo) Order(conds ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlAdminRoleDo) Distinct(cols ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlAdminRoleDo) Omit(cols ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlAdminRoleDo) Join(table schema.Tabler, on ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlAdminRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlAdminRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlAdminRoleDo) Group(cols ...field.Expr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlAdminRoleDo) Having(conds ...gen.Condition) ISqlAdminRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlAdminRoleDo) Limit(limit int) ISqlAdminRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlAdminRoleDo) Offset(offset int) ISqlAdminRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlAdminRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlAdminRoleDo) Unscoped() ISqlAdminRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlAdminRoleDo) Create(values ...*model.SqlAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlAdminRoleDo) CreateInBatches(values []*model.SqlAdminRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlAdminRoleDo) Save(values ...*model.SqlAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlAdminRoleDo) First() (*model.SqlAdminRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminRole), nil
	}
}

func (s sqlAdminRoleDo) Take() (*model.SqlAdminRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminRole), nil
	}
}

func (s sqlAdminRoleDo) Last() (*model.SqlAdminRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminRole), nil
	}
}

func (s sqlAdminRoleDo) Find() ([]*model.SqlAdminRole, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlAdminRole), err
}

func (s sqlAdminRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminRole, err error) {
	buf := make([]*model.SqlAdminRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlAdminRoleDo) FindInBatches(result *[]*model.SqlAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlAdminRoleDo) Attrs(attrs ...field.AssignExpr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlAdminRoleDo) Assign(attrs ...field.AssignExpr) ISqlAdminRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlAdminRoleDo) Joins(fields ...field.RelationField) ISqlAdminRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlAdminRoleDo) Preload(fields ...field.RelationField) ISqlAdminRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlAdminRoleDo) FirstOrInit() (*model.SqlAdminRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminRole), nil
	}
}

func (s sqlAdminRoleDo) FirstOrCreate() (*model.SqlAdminRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminRole), nil
	}
}

func (s sqlAdminRoleDo) FindByPage(offset int, limit int) (result []*model.SqlAdminRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlAdminRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlAdminRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlAdminRoleDo) Delete(models ...*model.SqlAdminRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlAdminRoleDo) withDO(do gen.Dao) *sqlAdminRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
