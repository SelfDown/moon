// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlAdminSnippets(db *gorm.DB, opts ...gen.DOOption) sqlAdminSnippets {
	_sqlAdminSnippets := sqlAdminSnippets{}

	_sqlAdminSnippets.sqlAdminSnippetsDo.UseDB(db, opts...)
	_sqlAdminSnippets.sqlAdminSnippetsDo.UseModel(&model.SqlAdminSnippets{})

	tableName := _sqlAdminSnippets.sqlAdminSnippetsDo.TableName()
	_sqlAdminSnippets.ALL = field.NewAsterisk(tableName)
	_sqlAdminSnippets.ID = field.NewString(tableName, "id")
	_sqlAdminSnippets.Username = field.NewString(tableName, "username")
	_sqlAdminSnippets.Key = field.NewString(tableName, "key")
	_sqlAdminSnippets.Snippet = field.NewString(tableName, "snippet")
	_sqlAdminSnippets.CreateTime = field.NewTime(tableName, "create_time")
	_sqlAdminSnippets.Comments = field.NewString(tableName, "comments")

	_sqlAdminSnippets.fillFieldMap()

	return _sqlAdminSnippets
}

type sqlAdminSnippets struct {
	sqlAdminSnippetsDo

	ALL        field.Asterisk
	ID         field.String
	Username   field.String
	Key        field.String
	Snippet    field.String
	CreateTime field.Time
	Comments   field.String

	fieldMap map[string]field.Expr
}

func (s sqlAdminSnippets) Table(newTableName string) *sqlAdminSnippets {
	s.sqlAdminSnippetsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlAdminSnippets) As(alias string) *sqlAdminSnippets {
	s.sqlAdminSnippetsDo.DO = *(s.sqlAdminSnippetsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlAdminSnippets) updateTableName(table string) *sqlAdminSnippets {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Username = field.NewString(table, "username")
	s.Key = field.NewString(table, "key")
	s.Snippet = field.NewString(table, "snippet")
	s.CreateTime = field.NewTime(table, "create_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sqlAdminSnippets) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlAdminSnippets) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["key"] = s.Key
	s.fieldMap["snippet"] = s.Snippet
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["comments"] = s.Comments
}

func (s sqlAdminSnippets) clone(db *gorm.DB) sqlAdminSnippets {
	s.sqlAdminSnippetsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlAdminSnippets) replaceDB(db *gorm.DB) sqlAdminSnippets {
	s.sqlAdminSnippetsDo.ReplaceDB(db)
	return s
}

type sqlAdminSnippetsDo struct{ gen.DO }

type ISqlAdminSnippetsDo interface {
	gen.SubQuery
	Debug() ISqlAdminSnippetsDo
	WithContext(ctx context.Context) ISqlAdminSnippetsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlAdminSnippetsDo
	WriteDB() ISqlAdminSnippetsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlAdminSnippetsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlAdminSnippetsDo
	Not(conds ...gen.Condition) ISqlAdminSnippetsDo
	Or(conds ...gen.Condition) ISqlAdminSnippetsDo
	Select(conds ...field.Expr) ISqlAdminSnippetsDo
	Where(conds ...gen.Condition) ISqlAdminSnippetsDo
	Order(conds ...field.Expr) ISqlAdminSnippetsDo
	Distinct(cols ...field.Expr) ISqlAdminSnippetsDo
	Omit(cols ...field.Expr) ISqlAdminSnippetsDo
	Join(table schema.Tabler, on ...field.Expr) ISqlAdminSnippetsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminSnippetsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminSnippetsDo
	Group(cols ...field.Expr) ISqlAdminSnippetsDo
	Having(conds ...gen.Condition) ISqlAdminSnippetsDo
	Limit(limit int) ISqlAdminSnippetsDo
	Offset(offset int) ISqlAdminSnippetsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminSnippetsDo
	Unscoped() ISqlAdminSnippetsDo
	Create(values ...*model.SqlAdminSnippets) error
	CreateInBatches(values []*model.SqlAdminSnippets, batchSize int) error
	Save(values ...*model.SqlAdminSnippets) error
	First() (*model.SqlAdminSnippets, error)
	Take() (*model.SqlAdminSnippets, error)
	Last() (*model.SqlAdminSnippets, error)
	Find() ([]*model.SqlAdminSnippets, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminSnippets, err error)
	FindInBatches(result *[]*model.SqlAdminSnippets, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlAdminSnippets) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlAdminSnippetsDo
	Assign(attrs ...field.AssignExpr) ISqlAdminSnippetsDo
	Joins(fields ...field.RelationField) ISqlAdminSnippetsDo
	Preload(fields ...field.RelationField) ISqlAdminSnippetsDo
	FirstOrInit() (*model.SqlAdminSnippets, error)
	FirstOrCreate() (*model.SqlAdminSnippets, error)
	FindByPage(offset int, limit int) (result []*model.SqlAdminSnippets, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlAdminSnippetsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlAdminSnippetsDo) Debug() ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlAdminSnippetsDo) WithContext(ctx context.Context) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlAdminSnippetsDo) ReadDB() ISqlAdminSnippetsDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlAdminSnippetsDo) WriteDB() ISqlAdminSnippetsDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlAdminSnippetsDo) Session(config *gorm.Session) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlAdminSnippetsDo) Clauses(conds ...clause.Expression) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlAdminSnippetsDo) Returning(value interface{}, columns ...string) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlAdminSnippetsDo) Not(conds ...gen.Condition) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlAdminSnippetsDo) Or(conds ...gen.Condition) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlAdminSnippetsDo) Select(conds ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlAdminSnippetsDo) Where(conds ...gen.Condition) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlAdminSnippetsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlAdminSnippetsDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlAdminSnippetsDo) Order(conds ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlAdminSnippetsDo) Distinct(cols ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlAdminSnippetsDo) Omit(cols ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlAdminSnippetsDo) Join(table schema.Tabler, on ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlAdminSnippetsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlAdminSnippetsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlAdminSnippetsDo) Group(cols ...field.Expr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlAdminSnippetsDo) Having(conds ...gen.Condition) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlAdminSnippetsDo) Limit(limit int) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlAdminSnippetsDo) Offset(offset int) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlAdminSnippetsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlAdminSnippetsDo) Unscoped() ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlAdminSnippetsDo) Create(values ...*model.SqlAdminSnippets) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlAdminSnippetsDo) CreateInBatches(values []*model.SqlAdminSnippets, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlAdminSnippetsDo) Save(values ...*model.SqlAdminSnippets) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlAdminSnippetsDo) First() (*model.SqlAdminSnippets, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminSnippets), nil
	}
}

func (s sqlAdminSnippetsDo) Take() (*model.SqlAdminSnippets, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminSnippets), nil
	}
}

func (s sqlAdminSnippetsDo) Last() (*model.SqlAdminSnippets, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminSnippets), nil
	}
}

func (s sqlAdminSnippetsDo) Find() ([]*model.SqlAdminSnippets, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlAdminSnippets), err
}

func (s sqlAdminSnippetsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminSnippets, err error) {
	buf := make([]*model.SqlAdminSnippets, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlAdminSnippetsDo) FindInBatches(result *[]*model.SqlAdminSnippets, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlAdminSnippetsDo) Attrs(attrs ...field.AssignExpr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlAdminSnippetsDo) Assign(attrs ...field.AssignExpr) ISqlAdminSnippetsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlAdminSnippetsDo) Joins(fields ...field.RelationField) ISqlAdminSnippetsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlAdminSnippetsDo) Preload(fields ...field.RelationField) ISqlAdminSnippetsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlAdminSnippetsDo) FirstOrInit() (*model.SqlAdminSnippets, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminSnippets), nil
	}
}

func (s sqlAdminSnippetsDo) FirstOrCreate() (*model.SqlAdminSnippets, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminSnippets), nil
	}
}

func (s sqlAdminSnippetsDo) FindByPage(offset int, limit int) (result []*model.SqlAdminSnippets, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlAdminSnippetsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlAdminSnippetsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlAdminSnippetsDo) Delete(models ...*model.SqlAdminSnippets) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlAdminSnippetsDo) withDO(do gen.Dao) *sqlAdminSnippetsDo {
	s.DO = *do.(*gen.DO)
	return s
}
