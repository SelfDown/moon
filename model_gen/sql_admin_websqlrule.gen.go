// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlAdminWebsqlrule(db *gorm.DB, opts ...gen.DOOption) sqlAdminWebsqlrule {
	_sqlAdminWebsqlrule := sqlAdminWebsqlrule{}

	_sqlAdminWebsqlrule.sqlAdminWebsqlruleDo.UseDB(db, opts...)
	_sqlAdminWebsqlrule.sqlAdminWebsqlruleDo.UseModel(&model.SqlAdminWebsqlrule{})

	tableName := _sqlAdminWebsqlrule.sqlAdminWebsqlruleDo.TableName()
	_sqlAdminWebsqlrule.ALL = field.NewAsterisk(tableName)
	_sqlAdminWebsqlrule.ID = field.NewString(tableName, "id")
	_sqlAdminWebsqlrule.Username = field.NewString(tableName, "username")
	_sqlAdminWebsqlrule.Privilegetype = field.NewString(tableName, "privilegetype")
	_sqlAdminWebsqlrule.Value = field.NewString(tableName, "value")
	_sqlAdminWebsqlrule.Minvalue = field.NewString(tableName, "minvalue")
	_sqlAdminWebsqlrule.Maxvalue = field.NewString(tableName, "maxvalue")
	_sqlAdminWebsqlrule.Valid = field.NewString(tableName, "valid")
	_sqlAdminWebsqlrule.UserGroupID = field.NewString(tableName, "user_group_id")

	_sqlAdminWebsqlrule.fillFieldMap()

	return _sqlAdminWebsqlrule
}

type sqlAdminWebsqlrule struct {
	sqlAdminWebsqlruleDo

	ALL           field.Asterisk
	ID            field.String
	Username      field.String
	Privilegetype field.String
	Value         field.String
	Minvalue      field.String
	Maxvalue      field.String
	Valid         field.String
	UserGroupID   field.String

	fieldMap map[string]field.Expr
}

func (s sqlAdminWebsqlrule) Table(newTableName string) *sqlAdminWebsqlrule {
	s.sqlAdminWebsqlruleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlAdminWebsqlrule) As(alias string) *sqlAdminWebsqlrule {
	s.sqlAdminWebsqlruleDo.DO = *(s.sqlAdminWebsqlruleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlAdminWebsqlrule) updateTableName(table string) *sqlAdminWebsqlrule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Username = field.NewString(table, "username")
	s.Privilegetype = field.NewString(table, "privilegetype")
	s.Value = field.NewString(table, "value")
	s.Minvalue = field.NewString(table, "minvalue")
	s.Maxvalue = field.NewString(table, "maxvalue")
	s.Valid = field.NewString(table, "valid")
	s.UserGroupID = field.NewString(table, "user_group_id")

	s.fillFieldMap()

	return s
}

func (s *sqlAdminWebsqlrule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlAdminWebsqlrule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["privilegetype"] = s.Privilegetype
	s.fieldMap["value"] = s.Value
	s.fieldMap["minvalue"] = s.Minvalue
	s.fieldMap["maxvalue"] = s.Maxvalue
	s.fieldMap["valid"] = s.Valid
	s.fieldMap["user_group_id"] = s.UserGroupID
}

func (s sqlAdminWebsqlrule) clone(db *gorm.DB) sqlAdminWebsqlrule {
	s.sqlAdminWebsqlruleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlAdminWebsqlrule) replaceDB(db *gorm.DB) sqlAdminWebsqlrule {
	s.sqlAdminWebsqlruleDo.ReplaceDB(db)
	return s
}

type sqlAdminWebsqlruleDo struct{ gen.DO }

type ISqlAdminWebsqlruleDo interface {
	gen.SubQuery
	Debug() ISqlAdminWebsqlruleDo
	WithContext(ctx context.Context) ISqlAdminWebsqlruleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlAdminWebsqlruleDo
	WriteDB() ISqlAdminWebsqlruleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlAdminWebsqlruleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlAdminWebsqlruleDo
	Not(conds ...gen.Condition) ISqlAdminWebsqlruleDo
	Or(conds ...gen.Condition) ISqlAdminWebsqlruleDo
	Select(conds ...field.Expr) ISqlAdminWebsqlruleDo
	Where(conds ...gen.Condition) ISqlAdminWebsqlruleDo
	Order(conds ...field.Expr) ISqlAdminWebsqlruleDo
	Distinct(cols ...field.Expr) ISqlAdminWebsqlruleDo
	Omit(cols ...field.Expr) ISqlAdminWebsqlruleDo
	Join(table schema.Tabler, on ...field.Expr) ISqlAdminWebsqlruleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminWebsqlruleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminWebsqlruleDo
	Group(cols ...field.Expr) ISqlAdminWebsqlruleDo
	Having(conds ...gen.Condition) ISqlAdminWebsqlruleDo
	Limit(limit int) ISqlAdminWebsqlruleDo
	Offset(offset int) ISqlAdminWebsqlruleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminWebsqlruleDo
	Unscoped() ISqlAdminWebsqlruleDo
	Create(values ...*model.SqlAdminWebsqlrule) error
	CreateInBatches(values []*model.SqlAdminWebsqlrule, batchSize int) error
	Save(values ...*model.SqlAdminWebsqlrule) error
	First() (*model.SqlAdminWebsqlrule, error)
	Take() (*model.SqlAdminWebsqlrule, error)
	Last() (*model.SqlAdminWebsqlrule, error)
	Find() ([]*model.SqlAdminWebsqlrule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminWebsqlrule, err error)
	FindInBatches(result *[]*model.SqlAdminWebsqlrule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlAdminWebsqlrule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlAdminWebsqlruleDo
	Assign(attrs ...field.AssignExpr) ISqlAdminWebsqlruleDo
	Joins(fields ...field.RelationField) ISqlAdminWebsqlruleDo
	Preload(fields ...field.RelationField) ISqlAdminWebsqlruleDo
	FirstOrInit() (*model.SqlAdminWebsqlrule, error)
	FirstOrCreate() (*model.SqlAdminWebsqlrule, error)
	FindByPage(offset int, limit int) (result []*model.SqlAdminWebsqlrule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlAdminWebsqlruleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlAdminWebsqlruleDo) Debug() ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlAdminWebsqlruleDo) WithContext(ctx context.Context) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlAdminWebsqlruleDo) ReadDB() ISqlAdminWebsqlruleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlAdminWebsqlruleDo) WriteDB() ISqlAdminWebsqlruleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlAdminWebsqlruleDo) Session(config *gorm.Session) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlAdminWebsqlruleDo) Clauses(conds ...clause.Expression) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlAdminWebsqlruleDo) Returning(value interface{}, columns ...string) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlAdminWebsqlruleDo) Not(conds ...gen.Condition) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlAdminWebsqlruleDo) Or(conds ...gen.Condition) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlAdminWebsqlruleDo) Select(conds ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlAdminWebsqlruleDo) Where(conds ...gen.Condition) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlAdminWebsqlruleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlAdminWebsqlruleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlAdminWebsqlruleDo) Order(conds ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlAdminWebsqlruleDo) Distinct(cols ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlAdminWebsqlruleDo) Omit(cols ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlAdminWebsqlruleDo) Join(table schema.Tabler, on ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlAdminWebsqlruleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlAdminWebsqlruleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlAdminWebsqlruleDo) Group(cols ...field.Expr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlAdminWebsqlruleDo) Having(conds ...gen.Condition) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlAdminWebsqlruleDo) Limit(limit int) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlAdminWebsqlruleDo) Offset(offset int) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlAdminWebsqlruleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlAdminWebsqlruleDo) Unscoped() ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlAdminWebsqlruleDo) Create(values ...*model.SqlAdminWebsqlrule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlAdminWebsqlruleDo) CreateInBatches(values []*model.SqlAdminWebsqlrule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlAdminWebsqlruleDo) Save(values ...*model.SqlAdminWebsqlrule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlAdminWebsqlruleDo) First() (*model.SqlAdminWebsqlrule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminWebsqlrule), nil
	}
}

func (s sqlAdminWebsqlruleDo) Take() (*model.SqlAdminWebsqlrule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminWebsqlrule), nil
	}
}

func (s sqlAdminWebsqlruleDo) Last() (*model.SqlAdminWebsqlrule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminWebsqlrule), nil
	}
}

func (s sqlAdminWebsqlruleDo) Find() ([]*model.SqlAdminWebsqlrule, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlAdminWebsqlrule), err
}

func (s sqlAdminWebsqlruleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlAdminWebsqlrule, err error) {
	buf := make([]*model.SqlAdminWebsqlrule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlAdminWebsqlruleDo) FindInBatches(result *[]*model.SqlAdminWebsqlrule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlAdminWebsqlruleDo) Attrs(attrs ...field.AssignExpr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlAdminWebsqlruleDo) Assign(attrs ...field.AssignExpr) ISqlAdminWebsqlruleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlAdminWebsqlruleDo) Joins(fields ...field.RelationField) ISqlAdminWebsqlruleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlAdminWebsqlruleDo) Preload(fields ...field.RelationField) ISqlAdminWebsqlruleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlAdminWebsqlruleDo) FirstOrInit() (*model.SqlAdminWebsqlrule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminWebsqlrule), nil
	}
}

func (s sqlAdminWebsqlruleDo) FirstOrCreate() (*model.SqlAdminWebsqlrule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlAdminWebsqlrule), nil
	}
}

func (s sqlAdminWebsqlruleDo) FindByPage(offset int, limit int) (result []*model.SqlAdminWebsqlrule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlAdminWebsqlruleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlAdminWebsqlruleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlAdminWebsqlruleDo) Delete(models ...*model.SqlAdminWebsqlrule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlAdminWebsqlruleDo) withDO(do gen.Dao) *sqlAdminWebsqlruleDo {
	s.DO = *do.(*gen.DO)
	return s
}
