// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlScript(db *gorm.DB, opts ...gen.DOOption) sqlScript {
	_sqlScript := sqlScript{}

	_sqlScript.sqlScriptDo.UseDB(db, opts...)
	_sqlScript.sqlScriptDo.UseModel(&model.SqlScript{})

	tableName := _sqlScript.sqlScriptDo.TableName()
	_sqlScript.ALL = field.NewAsterisk(tableName)
	_sqlScript.SqlScriptID = field.NewString(tableName, "sql_script_id")
	_sqlScript.Title = field.NewString(tableName, "title")
	_sqlScript.ProjectID = field.NewString(tableName, "project_id")
	_sqlScript.ProductModule = field.NewString(tableName, "product_module")
	_sqlScript.Code = field.NewString(tableName, "code")
	_sqlScript.Content = field.NewString(tableName, "content")
	_sqlScript.CreateTime = field.NewString(tableName, "create_time")
	_sqlScript.ModifyTime = field.NewString(tableName, "modify_time")
	_sqlScript.OpUser = field.NewString(tableName, "op_user")
	_sqlScript.Status = field.NewString(tableName, "status")
	_sqlScript.IsDelete = field.NewString(tableName, "is_delete")
	_sqlScript.BackContent = field.NewString(tableName, "back_content")
	_sqlScript.PrinUser = field.NewString(tableName, "prin_user")
	_sqlScript.CreateUser = field.NewString(tableName, "create_user")
	_sqlScript.IsSysParam = field.NewString(tableName, "is_sys_param")

	_sqlScript.fillFieldMap()

	return _sqlScript
}

type sqlScript struct {
	sqlScriptDo

	ALL           field.Asterisk
	SqlScriptID   field.String
	Title         field.String
	ProjectID     field.String
	ProductModule field.String
	Code          field.String
	Content       field.String
	CreateTime    field.String
	ModifyTime    field.String
	OpUser        field.String
	Status        field.String
	IsDelete      field.String
	BackContent   field.String // 回退脚本
	PrinUser      field.String // 负责人
	CreateUser    field.String // 创建人
	IsSysParam    field.String

	fieldMap map[string]field.Expr
}

func (s sqlScript) Table(newTableName string) *sqlScript {
	s.sqlScriptDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlScript) As(alias string) *sqlScript {
	s.sqlScriptDo.DO = *(s.sqlScriptDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlScript) updateTableName(table string) *sqlScript {
	s.ALL = field.NewAsterisk(table)
	s.SqlScriptID = field.NewString(table, "sql_script_id")
	s.Title = field.NewString(table, "title")
	s.ProjectID = field.NewString(table, "project_id")
	s.ProductModule = field.NewString(table, "product_module")
	s.Code = field.NewString(table, "code")
	s.Content = field.NewString(table, "content")
	s.CreateTime = field.NewString(table, "create_time")
	s.ModifyTime = field.NewString(table, "modify_time")
	s.OpUser = field.NewString(table, "op_user")
	s.Status = field.NewString(table, "status")
	s.IsDelete = field.NewString(table, "is_delete")
	s.BackContent = field.NewString(table, "back_content")
	s.PrinUser = field.NewString(table, "prin_user")
	s.CreateUser = field.NewString(table, "create_user")
	s.IsSysParam = field.NewString(table, "is_sys_param")

	s.fillFieldMap()

	return s
}

func (s *sqlScript) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlScript) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["sql_script_id"] = s.SqlScriptID
	s.fieldMap["title"] = s.Title
	s.fieldMap["project_id"] = s.ProjectID
	s.fieldMap["product_module"] = s.ProductModule
	s.fieldMap["code"] = s.Code
	s.fieldMap["content"] = s.Content
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["op_user"] = s.OpUser
	s.fieldMap["status"] = s.Status
	s.fieldMap["is_delete"] = s.IsDelete
	s.fieldMap["back_content"] = s.BackContent
	s.fieldMap["prin_user"] = s.PrinUser
	s.fieldMap["create_user"] = s.CreateUser
	s.fieldMap["is_sys_param"] = s.IsSysParam
}

func (s sqlScript) clone(db *gorm.DB) sqlScript {
	s.sqlScriptDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlScript) replaceDB(db *gorm.DB) sqlScript {
	s.sqlScriptDo.ReplaceDB(db)
	return s
}

type sqlScriptDo struct{ gen.DO }

type ISqlScriptDo interface {
	gen.SubQuery
	Debug() ISqlScriptDo
	WithContext(ctx context.Context) ISqlScriptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlScriptDo
	WriteDB() ISqlScriptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlScriptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlScriptDo
	Not(conds ...gen.Condition) ISqlScriptDo
	Or(conds ...gen.Condition) ISqlScriptDo
	Select(conds ...field.Expr) ISqlScriptDo
	Where(conds ...gen.Condition) ISqlScriptDo
	Order(conds ...field.Expr) ISqlScriptDo
	Distinct(cols ...field.Expr) ISqlScriptDo
	Omit(cols ...field.Expr) ISqlScriptDo
	Join(table schema.Tabler, on ...field.Expr) ISqlScriptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlScriptDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlScriptDo
	Group(cols ...field.Expr) ISqlScriptDo
	Having(conds ...gen.Condition) ISqlScriptDo
	Limit(limit int) ISqlScriptDo
	Offset(offset int) ISqlScriptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlScriptDo
	Unscoped() ISqlScriptDo
	Create(values ...*model.SqlScript) error
	CreateInBatches(values []*model.SqlScript, batchSize int) error
	Save(values ...*model.SqlScript) error
	First() (*model.SqlScript, error)
	Take() (*model.SqlScript, error)
	Last() (*model.SqlScript, error)
	Find() ([]*model.SqlScript, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlScript, err error)
	FindInBatches(result *[]*model.SqlScript, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlScript) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlScriptDo
	Assign(attrs ...field.AssignExpr) ISqlScriptDo
	Joins(fields ...field.RelationField) ISqlScriptDo
	Preload(fields ...field.RelationField) ISqlScriptDo
	FirstOrInit() (*model.SqlScript, error)
	FirstOrCreate() (*model.SqlScript, error)
	FindByPage(offset int, limit int) (result []*model.SqlScript, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlScriptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlScriptDo) Debug() ISqlScriptDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlScriptDo) WithContext(ctx context.Context) ISqlScriptDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlScriptDo) ReadDB() ISqlScriptDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlScriptDo) WriteDB() ISqlScriptDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlScriptDo) Session(config *gorm.Session) ISqlScriptDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlScriptDo) Clauses(conds ...clause.Expression) ISqlScriptDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlScriptDo) Returning(value interface{}, columns ...string) ISqlScriptDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlScriptDo) Not(conds ...gen.Condition) ISqlScriptDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlScriptDo) Or(conds ...gen.Condition) ISqlScriptDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlScriptDo) Select(conds ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlScriptDo) Where(conds ...gen.Condition) ISqlScriptDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlScriptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlScriptDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlScriptDo) Order(conds ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlScriptDo) Distinct(cols ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlScriptDo) Omit(cols ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlScriptDo) Join(table schema.Tabler, on ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlScriptDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlScriptDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlScriptDo) Group(cols ...field.Expr) ISqlScriptDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlScriptDo) Having(conds ...gen.Condition) ISqlScriptDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlScriptDo) Limit(limit int) ISqlScriptDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlScriptDo) Offset(offset int) ISqlScriptDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlScriptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlScriptDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlScriptDo) Unscoped() ISqlScriptDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlScriptDo) Create(values ...*model.SqlScript) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlScriptDo) CreateInBatches(values []*model.SqlScript, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlScriptDo) Save(values ...*model.SqlScript) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlScriptDo) First() (*model.SqlScript, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScript), nil
	}
}

func (s sqlScriptDo) Take() (*model.SqlScript, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScript), nil
	}
}

func (s sqlScriptDo) Last() (*model.SqlScript, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScript), nil
	}
}

func (s sqlScriptDo) Find() ([]*model.SqlScript, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlScript), err
}

func (s sqlScriptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlScript, err error) {
	buf := make([]*model.SqlScript, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlScriptDo) FindInBatches(result *[]*model.SqlScript, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlScriptDo) Attrs(attrs ...field.AssignExpr) ISqlScriptDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlScriptDo) Assign(attrs ...field.AssignExpr) ISqlScriptDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlScriptDo) Joins(fields ...field.RelationField) ISqlScriptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlScriptDo) Preload(fields ...field.RelationField) ISqlScriptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlScriptDo) FirstOrInit() (*model.SqlScript, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScript), nil
	}
}

func (s sqlScriptDo) FirstOrCreate() (*model.SqlScript, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScript), nil
	}
}

func (s sqlScriptDo) FindByPage(offset int, limit int) (result []*model.SqlScript, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlScriptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlScriptDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlScriptDo) Delete(models ...*model.SqlScript) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlScriptDo) withDO(do gen.Dao) *sqlScriptDo {
	s.DO = *do.(*gen.DO)
	return s
}
