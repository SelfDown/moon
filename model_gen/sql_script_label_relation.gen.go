// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSqlScriptLabelRelation(db *gorm.DB, opts ...gen.DOOption) sqlScriptLabelRelation {
	_sqlScriptLabelRelation := sqlScriptLabelRelation{}

	_sqlScriptLabelRelation.sqlScriptLabelRelationDo.UseDB(db, opts...)
	_sqlScriptLabelRelation.sqlScriptLabelRelationDo.UseModel(&model.SqlScriptLabelRelation{})

	tableName := _sqlScriptLabelRelation.sqlScriptLabelRelationDo.TableName()
	_sqlScriptLabelRelation.ALL = field.NewAsterisk(tableName)
	_sqlScriptLabelRelation.Label = field.NewString(tableName, "label")
	_sqlScriptLabelRelation.SqlScriptID = field.NewString(tableName, "sql_script_id")
	_sqlScriptLabelRelation.SqlScriptLabelRelationID = field.NewString(tableName, "sql_script_label_relation_id")
	_sqlScriptLabelRelation.CreateTime = field.NewTime(tableName, "create_time")

	_sqlScriptLabelRelation.fillFieldMap()

	return _sqlScriptLabelRelation
}

type sqlScriptLabelRelation struct {
	sqlScriptLabelRelationDo

	ALL                      field.Asterisk
	Label                    field.String
	SqlScriptID              field.String
	SqlScriptLabelRelationID field.String
	CreateTime               field.Time // 记录创建时间（数据库自动写入）

	fieldMap map[string]field.Expr
}

func (s sqlScriptLabelRelation) Table(newTableName string) *sqlScriptLabelRelation {
	s.sqlScriptLabelRelationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sqlScriptLabelRelation) As(alias string) *sqlScriptLabelRelation {
	s.sqlScriptLabelRelationDo.DO = *(s.sqlScriptLabelRelationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sqlScriptLabelRelation) updateTableName(table string) *sqlScriptLabelRelation {
	s.ALL = field.NewAsterisk(table)
	s.Label = field.NewString(table, "label")
	s.SqlScriptID = field.NewString(table, "sql_script_id")
	s.SqlScriptLabelRelationID = field.NewString(table, "sql_script_label_relation_id")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *sqlScriptLabelRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sqlScriptLabelRelation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["label"] = s.Label
	s.fieldMap["sql_script_id"] = s.SqlScriptID
	s.fieldMap["sql_script_label_relation_id"] = s.SqlScriptLabelRelationID
	s.fieldMap["create_time"] = s.CreateTime
}

func (s sqlScriptLabelRelation) clone(db *gorm.DB) sqlScriptLabelRelation {
	s.sqlScriptLabelRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sqlScriptLabelRelation) replaceDB(db *gorm.DB) sqlScriptLabelRelation {
	s.sqlScriptLabelRelationDo.ReplaceDB(db)
	return s
}

type sqlScriptLabelRelationDo struct{ gen.DO }

type ISqlScriptLabelRelationDo interface {
	gen.SubQuery
	Debug() ISqlScriptLabelRelationDo
	WithContext(ctx context.Context) ISqlScriptLabelRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISqlScriptLabelRelationDo
	WriteDB() ISqlScriptLabelRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISqlScriptLabelRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISqlScriptLabelRelationDo
	Not(conds ...gen.Condition) ISqlScriptLabelRelationDo
	Or(conds ...gen.Condition) ISqlScriptLabelRelationDo
	Select(conds ...field.Expr) ISqlScriptLabelRelationDo
	Where(conds ...gen.Condition) ISqlScriptLabelRelationDo
	Order(conds ...field.Expr) ISqlScriptLabelRelationDo
	Distinct(cols ...field.Expr) ISqlScriptLabelRelationDo
	Omit(cols ...field.Expr) ISqlScriptLabelRelationDo
	Join(table schema.Tabler, on ...field.Expr) ISqlScriptLabelRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISqlScriptLabelRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISqlScriptLabelRelationDo
	Group(cols ...field.Expr) ISqlScriptLabelRelationDo
	Having(conds ...gen.Condition) ISqlScriptLabelRelationDo
	Limit(limit int) ISqlScriptLabelRelationDo
	Offset(offset int) ISqlScriptLabelRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlScriptLabelRelationDo
	Unscoped() ISqlScriptLabelRelationDo
	Create(values ...*model.SqlScriptLabelRelation) error
	CreateInBatches(values []*model.SqlScriptLabelRelation, batchSize int) error
	Save(values ...*model.SqlScriptLabelRelation) error
	First() (*model.SqlScriptLabelRelation, error)
	Take() (*model.SqlScriptLabelRelation, error)
	Last() (*model.SqlScriptLabelRelation, error)
	Find() ([]*model.SqlScriptLabelRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlScriptLabelRelation, err error)
	FindInBatches(result *[]*model.SqlScriptLabelRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SqlScriptLabelRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISqlScriptLabelRelationDo
	Assign(attrs ...field.AssignExpr) ISqlScriptLabelRelationDo
	Joins(fields ...field.RelationField) ISqlScriptLabelRelationDo
	Preload(fields ...field.RelationField) ISqlScriptLabelRelationDo
	FirstOrInit() (*model.SqlScriptLabelRelation, error)
	FirstOrCreate() (*model.SqlScriptLabelRelation, error)
	FindByPage(offset int, limit int) (result []*model.SqlScriptLabelRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISqlScriptLabelRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sqlScriptLabelRelationDo) Debug() ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Debug())
}

func (s sqlScriptLabelRelationDo) WithContext(ctx context.Context) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sqlScriptLabelRelationDo) ReadDB() ISqlScriptLabelRelationDo {
	return s.Clauses(dbresolver.Read)
}

func (s sqlScriptLabelRelationDo) WriteDB() ISqlScriptLabelRelationDo {
	return s.Clauses(dbresolver.Write)
}

func (s sqlScriptLabelRelationDo) Session(config *gorm.Session) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Session(config))
}

func (s sqlScriptLabelRelationDo) Clauses(conds ...clause.Expression) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sqlScriptLabelRelationDo) Returning(value interface{}, columns ...string) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sqlScriptLabelRelationDo) Not(conds ...gen.Condition) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sqlScriptLabelRelationDo) Or(conds ...gen.Condition) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sqlScriptLabelRelationDo) Select(conds ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sqlScriptLabelRelationDo) Where(conds ...gen.Condition) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sqlScriptLabelRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISqlScriptLabelRelationDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sqlScriptLabelRelationDo) Order(conds ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sqlScriptLabelRelationDo) Distinct(cols ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sqlScriptLabelRelationDo) Omit(cols ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sqlScriptLabelRelationDo) Join(table schema.Tabler, on ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sqlScriptLabelRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sqlScriptLabelRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sqlScriptLabelRelationDo) Group(cols ...field.Expr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sqlScriptLabelRelationDo) Having(conds ...gen.Condition) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sqlScriptLabelRelationDo) Limit(limit int) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sqlScriptLabelRelationDo) Offset(offset int) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sqlScriptLabelRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sqlScriptLabelRelationDo) Unscoped() ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sqlScriptLabelRelationDo) Create(values ...*model.SqlScriptLabelRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sqlScriptLabelRelationDo) CreateInBatches(values []*model.SqlScriptLabelRelation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sqlScriptLabelRelationDo) Save(values ...*model.SqlScriptLabelRelation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sqlScriptLabelRelationDo) First() (*model.SqlScriptLabelRelation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScriptLabelRelation), nil
	}
}

func (s sqlScriptLabelRelationDo) Take() (*model.SqlScriptLabelRelation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScriptLabelRelation), nil
	}
}

func (s sqlScriptLabelRelationDo) Last() (*model.SqlScriptLabelRelation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScriptLabelRelation), nil
	}
}

func (s sqlScriptLabelRelationDo) Find() ([]*model.SqlScriptLabelRelation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SqlScriptLabelRelation), err
}

func (s sqlScriptLabelRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SqlScriptLabelRelation, err error) {
	buf := make([]*model.SqlScriptLabelRelation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sqlScriptLabelRelationDo) FindInBatches(result *[]*model.SqlScriptLabelRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sqlScriptLabelRelationDo) Attrs(attrs ...field.AssignExpr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sqlScriptLabelRelationDo) Assign(attrs ...field.AssignExpr) ISqlScriptLabelRelationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sqlScriptLabelRelationDo) Joins(fields ...field.RelationField) ISqlScriptLabelRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sqlScriptLabelRelationDo) Preload(fields ...field.RelationField) ISqlScriptLabelRelationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sqlScriptLabelRelationDo) FirstOrInit() (*model.SqlScriptLabelRelation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScriptLabelRelation), nil
	}
}

func (s sqlScriptLabelRelationDo) FirstOrCreate() (*model.SqlScriptLabelRelation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SqlScriptLabelRelation), nil
	}
}

func (s sqlScriptLabelRelationDo) FindByPage(offset int, limit int) (result []*model.SqlScriptLabelRelation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sqlScriptLabelRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sqlScriptLabelRelationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sqlScriptLabelRelationDo) Delete(models ...*model.SqlScriptLabelRelation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sqlScriptLabelRelationDo) withDO(do gen.Dao) *sqlScriptLabelRelationDo {
	s.DO = *do.(*gen.DO)
	return s
}
