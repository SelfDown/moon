// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysCommonConfig(db *gorm.DB, opts ...gen.DOOption) sysCommonConfig {
	_sysCommonConfig := sysCommonConfig{}

	_sysCommonConfig.sysCommonConfigDo.UseDB(db, opts...)
	_sysCommonConfig.sysCommonConfigDo.UseModel(&model.SysCommonConfig{})

	tableName := _sysCommonConfig.sysCommonConfigDo.TableName()
	_sysCommonConfig.ALL = field.NewAsterisk(tableName)
	_sysCommonConfig.SysCommonConfigID = field.NewString(tableName, "sys_common_config_id")
	_sysCommonConfig.ProjectID = field.NewString(tableName, "project_id")
	_sysCommonConfig.Key = field.NewString(tableName, "key")
	_sysCommonConfig.Value = field.NewString(tableName, "value")
	_sysCommonConfig.Type = field.NewString(tableName, "type")
	_sysCommonConfig.Comment = field.NewString(tableName, "comment")

	_sysCommonConfig.fillFieldMap()

	return _sysCommonConfig
}

type sysCommonConfig struct {
	sysCommonConfigDo

	ALL               field.Asterisk
	SysCommonConfigID field.String
	ProjectID         field.String // 项目ID
	Key               field.String // 键
	Value             field.String // 值
	Type              field.String // 类型 json或者字符串
	Comment           field.String // 备注

	fieldMap map[string]field.Expr
}

func (s sysCommonConfig) Table(newTableName string) *sysCommonConfig {
	s.sysCommonConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCommonConfig) As(alias string) *sysCommonConfig {
	s.sysCommonConfigDo.DO = *(s.sysCommonConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCommonConfig) updateTableName(table string) *sysCommonConfig {
	s.ALL = field.NewAsterisk(table)
	s.SysCommonConfigID = field.NewString(table, "sys_common_config_id")
	s.ProjectID = field.NewString(table, "project_id")
	s.Key = field.NewString(table, "key")
	s.Value = field.NewString(table, "value")
	s.Type = field.NewString(table, "type")
	s.Comment = field.NewString(table, "comment")

	s.fillFieldMap()

	return s
}

func (s *sysCommonConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCommonConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["sys_common_config_id"] = s.SysCommonConfigID
	s.fieldMap["project_id"] = s.ProjectID
	s.fieldMap["key"] = s.Key
	s.fieldMap["value"] = s.Value
	s.fieldMap["type"] = s.Type
	s.fieldMap["comment"] = s.Comment
}

func (s sysCommonConfig) clone(db *gorm.DB) sysCommonConfig {
	s.sysCommonConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCommonConfig) replaceDB(db *gorm.DB) sysCommonConfig {
	s.sysCommonConfigDo.ReplaceDB(db)
	return s
}

type sysCommonConfigDo struct{ gen.DO }

type ISysCommonConfigDo interface {
	gen.SubQuery
	Debug() ISysCommonConfigDo
	WithContext(ctx context.Context) ISysCommonConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysCommonConfigDo
	WriteDB() ISysCommonConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysCommonConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysCommonConfigDo
	Not(conds ...gen.Condition) ISysCommonConfigDo
	Or(conds ...gen.Condition) ISysCommonConfigDo
	Select(conds ...field.Expr) ISysCommonConfigDo
	Where(conds ...gen.Condition) ISysCommonConfigDo
	Order(conds ...field.Expr) ISysCommonConfigDo
	Distinct(cols ...field.Expr) ISysCommonConfigDo
	Omit(cols ...field.Expr) ISysCommonConfigDo
	Join(table schema.Tabler, on ...field.Expr) ISysCommonConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysCommonConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysCommonConfigDo
	Group(cols ...field.Expr) ISysCommonConfigDo
	Having(conds ...gen.Condition) ISysCommonConfigDo
	Limit(limit int) ISysCommonConfigDo
	Offset(offset int) ISysCommonConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCommonConfigDo
	Unscoped() ISysCommonConfigDo
	Create(values ...*model.SysCommonConfig) error
	CreateInBatches(values []*model.SysCommonConfig, batchSize int) error
	Save(values ...*model.SysCommonConfig) error
	First() (*model.SysCommonConfig, error)
	Take() (*model.SysCommonConfig, error)
	Last() (*model.SysCommonConfig, error)
	Find() ([]*model.SysCommonConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCommonConfig, err error)
	FindInBatches(result *[]*model.SysCommonConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysCommonConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysCommonConfigDo
	Assign(attrs ...field.AssignExpr) ISysCommonConfigDo
	Joins(fields ...field.RelationField) ISysCommonConfigDo
	Preload(fields ...field.RelationField) ISysCommonConfigDo
	FirstOrInit() (*model.SysCommonConfig, error)
	FirstOrCreate() (*model.SysCommonConfig, error)
	FindByPage(offset int, limit int) (result []*model.SysCommonConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysCommonConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysCommonConfigDo) Debug() ISysCommonConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCommonConfigDo) WithContext(ctx context.Context) ISysCommonConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCommonConfigDo) ReadDB() ISysCommonConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCommonConfigDo) WriteDB() ISysCommonConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCommonConfigDo) Session(config *gorm.Session) ISysCommonConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCommonConfigDo) Clauses(conds ...clause.Expression) ISysCommonConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCommonConfigDo) Returning(value interface{}, columns ...string) ISysCommonConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCommonConfigDo) Not(conds ...gen.Condition) ISysCommonConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCommonConfigDo) Or(conds ...gen.Condition) ISysCommonConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCommonConfigDo) Select(conds ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCommonConfigDo) Where(conds ...gen.Condition) ISysCommonConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCommonConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysCommonConfigDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysCommonConfigDo) Order(conds ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCommonConfigDo) Distinct(cols ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCommonConfigDo) Omit(cols ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCommonConfigDo) Join(table schema.Tabler, on ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCommonConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCommonConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCommonConfigDo) Group(cols ...field.Expr) ISysCommonConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCommonConfigDo) Having(conds ...gen.Condition) ISysCommonConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCommonConfigDo) Limit(limit int) ISysCommonConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCommonConfigDo) Offset(offset int) ISysCommonConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCommonConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCommonConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCommonConfigDo) Unscoped() ISysCommonConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCommonConfigDo) Create(values ...*model.SysCommonConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCommonConfigDo) CreateInBatches(values []*model.SysCommonConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCommonConfigDo) Save(values ...*model.SysCommonConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCommonConfigDo) First() (*model.SysCommonConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCommonConfig), nil
	}
}

func (s sysCommonConfigDo) Take() (*model.SysCommonConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCommonConfig), nil
	}
}

func (s sysCommonConfigDo) Last() (*model.SysCommonConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCommonConfig), nil
	}
}

func (s sysCommonConfigDo) Find() ([]*model.SysCommonConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCommonConfig), err
}

func (s sysCommonConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCommonConfig, err error) {
	buf := make([]*model.SysCommonConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCommonConfigDo) FindInBatches(result *[]*model.SysCommonConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCommonConfigDo) Attrs(attrs ...field.AssignExpr) ISysCommonConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCommonConfigDo) Assign(attrs ...field.AssignExpr) ISysCommonConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCommonConfigDo) Joins(fields ...field.RelationField) ISysCommonConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCommonConfigDo) Preload(fields ...field.RelationField) ISysCommonConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCommonConfigDo) FirstOrInit() (*model.SysCommonConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCommonConfig), nil
	}
}

func (s sysCommonConfigDo) FirstOrCreate() (*model.SysCommonConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCommonConfig), nil
	}
}

func (s sysCommonConfigDo) FindByPage(offset int, limit int) (result []*model.SysCommonConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCommonConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCommonConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCommonConfigDo) Delete(models ...*model.SysCommonConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCommonConfigDo) withDO(do gen.Dao) *sysCommonConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
