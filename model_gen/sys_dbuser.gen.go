// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysDbuser(db *gorm.DB, opts ...gen.DOOption) sysDbuser {
	_sysDbuser := sysDbuser{}

	_sysDbuser.sysDbuserDo.UseDB(db, opts...)
	_sysDbuser.sysDbuserDo.UseModel(&model.SysDbuser{})

	tableName := _sysDbuser.sysDbuserDo.TableName()
	_sysDbuser.ALL = field.NewAsterisk(tableName)
	_sysDbuser.SysDbuserID = field.NewString(tableName, "sys_dbuser_id")
	_sysDbuser.DbuserValue = field.NewString(tableName, "dbuser_value")
	_sysDbuser.DbuserText = field.NewString(tableName, "dbuser_text")
	_sysDbuser.Note = field.NewString(tableName, "note")
	_sysDbuser.SysProjectTeamID = field.NewString(tableName, "sys_project_team_id")
	_sysDbuser.CreateTime = field.NewTime(tableName, "create_time")
	_sysDbuser.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysDbuser.Comments = field.NewString(tableName, "comments")

	_sysDbuser.fillFieldMap()

	return _sysDbuser
}

type sysDbuser struct {
	sysDbuserDo

	ALL              field.Asterisk
	SysDbuserID      field.String
	DbuserValue      field.String
	DbuserText       field.String
	Note             field.String
	SysProjectTeamID field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sysDbuser) Table(newTableName string) *sysDbuser {
	s.sysDbuserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDbuser) As(alias string) *sysDbuser {
	s.sysDbuserDo.DO = *(s.sysDbuserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDbuser) updateTableName(table string) *sysDbuser {
	s.ALL = field.NewAsterisk(table)
	s.SysDbuserID = field.NewString(table, "sys_dbuser_id")
	s.DbuserValue = field.NewString(table, "dbuser_value")
	s.DbuserText = field.NewString(table, "dbuser_text")
	s.Note = field.NewString(table, "note")
	s.SysProjectTeamID = field.NewString(table, "sys_project_team_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sysDbuser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDbuser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["sys_dbuser_id"] = s.SysDbuserID
	s.fieldMap["dbuser_value"] = s.DbuserValue
	s.fieldMap["dbuser_text"] = s.DbuserText
	s.fieldMap["note"] = s.Note
	s.fieldMap["sys_project_team_id"] = s.SysProjectTeamID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s sysDbuser) clone(db *gorm.DB) sysDbuser {
	s.sysDbuserDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDbuser) replaceDB(db *gorm.DB) sysDbuser {
	s.sysDbuserDo.ReplaceDB(db)
	return s
}

type sysDbuserDo struct{ gen.DO }

type ISysDbuserDo interface {
	gen.SubQuery
	Debug() ISysDbuserDo
	WithContext(ctx context.Context) ISysDbuserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDbuserDo
	WriteDB() ISysDbuserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDbuserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDbuserDo
	Not(conds ...gen.Condition) ISysDbuserDo
	Or(conds ...gen.Condition) ISysDbuserDo
	Select(conds ...field.Expr) ISysDbuserDo
	Where(conds ...gen.Condition) ISysDbuserDo
	Order(conds ...field.Expr) ISysDbuserDo
	Distinct(cols ...field.Expr) ISysDbuserDo
	Omit(cols ...field.Expr) ISysDbuserDo
	Join(table schema.Tabler, on ...field.Expr) ISysDbuserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDbuserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDbuserDo
	Group(cols ...field.Expr) ISysDbuserDo
	Having(conds ...gen.Condition) ISysDbuserDo
	Limit(limit int) ISysDbuserDo
	Offset(offset int) ISysDbuserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDbuserDo
	Unscoped() ISysDbuserDo
	Create(values ...*model.SysDbuser) error
	CreateInBatches(values []*model.SysDbuser, batchSize int) error
	Save(values ...*model.SysDbuser) error
	First() (*model.SysDbuser, error)
	Take() (*model.SysDbuser, error)
	Last() (*model.SysDbuser, error)
	Find() ([]*model.SysDbuser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDbuser, err error)
	FindInBatches(result *[]*model.SysDbuser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDbuser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDbuserDo
	Assign(attrs ...field.AssignExpr) ISysDbuserDo
	Joins(fields ...field.RelationField) ISysDbuserDo
	Preload(fields ...field.RelationField) ISysDbuserDo
	FirstOrInit() (*model.SysDbuser, error)
	FirstOrCreate() (*model.SysDbuser, error)
	FindByPage(offset int, limit int) (result []*model.SysDbuser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDbuserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDbuserDo) Debug() ISysDbuserDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDbuserDo) WithContext(ctx context.Context) ISysDbuserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDbuserDo) ReadDB() ISysDbuserDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDbuserDo) WriteDB() ISysDbuserDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDbuserDo) Session(config *gorm.Session) ISysDbuserDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDbuserDo) Clauses(conds ...clause.Expression) ISysDbuserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDbuserDo) Returning(value interface{}, columns ...string) ISysDbuserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDbuserDo) Not(conds ...gen.Condition) ISysDbuserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDbuserDo) Or(conds ...gen.Condition) ISysDbuserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDbuserDo) Select(conds ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDbuserDo) Where(conds ...gen.Condition) ISysDbuserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDbuserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysDbuserDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysDbuserDo) Order(conds ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDbuserDo) Distinct(cols ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDbuserDo) Omit(cols ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDbuserDo) Join(table schema.Tabler, on ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDbuserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDbuserDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDbuserDo) Group(cols ...field.Expr) ISysDbuserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDbuserDo) Having(conds ...gen.Condition) ISysDbuserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDbuserDo) Limit(limit int) ISysDbuserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDbuserDo) Offset(offset int) ISysDbuserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDbuserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDbuserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDbuserDo) Unscoped() ISysDbuserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDbuserDo) Create(values ...*model.SysDbuser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDbuserDo) CreateInBatches(values []*model.SysDbuser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDbuserDo) Save(values ...*model.SysDbuser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDbuserDo) First() (*model.SysDbuser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDbuser), nil
	}
}

func (s sysDbuserDo) Take() (*model.SysDbuser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDbuser), nil
	}
}

func (s sysDbuserDo) Last() (*model.SysDbuser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDbuser), nil
	}
}

func (s sysDbuserDo) Find() ([]*model.SysDbuser, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDbuser), err
}

func (s sysDbuserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDbuser, err error) {
	buf := make([]*model.SysDbuser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDbuserDo) FindInBatches(result *[]*model.SysDbuser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDbuserDo) Attrs(attrs ...field.AssignExpr) ISysDbuserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDbuserDo) Assign(attrs ...field.AssignExpr) ISysDbuserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDbuserDo) Joins(fields ...field.RelationField) ISysDbuserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDbuserDo) Preload(fields ...field.RelationField) ISysDbuserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDbuserDo) FirstOrInit() (*model.SysDbuser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDbuser), nil
	}
}

func (s sysDbuserDo) FirstOrCreate() (*model.SysDbuser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDbuser), nil
	}
}

func (s sysDbuserDo) FindByPage(offset int, limit int) (result []*model.SysDbuser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDbuserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDbuserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDbuserDo) Delete(models ...*model.SysDbuser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDbuserDo) withDO(do gen.Dao) *sysDbuserDo {
	s.DO = *do.(*gen.DO)
	return s
}
