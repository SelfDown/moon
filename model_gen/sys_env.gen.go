// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysEnv(db *gorm.DB, opts ...gen.DOOption) sysEnv {
	_sysEnv := sysEnv{}

	_sysEnv.sysEnvDo.UseDB(db, opts...)
	_sysEnv.sysEnvDo.UseModel(&model.SysEnv{})

	tableName := _sysEnv.sysEnvDo.TableName()
	_sysEnv.ALL = field.NewAsterisk(tableName)
	_sysEnv.EnvCode = field.NewString(tableName, "env_code")
	_sysEnv.EnvName = field.NewString(tableName, "env_name")
	_sysEnv.EnvNote = field.NewString(tableName, "env_note")
	_sysEnv.CreateTime = field.NewTime(tableName, "create_time")
	_sysEnv.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysEnv.Comments = field.NewString(tableName, "comments")

	_sysEnv.fillFieldMap()

	return _sysEnv
}

type sysEnv struct {
	sysEnvDo

	ALL        field.Asterisk
	EnvCode    field.String // 参数名称
	EnvName    field.String // 参数值
	EnvNote    field.String
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sysEnv) Table(newTableName string) *sysEnv {
	s.sysEnvDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysEnv) As(alias string) *sysEnv {
	s.sysEnvDo.DO = *(s.sysEnvDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysEnv) updateTableName(table string) *sysEnv {
	s.ALL = field.NewAsterisk(table)
	s.EnvCode = field.NewString(table, "env_code")
	s.EnvName = field.NewString(table, "env_name")
	s.EnvNote = field.NewString(table, "env_note")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sysEnv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysEnv) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["env_code"] = s.EnvCode
	s.fieldMap["env_name"] = s.EnvName
	s.fieldMap["env_note"] = s.EnvNote
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s sysEnv) clone(db *gorm.DB) sysEnv {
	s.sysEnvDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysEnv) replaceDB(db *gorm.DB) sysEnv {
	s.sysEnvDo.ReplaceDB(db)
	return s
}

type sysEnvDo struct{ gen.DO }

type ISysEnvDo interface {
	gen.SubQuery
	Debug() ISysEnvDo
	WithContext(ctx context.Context) ISysEnvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysEnvDo
	WriteDB() ISysEnvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysEnvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysEnvDo
	Not(conds ...gen.Condition) ISysEnvDo
	Or(conds ...gen.Condition) ISysEnvDo
	Select(conds ...field.Expr) ISysEnvDo
	Where(conds ...gen.Condition) ISysEnvDo
	Order(conds ...field.Expr) ISysEnvDo
	Distinct(cols ...field.Expr) ISysEnvDo
	Omit(cols ...field.Expr) ISysEnvDo
	Join(table schema.Tabler, on ...field.Expr) ISysEnvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysEnvDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysEnvDo
	Group(cols ...field.Expr) ISysEnvDo
	Having(conds ...gen.Condition) ISysEnvDo
	Limit(limit int) ISysEnvDo
	Offset(offset int) ISysEnvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysEnvDo
	Unscoped() ISysEnvDo
	Create(values ...*model.SysEnv) error
	CreateInBatches(values []*model.SysEnv, batchSize int) error
	Save(values ...*model.SysEnv) error
	First() (*model.SysEnv, error)
	Take() (*model.SysEnv, error)
	Last() (*model.SysEnv, error)
	Find() ([]*model.SysEnv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysEnv, err error)
	FindInBatches(result *[]*model.SysEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysEnv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysEnvDo
	Assign(attrs ...field.AssignExpr) ISysEnvDo
	Joins(fields ...field.RelationField) ISysEnvDo
	Preload(fields ...field.RelationField) ISysEnvDo
	FirstOrInit() (*model.SysEnv, error)
	FirstOrCreate() (*model.SysEnv, error)
	FindByPage(offset int, limit int) (result []*model.SysEnv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysEnvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysEnvDo) Debug() ISysEnvDo {
	return s.withDO(s.DO.Debug())
}

func (s sysEnvDo) WithContext(ctx context.Context) ISysEnvDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysEnvDo) ReadDB() ISysEnvDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysEnvDo) WriteDB() ISysEnvDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysEnvDo) Session(config *gorm.Session) ISysEnvDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysEnvDo) Clauses(conds ...clause.Expression) ISysEnvDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysEnvDo) Returning(value interface{}, columns ...string) ISysEnvDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysEnvDo) Not(conds ...gen.Condition) ISysEnvDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysEnvDo) Or(conds ...gen.Condition) ISysEnvDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysEnvDo) Select(conds ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysEnvDo) Where(conds ...gen.Condition) ISysEnvDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysEnvDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysEnvDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysEnvDo) Order(conds ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysEnvDo) Distinct(cols ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysEnvDo) Omit(cols ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysEnvDo) Join(table schema.Tabler, on ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysEnvDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysEnvDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysEnvDo) Group(cols ...field.Expr) ISysEnvDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysEnvDo) Having(conds ...gen.Condition) ISysEnvDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysEnvDo) Limit(limit int) ISysEnvDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysEnvDo) Offset(offset int) ISysEnvDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysEnvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysEnvDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysEnvDo) Unscoped() ISysEnvDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysEnvDo) Create(values ...*model.SysEnv) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysEnvDo) CreateInBatches(values []*model.SysEnv, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysEnvDo) Save(values ...*model.SysEnv) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysEnvDo) First() (*model.SysEnv, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnv), nil
	}
}

func (s sysEnvDo) Take() (*model.SysEnv, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnv), nil
	}
}

func (s sysEnvDo) Last() (*model.SysEnv, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnv), nil
	}
}

func (s sysEnvDo) Find() ([]*model.SysEnv, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysEnv), err
}

func (s sysEnvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysEnv, err error) {
	buf := make([]*model.SysEnv, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysEnvDo) FindInBatches(result *[]*model.SysEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysEnvDo) Attrs(attrs ...field.AssignExpr) ISysEnvDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysEnvDo) Assign(attrs ...field.AssignExpr) ISysEnvDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysEnvDo) Joins(fields ...field.RelationField) ISysEnvDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysEnvDo) Preload(fields ...field.RelationField) ISysEnvDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysEnvDo) FirstOrInit() (*model.SysEnv, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnv), nil
	}
}

func (s sysEnvDo) FirstOrCreate() (*model.SysEnv, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnv), nil
	}
}

func (s sysEnvDo) FindByPage(offset int, limit int) (result []*model.SysEnv, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysEnvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysEnvDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysEnvDo) Delete(models ...*model.SysEnv) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysEnvDo) withDO(do gen.Dao) *sysEnvDo {
	s.DO = *do.(*gen.DO)
	return s
}
