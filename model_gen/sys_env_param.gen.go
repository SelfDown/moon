// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysEnvParam(db *gorm.DB, opts ...gen.DOOption) sysEnvParam {
	_sysEnvParam := sysEnvParam{}

	_sysEnvParam.sysEnvParamDo.UseDB(db, opts...)
	_sysEnvParam.sysEnvParamDo.UseModel(&model.SysEnvParam{})

	tableName := _sysEnvParam.sysEnvParamDo.TableName()
	_sysEnvParam.ALL = field.NewAsterisk(tableName)
	_sysEnvParam.SysEnvParamID = field.NewString(tableName, "sys_env_param_id")
	_sysEnvParam.SysEnvCode = field.NewString(tableName, "sys_env_code")
	_sysEnvParam.ParamKey = field.NewString(tableName, "param_key")
	_sysEnvParam.ParamValue = field.NewString(tableName, "param_value")
	_sysEnvParam.SysProjectCode = field.NewString(tableName, "sys_project_code")

	_sysEnvParam.fillFieldMap()

	return _sysEnvParam
}

type sysEnvParam struct {
	sysEnvParamDo

	ALL            field.Asterisk
	SysEnvParamID  field.String
	SysEnvCode     field.String
	ParamKey       field.String
	ParamValue     field.String
	SysProjectCode field.String

	fieldMap map[string]field.Expr
}

func (s sysEnvParam) Table(newTableName string) *sysEnvParam {
	s.sysEnvParamDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysEnvParam) As(alias string) *sysEnvParam {
	s.sysEnvParamDo.DO = *(s.sysEnvParamDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysEnvParam) updateTableName(table string) *sysEnvParam {
	s.ALL = field.NewAsterisk(table)
	s.SysEnvParamID = field.NewString(table, "sys_env_param_id")
	s.SysEnvCode = field.NewString(table, "sys_env_code")
	s.ParamKey = field.NewString(table, "param_key")
	s.ParamValue = field.NewString(table, "param_value")
	s.SysProjectCode = field.NewString(table, "sys_project_code")

	s.fillFieldMap()

	return s
}

func (s *sysEnvParam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysEnvParam) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["sys_env_param_id"] = s.SysEnvParamID
	s.fieldMap["sys_env_code"] = s.SysEnvCode
	s.fieldMap["param_key"] = s.ParamKey
	s.fieldMap["param_value"] = s.ParamValue
	s.fieldMap["sys_project_code"] = s.SysProjectCode
}

func (s sysEnvParam) clone(db *gorm.DB) sysEnvParam {
	s.sysEnvParamDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysEnvParam) replaceDB(db *gorm.DB) sysEnvParam {
	s.sysEnvParamDo.ReplaceDB(db)
	return s
}

type sysEnvParamDo struct{ gen.DO }

type ISysEnvParamDo interface {
	gen.SubQuery
	Debug() ISysEnvParamDo
	WithContext(ctx context.Context) ISysEnvParamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysEnvParamDo
	WriteDB() ISysEnvParamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysEnvParamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysEnvParamDo
	Not(conds ...gen.Condition) ISysEnvParamDo
	Or(conds ...gen.Condition) ISysEnvParamDo
	Select(conds ...field.Expr) ISysEnvParamDo
	Where(conds ...gen.Condition) ISysEnvParamDo
	Order(conds ...field.Expr) ISysEnvParamDo
	Distinct(cols ...field.Expr) ISysEnvParamDo
	Omit(cols ...field.Expr) ISysEnvParamDo
	Join(table schema.Tabler, on ...field.Expr) ISysEnvParamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysEnvParamDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysEnvParamDo
	Group(cols ...field.Expr) ISysEnvParamDo
	Having(conds ...gen.Condition) ISysEnvParamDo
	Limit(limit int) ISysEnvParamDo
	Offset(offset int) ISysEnvParamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysEnvParamDo
	Unscoped() ISysEnvParamDo
	Create(values ...*model.SysEnvParam) error
	CreateInBatches(values []*model.SysEnvParam, batchSize int) error
	Save(values ...*model.SysEnvParam) error
	First() (*model.SysEnvParam, error)
	Take() (*model.SysEnvParam, error)
	Last() (*model.SysEnvParam, error)
	Find() ([]*model.SysEnvParam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysEnvParam, err error)
	FindInBatches(result *[]*model.SysEnvParam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysEnvParam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysEnvParamDo
	Assign(attrs ...field.AssignExpr) ISysEnvParamDo
	Joins(fields ...field.RelationField) ISysEnvParamDo
	Preload(fields ...field.RelationField) ISysEnvParamDo
	FirstOrInit() (*model.SysEnvParam, error)
	FirstOrCreate() (*model.SysEnvParam, error)
	FindByPage(offset int, limit int) (result []*model.SysEnvParam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysEnvParamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysEnvParamDo) Debug() ISysEnvParamDo {
	return s.withDO(s.DO.Debug())
}

func (s sysEnvParamDo) WithContext(ctx context.Context) ISysEnvParamDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysEnvParamDo) ReadDB() ISysEnvParamDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysEnvParamDo) WriteDB() ISysEnvParamDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysEnvParamDo) Session(config *gorm.Session) ISysEnvParamDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysEnvParamDo) Clauses(conds ...clause.Expression) ISysEnvParamDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysEnvParamDo) Returning(value interface{}, columns ...string) ISysEnvParamDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysEnvParamDo) Not(conds ...gen.Condition) ISysEnvParamDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysEnvParamDo) Or(conds ...gen.Condition) ISysEnvParamDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysEnvParamDo) Select(conds ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysEnvParamDo) Where(conds ...gen.Condition) ISysEnvParamDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysEnvParamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysEnvParamDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysEnvParamDo) Order(conds ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysEnvParamDo) Distinct(cols ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysEnvParamDo) Omit(cols ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysEnvParamDo) Join(table schema.Tabler, on ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysEnvParamDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysEnvParamDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysEnvParamDo) Group(cols ...field.Expr) ISysEnvParamDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysEnvParamDo) Having(conds ...gen.Condition) ISysEnvParamDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysEnvParamDo) Limit(limit int) ISysEnvParamDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysEnvParamDo) Offset(offset int) ISysEnvParamDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysEnvParamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysEnvParamDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysEnvParamDo) Unscoped() ISysEnvParamDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysEnvParamDo) Create(values ...*model.SysEnvParam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysEnvParamDo) CreateInBatches(values []*model.SysEnvParam, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysEnvParamDo) Save(values ...*model.SysEnvParam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysEnvParamDo) First() (*model.SysEnvParam, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnvParam), nil
	}
}

func (s sysEnvParamDo) Take() (*model.SysEnvParam, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnvParam), nil
	}
}

func (s sysEnvParamDo) Last() (*model.SysEnvParam, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnvParam), nil
	}
}

func (s sysEnvParamDo) Find() ([]*model.SysEnvParam, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysEnvParam), err
}

func (s sysEnvParamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysEnvParam, err error) {
	buf := make([]*model.SysEnvParam, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysEnvParamDo) FindInBatches(result *[]*model.SysEnvParam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysEnvParamDo) Attrs(attrs ...field.AssignExpr) ISysEnvParamDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysEnvParamDo) Assign(attrs ...field.AssignExpr) ISysEnvParamDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysEnvParamDo) Joins(fields ...field.RelationField) ISysEnvParamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysEnvParamDo) Preload(fields ...field.RelationField) ISysEnvParamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysEnvParamDo) FirstOrInit() (*model.SysEnvParam, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnvParam), nil
	}
}

func (s sysEnvParamDo) FirstOrCreate() (*model.SysEnvParam, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysEnvParam), nil
	}
}

func (s sysEnvParamDo) FindByPage(offset int, limit int) (result []*model.SysEnvParam, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysEnvParamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysEnvParamDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysEnvParamDo) Delete(models ...*model.SysEnvParam) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysEnvParamDo) withDO(do gen.Dao) *sysEnvParamDo {
	s.DO = *do.(*gen.DO)
	return s
}
