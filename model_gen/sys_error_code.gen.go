// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysErrorCode(db *gorm.DB, opts ...gen.DOOption) sysErrorCode {
	_sysErrorCode := sysErrorCode{}

	_sysErrorCode.sysErrorCodeDo.UseDB(db, opts...)
	_sysErrorCode.sysErrorCodeDo.UseModel(&model.SysErrorCode{})

	tableName := _sysErrorCode.sysErrorCodeDo.TableName()
	_sysErrorCode.ALL = field.NewAsterisk(tableName)
	_sysErrorCode.ID = field.NewInt32(tableName, "id")
	_sysErrorCode.ErrorCode = field.NewString(tableName, "error_code")
	_sysErrorCode.Summary = field.NewString(tableName, "summary")
	_sysErrorCode.Detail = field.NewString(tableName, "detail")
	_sysErrorCode.Solution = field.NewString(tableName, "solution")
	_sysErrorCode.WikiLink = field.NewString(tableName, "wiki_link")

	_sysErrorCode.fillFieldMap()

	return _sysErrorCode
}

type sysErrorCode struct {
	sysErrorCodeDo

	ALL       field.Asterisk
	ID        field.Int32
	ErrorCode field.String
	Summary   field.String // 错误摘要
	Detail    field.String // 错误详情
	Solution  field.String // 解决方案
	WikiLink  field.String // 帮助文档

	fieldMap map[string]field.Expr
}

func (s sysErrorCode) Table(newTableName string) *sysErrorCode {
	s.sysErrorCodeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysErrorCode) As(alias string) *sysErrorCode {
	s.sysErrorCodeDo.DO = *(s.sysErrorCodeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysErrorCode) updateTableName(table string) *sysErrorCode {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.ErrorCode = field.NewString(table, "error_code")
	s.Summary = field.NewString(table, "summary")
	s.Detail = field.NewString(table, "detail")
	s.Solution = field.NewString(table, "solution")
	s.WikiLink = field.NewString(table, "wiki_link")

	s.fillFieldMap()

	return s
}

func (s *sysErrorCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysErrorCode) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["error_code"] = s.ErrorCode
	s.fieldMap["summary"] = s.Summary
	s.fieldMap["detail"] = s.Detail
	s.fieldMap["solution"] = s.Solution
	s.fieldMap["wiki_link"] = s.WikiLink
}

func (s sysErrorCode) clone(db *gorm.DB) sysErrorCode {
	s.sysErrorCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysErrorCode) replaceDB(db *gorm.DB) sysErrorCode {
	s.sysErrorCodeDo.ReplaceDB(db)
	return s
}

type sysErrorCodeDo struct{ gen.DO }

type ISysErrorCodeDo interface {
	gen.SubQuery
	Debug() ISysErrorCodeDo
	WithContext(ctx context.Context) ISysErrorCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysErrorCodeDo
	WriteDB() ISysErrorCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysErrorCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysErrorCodeDo
	Not(conds ...gen.Condition) ISysErrorCodeDo
	Or(conds ...gen.Condition) ISysErrorCodeDo
	Select(conds ...field.Expr) ISysErrorCodeDo
	Where(conds ...gen.Condition) ISysErrorCodeDo
	Order(conds ...field.Expr) ISysErrorCodeDo
	Distinct(cols ...field.Expr) ISysErrorCodeDo
	Omit(cols ...field.Expr) ISysErrorCodeDo
	Join(table schema.Tabler, on ...field.Expr) ISysErrorCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysErrorCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysErrorCodeDo
	Group(cols ...field.Expr) ISysErrorCodeDo
	Having(conds ...gen.Condition) ISysErrorCodeDo
	Limit(limit int) ISysErrorCodeDo
	Offset(offset int) ISysErrorCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysErrorCodeDo
	Unscoped() ISysErrorCodeDo
	Create(values ...*model.SysErrorCode) error
	CreateInBatches(values []*model.SysErrorCode, batchSize int) error
	Save(values ...*model.SysErrorCode) error
	First() (*model.SysErrorCode, error)
	Take() (*model.SysErrorCode, error)
	Last() (*model.SysErrorCode, error)
	Find() ([]*model.SysErrorCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysErrorCode, err error)
	FindInBatches(result *[]*model.SysErrorCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysErrorCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysErrorCodeDo
	Assign(attrs ...field.AssignExpr) ISysErrorCodeDo
	Joins(fields ...field.RelationField) ISysErrorCodeDo
	Preload(fields ...field.RelationField) ISysErrorCodeDo
	FirstOrInit() (*model.SysErrorCode, error)
	FirstOrCreate() (*model.SysErrorCode, error)
	FindByPage(offset int, limit int) (result []*model.SysErrorCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysErrorCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysErrorCodeDo) Debug() ISysErrorCodeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysErrorCodeDo) WithContext(ctx context.Context) ISysErrorCodeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysErrorCodeDo) ReadDB() ISysErrorCodeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysErrorCodeDo) WriteDB() ISysErrorCodeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysErrorCodeDo) Session(config *gorm.Session) ISysErrorCodeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysErrorCodeDo) Clauses(conds ...clause.Expression) ISysErrorCodeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysErrorCodeDo) Returning(value interface{}, columns ...string) ISysErrorCodeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysErrorCodeDo) Not(conds ...gen.Condition) ISysErrorCodeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysErrorCodeDo) Or(conds ...gen.Condition) ISysErrorCodeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysErrorCodeDo) Select(conds ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysErrorCodeDo) Where(conds ...gen.Condition) ISysErrorCodeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysErrorCodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysErrorCodeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysErrorCodeDo) Order(conds ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysErrorCodeDo) Distinct(cols ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysErrorCodeDo) Omit(cols ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysErrorCodeDo) Join(table schema.Tabler, on ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysErrorCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysErrorCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysErrorCodeDo) Group(cols ...field.Expr) ISysErrorCodeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysErrorCodeDo) Having(conds ...gen.Condition) ISysErrorCodeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysErrorCodeDo) Limit(limit int) ISysErrorCodeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysErrorCodeDo) Offset(offset int) ISysErrorCodeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysErrorCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysErrorCodeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysErrorCodeDo) Unscoped() ISysErrorCodeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysErrorCodeDo) Create(values ...*model.SysErrorCode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysErrorCodeDo) CreateInBatches(values []*model.SysErrorCode, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysErrorCodeDo) Save(values ...*model.SysErrorCode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysErrorCodeDo) First() (*model.SysErrorCode, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysErrorCode), nil
	}
}

func (s sysErrorCodeDo) Take() (*model.SysErrorCode, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysErrorCode), nil
	}
}

func (s sysErrorCodeDo) Last() (*model.SysErrorCode, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysErrorCode), nil
	}
}

func (s sysErrorCodeDo) Find() ([]*model.SysErrorCode, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysErrorCode), err
}

func (s sysErrorCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysErrorCode, err error) {
	buf := make([]*model.SysErrorCode, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysErrorCodeDo) FindInBatches(result *[]*model.SysErrorCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysErrorCodeDo) Attrs(attrs ...field.AssignExpr) ISysErrorCodeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysErrorCodeDo) Assign(attrs ...field.AssignExpr) ISysErrorCodeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysErrorCodeDo) Joins(fields ...field.RelationField) ISysErrorCodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysErrorCodeDo) Preload(fields ...field.RelationField) ISysErrorCodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysErrorCodeDo) FirstOrInit() (*model.SysErrorCode, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysErrorCode), nil
	}
}

func (s sysErrorCodeDo) FirstOrCreate() (*model.SysErrorCode, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysErrorCode), nil
	}
}

func (s sysErrorCodeDo) FindByPage(offset int, limit int) (result []*model.SysErrorCode, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysErrorCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysErrorCodeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysErrorCodeDo) Delete(models ...*model.SysErrorCode) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysErrorCodeDo) withDO(do gen.Dao) *sysErrorCodeDo {
	s.DO = *do.(*gen.DO)
	return s
}
