// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysForm(db *gorm.DB, opts ...gen.DOOption) sysForm {
	_sysForm := sysForm{}

	_sysForm.sysFormDo.UseDB(db, opts...)
	_sysForm.sysFormDo.UseModel(&model.SysForm{})

	tableName := _sysForm.sysFormDo.TableName()
	_sysForm.ALL = field.NewAsterisk(tableName)
	_sysForm.SysFormID = field.NewString(tableName, "sys_form_id")
	_sysForm.SysFormCode = field.NewString(tableName, "sys_form_code")
	_sysForm.SysFormName = field.NewString(tableName, "sys_form_name")
	_sysForm.SysFormDesc = field.NewString(tableName, "sys_form_desc")
	_sysForm.SysFormBusiGroup = field.NewString(tableName, "sys_form_busi_group")
	_sysForm.IsDisable = field.NewString(tableName, "is_disable")
	_sysForm.SysFormBusiGroupOrd = field.NewInt32(tableName, "sys_form_busi_group_ord")

	_sysForm.fillFieldMap()

	return _sysForm
}

type sysForm struct {
	sysFormDo

	ALL                 field.Asterisk
	SysFormID           field.String
	SysFormCode         field.String
	SysFormName         field.String
	SysFormDesc         field.String
	SysFormBusiGroup    field.String
	IsDisable           field.String
	SysFormBusiGroupOrd field.Int32

	fieldMap map[string]field.Expr
}

func (s sysForm) Table(newTableName string) *sysForm {
	s.sysFormDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysForm) As(alias string) *sysForm {
	s.sysFormDo.DO = *(s.sysFormDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysForm) updateTableName(table string) *sysForm {
	s.ALL = field.NewAsterisk(table)
	s.SysFormID = field.NewString(table, "sys_form_id")
	s.SysFormCode = field.NewString(table, "sys_form_code")
	s.SysFormName = field.NewString(table, "sys_form_name")
	s.SysFormDesc = field.NewString(table, "sys_form_desc")
	s.SysFormBusiGroup = field.NewString(table, "sys_form_busi_group")
	s.IsDisable = field.NewString(table, "is_disable")
	s.SysFormBusiGroupOrd = field.NewInt32(table, "sys_form_busi_group_ord")

	s.fillFieldMap()

	return s
}

func (s *sysForm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysForm) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["sys_form_id"] = s.SysFormID
	s.fieldMap["sys_form_code"] = s.SysFormCode
	s.fieldMap["sys_form_name"] = s.SysFormName
	s.fieldMap["sys_form_desc"] = s.SysFormDesc
	s.fieldMap["sys_form_busi_group"] = s.SysFormBusiGroup
	s.fieldMap["is_disable"] = s.IsDisable
	s.fieldMap["sys_form_busi_group_ord"] = s.SysFormBusiGroupOrd
}

func (s sysForm) clone(db *gorm.DB) sysForm {
	s.sysFormDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysForm) replaceDB(db *gorm.DB) sysForm {
	s.sysFormDo.ReplaceDB(db)
	return s
}

type sysFormDo struct{ gen.DO }

type ISysFormDo interface {
	gen.SubQuery
	Debug() ISysFormDo
	WithContext(ctx context.Context) ISysFormDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysFormDo
	WriteDB() ISysFormDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysFormDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysFormDo
	Not(conds ...gen.Condition) ISysFormDo
	Or(conds ...gen.Condition) ISysFormDo
	Select(conds ...field.Expr) ISysFormDo
	Where(conds ...gen.Condition) ISysFormDo
	Order(conds ...field.Expr) ISysFormDo
	Distinct(cols ...field.Expr) ISysFormDo
	Omit(cols ...field.Expr) ISysFormDo
	Join(table schema.Tabler, on ...field.Expr) ISysFormDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysFormDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysFormDo
	Group(cols ...field.Expr) ISysFormDo
	Having(conds ...gen.Condition) ISysFormDo
	Limit(limit int) ISysFormDo
	Offset(offset int) ISysFormDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFormDo
	Unscoped() ISysFormDo
	Create(values ...*model.SysForm) error
	CreateInBatches(values []*model.SysForm, batchSize int) error
	Save(values ...*model.SysForm) error
	First() (*model.SysForm, error)
	Take() (*model.SysForm, error)
	Last() (*model.SysForm, error)
	Find() ([]*model.SysForm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysForm, err error)
	FindInBatches(result *[]*model.SysForm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysForm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysFormDo
	Assign(attrs ...field.AssignExpr) ISysFormDo
	Joins(fields ...field.RelationField) ISysFormDo
	Preload(fields ...field.RelationField) ISysFormDo
	FirstOrInit() (*model.SysForm, error)
	FirstOrCreate() (*model.SysForm, error)
	FindByPage(offset int, limit int) (result []*model.SysForm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysFormDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysFormDo) Debug() ISysFormDo {
	return s.withDO(s.DO.Debug())
}

func (s sysFormDo) WithContext(ctx context.Context) ISysFormDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysFormDo) ReadDB() ISysFormDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysFormDo) WriteDB() ISysFormDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysFormDo) Session(config *gorm.Session) ISysFormDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysFormDo) Clauses(conds ...clause.Expression) ISysFormDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysFormDo) Returning(value interface{}, columns ...string) ISysFormDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysFormDo) Not(conds ...gen.Condition) ISysFormDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysFormDo) Or(conds ...gen.Condition) ISysFormDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysFormDo) Select(conds ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysFormDo) Where(conds ...gen.Condition) ISysFormDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysFormDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysFormDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysFormDo) Order(conds ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysFormDo) Distinct(cols ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysFormDo) Omit(cols ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysFormDo) Join(table schema.Tabler, on ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysFormDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysFormDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysFormDo) Group(cols ...field.Expr) ISysFormDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysFormDo) Having(conds ...gen.Condition) ISysFormDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysFormDo) Limit(limit int) ISysFormDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysFormDo) Offset(offset int) ISysFormDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysFormDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFormDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysFormDo) Unscoped() ISysFormDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysFormDo) Create(values ...*model.SysForm) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysFormDo) CreateInBatches(values []*model.SysForm, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysFormDo) Save(values ...*model.SysForm) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysFormDo) First() (*model.SysForm, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysForm), nil
	}
}

func (s sysFormDo) Take() (*model.SysForm, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysForm), nil
	}
}

func (s sysFormDo) Last() (*model.SysForm, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysForm), nil
	}
}

func (s sysFormDo) Find() ([]*model.SysForm, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysForm), err
}

func (s sysFormDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysForm, err error) {
	buf := make([]*model.SysForm, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysFormDo) FindInBatches(result *[]*model.SysForm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysFormDo) Attrs(attrs ...field.AssignExpr) ISysFormDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysFormDo) Assign(attrs ...field.AssignExpr) ISysFormDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysFormDo) Joins(fields ...field.RelationField) ISysFormDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysFormDo) Preload(fields ...field.RelationField) ISysFormDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysFormDo) FirstOrInit() (*model.SysForm, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysForm), nil
	}
}

func (s sysFormDo) FirstOrCreate() (*model.SysForm, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysForm), nil
	}
}

func (s sysFormDo) FindByPage(offset int, limit int) (result []*model.SysForm, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysFormDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysFormDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysFormDo) Delete(models ...*model.SysForm) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysFormDo) withDO(do gen.Dao) *sysFormDo {
	s.DO = *do.(*gen.DO)
	return s
}
