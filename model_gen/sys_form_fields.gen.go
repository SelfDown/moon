// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysFormFields(db *gorm.DB, opts ...gen.DOOption) sysFormFields {
	_sysFormFields := sysFormFields{}

	_sysFormFields.sysFormFieldsDo.UseDB(db, opts...)
	_sysFormFields.sysFormFieldsDo.UseModel(&model.SysFormFields{})

	tableName := _sysFormFields.sysFormFieldsDo.TableName()
	_sysFormFields.ALL = field.NewAsterisk(tableName)
	_sysFormFields.SysFormFieldsID = field.NewString(tableName, "sys_form_fields_id")
	_sysFormFields.SysFormID = field.NewString(tableName, "sys_form_id")
	_sysFormFields.FormKey = field.NewString(tableName, "form_key")
	_sysFormFields.FormKeyLabel = field.NewString(tableName, "form_key_label")
	_sysFormFields.FormKeyDesc = field.NewString(tableName, "form_key_desc")
	_sysFormFields.FormKeyType = field.NewString(tableName, "form_key_type")
	_sysFormFields.FormKeyOrd = field.NewInt32(tableName, "form_key_ord")
	_sysFormFields.FormKeyRequired = field.NewInt32(tableName, "form_key_required")
	_sysFormFields.FormKeyDefaultVal = field.NewString(tableName, "form_key_default_val")
	_sysFormFields.FormKeyInputSrc = field.NewString(tableName, "form_key_input_src")
	_sysFormFields.FormKeyInputSrcValue = field.NewString(tableName, "form_key_input_src_value")
	_sysFormFields.FormKeyEditor = field.NewString(tableName, "form_key_editor")

	_sysFormFields.fillFieldMap()

	return _sysFormFields
}

type sysFormFields struct {
	sysFormFieldsDo

	ALL                  field.Asterisk
	SysFormFieldsID      field.String
	SysFormID            field.String
	FormKey              field.String
	FormKeyLabel         field.String
	FormKeyDesc          field.String
	FormKeyType          field.String
	FormKeyOrd           field.Int32
	FormKeyRequired      field.Int32
	FormKeyDefaultVal    field.String
	FormKeyInputSrc      field.String
	FormKeyInputSrcValue field.String
	FormKeyEditor        field.String

	fieldMap map[string]field.Expr
}

func (s sysFormFields) Table(newTableName string) *sysFormFields {
	s.sysFormFieldsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysFormFields) As(alias string) *sysFormFields {
	s.sysFormFieldsDo.DO = *(s.sysFormFieldsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysFormFields) updateTableName(table string) *sysFormFields {
	s.ALL = field.NewAsterisk(table)
	s.SysFormFieldsID = field.NewString(table, "sys_form_fields_id")
	s.SysFormID = field.NewString(table, "sys_form_id")
	s.FormKey = field.NewString(table, "form_key")
	s.FormKeyLabel = field.NewString(table, "form_key_label")
	s.FormKeyDesc = field.NewString(table, "form_key_desc")
	s.FormKeyType = field.NewString(table, "form_key_type")
	s.FormKeyOrd = field.NewInt32(table, "form_key_ord")
	s.FormKeyRequired = field.NewInt32(table, "form_key_required")
	s.FormKeyDefaultVal = field.NewString(table, "form_key_default_val")
	s.FormKeyInputSrc = field.NewString(table, "form_key_input_src")
	s.FormKeyInputSrcValue = field.NewString(table, "form_key_input_src_value")
	s.FormKeyEditor = field.NewString(table, "form_key_editor")

	s.fillFieldMap()

	return s
}

func (s *sysFormFields) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysFormFields) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["sys_form_fields_id"] = s.SysFormFieldsID
	s.fieldMap["sys_form_id"] = s.SysFormID
	s.fieldMap["form_key"] = s.FormKey
	s.fieldMap["form_key_label"] = s.FormKeyLabel
	s.fieldMap["form_key_desc"] = s.FormKeyDesc
	s.fieldMap["form_key_type"] = s.FormKeyType
	s.fieldMap["form_key_ord"] = s.FormKeyOrd
	s.fieldMap["form_key_required"] = s.FormKeyRequired
	s.fieldMap["form_key_default_val"] = s.FormKeyDefaultVal
	s.fieldMap["form_key_input_src"] = s.FormKeyInputSrc
	s.fieldMap["form_key_input_src_value"] = s.FormKeyInputSrcValue
	s.fieldMap["form_key_editor"] = s.FormKeyEditor
}

func (s sysFormFields) clone(db *gorm.DB) sysFormFields {
	s.sysFormFieldsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysFormFields) replaceDB(db *gorm.DB) sysFormFields {
	s.sysFormFieldsDo.ReplaceDB(db)
	return s
}

type sysFormFieldsDo struct{ gen.DO }

type ISysFormFieldsDo interface {
	gen.SubQuery
	Debug() ISysFormFieldsDo
	WithContext(ctx context.Context) ISysFormFieldsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysFormFieldsDo
	WriteDB() ISysFormFieldsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysFormFieldsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysFormFieldsDo
	Not(conds ...gen.Condition) ISysFormFieldsDo
	Or(conds ...gen.Condition) ISysFormFieldsDo
	Select(conds ...field.Expr) ISysFormFieldsDo
	Where(conds ...gen.Condition) ISysFormFieldsDo
	Order(conds ...field.Expr) ISysFormFieldsDo
	Distinct(cols ...field.Expr) ISysFormFieldsDo
	Omit(cols ...field.Expr) ISysFormFieldsDo
	Join(table schema.Tabler, on ...field.Expr) ISysFormFieldsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysFormFieldsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysFormFieldsDo
	Group(cols ...field.Expr) ISysFormFieldsDo
	Having(conds ...gen.Condition) ISysFormFieldsDo
	Limit(limit int) ISysFormFieldsDo
	Offset(offset int) ISysFormFieldsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFormFieldsDo
	Unscoped() ISysFormFieldsDo
	Create(values ...*model.SysFormFields) error
	CreateInBatches(values []*model.SysFormFields, batchSize int) error
	Save(values ...*model.SysFormFields) error
	First() (*model.SysFormFields, error)
	Take() (*model.SysFormFields, error)
	Last() (*model.SysFormFields, error)
	Find() ([]*model.SysFormFields, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysFormFields, err error)
	FindInBatches(result *[]*model.SysFormFields, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysFormFields) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysFormFieldsDo
	Assign(attrs ...field.AssignExpr) ISysFormFieldsDo
	Joins(fields ...field.RelationField) ISysFormFieldsDo
	Preload(fields ...field.RelationField) ISysFormFieldsDo
	FirstOrInit() (*model.SysFormFields, error)
	FirstOrCreate() (*model.SysFormFields, error)
	FindByPage(offset int, limit int) (result []*model.SysFormFields, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysFormFieldsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysFormFieldsDo) Debug() ISysFormFieldsDo {
	return s.withDO(s.DO.Debug())
}

func (s sysFormFieldsDo) WithContext(ctx context.Context) ISysFormFieldsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysFormFieldsDo) ReadDB() ISysFormFieldsDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysFormFieldsDo) WriteDB() ISysFormFieldsDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysFormFieldsDo) Session(config *gorm.Session) ISysFormFieldsDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysFormFieldsDo) Clauses(conds ...clause.Expression) ISysFormFieldsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysFormFieldsDo) Returning(value interface{}, columns ...string) ISysFormFieldsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysFormFieldsDo) Not(conds ...gen.Condition) ISysFormFieldsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysFormFieldsDo) Or(conds ...gen.Condition) ISysFormFieldsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysFormFieldsDo) Select(conds ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysFormFieldsDo) Where(conds ...gen.Condition) ISysFormFieldsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysFormFieldsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysFormFieldsDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysFormFieldsDo) Order(conds ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysFormFieldsDo) Distinct(cols ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysFormFieldsDo) Omit(cols ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysFormFieldsDo) Join(table schema.Tabler, on ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysFormFieldsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysFormFieldsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysFormFieldsDo) Group(cols ...field.Expr) ISysFormFieldsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysFormFieldsDo) Having(conds ...gen.Condition) ISysFormFieldsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysFormFieldsDo) Limit(limit int) ISysFormFieldsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysFormFieldsDo) Offset(offset int) ISysFormFieldsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysFormFieldsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFormFieldsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysFormFieldsDo) Unscoped() ISysFormFieldsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysFormFieldsDo) Create(values ...*model.SysFormFields) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysFormFieldsDo) CreateInBatches(values []*model.SysFormFields, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysFormFieldsDo) Save(values ...*model.SysFormFields) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysFormFieldsDo) First() (*model.SysFormFields, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFormFields), nil
	}
}

func (s sysFormFieldsDo) Take() (*model.SysFormFields, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFormFields), nil
	}
}

func (s sysFormFieldsDo) Last() (*model.SysFormFields, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFormFields), nil
	}
}

func (s sysFormFieldsDo) Find() ([]*model.SysFormFields, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysFormFields), err
}

func (s sysFormFieldsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysFormFields, err error) {
	buf := make([]*model.SysFormFields, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysFormFieldsDo) FindInBatches(result *[]*model.SysFormFields, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysFormFieldsDo) Attrs(attrs ...field.AssignExpr) ISysFormFieldsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysFormFieldsDo) Assign(attrs ...field.AssignExpr) ISysFormFieldsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysFormFieldsDo) Joins(fields ...field.RelationField) ISysFormFieldsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysFormFieldsDo) Preload(fields ...field.RelationField) ISysFormFieldsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysFormFieldsDo) FirstOrInit() (*model.SysFormFields, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFormFields), nil
	}
}

func (s sysFormFieldsDo) FirstOrCreate() (*model.SysFormFields, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFormFields), nil
	}
}

func (s sysFormFieldsDo) FindByPage(offset int, limit int) (result []*model.SysFormFields, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysFormFieldsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysFormFieldsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysFormFieldsDo) Delete(models ...*model.SysFormFields) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysFormFieldsDo) withDO(do gen.Dao) *sysFormFieldsDo {
	s.DO = *do.(*gen.DO)
	return s
}
