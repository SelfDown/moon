// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysHospital(db *gorm.DB, opts ...gen.DOOption) sysHospital {
	_sysHospital := sysHospital{}

	_sysHospital.sysHospitalDo.UseDB(db, opts...)
	_sysHospital.sysHospitalDo.UseModel(&model.SysHospital{})

	tableName := _sysHospital.sysHospitalDo.TableName()
	_sysHospital.ALL = field.NewAsterisk(tableName)
	_sysHospital.HospitalName = field.NewString(tableName, "hospital_name")
	_sysHospital.HospitalCode = field.NewString(tableName, "hospital_code")
	_sysHospital.GitBranchSql = field.NewString(tableName, "git_branch_sql")
	_sysHospital.CreateTime = field.NewTime(tableName, "create_time")
	_sysHospital.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysHospital.Comments = field.NewString(tableName, "comments")
	_sysHospital.SysProjectID = field.NewString(tableName, "sys_project_id")
	_sysHospital.OrderID = field.NewInt32(tableName, "order_id")

	_sysHospital.fillFieldMap()

	return _sysHospital
}

type sysHospital struct {
	sysHospitalDo

	ALL          field.Asterisk
	HospitalName field.String // 参数名称
	HospitalCode field.String // 参数值
	GitBranchSql field.String // 院区对应的sql归档,git分支
	CreateTime   field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime   field.Time   // 记录修改时间（数据库自动写入）
	Comments     field.String // 备注说明
	SysProjectID field.String
	OrderID      field.Int32

	fieldMap map[string]field.Expr
}

func (s sysHospital) Table(newTableName string) *sysHospital {
	s.sysHospitalDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysHospital) As(alias string) *sysHospital {
	s.sysHospitalDo.DO = *(s.sysHospitalDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysHospital) updateTableName(table string) *sysHospital {
	s.ALL = field.NewAsterisk(table)
	s.HospitalName = field.NewString(table, "hospital_name")
	s.HospitalCode = field.NewString(table, "hospital_code")
	s.GitBranchSql = field.NewString(table, "git_branch_sql")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.SysProjectID = field.NewString(table, "sys_project_id")
	s.OrderID = field.NewInt32(table, "order_id")

	s.fillFieldMap()

	return s
}

func (s *sysHospital) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysHospital) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["hospital_name"] = s.HospitalName
	s.fieldMap["hospital_code"] = s.HospitalCode
	s.fieldMap["git_branch_sql"] = s.GitBranchSql
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["sys_project_id"] = s.SysProjectID
	s.fieldMap["order_id"] = s.OrderID
}

func (s sysHospital) clone(db *gorm.DB) sysHospital {
	s.sysHospitalDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysHospital) replaceDB(db *gorm.DB) sysHospital {
	s.sysHospitalDo.ReplaceDB(db)
	return s
}

type sysHospitalDo struct{ gen.DO }

type ISysHospitalDo interface {
	gen.SubQuery
	Debug() ISysHospitalDo
	WithContext(ctx context.Context) ISysHospitalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysHospitalDo
	WriteDB() ISysHospitalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysHospitalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysHospitalDo
	Not(conds ...gen.Condition) ISysHospitalDo
	Or(conds ...gen.Condition) ISysHospitalDo
	Select(conds ...field.Expr) ISysHospitalDo
	Where(conds ...gen.Condition) ISysHospitalDo
	Order(conds ...field.Expr) ISysHospitalDo
	Distinct(cols ...field.Expr) ISysHospitalDo
	Omit(cols ...field.Expr) ISysHospitalDo
	Join(table schema.Tabler, on ...field.Expr) ISysHospitalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysHospitalDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysHospitalDo
	Group(cols ...field.Expr) ISysHospitalDo
	Having(conds ...gen.Condition) ISysHospitalDo
	Limit(limit int) ISysHospitalDo
	Offset(offset int) ISysHospitalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysHospitalDo
	Unscoped() ISysHospitalDo
	Create(values ...*model.SysHospital) error
	CreateInBatches(values []*model.SysHospital, batchSize int) error
	Save(values ...*model.SysHospital) error
	First() (*model.SysHospital, error)
	Take() (*model.SysHospital, error)
	Last() (*model.SysHospital, error)
	Find() ([]*model.SysHospital, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysHospital, err error)
	FindInBatches(result *[]*model.SysHospital, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysHospital) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysHospitalDo
	Assign(attrs ...field.AssignExpr) ISysHospitalDo
	Joins(fields ...field.RelationField) ISysHospitalDo
	Preload(fields ...field.RelationField) ISysHospitalDo
	FirstOrInit() (*model.SysHospital, error)
	FirstOrCreate() (*model.SysHospital, error)
	FindByPage(offset int, limit int) (result []*model.SysHospital, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysHospitalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysHospitalDo) Debug() ISysHospitalDo {
	return s.withDO(s.DO.Debug())
}

func (s sysHospitalDo) WithContext(ctx context.Context) ISysHospitalDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysHospitalDo) ReadDB() ISysHospitalDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysHospitalDo) WriteDB() ISysHospitalDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysHospitalDo) Session(config *gorm.Session) ISysHospitalDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysHospitalDo) Clauses(conds ...clause.Expression) ISysHospitalDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysHospitalDo) Returning(value interface{}, columns ...string) ISysHospitalDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysHospitalDo) Not(conds ...gen.Condition) ISysHospitalDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysHospitalDo) Or(conds ...gen.Condition) ISysHospitalDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysHospitalDo) Select(conds ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysHospitalDo) Where(conds ...gen.Condition) ISysHospitalDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysHospitalDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysHospitalDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysHospitalDo) Order(conds ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysHospitalDo) Distinct(cols ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysHospitalDo) Omit(cols ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysHospitalDo) Join(table schema.Tabler, on ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysHospitalDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysHospitalDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysHospitalDo) Group(cols ...field.Expr) ISysHospitalDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysHospitalDo) Having(conds ...gen.Condition) ISysHospitalDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysHospitalDo) Limit(limit int) ISysHospitalDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysHospitalDo) Offset(offset int) ISysHospitalDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysHospitalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysHospitalDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysHospitalDo) Unscoped() ISysHospitalDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysHospitalDo) Create(values ...*model.SysHospital) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysHospitalDo) CreateInBatches(values []*model.SysHospital, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysHospitalDo) Save(values ...*model.SysHospital) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysHospitalDo) First() (*model.SysHospital, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHospital), nil
	}
}

func (s sysHospitalDo) Take() (*model.SysHospital, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHospital), nil
	}
}

func (s sysHospitalDo) Last() (*model.SysHospital, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHospital), nil
	}
}

func (s sysHospitalDo) Find() ([]*model.SysHospital, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysHospital), err
}

func (s sysHospitalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysHospital, err error) {
	buf := make([]*model.SysHospital, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysHospitalDo) FindInBatches(result *[]*model.SysHospital, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysHospitalDo) Attrs(attrs ...field.AssignExpr) ISysHospitalDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysHospitalDo) Assign(attrs ...field.AssignExpr) ISysHospitalDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysHospitalDo) Joins(fields ...field.RelationField) ISysHospitalDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysHospitalDo) Preload(fields ...field.RelationField) ISysHospitalDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysHospitalDo) FirstOrInit() (*model.SysHospital, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHospital), nil
	}
}

func (s sysHospitalDo) FirstOrCreate() (*model.SysHospital, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHospital), nil
	}
}

func (s sysHospitalDo) FindByPage(offset int, limit int) (result []*model.SysHospital, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysHospitalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysHospitalDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysHospitalDo) Delete(models ...*model.SysHospital) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysHospitalDo) withDO(do gen.Dao) *sysHospitalDo {
	s.DO = *do.(*gen.DO)
	return s
}
