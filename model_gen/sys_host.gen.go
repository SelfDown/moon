// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysHost(db *gorm.DB, opts ...gen.DOOption) sysHost {
	_sysHost := sysHost{}

	_sysHost.sysHostDo.UseDB(db, opts...)
	_sysHost.sysHostDo.UseModel(&model.SysHost{})

	tableName := _sysHost.sysHostDo.TableName()
	_sysHost.ALL = field.NewAsterisk(tableName)
	_sysHost.HostIPList = field.NewString(tableName, "host_ip_list")
	_sysHost.HostName = field.NewString(tableName, "host_name")
	_sysHost.HostUserSuper = field.NewString(tableName, "host_user_super")
	_sysHost.HostPwdSuper = field.NewString(tableName, "host_pwd_super")
	_sysHost.ProjectVersion = field.NewString(tableName, "project_version")
	_sysHost.CreateTime = field.NewTime(tableName, "create_time")
	_sysHost.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysHost.Comments = field.NewString(tableName, "comments")
	_sysHost.SysProjectID = field.NewString(tableName, "sys_project_id")
	_sysHost.ProjectHome = field.NewString(tableName, "project_home")

	_sysHost.fillFieldMap()

	return _sysHost
}

type sysHost struct {
	sysHostDo

	ALL            field.Asterisk
	HostIPList     field.String // 服务器IP
	HostName       field.String
	HostUserSuper  field.String // 主机超级管理员
	HostPwdSuper   field.String
	ProjectVersion field.String // 工程版本
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time
	Comments       field.String
	SysProjectID   field.String
	ProjectHome    field.String // 工程主目录

	fieldMap map[string]field.Expr
}

func (s sysHost) Table(newTableName string) *sysHost {
	s.sysHostDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysHost) As(alias string) *sysHost {
	s.sysHostDo.DO = *(s.sysHostDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysHost) updateTableName(table string) *sysHost {
	s.ALL = field.NewAsterisk(table)
	s.HostIPList = field.NewString(table, "host_ip_list")
	s.HostName = field.NewString(table, "host_name")
	s.HostUserSuper = field.NewString(table, "host_user_super")
	s.HostPwdSuper = field.NewString(table, "host_pwd_super")
	s.ProjectVersion = field.NewString(table, "project_version")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.SysProjectID = field.NewString(table, "sys_project_id")
	s.ProjectHome = field.NewString(table, "project_home")

	s.fillFieldMap()

	return s
}

func (s *sysHost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysHost) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["host_ip_list"] = s.HostIPList
	s.fieldMap["host_name"] = s.HostName
	s.fieldMap["host_user_super"] = s.HostUserSuper
	s.fieldMap["host_pwd_super"] = s.HostPwdSuper
	s.fieldMap["project_version"] = s.ProjectVersion
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["sys_project_id"] = s.SysProjectID
	s.fieldMap["project_home"] = s.ProjectHome
}

func (s sysHost) clone(db *gorm.DB) sysHost {
	s.sysHostDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysHost) replaceDB(db *gorm.DB) sysHost {
	s.sysHostDo.ReplaceDB(db)
	return s
}

type sysHostDo struct{ gen.DO }

type ISysHostDo interface {
	gen.SubQuery
	Debug() ISysHostDo
	WithContext(ctx context.Context) ISysHostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysHostDo
	WriteDB() ISysHostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysHostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysHostDo
	Not(conds ...gen.Condition) ISysHostDo
	Or(conds ...gen.Condition) ISysHostDo
	Select(conds ...field.Expr) ISysHostDo
	Where(conds ...gen.Condition) ISysHostDo
	Order(conds ...field.Expr) ISysHostDo
	Distinct(cols ...field.Expr) ISysHostDo
	Omit(cols ...field.Expr) ISysHostDo
	Join(table schema.Tabler, on ...field.Expr) ISysHostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysHostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysHostDo
	Group(cols ...field.Expr) ISysHostDo
	Having(conds ...gen.Condition) ISysHostDo
	Limit(limit int) ISysHostDo
	Offset(offset int) ISysHostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysHostDo
	Unscoped() ISysHostDo
	Create(values ...*model.SysHost) error
	CreateInBatches(values []*model.SysHost, batchSize int) error
	Save(values ...*model.SysHost) error
	First() (*model.SysHost, error)
	Take() (*model.SysHost, error)
	Last() (*model.SysHost, error)
	Find() ([]*model.SysHost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysHost, err error)
	FindInBatches(result *[]*model.SysHost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysHost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysHostDo
	Assign(attrs ...field.AssignExpr) ISysHostDo
	Joins(fields ...field.RelationField) ISysHostDo
	Preload(fields ...field.RelationField) ISysHostDo
	FirstOrInit() (*model.SysHost, error)
	FirstOrCreate() (*model.SysHost, error)
	FindByPage(offset int, limit int) (result []*model.SysHost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysHostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysHostDo) Debug() ISysHostDo {
	return s.withDO(s.DO.Debug())
}

func (s sysHostDo) WithContext(ctx context.Context) ISysHostDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysHostDo) ReadDB() ISysHostDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysHostDo) WriteDB() ISysHostDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysHostDo) Session(config *gorm.Session) ISysHostDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysHostDo) Clauses(conds ...clause.Expression) ISysHostDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysHostDo) Returning(value interface{}, columns ...string) ISysHostDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysHostDo) Not(conds ...gen.Condition) ISysHostDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysHostDo) Or(conds ...gen.Condition) ISysHostDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysHostDo) Select(conds ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysHostDo) Where(conds ...gen.Condition) ISysHostDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysHostDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysHostDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysHostDo) Order(conds ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysHostDo) Distinct(cols ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysHostDo) Omit(cols ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysHostDo) Join(table schema.Tabler, on ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysHostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysHostDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysHostDo) Group(cols ...field.Expr) ISysHostDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysHostDo) Having(conds ...gen.Condition) ISysHostDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysHostDo) Limit(limit int) ISysHostDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysHostDo) Offset(offset int) ISysHostDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysHostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysHostDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysHostDo) Unscoped() ISysHostDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysHostDo) Create(values ...*model.SysHost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysHostDo) CreateInBatches(values []*model.SysHost, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysHostDo) Save(values ...*model.SysHost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysHostDo) First() (*model.SysHost, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHost), nil
	}
}

func (s sysHostDo) Take() (*model.SysHost, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHost), nil
	}
}

func (s sysHostDo) Last() (*model.SysHost, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHost), nil
	}
}

func (s sysHostDo) Find() ([]*model.SysHost, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysHost), err
}

func (s sysHostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysHost, err error) {
	buf := make([]*model.SysHost, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysHostDo) FindInBatches(result *[]*model.SysHost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysHostDo) Attrs(attrs ...field.AssignExpr) ISysHostDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysHostDo) Assign(attrs ...field.AssignExpr) ISysHostDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysHostDo) Joins(fields ...field.RelationField) ISysHostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysHostDo) Preload(fields ...field.RelationField) ISysHostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysHostDo) FirstOrInit() (*model.SysHost, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHost), nil
	}
}

func (s sysHostDo) FirstOrCreate() (*model.SysHost, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysHost), nil
	}
}

func (s sysHostDo) FindByPage(offset int, limit int) (result []*model.SysHost, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysHostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysHostDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysHostDo) Delete(models ...*model.SysHost) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysHostDo) withDO(do gen.Dao) *sysHostDo {
	s.DO = *do.(*gen.DO)
	return s
}
