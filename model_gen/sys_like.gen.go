// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysLike(db *gorm.DB, opts ...gen.DOOption) sysLike {
	_sysLike := sysLike{}

	_sysLike.sysLikeDo.UseDB(db, opts...)
	_sysLike.sysLikeDo.UseModel(&model.SysLike{})

	tableName := _sysLike.sysLikeDo.TableName()
	_sysLike.ALL = field.NewAsterisk(tableName)
	_sysLike.SysLikeID = field.NewInt32(tableName, "sys_like_id")
	_sysLike.BusiID = field.NewString(tableName, "busi_id")
	_sysLike.OpUser = field.NewString(tableName, "op_user")
	_sysLike.CreateTime = field.NewTime(tableName, "create_time")
	_sysLike.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysLike.Comments = field.NewString(tableName, "comments")

	_sysLike.fillFieldMap()

	return _sysLike
}

type sysLike struct {
	sysLikeDo

	ALL        field.Asterisk
	SysLikeID  field.Int32
	BusiID     field.String // 其他表的主键
	OpUser     field.String // 点赞人
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sysLike) Table(newTableName string) *sysLike {
	s.sysLikeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLike) As(alias string) *sysLike {
	s.sysLikeDo.DO = *(s.sysLikeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLike) updateTableName(table string) *sysLike {
	s.ALL = field.NewAsterisk(table)
	s.SysLikeID = field.NewInt32(table, "sys_like_id")
	s.BusiID = field.NewString(table, "busi_id")
	s.OpUser = field.NewString(table, "op_user")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sysLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLike) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["sys_like_id"] = s.SysLikeID
	s.fieldMap["busi_id"] = s.BusiID
	s.fieldMap["op_user"] = s.OpUser
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s sysLike) clone(db *gorm.DB) sysLike {
	s.sysLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysLike) replaceDB(db *gorm.DB) sysLike {
	s.sysLikeDo.ReplaceDB(db)
	return s
}

type sysLikeDo struct{ gen.DO }

type ISysLikeDo interface {
	gen.SubQuery
	Debug() ISysLikeDo
	WithContext(ctx context.Context) ISysLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysLikeDo
	WriteDB() ISysLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysLikeDo
	Not(conds ...gen.Condition) ISysLikeDo
	Or(conds ...gen.Condition) ISysLikeDo
	Select(conds ...field.Expr) ISysLikeDo
	Where(conds ...gen.Condition) ISysLikeDo
	Order(conds ...field.Expr) ISysLikeDo
	Distinct(cols ...field.Expr) ISysLikeDo
	Omit(cols ...field.Expr) ISysLikeDo
	Join(table schema.Tabler, on ...field.Expr) ISysLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysLikeDo
	Group(cols ...field.Expr) ISysLikeDo
	Having(conds ...gen.Condition) ISysLikeDo
	Limit(limit int) ISysLikeDo
	Offset(offset int) ISysLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLikeDo
	Unscoped() ISysLikeDo
	Create(values ...*model.SysLike) error
	CreateInBatches(values []*model.SysLike, batchSize int) error
	Save(values ...*model.SysLike) error
	First() (*model.SysLike, error)
	Take() (*model.SysLike, error)
	Last() (*model.SysLike, error)
	Find() ([]*model.SysLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysLike, err error)
	FindInBatches(result *[]*model.SysLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysLikeDo
	Assign(attrs ...field.AssignExpr) ISysLikeDo
	Joins(fields ...field.RelationField) ISysLikeDo
	Preload(fields ...field.RelationField) ISysLikeDo
	FirstOrInit() (*model.SysLike, error)
	FirstOrCreate() (*model.SysLike, error)
	FindByPage(offset int, limit int) (result []*model.SysLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysLikeDo) Debug() ISysLikeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLikeDo) WithContext(ctx context.Context) ISysLikeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLikeDo) ReadDB() ISysLikeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLikeDo) WriteDB() ISysLikeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLikeDo) Session(config *gorm.Session) ISysLikeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLikeDo) Clauses(conds ...clause.Expression) ISysLikeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLikeDo) Returning(value interface{}, columns ...string) ISysLikeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLikeDo) Not(conds ...gen.Condition) ISysLikeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLikeDo) Or(conds ...gen.Condition) ISysLikeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLikeDo) Select(conds ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLikeDo) Where(conds ...gen.Condition) ISysLikeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLikeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysLikeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysLikeDo) Order(conds ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLikeDo) Distinct(cols ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLikeDo) Omit(cols ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLikeDo) Join(table schema.Tabler, on ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLikeDo) Group(cols ...field.Expr) ISysLikeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLikeDo) Having(conds ...gen.Condition) ISysLikeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLikeDo) Limit(limit int) ISysLikeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLikeDo) Offset(offset int) ISysLikeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLikeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLikeDo) Unscoped() ISysLikeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLikeDo) Create(values ...*model.SysLike) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLikeDo) CreateInBatches(values []*model.SysLike, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLikeDo) Save(values ...*model.SysLike) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLikeDo) First() (*model.SysLike, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLike), nil
	}
}

func (s sysLikeDo) Take() (*model.SysLike, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLike), nil
	}
}

func (s sysLikeDo) Last() (*model.SysLike, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLike), nil
	}
}

func (s sysLikeDo) Find() ([]*model.SysLike, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysLike), err
}

func (s sysLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysLike, err error) {
	buf := make([]*model.SysLike, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLikeDo) FindInBatches(result *[]*model.SysLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLikeDo) Attrs(attrs ...field.AssignExpr) ISysLikeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLikeDo) Assign(attrs ...field.AssignExpr) ISysLikeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLikeDo) Joins(fields ...field.RelationField) ISysLikeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLikeDo) Preload(fields ...field.RelationField) ISysLikeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLikeDo) FirstOrInit() (*model.SysLike, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLike), nil
	}
}

func (s sysLikeDo) FirstOrCreate() (*model.SysLike, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysLike), nil
	}
}

func (s sysLikeDo) FindByPage(offset int, limit int) (result []*model.SysLike, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLikeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLikeDo) Delete(models ...*model.SysLike) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLikeDo) withDO(do gen.Dao) *sysLikeDo {
	s.DO = *do.(*gen.DO)
	return s
}
