// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysMenuV2(db *gorm.DB, opts ...gen.DOOption) sysMenuV2 {
	_sysMenuV2 := sysMenuV2{}

	_sysMenuV2.sysMenuV2Do.UseDB(db, opts...)
	_sysMenuV2.sysMenuV2Do.UseModel(&model.SysMenuV2{})

	tableName := _sysMenuV2.sysMenuV2Do.TableName()
	_sysMenuV2.ALL = field.NewAsterisk(tableName)
	_sysMenuV2.MenuID = field.NewString(tableName, "menu_id")
	_sysMenuV2.MenuPid = field.NewString(tableName, "menu_pid")
	_sysMenuV2.MenuText = field.NewString(tableName, "menu_text")
	_sysMenuV2.MenuURL = field.NewString(tableName, "menu_url")
	_sysMenuV2.MenuIcon = field.NewString(tableName, "menu_icon")
	_sysMenuV2.Statu = field.NewInt32(tableName, "statu")
	_sysMenuV2.Expand = field.NewString(tableName, "expand")
	_sysMenuV2.NewTab = field.NewString(tableName, "new_tab")
	_sysMenuV2.SysProjectID = field.NewInt32(tableName, "sys_project_id")
	_sysMenuV2.MenuIconCSS = field.NewString(tableName, "menu_icon_css")
	_sysMenuV2.MenuDot = field.NewString(tableName, "menu_dot")
	_sysMenuV2.CreateTime = field.NewTime(tableName, "create_time")
	_sysMenuV2.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysMenuV2.Comments = field.NewString(tableName, "comments")
	_sysMenuV2.ID = field.NewInt64(tableName, "id")
	_sysMenuV2.OrderID = field.NewInt64(tableName, "order_id")
	_sysMenuV2.MenuURLType = field.NewString(tableName, "menu_url_type")
	_sysMenuV2.MenuCode = field.NewString(tableName, "menu_code")

	_sysMenuV2.fillFieldMap()

	return _sysMenuV2
}

type sysMenuV2 struct {
	sysMenuV2Do

	ALL          field.Asterisk
	MenuID       field.String // 菜单主键
	MenuPid      field.String // 父菜单ID
	MenuText     field.String // 菜单中文名称
	MenuURL      field.String // 菜单链接
	MenuIcon     field.String // 菜单图标
	Statu        field.Int32  // 1 启用，0禁用
	Expand       field.String // 父菜单是否默认展开
	NewTab       field.String // 是否在新的浏览器标签页打开
	SysProjectID field.Int32  // 所属项目ID
	MenuIconCSS  field.String // css图标
	/*
		菜单是否显示小红点，用于提示用户这个是功能新功能或特性
		1 显示小红点
		0 不显示小红点
	*/
	MenuDot     field.String
	CreateTime  field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime  field.Time   // 记录修改时间（数据库自动写入）
	Comments    field.String // 备注说明
	ID          field.Int64
	OrderID     field.Int64 // 排序id,正序排列
	MenuURLType field.String
	MenuCode    field.String

	fieldMap map[string]field.Expr
}

func (s sysMenuV2) Table(newTableName string) *sysMenuV2 {
	s.sysMenuV2Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenuV2) As(alias string) *sysMenuV2 {
	s.sysMenuV2Do.DO = *(s.sysMenuV2Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenuV2) updateTableName(table string) *sysMenuV2 {
	s.ALL = field.NewAsterisk(table)
	s.MenuID = field.NewString(table, "menu_id")
	s.MenuPid = field.NewString(table, "menu_pid")
	s.MenuText = field.NewString(table, "menu_text")
	s.MenuURL = field.NewString(table, "menu_url")
	s.MenuIcon = field.NewString(table, "menu_icon")
	s.Statu = field.NewInt32(table, "statu")
	s.Expand = field.NewString(table, "expand")
	s.NewTab = field.NewString(table, "new_tab")
	s.SysProjectID = field.NewInt32(table, "sys_project_id")
	s.MenuIconCSS = field.NewString(table, "menu_icon_css")
	s.MenuDot = field.NewString(table, "menu_dot")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.ID = field.NewInt64(table, "id")
	s.OrderID = field.NewInt64(table, "order_id")
	s.MenuURLType = field.NewString(table, "menu_url_type")
	s.MenuCode = field.NewString(table, "menu_code")

	s.fillFieldMap()

	return s
}

func (s *sysMenuV2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenuV2) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 18)
	s.fieldMap["menu_id"] = s.MenuID
	s.fieldMap["menu_pid"] = s.MenuPid
	s.fieldMap["menu_text"] = s.MenuText
	s.fieldMap["menu_url"] = s.MenuURL
	s.fieldMap["menu_icon"] = s.MenuIcon
	s.fieldMap["statu"] = s.Statu
	s.fieldMap["expand"] = s.Expand
	s.fieldMap["new_tab"] = s.NewTab
	s.fieldMap["sys_project_id"] = s.SysProjectID
	s.fieldMap["menu_icon_css"] = s.MenuIconCSS
	s.fieldMap["menu_dot"] = s.MenuDot
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["id"] = s.ID
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["menu_url_type"] = s.MenuURLType
	s.fieldMap["menu_code"] = s.MenuCode
}

func (s sysMenuV2) clone(db *gorm.DB) sysMenuV2 {
	s.sysMenuV2Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysMenuV2) replaceDB(db *gorm.DB) sysMenuV2 {
	s.sysMenuV2Do.ReplaceDB(db)
	return s
}

type sysMenuV2Do struct{ gen.DO }

type ISysMenuV2Do interface {
	gen.SubQuery
	Debug() ISysMenuV2Do
	WithContext(ctx context.Context) ISysMenuV2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuV2Do
	WriteDB() ISysMenuV2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuV2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuV2Do
	Not(conds ...gen.Condition) ISysMenuV2Do
	Or(conds ...gen.Condition) ISysMenuV2Do
	Select(conds ...field.Expr) ISysMenuV2Do
	Where(conds ...gen.Condition) ISysMenuV2Do
	Order(conds ...field.Expr) ISysMenuV2Do
	Distinct(cols ...field.Expr) ISysMenuV2Do
	Omit(cols ...field.Expr) ISysMenuV2Do
	Join(table schema.Tabler, on ...field.Expr) ISysMenuV2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuV2Do
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuV2Do
	Group(cols ...field.Expr) ISysMenuV2Do
	Having(conds ...gen.Condition) ISysMenuV2Do
	Limit(limit int) ISysMenuV2Do
	Offset(offset int) ISysMenuV2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuV2Do
	Unscoped() ISysMenuV2Do
	Create(values ...*model.SysMenuV2) error
	CreateInBatches(values []*model.SysMenuV2, batchSize int) error
	Save(values ...*model.SysMenuV2) error
	First() (*model.SysMenuV2, error)
	Take() (*model.SysMenuV2, error)
	Last() (*model.SysMenuV2, error)
	Find() ([]*model.SysMenuV2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuV2, err error)
	FindInBatches(result *[]*model.SysMenuV2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysMenuV2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuV2Do
	Assign(attrs ...field.AssignExpr) ISysMenuV2Do
	Joins(fields ...field.RelationField) ISysMenuV2Do
	Preload(fields ...field.RelationField) ISysMenuV2Do
	FirstOrInit() (*model.SysMenuV2, error)
	FirstOrCreate() (*model.SysMenuV2, error)
	FindByPage(offset int, limit int) (result []*model.SysMenuV2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuV2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuV2Do) Debug() ISysMenuV2Do {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuV2Do) WithContext(ctx context.Context) ISysMenuV2Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuV2Do) ReadDB() ISysMenuV2Do {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuV2Do) WriteDB() ISysMenuV2Do {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuV2Do) Session(config *gorm.Session) ISysMenuV2Do {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuV2Do) Clauses(conds ...clause.Expression) ISysMenuV2Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuV2Do) Returning(value interface{}, columns ...string) ISysMenuV2Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuV2Do) Not(conds ...gen.Condition) ISysMenuV2Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuV2Do) Or(conds ...gen.Condition) ISysMenuV2Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuV2Do) Select(conds ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuV2Do) Where(conds ...gen.Condition) ISysMenuV2Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuV2Do) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysMenuV2Do {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysMenuV2Do) Order(conds ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuV2Do) Distinct(cols ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuV2Do) Omit(cols ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuV2Do) Join(table schema.Tabler, on ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuV2Do) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuV2Do) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuV2Do) Group(cols ...field.Expr) ISysMenuV2Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuV2Do) Having(conds ...gen.Condition) ISysMenuV2Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuV2Do) Limit(limit int) ISysMenuV2Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuV2Do) Offset(offset int) ISysMenuV2Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuV2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuV2Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuV2Do) Unscoped() ISysMenuV2Do {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuV2Do) Create(values ...*model.SysMenuV2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuV2Do) CreateInBatches(values []*model.SysMenuV2, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuV2Do) Save(values ...*model.SysMenuV2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuV2Do) First() (*model.SysMenuV2, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuV2), nil
	}
}

func (s sysMenuV2Do) Take() (*model.SysMenuV2, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuV2), nil
	}
}

func (s sysMenuV2Do) Last() (*model.SysMenuV2, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuV2), nil
	}
}

func (s sysMenuV2Do) Find() ([]*model.SysMenuV2, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysMenuV2), err
}

func (s sysMenuV2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysMenuV2, err error) {
	buf := make([]*model.SysMenuV2, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuV2Do) FindInBatches(result *[]*model.SysMenuV2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuV2Do) Attrs(attrs ...field.AssignExpr) ISysMenuV2Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuV2Do) Assign(attrs ...field.AssignExpr) ISysMenuV2Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuV2Do) Joins(fields ...field.RelationField) ISysMenuV2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuV2Do) Preload(fields ...field.RelationField) ISysMenuV2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuV2Do) FirstOrInit() (*model.SysMenuV2, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuV2), nil
	}
}

func (s sysMenuV2Do) FirstOrCreate() (*model.SysMenuV2, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysMenuV2), nil
	}
}

func (s sysMenuV2Do) FindByPage(offset int, limit int) (result []*model.SysMenuV2, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuV2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuV2Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuV2Do) Delete(models ...*model.SysMenuV2) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuV2Do) withDO(do gen.Dao) *sysMenuV2Do {
	s.DO = *do.(*gen.DO)
	return s
}
