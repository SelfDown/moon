// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysPortalType(db *gorm.DB, opts ...gen.DOOption) sysPortalType {
	_sysPortalType := sysPortalType{}

	_sysPortalType.sysPortalTypeDo.UseDB(db, opts...)
	_sysPortalType.sysPortalTypeDo.UseModel(&model.SysPortalType{})

	tableName := _sysPortalType.sysPortalTypeDo.TableName()
	_sysPortalType.ALL = field.NewAsterisk(tableName)
	_sysPortalType.SysPortalTypeID = field.NewString(tableName, "sys_portal_type_id")
	_sysPortalType.TypeText = field.NewString(tableName, "type_text")
	_sysPortalType.Comments = field.NewString(tableName, "comments")
	_sysPortalType.CreateTime = field.NewTime(tableName, "create_time")
	_sysPortalType.ModifyTime = field.NewTime(tableName, "modify_time")

	_sysPortalType.fillFieldMap()

	return _sysPortalType
}

type sysPortalType struct {
	sysPortalTypeDo

	ALL             field.Asterisk
	SysPortalTypeID field.String
	TypeText        field.String
	Comments        field.String
	CreateTime      field.Time // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time // 记录修改时间（数据库自动写入）

	fieldMap map[string]field.Expr
}

func (s sysPortalType) Table(newTableName string) *sysPortalType {
	s.sysPortalTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysPortalType) As(alias string) *sysPortalType {
	s.sysPortalTypeDo.DO = *(s.sysPortalTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysPortalType) updateTableName(table string) *sysPortalType {
	s.ALL = field.NewAsterisk(table)
	s.SysPortalTypeID = field.NewString(table, "sys_portal_type_id")
	s.TypeText = field.NewString(table, "type_text")
	s.Comments = field.NewString(table, "comments")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")

	s.fillFieldMap()

	return s
}

func (s *sysPortalType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysPortalType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["sys_portal_type_id"] = s.SysPortalTypeID
	s.fieldMap["type_text"] = s.TypeText
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
}

func (s sysPortalType) clone(db *gorm.DB) sysPortalType {
	s.sysPortalTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysPortalType) replaceDB(db *gorm.DB) sysPortalType {
	s.sysPortalTypeDo.ReplaceDB(db)
	return s
}

type sysPortalTypeDo struct{ gen.DO }

type ISysPortalTypeDo interface {
	gen.SubQuery
	Debug() ISysPortalTypeDo
	WithContext(ctx context.Context) ISysPortalTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysPortalTypeDo
	WriteDB() ISysPortalTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysPortalTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysPortalTypeDo
	Not(conds ...gen.Condition) ISysPortalTypeDo
	Or(conds ...gen.Condition) ISysPortalTypeDo
	Select(conds ...field.Expr) ISysPortalTypeDo
	Where(conds ...gen.Condition) ISysPortalTypeDo
	Order(conds ...field.Expr) ISysPortalTypeDo
	Distinct(cols ...field.Expr) ISysPortalTypeDo
	Omit(cols ...field.Expr) ISysPortalTypeDo
	Join(table schema.Tabler, on ...field.Expr) ISysPortalTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysPortalTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysPortalTypeDo
	Group(cols ...field.Expr) ISysPortalTypeDo
	Having(conds ...gen.Condition) ISysPortalTypeDo
	Limit(limit int) ISysPortalTypeDo
	Offset(offset int) ISysPortalTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysPortalTypeDo
	Unscoped() ISysPortalTypeDo
	Create(values ...*model.SysPortalType) error
	CreateInBatches(values []*model.SysPortalType, batchSize int) error
	Save(values ...*model.SysPortalType) error
	First() (*model.SysPortalType, error)
	Take() (*model.SysPortalType, error)
	Last() (*model.SysPortalType, error)
	Find() ([]*model.SysPortalType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysPortalType, err error)
	FindInBatches(result *[]*model.SysPortalType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysPortalType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysPortalTypeDo
	Assign(attrs ...field.AssignExpr) ISysPortalTypeDo
	Joins(fields ...field.RelationField) ISysPortalTypeDo
	Preload(fields ...field.RelationField) ISysPortalTypeDo
	FirstOrInit() (*model.SysPortalType, error)
	FirstOrCreate() (*model.SysPortalType, error)
	FindByPage(offset int, limit int) (result []*model.SysPortalType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysPortalTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysPortalTypeDo) Debug() ISysPortalTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysPortalTypeDo) WithContext(ctx context.Context) ISysPortalTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysPortalTypeDo) ReadDB() ISysPortalTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysPortalTypeDo) WriteDB() ISysPortalTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysPortalTypeDo) Session(config *gorm.Session) ISysPortalTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysPortalTypeDo) Clauses(conds ...clause.Expression) ISysPortalTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysPortalTypeDo) Returning(value interface{}, columns ...string) ISysPortalTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysPortalTypeDo) Not(conds ...gen.Condition) ISysPortalTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysPortalTypeDo) Or(conds ...gen.Condition) ISysPortalTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysPortalTypeDo) Select(conds ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysPortalTypeDo) Where(conds ...gen.Condition) ISysPortalTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysPortalTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysPortalTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysPortalTypeDo) Order(conds ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysPortalTypeDo) Distinct(cols ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysPortalTypeDo) Omit(cols ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysPortalTypeDo) Join(table schema.Tabler, on ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysPortalTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysPortalTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysPortalTypeDo) Group(cols ...field.Expr) ISysPortalTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysPortalTypeDo) Having(conds ...gen.Condition) ISysPortalTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysPortalTypeDo) Limit(limit int) ISysPortalTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysPortalTypeDo) Offset(offset int) ISysPortalTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysPortalTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysPortalTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysPortalTypeDo) Unscoped() ISysPortalTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysPortalTypeDo) Create(values ...*model.SysPortalType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysPortalTypeDo) CreateInBatches(values []*model.SysPortalType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysPortalTypeDo) Save(values ...*model.SysPortalType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysPortalTypeDo) First() (*model.SysPortalType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPortalType), nil
	}
}

func (s sysPortalTypeDo) Take() (*model.SysPortalType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPortalType), nil
	}
}

func (s sysPortalTypeDo) Last() (*model.SysPortalType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPortalType), nil
	}
}

func (s sysPortalTypeDo) Find() ([]*model.SysPortalType, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysPortalType), err
}

func (s sysPortalTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysPortalType, err error) {
	buf := make([]*model.SysPortalType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysPortalTypeDo) FindInBatches(result *[]*model.SysPortalType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysPortalTypeDo) Attrs(attrs ...field.AssignExpr) ISysPortalTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysPortalTypeDo) Assign(attrs ...field.AssignExpr) ISysPortalTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysPortalTypeDo) Joins(fields ...field.RelationField) ISysPortalTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysPortalTypeDo) Preload(fields ...field.RelationField) ISysPortalTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysPortalTypeDo) FirstOrInit() (*model.SysPortalType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPortalType), nil
	}
}

func (s sysPortalTypeDo) FirstOrCreate() (*model.SysPortalType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPortalType), nil
	}
}

func (s sysPortalTypeDo) FindByPage(offset int, limit int) (result []*model.SysPortalType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysPortalTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysPortalTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysPortalTypeDo) Delete(models ...*model.SysPortalType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysPortalTypeDo) withDO(do gen.Dao) *sysPortalTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
