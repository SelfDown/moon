// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysProjectParam(db *gorm.DB, opts ...gen.DOOption) sysProjectParam {
	_sysProjectParam := sysProjectParam{}

	_sysProjectParam.sysProjectParamDo.UseDB(db, opts...)
	_sysProjectParam.sysProjectParamDo.UseModel(&model.SysProjectParam{})

	tableName := _sysProjectParam.sysProjectParamDo.TableName()
	_sysProjectParam.ALL = field.NewAsterisk(tableName)
	_sysProjectParam.SysProjectParamID = field.NewString(tableName, "sys_project_param_id")
	_sysProjectParam.SysProjectCode = field.NewString(tableName, "sys_project_code")
	_sysProjectParam.ParamKey = field.NewString(tableName, "param_key")
	_sysProjectParam.ParamValue = field.NewString(tableName, "param_value")

	_sysProjectParam.fillFieldMap()

	return _sysProjectParam
}

type sysProjectParam struct {
	sysProjectParamDo

	ALL               field.Asterisk
	SysProjectParamID field.String
	SysProjectCode    field.String
	ParamKey          field.String
	ParamValue        field.String

	fieldMap map[string]field.Expr
}

func (s sysProjectParam) Table(newTableName string) *sysProjectParam {
	s.sysProjectParamDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysProjectParam) As(alias string) *sysProjectParam {
	s.sysProjectParamDo.DO = *(s.sysProjectParamDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysProjectParam) updateTableName(table string) *sysProjectParam {
	s.ALL = field.NewAsterisk(table)
	s.SysProjectParamID = field.NewString(table, "sys_project_param_id")
	s.SysProjectCode = field.NewString(table, "sys_project_code")
	s.ParamKey = field.NewString(table, "param_key")
	s.ParamValue = field.NewString(table, "param_value")

	s.fillFieldMap()

	return s
}

func (s *sysProjectParam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysProjectParam) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["sys_project_param_id"] = s.SysProjectParamID
	s.fieldMap["sys_project_code"] = s.SysProjectCode
	s.fieldMap["param_key"] = s.ParamKey
	s.fieldMap["param_value"] = s.ParamValue
}

func (s sysProjectParam) clone(db *gorm.DB) sysProjectParam {
	s.sysProjectParamDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysProjectParam) replaceDB(db *gorm.DB) sysProjectParam {
	s.sysProjectParamDo.ReplaceDB(db)
	return s
}

type sysProjectParamDo struct{ gen.DO }

type ISysProjectParamDo interface {
	gen.SubQuery
	Debug() ISysProjectParamDo
	WithContext(ctx context.Context) ISysProjectParamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysProjectParamDo
	WriteDB() ISysProjectParamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysProjectParamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysProjectParamDo
	Not(conds ...gen.Condition) ISysProjectParamDo
	Or(conds ...gen.Condition) ISysProjectParamDo
	Select(conds ...field.Expr) ISysProjectParamDo
	Where(conds ...gen.Condition) ISysProjectParamDo
	Order(conds ...field.Expr) ISysProjectParamDo
	Distinct(cols ...field.Expr) ISysProjectParamDo
	Omit(cols ...field.Expr) ISysProjectParamDo
	Join(table schema.Tabler, on ...field.Expr) ISysProjectParamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectParamDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectParamDo
	Group(cols ...field.Expr) ISysProjectParamDo
	Having(conds ...gen.Condition) ISysProjectParamDo
	Limit(limit int) ISysProjectParamDo
	Offset(offset int) ISysProjectParamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectParamDo
	Unscoped() ISysProjectParamDo
	Create(values ...*model.SysProjectParam) error
	CreateInBatches(values []*model.SysProjectParam, batchSize int) error
	Save(values ...*model.SysProjectParam) error
	First() (*model.SysProjectParam, error)
	Take() (*model.SysProjectParam, error)
	Last() (*model.SysProjectParam, error)
	Find() ([]*model.SysProjectParam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProjectParam, err error)
	FindInBatches(result *[]*model.SysProjectParam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysProjectParam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysProjectParamDo
	Assign(attrs ...field.AssignExpr) ISysProjectParamDo
	Joins(fields ...field.RelationField) ISysProjectParamDo
	Preload(fields ...field.RelationField) ISysProjectParamDo
	FirstOrInit() (*model.SysProjectParam, error)
	FirstOrCreate() (*model.SysProjectParam, error)
	FindByPage(offset int, limit int) (result []*model.SysProjectParam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysProjectParamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysProjectParamDo) Debug() ISysProjectParamDo {
	return s.withDO(s.DO.Debug())
}

func (s sysProjectParamDo) WithContext(ctx context.Context) ISysProjectParamDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysProjectParamDo) ReadDB() ISysProjectParamDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysProjectParamDo) WriteDB() ISysProjectParamDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysProjectParamDo) Session(config *gorm.Session) ISysProjectParamDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysProjectParamDo) Clauses(conds ...clause.Expression) ISysProjectParamDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysProjectParamDo) Returning(value interface{}, columns ...string) ISysProjectParamDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysProjectParamDo) Not(conds ...gen.Condition) ISysProjectParamDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysProjectParamDo) Or(conds ...gen.Condition) ISysProjectParamDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysProjectParamDo) Select(conds ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysProjectParamDo) Where(conds ...gen.Condition) ISysProjectParamDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysProjectParamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysProjectParamDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysProjectParamDo) Order(conds ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysProjectParamDo) Distinct(cols ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysProjectParamDo) Omit(cols ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysProjectParamDo) Join(table schema.Tabler, on ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysProjectParamDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysProjectParamDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysProjectParamDo) Group(cols ...field.Expr) ISysProjectParamDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysProjectParamDo) Having(conds ...gen.Condition) ISysProjectParamDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysProjectParamDo) Limit(limit int) ISysProjectParamDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysProjectParamDo) Offset(offset int) ISysProjectParamDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysProjectParamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectParamDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysProjectParamDo) Unscoped() ISysProjectParamDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysProjectParamDo) Create(values ...*model.SysProjectParam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysProjectParamDo) CreateInBatches(values []*model.SysProjectParam, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysProjectParamDo) Save(values ...*model.SysProjectParam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysProjectParamDo) First() (*model.SysProjectParam, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectParam), nil
	}
}

func (s sysProjectParamDo) Take() (*model.SysProjectParam, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectParam), nil
	}
}

func (s sysProjectParamDo) Last() (*model.SysProjectParam, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectParam), nil
	}
}

func (s sysProjectParamDo) Find() ([]*model.SysProjectParam, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysProjectParam), err
}

func (s sysProjectParamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProjectParam, err error) {
	buf := make([]*model.SysProjectParam, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysProjectParamDo) FindInBatches(result *[]*model.SysProjectParam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysProjectParamDo) Attrs(attrs ...field.AssignExpr) ISysProjectParamDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysProjectParamDo) Assign(attrs ...field.AssignExpr) ISysProjectParamDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysProjectParamDo) Joins(fields ...field.RelationField) ISysProjectParamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysProjectParamDo) Preload(fields ...field.RelationField) ISysProjectParamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysProjectParamDo) FirstOrInit() (*model.SysProjectParam, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectParam), nil
	}
}

func (s sysProjectParamDo) FirstOrCreate() (*model.SysProjectParam, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectParam), nil
	}
}

func (s sysProjectParamDo) FindByPage(offset int, limit int) (result []*model.SysProjectParam, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysProjectParamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysProjectParamDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysProjectParamDo) Delete(models ...*model.SysProjectParam) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysProjectParamDo) withDO(do gen.Dao) *sysProjectParamDo {
	s.DO = *do.(*gen.DO)
	return s
}
