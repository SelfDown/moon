// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysProjectTeam(db *gorm.DB, opts ...gen.DOOption) sysProjectTeam {
	_sysProjectTeam := sysProjectTeam{}

	_sysProjectTeam.sysProjectTeamDo.UseDB(db, opts...)
	_sysProjectTeam.sysProjectTeamDo.UseModel(&model.SysProjectTeam{})

	tableName := _sysProjectTeam.sysProjectTeamDo.TableName()
	_sysProjectTeam.ALL = field.NewAsterisk(tableName)
	_sysProjectTeam.SysProjectTeamID = field.NewString(tableName, "sys_project_team_id")
	_sysProjectTeam.TeamName = field.NewString(tableName, "team_name")
	_sysProjectTeam.TeamCode = field.NewString(tableName, "team_code")
	_sysProjectTeam.TeamLeader = field.NewString(tableName, "team_leader")
	_sysProjectTeam.Notes = field.NewString(tableName, "notes")
	_sysProjectTeam.TeamLeaderID = field.NewString(tableName, "team_leader_id")
	_sysProjectTeam.CreateTime = field.NewTime(tableName, "create_time")
	_sysProjectTeam.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysProjectTeam.Comments = field.NewString(tableName, "comments")

	_sysProjectTeam.fillFieldMap()

	return _sysProjectTeam
}

type sysProjectTeam struct {
	sysProjectTeamDo

	ALL              field.Asterisk
	SysProjectTeamID field.String
	TeamName         field.String
	TeamCode         field.String
	TeamLeader       field.String
	Notes            field.String
	TeamLeaderID     field.String // 产品负责人ID关联 sys_project_team_leader
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sysProjectTeam) Table(newTableName string) *sysProjectTeam {
	s.sysProjectTeamDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysProjectTeam) As(alias string) *sysProjectTeam {
	s.sysProjectTeamDo.DO = *(s.sysProjectTeamDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysProjectTeam) updateTableName(table string) *sysProjectTeam {
	s.ALL = field.NewAsterisk(table)
	s.SysProjectTeamID = field.NewString(table, "sys_project_team_id")
	s.TeamName = field.NewString(table, "team_name")
	s.TeamCode = field.NewString(table, "team_code")
	s.TeamLeader = field.NewString(table, "team_leader")
	s.Notes = field.NewString(table, "notes")
	s.TeamLeaderID = field.NewString(table, "team_leader_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sysProjectTeam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysProjectTeam) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["sys_project_team_id"] = s.SysProjectTeamID
	s.fieldMap["team_name"] = s.TeamName
	s.fieldMap["team_code"] = s.TeamCode
	s.fieldMap["team_leader"] = s.TeamLeader
	s.fieldMap["notes"] = s.Notes
	s.fieldMap["team_leader_id"] = s.TeamLeaderID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s sysProjectTeam) clone(db *gorm.DB) sysProjectTeam {
	s.sysProjectTeamDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysProjectTeam) replaceDB(db *gorm.DB) sysProjectTeam {
	s.sysProjectTeamDo.ReplaceDB(db)
	return s
}

type sysProjectTeamDo struct{ gen.DO }

type ISysProjectTeamDo interface {
	gen.SubQuery
	Debug() ISysProjectTeamDo
	WithContext(ctx context.Context) ISysProjectTeamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysProjectTeamDo
	WriteDB() ISysProjectTeamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysProjectTeamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysProjectTeamDo
	Not(conds ...gen.Condition) ISysProjectTeamDo
	Or(conds ...gen.Condition) ISysProjectTeamDo
	Select(conds ...field.Expr) ISysProjectTeamDo
	Where(conds ...gen.Condition) ISysProjectTeamDo
	Order(conds ...field.Expr) ISysProjectTeamDo
	Distinct(cols ...field.Expr) ISysProjectTeamDo
	Omit(cols ...field.Expr) ISysProjectTeamDo
	Join(table schema.Tabler, on ...field.Expr) ISysProjectTeamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamDo
	Group(cols ...field.Expr) ISysProjectTeamDo
	Having(conds ...gen.Condition) ISysProjectTeamDo
	Limit(limit int) ISysProjectTeamDo
	Offset(offset int) ISysProjectTeamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectTeamDo
	Unscoped() ISysProjectTeamDo
	Create(values ...*model.SysProjectTeam) error
	CreateInBatches(values []*model.SysProjectTeam, batchSize int) error
	Save(values ...*model.SysProjectTeam) error
	First() (*model.SysProjectTeam, error)
	Take() (*model.SysProjectTeam, error)
	Last() (*model.SysProjectTeam, error)
	Find() ([]*model.SysProjectTeam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProjectTeam, err error)
	FindInBatches(result *[]*model.SysProjectTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysProjectTeam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysProjectTeamDo
	Assign(attrs ...field.AssignExpr) ISysProjectTeamDo
	Joins(fields ...field.RelationField) ISysProjectTeamDo
	Preload(fields ...field.RelationField) ISysProjectTeamDo
	FirstOrInit() (*model.SysProjectTeam, error)
	FirstOrCreate() (*model.SysProjectTeam, error)
	FindByPage(offset int, limit int) (result []*model.SysProjectTeam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysProjectTeamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysProjectTeamDo) Debug() ISysProjectTeamDo {
	return s.withDO(s.DO.Debug())
}

func (s sysProjectTeamDo) WithContext(ctx context.Context) ISysProjectTeamDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysProjectTeamDo) ReadDB() ISysProjectTeamDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysProjectTeamDo) WriteDB() ISysProjectTeamDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysProjectTeamDo) Session(config *gorm.Session) ISysProjectTeamDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysProjectTeamDo) Clauses(conds ...clause.Expression) ISysProjectTeamDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysProjectTeamDo) Returning(value interface{}, columns ...string) ISysProjectTeamDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysProjectTeamDo) Not(conds ...gen.Condition) ISysProjectTeamDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysProjectTeamDo) Or(conds ...gen.Condition) ISysProjectTeamDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysProjectTeamDo) Select(conds ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysProjectTeamDo) Where(conds ...gen.Condition) ISysProjectTeamDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysProjectTeamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysProjectTeamDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysProjectTeamDo) Order(conds ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysProjectTeamDo) Distinct(cols ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysProjectTeamDo) Omit(cols ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysProjectTeamDo) Join(table schema.Tabler, on ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysProjectTeamDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysProjectTeamDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysProjectTeamDo) Group(cols ...field.Expr) ISysProjectTeamDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysProjectTeamDo) Having(conds ...gen.Condition) ISysProjectTeamDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysProjectTeamDo) Limit(limit int) ISysProjectTeamDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysProjectTeamDo) Offset(offset int) ISysProjectTeamDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysProjectTeamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectTeamDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysProjectTeamDo) Unscoped() ISysProjectTeamDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysProjectTeamDo) Create(values ...*model.SysProjectTeam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysProjectTeamDo) CreateInBatches(values []*model.SysProjectTeam, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysProjectTeamDo) Save(values ...*model.SysProjectTeam) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysProjectTeamDo) First() (*model.SysProjectTeam, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeam), nil
	}
}

func (s sysProjectTeamDo) Take() (*model.SysProjectTeam, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeam), nil
	}
}

func (s sysProjectTeamDo) Last() (*model.SysProjectTeam, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeam), nil
	}
}

func (s sysProjectTeamDo) Find() ([]*model.SysProjectTeam, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysProjectTeam), err
}

func (s sysProjectTeamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProjectTeam, err error) {
	buf := make([]*model.SysProjectTeam, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysProjectTeamDo) FindInBatches(result *[]*model.SysProjectTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysProjectTeamDo) Attrs(attrs ...field.AssignExpr) ISysProjectTeamDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysProjectTeamDo) Assign(attrs ...field.AssignExpr) ISysProjectTeamDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysProjectTeamDo) Joins(fields ...field.RelationField) ISysProjectTeamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysProjectTeamDo) Preload(fields ...field.RelationField) ISysProjectTeamDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysProjectTeamDo) FirstOrInit() (*model.SysProjectTeam, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeam), nil
	}
}

func (s sysProjectTeamDo) FirstOrCreate() (*model.SysProjectTeam, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeam), nil
	}
}

func (s sysProjectTeamDo) FindByPage(offset int, limit int) (result []*model.SysProjectTeam, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysProjectTeamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysProjectTeamDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysProjectTeamDo) Delete(models ...*model.SysProjectTeam) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysProjectTeamDo) withDO(do gen.Dao) *sysProjectTeamDo {
	s.DO = *do.(*gen.DO)
	return s
}
