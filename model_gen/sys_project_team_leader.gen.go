// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysProjectTeamLeader(db *gorm.DB, opts ...gen.DOOption) sysProjectTeamLeader {
	_sysProjectTeamLeader := sysProjectTeamLeader{}

	_sysProjectTeamLeader.sysProjectTeamLeaderDo.UseDB(db, opts...)
	_sysProjectTeamLeader.sysProjectTeamLeaderDo.UseModel(&model.SysProjectTeamLeader{})

	tableName := _sysProjectTeamLeader.sysProjectTeamLeaderDo.TableName()
	_sysProjectTeamLeader.ALL = field.NewAsterisk(tableName)
	_sysProjectTeamLeader.TeamLeaderID = field.NewString(tableName, "team_leader_id")
	_sysProjectTeamLeader.Userid = field.NewString(tableName, "userid")
	_sysProjectTeamLeader.SysProjectTeamID = field.NewString(tableName, "sys_project_team_id")
	_sysProjectTeamLeader.Notes = field.NewString(tableName, "notes")
	_sysProjectTeamLeader.CreateTime = field.NewTime(tableName, "create_time")
	_sysProjectTeamLeader.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysProjectTeamLeader.Comments = field.NewString(tableName, "comments")

	_sysProjectTeamLeader.fillFieldMap()

	return _sysProjectTeamLeader
}

type sysProjectTeamLeader struct {
	sysProjectTeamLeaderDo

	ALL              field.Asterisk
	TeamLeaderID     field.String
	Userid           field.String
	SysProjectTeamID field.String
	Notes            field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (s sysProjectTeamLeader) Table(newTableName string) *sysProjectTeamLeader {
	s.sysProjectTeamLeaderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysProjectTeamLeader) As(alias string) *sysProjectTeamLeader {
	s.sysProjectTeamLeaderDo.DO = *(s.sysProjectTeamLeaderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysProjectTeamLeader) updateTableName(table string) *sysProjectTeamLeader {
	s.ALL = field.NewAsterisk(table)
	s.TeamLeaderID = field.NewString(table, "team_leader_id")
	s.Userid = field.NewString(table, "userid")
	s.SysProjectTeamID = field.NewString(table, "sys_project_team_id")
	s.Notes = field.NewString(table, "notes")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")

	s.fillFieldMap()

	return s
}

func (s *sysProjectTeamLeader) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysProjectTeamLeader) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["team_leader_id"] = s.TeamLeaderID
	s.fieldMap["userid"] = s.Userid
	s.fieldMap["sys_project_team_id"] = s.SysProjectTeamID
	s.fieldMap["notes"] = s.Notes
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
}

func (s sysProjectTeamLeader) clone(db *gorm.DB) sysProjectTeamLeader {
	s.sysProjectTeamLeaderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysProjectTeamLeader) replaceDB(db *gorm.DB) sysProjectTeamLeader {
	s.sysProjectTeamLeaderDo.ReplaceDB(db)
	return s
}

type sysProjectTeamLeaderDo struct{ gen.DO }

type ISysProjectTeamLeaderDo interface {
	gen.SubQuery
	Debug() ISysProjectTeamLeaderDo
	WithContext(ctx context.Context) ISysProjectTeamLeaderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysProjectTeamLeaderDo
	WriteDB() ISysProjectTeamLeaderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysProjectTeamLeaderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysProjectTeamLeaderDo
	Not(conds ...gen.Condition) ISysProjectTeamLeaderDo
	Or(conds ...gen.Condition) ISysProjectTeamLeaderDo
	Select(conds ...field.Expr) ISysProjectTeamLeaderDo
	Where(conds ...gen.Condition) ISysProjectTeamLeaderDo
	Order(conds ...field.Expr) ISysProjectTeamLeaderDo
	Distinct(cols ...field.Expr) ISysProjectTeamLeaderDo
	Omit(cols ...field.Expr) ISysProjectTeamLeaderDo
	Join(table schema.Tabler, on ...field.Expr) ISysProjectTeamLeaderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamLeaderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamLeaderDo
	Group(cols ...field.Expr) ISysProjectTeamLeaderDo
	Having(conds ...gen.Condition) ISysProjectTeamLeaderDo
	Limit(limit int) ISysProjectTeamLeaderDo
	Offset(offset int) ISysProjectTeamLeaderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectTeamLeaderDo
	Unscoped() ISysProjectTeamLeaderDo
	Create(values ...*model.SysProjectTeamLeader) error
	CreateInBatches(values []*model.SysProjectTeamLeader, batchSize int) error
	Save(values ...*model.SysProjectTeamLeader) error
	First() (*model.SysProjectTeamLeader, error)
	Take() (*model.SysProjectTeamLeader, error)
	Last() (*model.SysProjectTeamLeader, error)
	Find() ([]*model.SysProjectTeamLeader, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProjectTeamLeader, err error)
	FindInBatches(result *[]*model.SysProjectTeamLeader, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysProjectTeamLeader) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysProjectTeamLeaderDo
	Assign(attrs ...field.AssignExpr) ISysProjectTeamLeaderDo
	Joins(fields ...field.RelationField) ISysProjectTeamLeaderDo
	Preload(fields ...field.RelationField) ISysProjectTeamLeaderDo
	FirstOrInit() (*model.SysProjectTeamLeader, error)
	FirstOrCreate() (*model.SysProjectTeamLeader, error)
	FindByPage(offset int, limit int) (result []*model.SysProjectTeamLeader, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysProjectTeamLeaderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysProjectTeamLeaderDo) Debug() ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Debug())
}

func (s sysProjectTeamLeaderDo) WithContext(ctx context.Context) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysProjectTeamLeaderDo) ReadDB() ISysProjectTeamLeaderDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysProjectTeamLeaderDo) WriteDB() ISysProjectTeamLeaderDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysProjectTeamLeaderDo) Session(config *gorm.Session) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysProjectTeamLeaderDo) Clauses(conds ...clause.Expression) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysProjectTeamLeaderDo) Returning(value interface{}, columns ...string) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysProjectTeamLeaderDo) Not(conds ...gen.Condition) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysProjectTeamLeaderDo) Or(conds ...gen.Condition) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysProjectTeamLeaderDo) Select(conds ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysProjectTeamLeaderDo) Where(conds ...gen.Condition) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysProjectTeamLeaderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysProjectTeamLeaderDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysProjectTeamLeaderDo) Order(conds ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysProjectTeamLeaderDo) Distinct(cols ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysProjectTeamLeaderDo) Omit(cols ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysProjectTeamLeaderDo) Join(table schema.Tabler, on ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysProjectTeamLeaderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysProjectTeamLeaderDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysProjectTeamLeaderDo) Group(cols ...field.Expr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysProjectTeamLeaderDo) Having(conds ...gen.Condition) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysProjectTeamLeaderDo) Limit(limit int) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysProjectTeamLeaderDo) Offset(offset int) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysProjectTeamLeaderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysProjectTeamLeaderDo) Unscoped() ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysProjectTeamLeaderDo) Create(values ...*model.SysProjectTeamLeader) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysProjectTeamLeaderDo) CreateInBatches(values []*model.SysProjectTeamLeader, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysProjectTeamLeaderDo) Save(values ...*model.SysProjectTeamLeader) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysProjectTeamLeaderDo) First() (*model.SysProjectTeamLeader, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeamLeader), nil
	}
}

func (s sysProjectTeamLeaderDo) Take() (*model.SysProjectTeamLeader, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeamLeader), nil
	}
}

func (s sysProjectTeamLeaderDo) Last() (*model.SysProjectTeamLeader, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeamLeader), nil
	}
}

func (s sysProjectTeamLeaderDo) Find() ([]*model.SysProjectTeamLeader, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysProjectTeamLeader), err
}

func (s sysProjectTeamLeaderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysProjectTeamLeader, err error) {
	buf := make([]*model.SysProjectTeamLeader, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysProjectTeamLeaderDo) FindInBatches(result *[]*model.SysProjectTeamLeader, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysProjectTeamLeaderDo) Attrs(attrs ...field.AssignExpr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysProjectTeamLeaderDo) Assign(attrs ...field.AssignExpr) ISysProjectTeamLeaderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysProjectTeamLeaderDo) Joins(fields ...field.RelationField) ISysProjectTeamLeaderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysProjectTeamLeaderDo) Preload(fields ...field.RelationField) ISysProjectTeamLeaderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysProjectTeamLeaderDo) FirstOrInit() (*model.SysProjectTeamLeader, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeamLeader), nil
	}
}

func (s sysProjectTeamLeaderDo) FirstOrCreate() (*model.SysProjectTeamLeader, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysProjectTeamLeader), nil
	}
}

func (s sysProjectTeamLeaderDo) FindByPage(offset int, limit int) (result []*model.SysProjectTeamLeader, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysProjectTeamLeaderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysProjectTeamLeaderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysProjectTeamLeaderDo) Delete(models ...*model.SysProjectTeamLeader) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysProjectTeamLeaderDo) withDO(do gen.Dao) *sysProjectTeamLeaderDo {
	s.DO = *do.(*gen.DO)
	return s
}
