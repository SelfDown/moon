// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysServerType(db *gorm.DB, opts ...gen.DOOption) sysServerType {
	_sysServerType := sysServerType{}

	_sysServerType.sysServerTypeDo.UseDB(db, opts...)
	_sysServerType.sysServerTypeDo.UseModel(&model.SysServerType{})

	tableName := _sysServerType.sysServerTypeDo.TableName()
	_sysServerType.ALL = field.NewAsterisk(tableName)
	_sysServerType.SysServerTypeID = field.NewInt32(tableName, "sys_server_type_id")
	_sysServerType.TypeText = field.NewString(tableName, "type_text")
	_sysServerType.TypeDesc = field.NewString(tableName, "type_desc")
	_sysServerType.PCode = field.NewString(tableName, "p_code")
	_sysServerType.ScriptsDirectory = field.NewString(tableName, "scripts_directory")

	_sysServerType.fillFieldMap()

	return _sysServerType
}

type sysServerType struct {
	sysServerTypeDo

	ALL              field.Asterisk
	SysServerTypeID  field.Int32
	TypeText         field.String
	TypeDesc         field.String
	PCode            field.String // 父编码
	ScriptsDirectory field.String // 软件脚本目录

	fieldMap map[string]field.Expr
}

func (s sysServerType) Table(newTableName string) *sysServerType {
	s.sysServerTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysServerType) As(alias string) *sysServerType {
	s.sysServerTypeDo.DO = *(s.sysServerTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysServerType) updateTableName(table string) *sysServerType {
	s.ALL = field.NewAsterisk(table)
	s.SysServerTypeID = field.NewInt32(table, "sys_server_type_id")
	s.TypeText = field.NewString(table, "type_text")
	s.TypeDesc = field.NewString(table, "type_desc")
	s.PCode = field.NewString(table, "p_code")
	s.ScriptsDirectory = field.NewString(table, "scripts_directory")

	s.fillFieldMap()

	return s
}

func (s *sysServerType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysServerType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["sys_server_type_id"] = s.SysServerTypeID
	s.fieldMap["type_text"] = s.TypeText
	s.fieldMap["type_desc"] = s.TypeDesc
	s.fieldMap["p_code"] = s.PCode
	s.fieldMap["scripts_directory"] = s.ScriptsDirectory
}

func (s sysServerType) clone(db *gorm.DB) sysServerType {
	s.sysServerTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysServerType) replaceDB(db *gorm.DB) sysServerType {
	s.sysServerTypeDo.ReplaceDB(db)
	return s
}

type sysServerTypeDo struct{ gen.DO }

type ISysServerTypeDo interface {
	gen.SubQuery
	Debug() ISysServerTypeDo
	WithContext(ctx context.Context) ISysServerTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysServerTypeDo
	WriteDB() ISysServerTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysServerTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysServerTypeDo
	Not(conds ...gen.Condition) ISysServerTypeDo
	Or(conds ...gen.Condition) ISysServerTypeDo
	Select(conds ...field.Expr) ISysServerTypeDo
	Where(conds ...gen.Condition) ISysServerTypeDo
	Order(conds ...field.Expr) ISysServerTypeDo
	Distinct(cols ...field.Expr) ISysServerTypeDo
	Omit(cols ...field.Expr) ISysServerTypeDo
	Join(table schema.Tabler, on ...field.Expr) ISysServerTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysServerTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysServerTypeDo
	Group(cols ...field.Expr) ISysServerTypeDo
	Having(conds ...gen.Condition) ISysServerTypeDo
	Limit(limit int) ISysServerTypeDo
	Offset(offset int) ISysServerTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysServerTypeDo
	Unscoped() ISysServerTypeDo
	Create(values ...*model.SysServerType) error
	CreateInBatches(values []*model.SysServerType, batchSize int) error
	Save(values ...*model.SysServerType) error
	First() (*model.SysServerType, error)
	Take() (*model.SysServerType, error)
	Last() (*model.SysServerType, error)
	Find() ([]*model.SysServerType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysServerType, err error)
	FindInBatches(result *[]*model.SysServerType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysServerType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysServerTypeDo
	Assign(attrs ...field.AssignExpr) ISysServerTypeDo
	Joins(fields ...field.RelationField) ISysServerTypeDo
	Preload(fields ...field.RelationField) ISysServerTypeDo
	FirstOrInit() (*model.SysServerType, error)
	FirstOrCreate() (*model.SysServerType, error)
	FindByPage(offset int, limit int) (result []*model.SysServerType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysServerTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysServerTypeDo) Debug() ISysServerTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysServerTypeDo) WithContext(ctx context.Context) ISysServerTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysServerTypeDo) ReadDB() ISysServerTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysServerTypeDo) WriteDB() ISysServerTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysServerTypeDo) Session(config *gorm.Session) ISysServerTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysServerTypeDo) Clauses(conds ...clause.Expression) ISysServerTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysServerTypeDo) Returning(value interface{}, columns ...string) ISysServerTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysServerTypeDo) Not(conds ...gen.Condition) ISysServerTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysServerTypeDo) Or(conds ...gen.Condition) ISysServerTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysServerTypeDo) Select(conds ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysServerTypeDo) Where(conds ...gen.Condition) ISysServerTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysServerTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysServerTypeDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysServerTypeDo) Order(conds ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysServerTypeDo) Distinct(cols ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysServerTypeDo) Omit(cols ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysServerTypeDo) Join(table schema.Tabler, on ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysServerTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysServerTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysServerTypeDo) Group(cols ...field.Expr) ISysServerTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysServerTypeDo) Having(conds ...gen.Condition) ISysServerTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysServerTypeDo) Limit(limit int) ISysServerTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysServerTypeDo) Offset(offset int) ISysServerTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysServerTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysServerTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysServerTypeDo) Unscoped() ISysServerTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysServerTypeDo) Create(values ...*model.SysServerType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysServerTypeDo) CreateInBatches(values []*model.SysServerType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysServerTypeDo) Save(values ...*model.SysServerType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysServerTypeDo) First() (*model.SysServerType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysServerType), nil
	}
}

func (s sysServerTypeDo) Take() (*model.SysServerType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysServerType), nil
	}
}

func (s sysServerTypeDo) Last() (*model.SysServerType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysServerType), nil
	}
}

func (s sysServerTypeDo) Find() ([]*model.SysServerType, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysServerType), err
}

func (s sysServerTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysServerType, err error) {
	buf := make([]*model.SysServerType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysServerTypeDo) FindInBatches(result *[]*model.SysServerType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysServerTypeDo) Attrs(attrs ...field.AssignExpr) ISysServerTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysServerTypeDo) Assign(attrs ...field.AssignExpr) ISysServerTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysServerTypeDo) Joins(fields ...field.RelationField) ISysServerTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysServerTypeDo) Preload(fields ...field.RelationField) ISysServerTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysServerTypeDo) FirstOrInit() (*model.SysServerType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysServerType), nil
	}
}

func (s sysServerTypeDo) FirstOrCreate() (*model.SysServerType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysServerType), nil
	}
}

func (s sysServerTypeDo) FindByPage(offset int, limit int) (result []*model.SysServerType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysServerTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysServerTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysServerTypeDo) Delete(models ...*model.SysServerType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysServerTypeDo) withDO(do gen.Dao) *sysServerTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
