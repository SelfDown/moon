// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysToken(db *gorm.DB, opts ...gen.DOOption) sysToken {
	_sysToken := sysToken{}

	_sysToken.sysTokenDo.UseDB(db, opts...)
	_sysToken.sysTokenDo.UseModel(&model.SysToken{})

	tableName := _sysToken.sysTokenDo.TableName()
	_sysToken.ALL = field.NewAsterisk(tableName)
	_sysToken.SysTokenID = field.NewString(tableName, "sys_token_id")
	_sysToken.Token = field.NewString(tableName, "token")
	_sysToken.TokenApplyDomain = field.NewString(tableName, "token_apply_domain")
	_sysToken.TokenDesc = field.NewString(tableName, "token_desc")
	_sysToken.TokenStatu = field.NewString(tableName, "token_statu")
	_sysToken.TokenExpire = field.NewTime(tableName, "token_expire")
	_sysToken.AddTime = field.NewTime(tableName, "add_time")
	_sysToken.AddUser = field.NewString(tableName, "add_user")
	_sysToken.TokenApplyType = field.NewString(tableName, "token_apply_type")

	_sysToken.fillFieldMap()

	return _sysToken
}

type sysToken struct {
	sysTokenDo

	ALL              field.Asterisk
	SysTokenID       field.String // ID
	Token            field.String // 令牌值
	TokenApplyDomain field.String // 1、PC终端请求 2、手机终端  9、所有
	TokenDesc        field.String // 描述
	TokenStatu       field.String // 1、有效  0、无效
	TokenExpire      field.Time   // 令牌过期时间
	AddTime          field.Time   // datetime
	AddUser          field.String // 添加人
	TokenApplyType   field.String // 令牌类型  1、系统级别  2、个人级别

	fieldMap map[string]field.Expr
}

func (s sysToken) Table(newTableName string) *sysToken {
	s.sysTokenDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysToken) As(alias string) *sysToken {
	s.sysTokenDo.DO = *(s.sysTokenDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysToken) updateTableName(table string) *sysToken {
	s.ALL = field.NewAsterisk(table)
	s.SysTokenID = field.NewString(table, "sys_token_id")
	s.Token = field.NewString(table, "token")
	s.TokenApplyDomain = field.NewString(table, "token_apply_domain")
	s.TokenDesc = field.NewString(table, "token_desc")
	s.TokenStatu = field.NewString(table, "token_statu")
	s.TokenExpire = field.NewTime(table, "token_expire")
	s.AddTime = field.NewTime(table, "add_time")
	s.AddUser = field.NewString(table, "add_user")
	s.TokenApplyType = field.NewString(table, "token_apply_type")

	s.fillFieldMap()

	return s
}

func (s *sysToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysToken) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["sys_token_id"] = s.SysTokenID
	s.fieldMap["token"] = s.Token
	s.fieldMap["token_apply_domain"] = s.TokenApplyDomain
	s.fieldMap["token_desc"] = s.TokenDesc
	s.fieldMap["token_statu"] = s.TokenStatu
	s.fieldMap["token_expire"] = s.TokenExpire
	s.fieldMap["add_time"] = s.AddTime
	s.fieldMap["add_user"] = s.AddUser
	s.fieldMap["token_apply_type"] = s.TokenApplyType
}

func (s sysToken) clone(db *gorm.DB) sysToken {
	s.sysTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysToken) replaceDB(db *gorm.DB) sysToken {
	s.sysTokenDo.ReplaceDB(db)
	return s
}

type sysTokenDo struct{ gen.DO }

type ISysTokenDo interface {
	gen.SubQuery
	Debug() ISysTokenDo
	WithContext(ctx context.Context) ISysTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysTokenDo
	WriteDB() ISysTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysTokenDo
	Not(conds ...gen.Condition) ISysTokenDo
	Or(conds ...gen.Condition) ISysTokenDo
	Select(conds ...field.Expr) ISysTokenDo
	Where(conds ...gen.Condition) ISysTokenDo
	Order(conds ...field.Expr) ISysTokenDo
	Distinct(cols ...field.Expr) ISysTokenDo
	Omit(cols ...field.Expr) ISysTokenDo
	Join(table schema.Tabler, on ...field.Expr) ISysTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysTokenDo
	Group(cols ...field.Expr) ISysTokenDo
	Having(conds ...gen.Condition) ISysTokenDo
	Limit(limit int) ISysTokenDo
	Offset(offset int) ISysTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTokenDo
	Unscoped() ISysTokenDo
	Create(values ...*model.SysToken) error
	CreateInBatches(values []*model.SysToken, batchSize int) error
	Save(values ...*model.SysToken) error
	First() (*model.SysToken, error)
	Take() (*model.SysToken, error)
	Last() (*model.SysToken, error)
	Find() ([]*model.SysToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysToken, err error)
	FindInBatches(result *[]*model.SysToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysTokenDo
	Assign(attrs ...field.AssignExpr) ISysTokenDo
	Joins(fields ...field.RelationField) ISysTokenDo
	Preload(fields ...field.RelationField) ISysTokenDo
	FirstOrInit() (*model.SysToken, error)
	FirstOrCreate() (*model.SysToken, error)
	FindByPage(offset int, limit int) (result []*model.SysToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysTokenDo) Debug() ISysTokenDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTokenDo) WithContext(ctx context.Context) ISysTokenDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTokenDo) ReadDB() ISysTokenDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTokenDo) WriteDB() ISysTokenDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTokenDo) Session(config *gorm.Session) ISysTokenDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTokenDo) Clauses(conds ...clause.Expression) ISysTokenDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTokenDo) Returning(value interface{}, columns ...string) ISysTokenDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTokenDo) Not(conds ...gen.Condition) ISysTokenDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTokenDo) Or(conds ...gen.Condition) ISysTokenDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTokenDo) Select(conds ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTokenDo) Where(conds ...gen.Condition) ISysTokenDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysTokenDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysTokenDo) Order(conds ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTokenDo) Distinct(cols ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTokenDo) Omit(cols ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTokenDo) Join(table schema.Tabler, on ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTokenDo) Group(cols ...field.Expr) ISysTokenDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTokenDo) Having(conds ...gen.Condition) ISysTokenDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTokenDo) Limit(limit int) ISysTokenDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTokenDo) Offset(offset int) ISysTokenDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTokenDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTokenDo) Unscoped() ISysTokenDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTokenDo) Create(values ...*model.SysToken) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTokenDo) CreateInBatches(values []*model.SysToken, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTokenDo) Save(values ...*model.SysToken) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTokenDo) First() (*model.SysToken, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysToken), nil
	}
}

func (s sysTokenDo) Take() (*model.SysToken, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysToken), nil
	}
}

func (s sysTokenDo) Last() (*model.SysToken, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysToken), nil
	}
}

func (s sysTokenDo) Find() ([]*model.SysToken, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysToken), err
}

func (s sysTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysToken, err error) {
	buf := make([]*model.SysToken, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTokenDo) FindInBatches(result *[]*model.SysToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTokenDo) Attrs(attrs ...field.AssignExpr) ISysTokenDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTokenDo) Assign(attrs ...field.AssignExpr) ISysTokenDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTokenDo) Joins(fields ...field.RelationField) ISysTokenDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTokenDo) Preload(fields ...field.RelationField) ISysTokenDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTokenDo) FirstOrInit() (*model.SysToken, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysToken), nil
	}
}

func (s sysTokenDo) FirstOrCreate() (*model.SysToken, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysToken), nil
	}
}

func (s sysTokenDo) FindByPage(offset int, limit int) (result []*model.SysToken, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTokenDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTokenDo) Delete(models ...*model.SysToken) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTokenDo) withDO(do gen.Dao) *sysTokenDo {
	s.DO = *do.(*gen.DO)
	return s
}
