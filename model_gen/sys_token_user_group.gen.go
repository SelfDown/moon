// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysTokenUserGroup(db *gorm.DB, opts ...gen.DOOption) sysTokenUserGroup {
	_sysTokenUserGroup := sysTokenUserGroup{}

	_sysTokenUserGroup.sysTokenUserGroupDo.UseDB(db, opts...)
	_sysTokenUserGroup.sysTokenUserGroupDo.UseModel(&model.SysTokenUserGroup{})

	tableName := _sysTokenUserGroup.sysTokenUserGroupDo.TableName()
	_sysTokenUserGroup.ALL = field.NewAsterisk(tableName)
	_sysTokenUserGroup.SysTokenUserGroupID = field.NewString(tableName, "sys_token_user_group_id")
	_sysTokenUserGroup.SysTokenID = field.NewString(tableName, "sys_token_id")
	_sysTokenUserGroup.UserGroupID = field.NewString(tableName, "user_group_id")

	_sysTokenUserGroup.fillFieldMap()

	return _sysTokenUserGroup
}

type sysTokenUserGroup struct {
	sysTokenUserGroupDo

	ALL                 field.Asterisk
	SysTokenUserGroupID field.String
	SysTokenID          field.String
	UserGroupID         field.String

	fieldMap map[string]field.Expr
}

func (s sysTokenUserGroup) Table(newTableName string) *sysTokenUserGroup {
	s.sysTokenUserGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysTokenUserGroup) As(alias string) *sysTokenUserGroup {
	s.sysTokenUserGroupDo.DO = *(s.sysTokenUserGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysTokenUserGroup) updateTableName(table string) *sysTokenUserGroup {
	s.ALL = field.NewAsterisk(table)
	s.SysTokenUserGroupID = field.NewString(table, "sys_token_user_group_id")
	s.SysTokenID = field.NewString(table, "sys_token_id")
	s.UserGroupID = field.NewString(table, "user_group_id")

	s.fillFieldMap()

	return s
}

func (s *sysTokenUserGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysTokenUserGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["sys_token_user_group_id"] = s.SysTokenUserGroupID
	s.fieldMap["sys_token_id"] = s.SysTokenID
	s.fieldMap["user_group_id"] = s.UserGroupID
}

func (s sysTokenUserGroup) clone(db *gorm.DB) sysTokenUserGroup {
	s.sysTokenUserGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysTokenUserGroup) replaceDB(db *gorm.DB) sysTokenUserGroup {
	s.sysTokenUserGroupDo.ReplaceDB(db)
	return s
}

type sysTokenUserGroupDo struct{ gen.DO }

type ISysTokenUserGroupDo interface {
	gen.SubQuery
	Debug() ISysTokenUserGroupDo
	WithContext(ctx context.Context) ISysTokenUserGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysTokenUserGroupDo
	WriteDB() ISysTokenUserGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysTokenUserGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysTokenUserGroupDo
	Not(conds ...gen.Condition) ISysTokenUserGroupDo
	Or(conds ...gen.Condition) ISysTokenUserGroupDo
	Select(conds ...field.Expr) ISysTokenUserGroupDo
	Where(conds ...gen.Condition) ISysTokenUserGroupDo
	Order(conds ...field.Expr) ISysTokenUserGroupDo
	Distinct(cols ...field.Expr) ISysTokenUserGroupDo
	Omit(cols ...field.Expr) ISysTokenUserGroupDo
	Join(table schema.Tabler, on ...field.Expr) ISysTokenUserGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysTokenUserGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysTokenUserGroupDo
	Group(cols ...field.Expr) ISysTokenUserGroupDo
	Having(conds ...gen.Condition) ISysTokenUserGroupDo
	Limit(limit int) ISysTokenUserGroupDo
	Offset(offset int) ISysTokenUserGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTokenUserGroupDo
	Unscoped() ISysTokenUserGroupDo
	Create(values ...*model.SysTokenUserGroup) error
	CreateInBatches(values []*model.SysTokenUserGroup, batchSize int) error
	Save(values ...*model.SysTokenUserGroup) error
	First() (*model.SysTokenUserGroup, error)
	Take() (*model.SysTokenUserGroup, error)
	Last() (*model.SysTokenUserGroup, error)
	Find() ([]*model.SysTokenUserGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTokenUserGroup, err error)
	FindInBatches(result *[]*model.SysTokenUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysTokenUserGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysTokenUserGroupDo
	Assign(attrs ...field.AssignExpr) ISysTokenUserGroupDo
	Joins(fields ...field.RelationField) ISysTokenUserGroupDo
	Preload(fields ...field.RelationField) ISysTokenUserGroupDo
	FirstOrInit() (*model.SysTokenUserGroup, error)
	FirstOrCreate() (*model.SysTokenUserGroup, error)
	FindByPage(offset int, limit int) (result []*model.SysTokenUserGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysTokenUserGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysTokenUserGroupDo) Debug() ISysTokenUserGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s sysTokenUserGroupDo) WithContext(ctx context.Context) ISysTokenUserGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysTokenUserGroupDo) ReadDB() ISysTokenUserGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysTokenUserGroupDo) WriteDB() ISysTokenUserGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysTokenUserGroupDo) Session(config *gorm.Session) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysTokenUserGroupDo) Clauses(conds ...clause.Expression) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysTokenUserGroupDo) Returning(value interface{}, columns ...string) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysTokenUserGroupDo) Not(conds ...gen.Condition) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysTokenUserGroupDo) Or(conds ...gen.Condition) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysTokenUserGroupDo) Select(conds ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysTokenUserGroupDo) Where(conds ...gen.Condition) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysTokenUserGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysTokenUserGroupDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysTokenUserGroupDo) Order(conds ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysTokenUserGroupDo) Distinct(cols ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysTokenUserGroupDo) Omit(cols ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysTokenUserGroupDo) Join(table schema.Tabler, on ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysTokenUserGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysTokenUserGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysTokenUserGroupDo) Group(cols ...field.Expr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysTokenUserGroupDo) Having(conds ...gen.Condition) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysTokenUserGroupDo) Limit(limit int) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysTokenUserGroupDo) Offset(offset int) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysTokenUserGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysTokenUserGroupDo) Unscoped() ISysTokenUserGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysTokenUserGroupDo) Create(values ...*model.SysTokenUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysTokenUserGroupDo) CreateInBatches(values []*model.SysTokenUserGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysTokenUserGroupDo) Save(values ...*model.SysTokenUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysTokenUserGroupDo) First() (*model.SysTokenUserGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTokenUserGroup), nil
	}
}

func (s sysTokenUserGroupDo) Take() (*model.SysTokenUserGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTokenUserGroup), nil
	}
}

func (s sysTokenUserGroupDo) Last() (*model.SysTokenUserGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTokenUserGroup), nil
	}
}

func (s sysTokenUserGroupDo) Find() ([]*model.SysTokenUserGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysTokenUserGroup), err
}

func (s sysTokenUserGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysTokenUserGroup, err error) {
	buf := make([]*model.SysTokenUserGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysTokenUserGroupDo) FindInBatches(result *[]*model.SysTokenUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysTokenUserGroupDo) Attrs(attrs ...field.AssignExpr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysTokenUserGroupDo) Assign(attrs ...field.AssignExpr) ISysTokenUserGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysTokenUserGroupDo) Joins(fields ...field.RelationField) ISysTokenUserGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysTokenUserGroupDo) Preload(fields ...field.RelationField) ISysTokenUserGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysTokenUserGroupDo) FirstOrInit() (*model.SysTokenUserGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTokenUserGroup), nil
	}
}

func (s sysTokenUserGroupDo) FirstOrCreate() (*model.SysTokenUserGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysTokenUserGroup), nil
	}
}

func (s sysTokenUserGroupDo) FindByPage(offset int, limit int) (result []*model.SysTokenUserGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysTokenUserGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysTokenUserGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysTokenUserGroupDo) Delete(models ...*model.SysTokenUserGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysTokenUserGroupDo) withDO(do gen.Dao) *sysTokenUserGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
