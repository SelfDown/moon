// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysWar(db *gorm.DB, opts ...gen.DOOption) sysWar {
	_sysWar := sysWar{}

	_sysWar.sysWarDo.UseDB(db, opts...)
	_sysWar.sysWarDo.UseModel(&model.SysWar{})

	tableName := _sysWar.sysWarDo.TableName()
	_sysWar.ALL = field.NewAsterisk(tableName)
	_sysWar.WarID = field.NewString(tableName, "war_id")
	_sysWar.WarGroupid = field.NewString(tableName, "war_groupid")
	_sysWar.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_sysWar.WarName = field.NewString(tableName, "war_name")
	_sysWar.HospitalCode = field.NewString(tableName, "hospital_code")
	_sysWar.DeployType = field.NewString(tableName, "deploy_type")
	_sysWar.WebServiceType = field.NewString(tableName, "web_service_type")
	_sysWar.CreateTime = field.NewTime(tableName, "create_time")
	_sysWar.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysWar.Comments = field.NewString(tableName, "comments")
	_sysWar.DeployServerType = field.NewString(tableName, "deploy_server_type")

	_sysWar.fillFieldMap()

	return _sysWar
}

type sysWar struct {
	sysWarDo

	ALL           field.Asterisk
	WarID         field.String // 参数名称
	WarGroupid    field.String // 参数值
	WarArtifactid field.String
	WarName       field.String
	HospitalCode  field.String
	DeployType    field.String // 0 jboss 部署 1 模版部署
	/*
		web服务类型
		0-前台 portal
		1-后台 server
	*/
	WebServiceType   field.String
	CreateTime       field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明
	DeployServerType field.String

	fieldMap map[string]field.Expr
}

func (s sysWar) Table(newTableName string) *sysWar {
	s.sysWarDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysWar) As(alias string) *sysWar {
	s.sysWarDo.DO = *(s.sysWarDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysWar) updateTableName(table string) *sysWar {
	s.ALL = field.NewAsterisk(table)
	s.WarID = field.NewString(table, "war_id")
	s.WarGroupid = field.NewString(table, "war_groupid")
	s.WarArtifactid = field.NewString(table, "war_artifactid")
	s.WarName = field.NewString(table, "war_name")
	s.HospitalCode = field.NewString(table, "hospital_code")
	s.DeployType = field.NewString(table, "deploy_type")
	s.WebServiceType = field.NewString(table, "web_service_type")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.DeployServerType = field.NewString(table, "deploy_server_type")

	s.fillFieldMap()

	return s
}

func (s *sysWar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysWar) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["war_id"] = s.WarID
	s.fieldMap["war_groupid"] = s.WarGroupid
	s.fieldMap["war_artifactid"] = s.WarArtifactid
	s.fieldMap["war_name"] = s.WarName
	s.fieldMap["hospital_code"] = s.HospitalCode
	s.fieldMap["deploy_type"] = s.DeployType
	s.fieldMap["web_service_type"] = s.WebServiceType
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["deploy_server_type"] = s.DeployServerType
}

func (s sysWar) clone(db *gorm.DB) sysWar {
	s.sysWarDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysWar) replaceDB(db *gorm.DB) sysWar {
	s.sysWarDo.ReplaceDB(db)
	return s
}

type sysWarDo struct{ gen.DO }

type ISysWarDo interface {
	gen.SubQuery
	Debug() ISysWarDo
	WithContext(ctx context.Context) ISysWarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysWarDo
	WriteDB() ISysWarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysWarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysWarDo
	Not(conds ...gen.Condition) ISysWarDo
	Or(conds ...gen.Condition) ISysWarDo
	Select(conds ...field.Expr) ISysWarDo
	Where(conds ...gen.Condition) ISysWarDo
	Order(conds ...field.Expr) ISysWarDo
	Distinct(cols ...field.Expr) ISysWarDo
	Omit(cols ...field.Expr) ISysWarDo
	Join(table schema.Tabler, on ...field.Expr) ISysWarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysWarDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysWarDo
	Group(cols ...field.Expr) ISysWarDo
	Having(conds ...gen.Condition) ISysWarDo
	Limit(limit int) ISysWarDo
	Offset(offset int) ISysWarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysWarDo
	Unscoped() ISysWarDo
	Create(values ...*model.SysWar) error
	CreateInBatches(values []*model.SysWar, batchSize int) error
	Save(values ...*model.SysWar) error
	First() (*model.SysWar, error)
	Take() (*model.SysWar, error)
	Last() (*model.SysWar, error)
	Find() ([]*model.SysWar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysWar, err error)
	FindInBatches(result *[]*model.SysWar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysWar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysWarDo
	Assign(attrs ...field.AssignExpr) ISysWarDo
	Joins(fields ...field.RelationField) ISysWarDo
	Preload(fields ...field.RelationField) ISysWarDo
	FirstOrInit() (*model.SysWar, error)
	FirstOrCreate() (*model.SysWar, error)
	FindByPage(offset int, limit int) (result []*model.SysWar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysWarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysWarDo) Debug() ISysWarDo {
	return s.withDO(s.DO.Debug())
}

func (s sysWarDo) WithContext(ctx context.Context) ISysWarDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysWarDo) ReadDB() ISysWarDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysWarDo) WriteDB() ISysWarDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysWarDo) Session(config *gorm.Session) ISysWarDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysWarDo) Clauses(conds ...clause.Expression) ISysWarDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysWarDo) Returning(value interface{}, columns ...string) ISysWarDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysWarDo) Not(conds ...gen.Condition) ISysWarDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysWarDo) Or(conds ...gen.Condition) ISysWarDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysWarDo) Select(conds ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysWarDo) Where(conds ...gen.Condition) ISysWarDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysWarDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysWarDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysWarDo) Order(conds ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysWarDo) Distinct(cols ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysWarDo) Omit(cols ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysWarDo) Join(table schema.Tabler, on ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysWarDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysWarDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysWarDo) Group(cols ...field.Expr) ISysWarDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysWarDo) Having(conds ...gen.Condition) ISysWarDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysWarDo) Limit(limit int) ISysWarDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysWarDo) Offset(offset int) ISysWarDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysWarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysWarDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysWarDo) Unscoped() ISysWarDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysWarDo) Create(values ...*model.SysWar) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysWarDo) CreateInBatches(values []*model.SysWar, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysWarDo) Save(values ...*model.SysWar) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysWarDo) First() (*model.SysWar, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWar), nil
	}
}

func (s sysWarDo) Take() (*model.SysWar, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWar), nil
	}
}

func (s sysWarDo) Last() (*model.SysWar, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWar), nil
	}
}

func (s sysWarDo) Find() ([]*model.SysWar, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysWar), err
}

func (s sysWarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysWar, err error) {
	buf := make([]*model.SysWar, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysWarDo) FindInBatches(result *[]*model.SysWar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysWarDo) Attrs(attrs ...field.AssignExpr) ISysWarDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysWarDo) Assign(attrs ...field.AssignExpr) ISysWarDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysWarDo) Joins(fields ...field.RelationField) ISysWarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysWarDo) Preload(fields ...field.RelationField) ISysWarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysWarDo) FirstOrInit() (*model.SysWar, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWar), nil
	}
}

func (s sysWarDo) FirstOrCreate() (*model.SysWar, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWar), nil
	}
}

func (s sysWarDo) FindByPage(offset int, limit int) (result []*model.SysWar, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysWarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysWarDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysWarDo) Delete(models ...*model.SysWar) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysWarDo) withDO(do gen.Dao) *sysWarDo {
	s.DO = *do.(*gen.DO)
	return s
}
