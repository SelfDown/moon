// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysWarName(db *gorm.DB, opts ...gen.DOOption) sysWarName {
	_sysWarName := sysWarName{}

	_sysWarName.sysWarNameDo.UseDB(db, opts...)
	_sysWarName.sysWarNameDo.UseModel(&model.SysWarName{})

	tableName := _sysWarName.sysWarNameDo.TableName()
	_sysWarName.ALL = field.NewAsterisk(tableName)
	_sysWarName.WarArtifactid = field.NewString(tableName, "war_artifactid")
	_sysWarName.WarName = field.NewString(tableName, "war_name")

	_sysWarName.fillFieldMap()

	return _sysWarName
}

type sysWarName struct {
	sysWarNameDo

	ALL           field.Asterisk
	WarArtifactid field.String
	WarName       field.String

	fieldMap map[string]field.Expr
}

func (s sysWarName) Table(newTableName string) *sysWarName {
	s.sysWarNameDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysWarName) As(alias string) *sysWarName {
	s.sysWarNameDo.DO = *(s.sysWarNameDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysWarName) updateTableName(table string) *sysWarName {
	s.ALL = field.NewAsterisk(table)
	s.WarArtifactid = field.NewString(table, "war_artifactid")
	s.WarName = field.NewString(table, "war_name")

	s.fillFieldMap()

	return s
}

func (s *sysWarName) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysWarName) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["war_artifactid"] = s.WarArtifactid
	s.fieldMap["war_name"] = s.WarName
}

func (s sysWarName) clone(db *gorm.DB) sysWarName {
	s.sysWarNameDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysWarName) replaceDB(db *gorm.DB) sysWarName {
	s.sysWarNameDo.ReplaceDB(db)
	return s
}

type sysWarNameDo struct{ gen.DO }

type ISysWarNameDo interface {
	gen.SubQuery
	Debug() ISysWarNameDo
	WithContext(ctx context.Context) ISysWarNameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysWarNameDo
	WriteDB() ISysWarNameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysWarNameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysWarNameDo
	Not(conds ...gen.Condition) ISysWarNameDo
	Or(conds ...gen.Condition) ISysWarNameDo
	Select(conds ...field.Expr) ISysWarNameDo
	Where(conds ...gen.Condition) ISysWarNameDo
	Order(conds ...field.Expr) ISysWarNameDo
	Distinct(cols ...field.Expr) ISysWarNameDo
	Omit(cols ...field.Expr) ISysWarNameDo
	Join(table schema.Tabler, on ...field.Expr) ISysWarNameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysWarNameDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysWarNameDo
	Group(cols ...field.Expr) ISysWarNameDo
	Having(conds ...gen.Condition) ISysWarNameDo
	Limit(limit int) ISysWarNameDo
	Offset(offset int) ISysWarNameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysWarNameDo
	Unscoped() ISysWarNameDo
	Create(values ...*model.SysWarName) error
	CreateInBatches(values []*model.SysWarName, batchSize int) error
	Save(values ...*model.SysWarName) error
	First() (*model.SysWarName, error)
	Take() (*model.SysWarName, error)
	Last() (*model.SysWarName, error)
	Find() ([]*model.SysWarName, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysWarName, err error)
	FindInBatches(result *[]*model.SysWarName, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysWarName) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysWarNameDo
	Assign(attrs ...field.AssignExpr) ISysWarNameDo
	Joins(fields ...field.RelationField) ISysWarNameDo
	Preload(fields ...field.RelationField) ISysWarNameDo
	FirstOrInit() (*model.SysWarName, error)
	FirstOrCreate() (*model.SysWarName, error)
	FindByPage(offset int, limit int) (result []*model.SysWarName, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysWarNameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysWarNameDo) Debug() ISysWarNameDo {
	return s.withDO(s.DO.Debug())
}

func (s sysWarNameDo) WithContext(ctx context.Context) ISysWarNameDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysWarNameDo) ReadDB() ISysWarNameDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysWarNameDo) WriteDB() ISysWarNameDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysWarNameDo) Session(config *gorm.Session) ISysWarNameDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysWarNameDo) Clauses(conds ...clause.Expression) ISysWarNameDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysWarNameDo) Returning(value interface{}, columns ...string) ISysWarNameDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysWarNameDo) Not(conds ...gen.Condition) ISysWarNameDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysWarNameDo) Or(conds ...gen.Condition) ISysWarNameDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysWarNameDo) Select(conds ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysWarNameDo) Where(conds ...gen.Condition) ISysWarNameDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysWarNameDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysWarNameDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysWarNameDo) Order(conds ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysWarNameDo) Distinct(cols ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysWarNameDo) Omit(cols ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysWarNameDo) Join(table schema.Tabler, on ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysWarNameDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysWarNameDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysWarNameDo) Group(cols ...field.Expr) ISysWarNameDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysWarNameDo) Having(conds ...gen.Condition) ISysWarNameDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysWarNameDo) Limit(limit int) ISysWarNameDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysWarNameDo) Offset(offset int) ISysWarNameDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysWarNameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysWarNameDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysWarNameDo) Unscoped() ISysWarNameDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysWarNameDo) Create(values ...*model.SysWarName) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysWarNameDo) CreateInBatches(values []*model.SysWarName, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysWarNameDo) Save(values ...*model.SysWarName) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysWarNameDo) First() (*model.SysWarName, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWarName), nil
	}
}

func (s sysWarNameDo) Take() (*model.SysWarName, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWarName), nil
	}
}

func (s sysWarNameDo) Last() (*model.SysWarName, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWarName), nil
	}
}

func (s sysWarNameDo) Find() ([]*model.SysWarName, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysWarName), err
}

func (s sysWarNameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysWarName, err error) {
	buf := make([]*model.SysWarName, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysWarNameDo) FindInBatches(result *[]*model.SysWarName, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysWarNameDo) Attrs(attrs ...field.AssignExpr) ISysWarNameDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysWarNameDo) Assign(attrs ...field.AssignExpr) ISysWarNameDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysWarNameDo) Joins(fields ...field.RelationField) ISysWarNameDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysWarNameDo) Preload(fields ...field.RelationField) ISysWarNameDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysWarNameDo) FirstOrInit() (*model.SysWarName, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWarName), nil
	}
}

func (s sysWarNameDo) FirstOrCreate() (*model.SysWarName, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWarName), nil
	}
}

func (s sysWarNameDo) FindByPage(offset int, limit int) (result []*model.SysWarName, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysWarNameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysWarNameDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysWarNameDo) Delete(models ...*model.SysWarName) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysWarNameDo) withDO(do gen.Dao) *sysWarNameDo {
	s.DO = *do.(*gen.DO)
	return s
}
