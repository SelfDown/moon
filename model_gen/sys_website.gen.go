// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newSysWebsite(db *gorm.DB, opts ...gen.DOOption) sysWebsite {
	_sysWebsite := sysWebsite{}

	_sysWebsite.sysWebsiteDo.UseDB(db, opts...)
	_sysWebsite.sysWebsiteDo.UseModel(&model.SysWebsite{})

	tableName := _sysWebsite.sysWebsiteDo.TableName()
	_sysWebsite.ALL = field.NewAsterisk(tableName)
	_sysWebsite.SysWebsiteID = field.NewString(tableName, "sys_website_id")
	_sysWebsite.URL = field.NewString(tableName, "url")
	_sysWebsite.GetResponseTime = field.NewFloat64(tableName, "get_response_time")
	_sysWebsite.CreateTime = field.NewTime(tableName, "create_time")
	_sysWebsite.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysWebsite.Comments = field.NewString(tableName, "comments")
	_sysWebsite.WebsiteType = field.NewString(tableName, "website_type")

	_sysWebsite.fillFieldMap()

	return _sysWebsite
}

type sysWebsite struct {
	sysWebsiteDo

	ALL          field.Asterisk
	SysWebsiteID field.String
	URL          field.String
	/*
		请求响应时间
		-1 表示我在不可访问
		大于0 表示响应时间
	*/
	GetResponseTime field.Float64
	CreateTime      field.Time // 记录创建时间（数据库自动写入）
	ModifyTime      field.Time
	Comments        field.String
	/*
		站点类型
		1、google镜像网站
	*/
	WebsiteType field.String

	fieldMap map[string]field.Expr
}

func (s sysWebsite) Table(newTableName string) *sysWebsite {
	s.sysWebsiteDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysWebsite) As(alias string) *sysWebsite {
	s.sysWebsiteDo.DO = *(s.sysWebsiteDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysWebsite) updateTableName(table string) *sysWebsite {
	s.ALL = field.NewAsterisk(table)
	s.SysWebsiteID = field.NewString(table, "sys_website_id")
	s.URL = field.NewString(table, "url")
	s.GetResponseTime = field.NewFloat64(table, "get_response_time")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.Comments = field.NewString(table, "comments")
	s.WebsiteType = field.NewString(table, "website_type")

	s.fillFieldMap()

	return s
}

func (s *sysWebsite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysWebsite) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["sys_website_id"] = s.SysWebsiteID
	s.fieldMap["url"] = s.URL
	s.fieldMap["get_response_time"] = s.GetResponseTime
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["comments"] = s.Comments
	s.fieldMap["website_type"] = s.WebsiteType
}

func (s sysWebsite) clone(db *gorm.DB) sysWebsite {
	s.sysWebsiteDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysWebsite) replaceDB(db *gorm.DB) sysWebsite {
	s.sysWebsiteDo.ReplaceDB(db)
	return s
}

type sysWebsiteDo struct{ gen.DO }

type ISysWebsiteDo interface {
	gen.SubQuery
	Debug() ISysWebsiteDo
	WithContext(ctx context.Context) ISysWebsiteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysWebsiteDo
	WriteDB() ISysWebsiteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysWebsiteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysWebsiteDo
	Not(conds ...gen.Condition) ISysWebsiteDo
	Or(conds ...gen.Condition) ISysWebsiteDo
	Select(conds ...field.Expr) ISysWebsiteDo
	Where(conds ...gen.Condition) ISysWebsiteDo
	Order(conds ...field.Expr) ISysWebsiteDo
	Distinct(cols ...field.Expr) ISysWebsiteDo
	Omit(cols ...field.Expr) ISysWebsiteDo
	Join(table schema.Tabler, on ...field.Expr) ISysWebsiteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysWebsiteDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysWebsiteDo
	Group(cols ...field.Expr) ISysWebsiteDo
	Having(conds ...gen.Condition) ISysWebsiteDo
	Limit(limit int) ISysWebsiteDo
	Offset(offset int) ISysWebsiteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysWebsiteDo
	Unscoped() ISysWebsiteDo
	Create(values ...*model.SysWebsite) error
	CreateInBatches(values []*model.SysWebsite, batchSize int) error
	Save(values ...*model.SysWebsite) error
	First() (*model.SysWebsite, error)
	Take() (*model.SysWebsite, error)
	Last() (*model.SysWebsite, error)
	Find() ([]*model.SysWebsite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysWebsite, err error)
	FindInBatches(result *[]*model.SysWebsite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysWebsite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysWebsiteDo
	Assign(attrs ...field.AssignExpr) ISysWebsiteDo
	Joins(fields ...field.RelationField) ISysWebsiteDo
	Preload(fields ...field.RelationField) ISysWebsiteDo
	FirstOrInit() (*model.SysWebsite, error)
	FirstOrCreate() (*model.SysWebsite, error)
	FindByPage(offset int, limit int) (result []*model.SysWebsite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysWebsiteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysWebsiteDo) Debug() ISysWebsiteDo {
	return s.withDO(s.DO.Debug())
}

func (s sysWebsiteDo) WithContext(ctx context.Context) ISysWebsiteDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysWebsiteDo) ReadDB() ISysWebsiteDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysWebsiteDo) WriteDB() ISysWebsiteDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysWebsiteDo) Session(config *gorm.Session) ISysWebsiteDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysWebsiteDo) Clauses(conds ...clause.Expression) ISysWebsiteDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysWebsiteDo) Returning(value interface{}, columns ...string) ISysWebsiteDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysWebsiteDo) Not(conds ...gen.Condition) ISysWebsiteDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysWebsiteDo) Or(conds ...gen.Condition) ISysWebsiteDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysWebsiteDo) Select(conds ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysWebsiteDo) Where(conds ...gen.Condition) ISysWebsiteDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysWebsiteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysWebsiteDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysWebsiteDo) Order(conds ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysWebsiteDo) Distinct(cols ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysWebsiteDo) Omit(cols ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysWebsiteDo) Join(table schema.Tabler, on ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysWebsiteDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysWebsiteDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysWebsiteDo) Group(cols ...field.Expr) ISysWebsiteDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysWebsiteDo) Having(conds ...gen.Condition) ISysWebsiteDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysWebsiteDo) Limit(limit int) ISysWebsiteDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysWebsiteDo) Offset(offset int) ISysWebsiteDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysWebsiteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysWebsiteDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysWebsiteDo) Unscoped() ISysWebsiteDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysWebsiteDo) Create(values ...*model.SysWebsite) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysWebsiteDo) CreateInBatches(values []*model.SysWebsite, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysWebsiteDo) Save(values ...*model.SysWebsite) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysWebsiteDo) First() (*model.SysWebsite, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWebsite), nil
	}
}

func (s sysWebsiteDo) Take() (*model.SysWebsite, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWebsite), nil
	}
}

func (s sysWebsiteDo) Last() (*model.SysWebsite, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWebsite), nil
	}
}

func (s sysWebsiteDo) Find() ([]*model.SysWebsite, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysWebsite), err
}

func (s sysWebsiteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysWebsite, err error) {
	buf := make([]*model.SysWebsite, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysWebsiteDo) FindInBatches(result *[]*model.SysWebsite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysWebsiteDo) Attrs(attrs ...field.AssignExpr) ISysWebsiteDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysWebsiteDo) Assign(attrs ...field.AssignExpr) ISysWebsiteDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysWebsiteDo) Joins(fields ...field.RelationField) ISysWebsiteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysWebsiteDo) Preload(fields ...field.RelationField) ISysWebsiteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysWebsiteDo) FirstOrInit() (*model.SysWebsite, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWebsite), nil
	}
}

func (s sysWebsiteDo) FirstOrCreate() (*model.SysWebsite, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysWebsite), nil
	}
}

func (s sysWebsiteDo) FindByPage(offset int, limit int) (result []*model.SysWebsite, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysWebsiteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysWebsiteDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysWebsiteDo) Delete(models ...*model.SysWebsite) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysWebsiteDo) withDO(do gen.Dao) *sysWebsiteDo {
	s.DO = *do.(*gen.DO)
	return s
}
