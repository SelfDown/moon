// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newTagDesc(db *gorm.DB, opts ...gen.DOOption) tagDesc {
	_tagDesc := tagDesc{}

	_tagDesc.tagDescDo.UseDB(db, opts...)
	_tagDesc.tagDescDo.UseModel(&model.TagDesc{})

	tableName := _tagDesc.tagDescDo.TableName()
	_tagDesc.ALL = field.NewAsterisk(tableName)
	_tagDesc.Tag = field.NewString(tableName, "tag")
	_tagDesc.Name = field.NewString(tableName, "name")

	_tagDesc.fillFieldMap()

	return _tagDesc
}

type tagDesc struct {
	tagDescDo

	ALL  field.Asterisk
	Tag  field.String
	Name field.String

	fieldMap map[string]field.Expr
}

func (t tagDesc) Table(newTableName string) *tagDesc {
	t.tagDescDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagDesc) As(alias string) *tagDesc {
	t.tagDescDo.DO = *(t.tagDescDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagDesc) updateTableName(table string) *tagDesc {
	t.ALL = field.NewAsterisk(table)
	t.Tag = field.NewString(table, "tag")
	t.Name = field.NewString(table, "name")

	t.fillFieldMap()

	return t
}

func (t *tagDesc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagDesc) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["tag"] = t.Tag
	t.fieldMap["name"] = t.Name
}

func (t tagDesc) clone(db *gorm.DB) tagDesc {
	t.tagDescDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tagDesc) replaceDB(db *gorm.DB) tagDesc {
	t.tagDescDo.ReplaceDB(db)
	return t
}

type tagDescDo struct{ gen.DO }

type ITagDescDo interface {
	gen.SubQuery
	Debug() ITagDescDo
	WithContext(ctx context.Context) ITagDescDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITagDescDo
	WriteDB() ITagDescDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITagDescDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITagDescDo
	Not(conds ...gen.Condition) ITagDescDo
	Or(conds ...gen.Condition) ITagDescDo
	Select(conds ...field.Expr) ITagDescDo
	Where(conds ...gen.Condition) ITagDescDo
	Order(conds ...field.Expr) ITagDescDo
	Distinct(cols ...field.Expr) ITagDescDo
	Omit(cols ...field.Expr) ITagDescDo
	Join(table schema.Tabler, on ...field.Expr) ITagDescDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITagDescDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITagDescDo
	Group(cols ...field.Expr) ITagDescDo
	Having(conds ...gen.Condition) ITagDescDo
	Limit(limit int) ITagDescDo
	Offset(offset int) ITagDescDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITagDescDo
	Unscoped() ITagDescDo
	Create(values ...*model.TagDesc) error
	CreateInBatches(values []*model.TagDesc, batchSize int) error
	Save(values ...*model.TagDesc) error
	First() (*model.TagDesc, error)
	Take() (*model.TagDesc, error)
	Last() (*model.TagDesc, error)
	Find() ([]*model.TagDesc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TagDesc, err error)
	FindInBatches(result *[]*model.TagDesc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TagDesc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITagDescDo
	Assign(attrs ...field.AssignExpr) ITagDescDo
	Joins(fields ...field.RelationField) ITagDescDo
	Preload(fields ...field.RelationField) ITagDescDo
	FirstOrInit() (*model.TagDesc, error)
	FirstOrCreate() (*model.TagDesc, error)
	FindByPage(offset int, limit int) (result []*model.TagDesc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITagDescDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tagDescDo) Debug() ITagDescDo {
	return t.withDO(t.DO.Debug())
}

func (t tagDescDo) WithContext(ctx context.Context) ITagDescDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagDescDo) ReadDB() ITagDescDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagDescDo) WriteDB() ITagDescDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagDescDo) Session(config *gorm.Session) ITagDescDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagDescDo) Clauses(conds ...clause.Expression) ITagDescDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagDescDo) Returning(value interface{}, columns ...string) ITagDescDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagDescDo) Not(conds ...gen.Condition) ITagDescDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagDescDo) Or(conds ...gen.Condition) ITagDescDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagDescDo) Select(conds ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagDescDo) Where(conds ...gen.Condition) ITagDescDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagDescDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITagDescDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tagDescDo) Order(conds ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagDescDo) Distinct(cols ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagDescDo) Omit(cols ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagDescDo) Join(table schema.Tabler, on ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagDescDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagDescDo) RightJoin(table schema.Tabler, on ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagDescDo) Group(cols ...field.Expr) ITagDescDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagDescDo) Having(conds ...gen.Condition) ITagDescDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagDescDo) Limit(limit int) ITagDescDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagDescDo) Offset(offset int) ITagDescDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagDescDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITagDescDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagDescDo) Unscoped() ITagDescDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagDescDo) Create(values ...*model.TagDesc) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagDescDo) CreateInBatches(values []*model.TagDesc, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagDescDo) Save(values ...*model.TagDesc) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagDescDo) First() (*model.TagDesc, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagDesc), nil
	}
}

func (t tagDescDo) Take() (*model.TagDesc, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagDesc), nil
	}
}

func (t tagDescDo) Last() (*model.TagDesc, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagDesc), nil
	}
}

func (t tagDescDo) Find() ([]*model.TagDesc, error) {
	result, err := t.DO.Find()
	return result.([]*model.TagDesc), err
}

func (t tagDescDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TagDesc, err error) {
	buf := make([]*model.TagDesc, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagDescDo) FindInBatches(result *[]*model.TagDesc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagDescDo) Attrs(attrs ...field.AssignExpr) ITagDescDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagDescDo) Assign(attrs ...field.AssignExpr) ITagDescDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagDescDo) Joins(fields ...field.RelationField) ITagDescDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagDescDo) Preload(fields ...field.RelationField) ITagDescDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagDescDo) FirstOrInit() (*model.TagDesc, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagDesc), nil
	}
}

func (t tagDescDo) FirstOrCreate() (*model.TagDesc, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagDesc), nil
	}
}

func (t tagDescDo) FindByPage(offset int, limit int) (result []*model.TagDesc, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagDescDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagDescDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagDescDo) Delete(models ...*model.TagDesc) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagDescDo) withDO(do gen.Dao) *tagDescDo {
	t.DO = *do.(*gen.DO)
	return t
}
