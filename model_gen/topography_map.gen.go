// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newTopographyMap(db *gorm.DB, opts ...gen.DOOption) topographyMap {
	_topographyMap := topographyMap{}

	_topographyMap.topographyMapDo.UseDB(db, opts...)
	_topographyMap.topographyMapDo.UseModel(&model.TopographyMap{})

	tableName := _topographyMap.topographyMapDo.TableName()
	_topographyMap.ALL = field.NewAsterisk(tableName)
	_topographyMap.TopographyMapID = field.NewString(tableName, "topography_map_id")
	_topographyMap.ServerID = field.NewString(tableName, "server_id")
	_topographyMap.NodeType = field.NewString(tableName, "node_type")
	_topographyMap.Node = field.NewString(tableName, "node")

	_topographyMap.fillFieldMap()

	return _topographyMap
}

type topographyMap struct {
	topographyMapDo

	ALL             field.Asterisk
	TopographyMapID field.String
	ServerID        field.String
	NodeType        field.String
	Node            field.String

	fieldMap map[string]field.Expr
}

func (t topographyMap) Table(newTableName string) *topographyMap {
	t.topographyMapDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t topographyMap) As(alias string) *topographyMap {
	t.topographyMapDo.DO = *(t.topographyMapDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *topographyMap) updateTableName(table string) *topographyMap {
	t.ALL = field.NewAsterisk(table)
	t.TopographyMapID = field.NewString(table, "topography_map_id")
	t.ServerID = field.NewString(table, "server_id")
	t.NodeType = field.NewString(table, "node_type")
	t.Node = field.NewString(table, "node")

	t.fillFieldMap()

	return t
}

func (t *topographyMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *topographyMap) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["topography_map_id"] = t.TopographyMapID
	t.fieldMap["server_id"] = t.ServerID
	t.fieldMap["node_type"] = t.NodeType
	t.fieldMap["node"] = t.Node
}

func (t topographyMap) clone(db *gorm.DB) topographyMap {
	t.topographyMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t topographyMap) replaceDB(db *gorm.DB) topographyMap {
	t.topographyMapDo.ReplaceDB(db)
	return t
}

type topographyMapDo struct{ gen.DO }

type ITopographyMapDo interface {
	gen.SubQuery
	Debug() ITopographyMapDo
	WithContext(ctx context.Context) ITopographyMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITopographyMapDo
	WriteDB() ITopographyMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITopographyMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITopographyMapDo
	Not(conds ...gen.Condition) ITopographyMapDo
	Or(conds ...gen.Condition) ITopographyMapDo
	Select(conds ...field.Expr) ITopographyMapDo
	Where(conds ...gen.Condition) ITopographyMapDo
	Order(conds ...field.Expr) ITopographyMapDo
	Distinct(cols ...field.Expr) ITopographyMapDo
	Omit(cols ...field.Expr) ITopographyMapDo
	Join(table schema.Tabler, on ...field.Expr) ITopographyMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITopographyMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITopographyMapDo
	Group(cols ...field.Expr) ITopographyMapDo
	Having(conds ...gen.Condition) ITopographyMapDo
	Limit(limit int) ITopographyMapDo
	Offset(offset int) ITopographyMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITopographyMapDo
	Unscoped() ITopographyMapDo
	Create(values ...*model.TopographyMap) error
	CreateInBatches(values []*model.TopographyMap, batchSize int) error
	Save(values ...*model.TopographyMap) error
	First() (*model.TopographyMap, error)
	Take() (*model.TopographyMap, error)
	Last() (*model.TopographyMap, error)
	Find() ([]*model.TopographyMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TopographyMap, err error)
	FindInBatches(result *[]*model.TopographyMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TopographyMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITopographyMapDo
	Assign(attrs ...field.AssignExpr) ITopographyMapDo
	Joins(fields ...field.RelationField) ITopographyMapDo
	Preload(fields ...field.RelationField) ITopographyMapDo
	FirstOrInit() (*model.TopographyMap, error)
	FirstOrCreate() (*model.TopographyMap, error)
	FindByPage(offset int, limit int) (result []*model.TopographyMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITopographyMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t topographyMapDo) Debug() ITopographyMapDo {
	return t.withDO(t.DO.Debug())
}

func (t topographyMapDo) WithContext(ctx context.Context) ITopographyMapDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t topographyMapDo) ReadDB() ITopographyMapDo {
	return t.Clauses(dbresolver.Read)
}

func (t topographyMapDo) WriteDB() ITopographyMapDo {
	return t.Clauses(dbresolver.Write)
}

func (t topographyMapDo) Session(config *gorm.Session) ITopographyMapDo {
	return t.withDO(t.DO.Session(config))
}

func (t topographyMapDo) Clauses(conds ...clause.Expression) ITopographyMapDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t topographyMapDo) Returning(value interface{}, columns ...string) ITopographyMapDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t topographyMapDo) Not(conds ...gen.Condition) ITopographyMapDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t topographyMapDo) Or(conds ...gen.Condition) ITopographyMapDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t topographyMapDo) Select(conds ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t topographyMapDo) Where(conds ...gen.Condition) ITopographyMapDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t topographyMapDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITopographyMapDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t topographyMapDo) Order(conds ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t topographyMapDo) Distinct(cols ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t topographyMapDo) Omit(cols ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t topographyMapDo) Join(table schema.Tabler, on ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t topographyMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t topographyMapDo) RightJoin(table schema.Tabler, on ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t topographyMapDo) Group(cols ...field.Expr) ITopographyMapDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t topographyMapDo) Having(conds ...gen.Condition) ITopographyMapDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t topographyMapDo) Limit(limit int) ITopographyMapDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t topographyMapDo) Offset(offset int) ITopographyMapDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t topographyMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITopographyMapDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t topographyMapDo) Unscoped() ITopographyMapDo {
	return t.withDO(t.DO.Unscoped())
}

func (t topographyMapDo) Create(values ...*model.TopographyMap) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t topographyMapDo) CreateInBatches(values []*model.TopographyMap, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t topographyMapDo) Save(values ...*model.TopographyMap) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t topographyMapDo) First() (*model.TopographyMap, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopographyMap), nil
	}
}

func (t topographyMapDo) Take() (*model.TopographyMap, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopographyMap), nil
	}
}

func (t topographyMapDo) Last() (*model.TopographyMap, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopographyMap), nil
	}
}

func (t topographyMapDo) Find() ([]*model.TopographyMap, error) {
	result, err := t.DO.Find()
	return result.([]*model.TopographyMap), err
}

func (t topographyMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TopographyMap, err error) {
	buf := make([]*model.TopographyMap, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t topographyMapDo) FindInBatches(result *[]*model.TopographyMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t topographyMapDo) Attrs(attrs ...field.AssignExpr) ITopographyMapDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t topographyMapDo) Assign(attrs ...field.AssignExpr) ITopographyMapDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t topographyMapDo) Joins(fields ...field.RelationField) ITopographyMapDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t topographyMapDo) Preload(fields ...field.RelationField) ITopographyMapDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t topographyMapDo) FirstOrInit() (*model.TopographyMap, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopographyMap), nil
	}
}

func (t topographyMapDo) FirstOrCreate() (*model.TopographyMap, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TopographyMap), nil
	}
}

func (t topographyMapDo) FindByPage(offset int, limit int) (result []*model.TopographyMap, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t topographyMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t topographyMapDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t topographyMapDo) Delete(models ...*model.TopographyMap) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *topographyMapDo) withDO(do gen.Dao) *topographyMapDo {
	t.DO = *do.(*gen.DO)
	return t
}
