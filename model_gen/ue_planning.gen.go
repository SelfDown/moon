// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUePlanning(db *gorm.DB, opts ...gen.DOOption) uePlanning {
	_uePlanning := uePlanning{}

	_uePlanning.uePlanningDo.UseDB(db, opts...)
	_uePlanning.uePlanningDo.UseModel(&model.UePlanning{})

	tableName := _uePlanning.uePlanningDo.TableName()
	_uePlanning.ALL = field.NewAsterisk(tableName)
	_uePlanning.PlanID = field.NewString(tableName, "plan_id")
	_uePlanning.Summary = field.NewString(tableName, "summary")
	_uePlanning.Version = field.NewString(tableName, "version")
	_uePlanning.Status = field.NewString(tableName, "status")
	_uePlanning.PlanType = field.NewString(tableName, "plan_type")
	_uePlanning.DutyUser = field.NewString(tableName, "duty_user")
	_uePlanning.PlanTime = field.NewString(tableName, "plan_time")
	_uePlanning.CreateUser = field.NewString(tableName, "create_user")
	_uePlanning.CreateTime = field.NewString(tableName, "create_time")
	_uePlanning.ConfluenceAddr = field.NewString(tableName, "confluence_addr")
	_uePlanning.Comment = field.NewString(tableName, "comment")
	_uePlanning.Priority = field.NewString(tableName, "priority")

	_uePlanning.fillFieldMap()

	return _uePlanning
}

type uePlanning struct {
	uePlanningDo

	ALL            field.Asterisk
	PlanID         field.String
	Summary        field.String // 标题
	Version        field.String
	Status         field.String
	PlanType       field.String
	DutyUser       field.String
	PlanTime       field.String
	CreateUser     field.String
	CreateTime     field.String
	ConfluenceAddr field.String
	Comment        field.String
	Priority       field.String

	fieldMap map[string]field.Expr
}

func (u uePlanning) Table(newTableName string) *uePlanning {
	u.uePlanningDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uePlanning) As(alias string) *uePlanning {
	u.uePlanningDo.DO = *(u.uePlanningDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uePlanning) updateTableName(table string) *uePlanning {
	u.ALL = field.NewAsterisk(table)
	u.PlanID = field.NewString(table, "plan_id")
	u.Summary = field.NewString(table, "summary")
	u.Version = field.NewString(table, "version")
	u.Status = field.NewString(table, "status")
	u.PlanType = field.NewString(table, "plan_type")
	u.DutyUser = field.NewString(table, "duty_user")
	u.PlanTime = field.NewString(table, "plan_time")
	u.CreateUser = field.NewString(table, "create_user")
	u.CreateTime = field.NewString(table, "create_time")
	u.ConfluenceAddr = field.NewString(table, "confluence_addr")
	u.Comment = field.NewString(table, "comment")
	u.Priority = field.NewString(table, "priority")

	u.fillFieldMap()

	return u
}

func (u *uePlanning) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uePlanning) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["plan_id"] = u.PlanID
	u.fieldMap["summary"] = u.Summary
	u.fieldMap["version"] = u.Version
	u.fieldMap["status"] = u.Status
	u.fieldMap["plan_type"] = u.PlanType
	u.fieldMap["duty_user"] = u.DutyUser
	u.fieldMap["plan_time"] = u.PlanTime
	u.fieldMap["create_user"] = u.CreateUser
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["confluence_addr"] = u.ConfluenceAddr
	u.fieldMap["comment"] = u.Comment
	u.fieldMap["priority"] = u.Priority
}

func (u uePlanning) clone(db *gorm.DB) uePlanning {
	u.uePlanningDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uePlanning) replaceDB(db *gorm.DB) uePlanning {
	u.uePlanningDo.ReplaceDB(db)
	return u
}

type uePlanningDo struct{ gen.DO }

type IUePlanningDo interface {
	gen.SubQuery
	Debug() IUePlanningDo
	WithContext(ctx context.Context) IUePlanningDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUePlanningDo
	WriteDB() IUePlanningDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUePlanningDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUePlanningDo
	Not(conds ...gen.Condition) IUePlanningDo
	Or(conds ...gen.Condition) IUePlanningDo
	Select(conds ...field.Expr) IUePlanningDo
	Where(conds ...gen.Condition) IUePlanningDo
	Order(conds ...field.Expr) IUePlanningDo
	Distinct(cols ...field.Expr) IUePlanningDo
	Omit(cols ...field.Expr) IUePlanningDo
	Join(table schema.Tabler, on ...field.Expr) IUePlanningDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUePlanningDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUePlanningDo
	Group(cols ...field.Expr) IUePlanningDo
	Having(conds ...gen.Condition) IUePlanningDo
	Limit(limit int) IUePlanningDo
	Offset(offset int) IUePlanningDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUePlanningDo
	Unscoped() IUePlanningDo
	Create(values ...*model.UePlanning) error
	CreateInBatches(values []*model.UePlanning, batchSize int) error
	Save(values ...*model.UePlanning) error
	First() (*model.UePlanning, error)
	Take() (*model.UePlanning, error)
	Last() (*model.UePlanning, error)
	Find() ([]*model.UePlanning, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UePlanning, err error)
	FindInBatches(result *[]*model.UePlanning, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UePlanning) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUePlanningDo
	Assign(attrs ...field.AssignExpr) IUePlanningDo
	Joins(fields ...field.RelationField) IUePlanningDo
	Preload(fields ...field.RelationField) IUePlanningDo
	FirstOrInit() (*model.UePlanning, error)
	FirstOrCreate() (*model.UePlanning, error)
	FindByPage(offset int, limit int) (result []*model.UePlanning, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUePlanningDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uePlanningDo) Debug() IUePlanningDo {
	return u.withDO(u.DO.Debug())
}

func (u uePlanningDo) WithContext(ctx context.Context) IUePlanningDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uePlanningDo) ReadDB() IUePlanningDo {
	return u.Clauses(dbresolver.Read)
}

func (u uePlanningDo) WriteDB() IUePlanningDo {
	return u.Clauses(dbresolver.Write)
}

func (u uePlanningDo) Session(config *gorm.Session) IUePlanningDo {
	return u.withDO(u.DO.Session(config))
}

func (u uePlanningDo) Clauses(conds ...clause.Expression) IUePlanningDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uePlanningDo) Returning(value interface{}, columns ...string) IUePlanningDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uePlanningDo) Not(conds ...gen.Condition) IUePlanningDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uePlanningDo) Or(conds ...gen.Condition) IUePlanningDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uePlanningDo) Select(conds ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uePlanningDo) Where(conds ...gen.Condition) IUePlanningDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uePlanningDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUePlanningDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uePlanningDo) Order(conds ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uePlanningDo) Distinct(cols ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uePlanningDo) Omit(cols ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uePlanningDo) Join(table schema.Tabler, on ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uePlanningDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uePlanningDo) RightJoin(table schema.Tabler, on ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uePlanningDo) Group(cols ...field.Expr) IUePlanningDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uePlanningDo) Having(conds ...gen.Condition) IUePlanningDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uePlanningDo) Limit(limit int) IUePlanningDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uePlanningDo) Offset(offset int) IUePlanningDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uePlanningDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUePlanningDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uePlanningDo) Unscoped() IUePlanningDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uePlanningDo) Create(values ...*model.UePlanning) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uePlanningDo) CreateInBatches(values []*model.UePlanning, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uePlanningDo) Save(values ...*model.UePlanning) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uePlanningDo) First() (*model.UePlanning, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UePlanning), nil
	}
}

func (u uePlanningDo) Take() (*model.UePlanning, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UePlanning), nil
	}
}

func (u uePlanningDo) Last() (*model.UePlanning, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UePlanning), nil
	}
}

func (u uePlanningDo) Find() ([]*model.UePlanning, error) {
	result, err := u.DO.Find()
	return result.([]*model.UePlanning), err
}

func (u uePlanningDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UePlanning, err error) {
	buf := make([]*model.UePlanning, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uePlanningDo) FindInBatches(result *[]*model.UePlanning, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uePlanningDo) Attrs(attrs ...field.AssignExpr) IUePlanningDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uePlanningDo) Assign(attrs ...field.AssignExpr) IUePlanningDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uePlanningDo) Joins(fields ...field.RelationField) IUePlanningDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uePlanningDo) Preload(fields ...field.RelationField) IUePlanningDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uePlanningDo) FirstOrInit() (*model.UePlanning, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UePlanning), nil
	}
}

func (u uePlanningDo) FirstOrCreate() (*model.UePlanning, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UePlanning), nil
	}
}

func (u uePlanningDo) FindByPage(offset int, limit int) (result []*model.UePlanning, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uePlanningDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uePlanningDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uePlanningDo) Delete(models ...*model.UePlanning) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uePlanningDo) withDO(do gen.Dao) *uePlanningDo {
	u.DO = *do.(*gen.DO)
	return u
}
