// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUpgradePlanDbscript(db *gorm.DB, opts ...gen.DOOption) upgradePlanDbscript {
	_upgradePlanDbscript := upgradePlanDbscript{}

	_upgradePlanDbscript.upgradePlanDbscriptDo.UseDB(db, opts...)
	_upgradePlanDbscript.upgradePlanDbscriptDo.UseModel(&model.UpgradePlanDbscript{})

	tableName := _upgradePlanDbscript.upgradePlanDbscriptDo.TableName()
	_upgradePlanDbscript.ALL = field.NewAsterisk(tableName)
	_upgradePlanDbscript.UpgradePlanDbscriptID = field.NewString(tableName, "upgrade_plan_dbscript_id")
	_upgradePlanDbscript.DbscriptEventID = field.NewString(tableName, "dbscript_event_id")
	_upgradePlanDbscript.UpgradePlanID = field.NewString(tableName, "upgrade_plan_id")
	_upgradePlanDbscript.IsRight = field.NewString(tableName, "isRight")
	_upgradePlanDbscript.CreateTime = field.NewTime(tableName, "create_time")
	_upgradePlanDbscript.ModifyTime = field.NewTime(tableName, "modify_time")
	_upgradePlanDbscript.Comments = field.NewString(tableName, "comments")

	_upgradePlanDbscript.fillFieldMap()

	return _upgradePlanDbscript
}

type upgradePlanDbscript struct {
	upgradePlanDbscriptDo

	ALL                   field.Asterisk
	UpgradePlanDbscriptID field.String // 计划单id
	DbscriptEventID       field.String // 用户id
	UpgradePlanID         field.String
	IsRight               field.String
	CreateTime            field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime            field.Time   // 记录修改时间（数据库自动写入）
	Comments              field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u upgradePlanDbscript) Table(newTableName string) *upgradePlanDbscript {
	u.upgradePlanDbscriptDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u upgradePlanDbscript) As(alias string) *upgradePlanDbscript {
	u.upgradePlanDbscriptDo.DO = *(u.upgradePlanDbscriptDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *upgradePlanDbscript) updateTableName(table string) *upgradePlanDbscript {
	u.ALL = field.NewAsterisk(table)
	u.UpgradePlanDbscriptID = field.NewString(table, "upgrade_plan_dbscript_id")
	u.DbscriptEventID = field.NewString(table, "dbscript_event_id")
	u.UpgradePlanID = field.NewString(table, "upgrade_plan_id")
	u.IsRight = field.NewString(table, "isRight")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *upgradePlanDbscript) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *upgradePlanDbscript) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["upgrade_plan_dbscript_id"] = u.UpgradePlanDbscriptID
	u.fieldMap["dbscript_event_id"] = u.DbscriptEventID
	u.fieldMap["upgrade_plan_id"] = u.UpgradePlanID
	u.fieldMap["isRight"] = u.IsRight
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u upgradePlanDbscript) clone(db *gorm.DB) upgradePlanDbscript {
	u.upgradePlanDbscriptDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u upgradePlanDbscript) replaceDB(db *gorm.DB) upgradePlanDbscript {
	u.upgradePlanDbscriptDo.ReplaceDB(db)
	return u
}

type upgradePlanDbscriptDo struct{ gen.DO }

type IUpgradePlanDbscriptDo interface {
	gen.SubQuery
	Debug() IUpgradePlanDbscriptDo
	WithContext(ctx context.Context) IUpgradePlanDbscriptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUpgradePlanDbscriptDo
	WriteDB() IUpgradePlanDbscriptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUpgradePlanDbscriptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUpgradePlanDbscriptDo
	Not(conds ...gen.Condition) IUpgradePlanDbscriptDo
	Or(conds ...gen.Condition) IUpgradePlanDbscriptDo
	Select(conds ...field.Expr) IUpgradePlanDbscriptDo
	Where(conds ...gen.Condition) IUpgradePlanDbscriptDo
	Order(conds ...field.Expr) IUpgradePlanDbscriptDo
	Distinct(cols ...field.Expr) IUpgradePlanDbscriptDo
	Omit(cols ...field.Expr) IUpgradePlanDbscriptDo
	Join(table schema.Tabler, on ...field.Expr) IUpgradePlanDbscriptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDbscriptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDbscriptDo
	Group(cols ...field.Expr) IUpgradePlanDbscriptDo
	Having(conds ...gen.Condition) IUpgradePlanDbscriptDo
	Limit(limit int) IUpgradePlanDbscriptDo
	Offset(offset int) IUpgradePlanDbscriptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUpgradePlanDbscriptDo
	Unscoped() IUpgradePlanDbscriptDo
	Create(values ...*model.UpgradePlanDbscript) error
	CreateInBatches(values []*model.UpgradePlanDbscript, batchSize int) error
	Save(values ...*model.UpgradePlanDbscript) error
	First() (*model.UpgradePlanDbscript, error)
	Take() (*model.UpgradePlanDbscript, error)
	Last() (*model.UpgradePlanDbscript, error)
	Find() ([]*model.UpgradePlanDbscript, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpgradePlanDbscript, err error)
	FindInBatches(result *[]*model.UpgradePlanDbscript, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UpgradePlanDbscript) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUpgradePlanDbscriptDo
	Assign(attrs ...field.AssignExpr) IUpgradePlanDbscriptDo
	Joins(fields ...field.RelationField) IUpgradePlanDbscriptDo
	Preload(fields ...field.RelationField) IUpgradePlanDbscriptDo
	FirstOrInit() (*model.UpgradePlanDbscript, error)
	FirstOrCreate() (*model.UpgradePlanDbscript, error)
	FindByPage(offset int, limit int) (result []*model.UpgradePlanDbscript, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUpgradePlanDbscriptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u upgradePlanDbscriptDo) Debug() IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Debug())
}

func (u upgradePlanDbscriptDo) WithContext(ctx context.Context) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u upgradePlanDbscriptDo) ReadDB() IUpgradePlanDbscriptDo {
	return u.Clauses(dbresolver.Read)
}

func (u upgradePlanDbscriptDo) WriteDB() IUpgradePlanDbscriptDo {
	return u.Clauses(dbresolver.Write)
}

func (u upgradePlanDbscriptDo) Session(config *gorm.Session) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Session(config))
}

func (u upgradePlanDbscriptDo) Clauses(conds ...clause.Expression) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u upgradePlanDbscriptDo) Returning(value interface{}, columns ...string) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u upgradePlanDbscriptDo) Not(conds ...gen.Condition) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u upgradePlanDbscriptDo) Or(conds ...gen.Condition) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u upgradePlanDbscriptDo) Select(conds ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u upgradePlanDbscriptDo) Where(conds ...gen.Condition) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u upgradePlanDbscriptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUpgradePlanDbscriptDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u upgradePlanDbscriptDo) Order(conds ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u upgradePlanDbscriptDo) Distinct(cols ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u upgradePlanDbscriptDo) Omit(cols ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u upgradePlanDbscriptDo) Join(table schema.Tabler, on ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u upgradePlanDbscriptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u upgradePlanDbscriptDo) RightJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u upgradePlanDbscriptDo) Group(cols ...field.Expr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u upgradePlanDbscriptDo) Having(conds ...gen.Condition) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u upgradePlanDbscriptDo) Limit(limit int) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u upgradePlanDbscriptDo) Offset(offset int) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u upgradePlanDbscriptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u upgradePlanDbscriptDo) Unscoped() IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Unscoped())
}

func (u upgradePlanDbscriptDo) Create(values ...*model.UpgradePlanDbscript) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u upgradePlanDbscriptDo) CreateInBatches(values []*model.UpgradePlanDbscript, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u upgradePlanDbscriptDo) Save(values ...*model.UpgradePlanDbscript) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u upgradePlanDbscriptDo) First() (*model.UpgradePlanDbscript, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDbscript), nil
	}
}

func (u upgradePlanDbscriptDo) Take() (*model.UpgradePlanDbscript, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDbscript), nil
	}
}

func (u upgradePlanDbscriptDo) Last() (*model.UpgradePlanDbscript, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDbscript), nil
	}
}

func (u upgradePlanDbscriptDo) Find() ([]*model.UpgradePlanDbscript, error) {
	result, err := u.DO.Find()
	return result.([]*model.UpgradePlanDbscript), err
}

func (u upgradePlanDbscriptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpgradePlanDbscript, err error) {
	buf := make([]*model.UpgradePlanDbscript, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u upgradePlanDbscriptDo) FindInBatches(result *[]*model.UpgradePlanDbscript, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u upgradePlanDbscriptDo) Attrs(attrs ...field.AssignExpr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u upgradePlanDbscriptDo) Assign(attrs ...field.AssignExpr) IUpgradePlanDbscriptDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u upgradePlanDbscriptDo) Joins(fields ...field.RelationField) IUpgradePlanDbscriptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u upgradePlanDbscriptDo) Preload(fields ...field.RelationField) IUpgradePlanDbscriptDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u upgradePlanDbscriptDo) FirstOrInit() (*model.UpgradePlanDbscript, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDbscript), nil
	}
}

func (u upgradePlanDbscriptDo) FirstOrCreate() (*model.UpgradePlanDbscript, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDbscript), nil
	}
}

func (u upgradePlanDbscriptDo) FindByPage(offset int, limit int) (result []*model.UpgradePlanDbscript, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u upgradePlanDbscriptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u upgradePlanDbscriptDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u upgradePlanDbscriptDo) Delete(models ...*model.UpgradePlanDbscript) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *upgradePlanDbscriptDo) withDO(do gen.Dao) *upgradePlanDbscriptDo {
	u.DO = *do.(*gen.DO)
	return u
}
