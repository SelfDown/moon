// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUpgradePlanDeatils(db *gorm.DB, opts ...gen.DOOption) upgradePlanDeatils {
	_upgradePlanDeatils := upgradePlanDeatils{}

	_upgradePlanDeatils.upgradePlanDeatilsDo.UseDB(db, opts...)
	_upgradePlanDeatils.upgradePlanDeatilsDo.UseModel(&model.UpgradePlanDeatils{})

	tableName := _upgradePlanDeatils.upgradePlanDeatilsDo.TableName()
	_upgradePlanDeatils.ALL = field.NewAsterisk(tableName)
	_upgradePlanDeatils.UpgradePlanDetilsID = field.NewString(tableName, "upgrade_plan_detils_id")
	_upgradePlanDeatils.UpgradePlanListID = field.NewString(tableName, "upgrade_plan_list_id")
	_upgradePlanDeatils.ArtifactSource = field.NewString(tableName, "artifact_source")
	_upgradePlanDeatils.VersionSource = field.NewString(tableName, "version_source")
	_upgradePlanDeatils.ArtifactTarget = field.NewString(tableName, "artifact_target")
	_upgradePlanDeatils.VersionTarget = field.NewString(tableName, "version_target")
	_upgradePlanDeatils.IsRight = field.NewString(tableName, "isRight")
	_upgradePlanDeatils.ReqID = field.NewString(tableName, "req_id")
	_upgradePlanDeatils.ReleaseTime = field.NewTime(tableName, "release_time")
	_upgradePlanDeatils.CreateTime = field.NewTime(tableName, "create_time")
	_upgradePlanDeatils.ModifyTime = field.NewTime(tableName, "modify_time")
	_upgradePlanDeatils.Comments = field.NewString(tableName, "comments")

	_upgradePlanDeatils.fillFieldMap()

	return _upgradePlanDeatils
}

type upgradePlanDeatils struct {
	upgradePlanDeatilsDo

	ALL                 field.Asterisk
	UpgradePlanDetilsID field.String // UUID--用他做主键
	UpgradePlanListID   field.String // 主表ID
	ArtifactSource      field.String // 需要升级的war包名称
	VersionSource       field.String // 需要升级的war包版本
	ArtifactTarget      field.String // 对比目标war包名称
	VersionTarget       field.String // 对比目标(参考对象)war包版本
	IsRight             field.String // 0- 表示这条记录用户不关注（下载关联脚本的时候不会下载） 1表示用户关注，对于他有用
	ReqID               field.String // 关联升级单主表
	ReleaseTime         field.Time   // war包升级发布时间
	CreateTime          field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime          field.Time   // 记录修改时间（数据库自动写入）
	Comments            field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u upgradePlanDeatils) Table(newTableName string) *upgradePlanDeatils {
	u.upgradePlanDeatilsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u upgradePlanDeatils) As(alias string) *upgradePlanDeatils {
	u.upgradePlanDeatilsDo.DO = *(u.upgradePlanDeatilsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *upgradePlanDeatils) updateTableName(table string) *upgradePlanDeatils {
	u.ALL = field.NewAsterisk(table)
	u.UpgradePlanDetilsID = field.NewString(table, "upgrade_plan_detils_id")
	u.UpgradePlanListID = field.NewString(table, "upgrade_plan_list_id")
	u.ArtifactSource = field.NewString(table, "artifact_source")
	u.VersionSource = field.NewString(table, "version_source")
	u.ArtifactTarget = field.NewString(table, "artifact_target")
	u.VersionTarget = field.NewString(table, "version_target")
	u.IsRight = field.NewString(table, "isRight")
	u.ReqID = field.NewString(table, "req_id")
	u.ReleaseTime = field.NewTime(table, "release_time")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *upgradePlanDeatils) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *upgradePlanDeatils) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["upgrade_plan_detils_id"] = u.UpgradePlanDetilsID
	u.fieldMap["upgrade_plan_list_id"] = u.UpgradePlanListID
	u.fieldMap["artifact_source"] = u.ArtifactSource
	u.fieldMap["version_source"] = u.VersionSource
	u.fieldMap["artifact_target"] = u.ArtifactTarget
	u.fieldMap["version_target"] = u.VersionTarget
	u.fieldMap["isRight"] = u.IsRight
	u.fieldMap["req_id"] = u.ReqID
	u.fieldMap["release_time"] = u.ReleaseTime
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u upgradePlanDeatils) clone(db *gorm.DB) upgradePlanDeatils {
	u.upgradePlanDeatilsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u upgradePlanDeatils) replaceDB(db *gorm.DB) upgradePlanDeatils {
	u.upgradePlanDeatilsDo.ReplaceDB(db)
	return u
}

type upgradePlanDeatilsDo struct{ gen.DO }

type IUpgradePlanDeatilsDo interface {
	gen.SubQuery
	Debug() IUpgradePlanDeatilsDo
	WithContext(ctx context.Context) IUpgradePlanDeatilsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUpgradePlanDeatilsDo
	WriteDB() IUpgradePlanDeatilsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUpgradePlanDeatilsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUpgradePlanDeatilsDo
	Not(conds ...gen.Condition) IUpgradePlanDeatilsDo
	Or(conds ...gen.Condition) IUpgradePlanDeatilsDo
	Select(conds ...field.Expr) IUpgradePlanDeatilsDo
	Where(conds ...gen.Condition) IUpgradePlanDeatilsDo
	Order(conds ...field.Expr) IUpgradePlanDeatilsDo
	Distinct(cols ...field.Expr) IUpgradePlanDeatilsDo
	Omit(cols ...field.Expr) IUpgradePlanDeatilsDo
	Join(table schema.Tabler, on ...field.Expr) IUpgradePlanDeatilsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDeatilsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDeatilsDo
	Group(cols ...field.Expr) IUpgradePlanDeatilsDo
	Having(conds ...gen.Condition) IUpgradePlanDeatilsDo
	Limit(limit int) IUpgradePlanDeatilsDo
	Offset(offset int) IUpgradePlanDeatilsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUpgradePlanDeatilsDo
	Unscoped() IUpgradePlanDeatilsDo
	Create(values ...*model.UpgradePlanDeatils) error
	CreateInBatches(values []*model.UpgradePlanDeatils, batchSize int) error
	Save(values ...*model.UpgradePlanDeatils) error
	First() (*model.UpgradePlanDeatils, error)
	Take() (*model.UpgradePlanDeatils, error)
	Last() (*model.UpgradePlanDeatils, error)
	Find() ([]*model.UpgradePlanDeatils, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpgradePlanDeatils, err error)
	FindInBatches(result *[]*model.UpgradePlanDeatils, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UpgradePlanDeatils) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUpgradePlanDeatilsDo
	Assign(attrs ...field.AssignExpr) IUpgradePlanDeatilsDo
	Joins(fields ...field.RelationField) IUpgradePlanDeatilsDo
	Preload(fields ...field.RelationField) IUpgradePlanDeatilsDo
	FirstOrInit() (*model.UpgradePlanDeatils, error)
	FirstOrCreate() (*model.UpgradePlanDeatils, error)
	FindByPage(offset int, limit int) (result []*model.UpgradePlanDeatils, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUpgradePlanDeatilsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u upgradePlanDeatilsDo) Debug() IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Debug())
}

func (u upgradePlanDeatilsDo) WithContext(ctx context.Context) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u upgradePlanDeatilsDo) ReadDB() IUpgradePlanDeatilsDo {
	return u.Clauses(dbresolver.Read)
}

func (u upgradePlanDeatilsDo) WriteDB() IUpgradePlanDeatilsDo {
	return u.Clauses(dbresolver.Write)
}

func (u upgradePlanDeatilsDo) Session(config *gorm.Session) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Session(config))
}

func (u upgradePlanDeatilsDo) Clauses(conds ...clause.Expression) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u upgradePlanDeatilsDo) Returning(value interface{}, columns ...string) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u upgradePlanDeatilsDo) Not(conds ...gen.Condition) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u upgradePlanDeatilsDo) Or(conds ...gen.Condition) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u upgradePlanDeatilsDo) Select(conds ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u upgradePlanDeatilsDo) Where(conds ...gen.Condition) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u upgradePlanDeatilsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUpgradePlanDeatilsDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u upgradePlanDeatilsDo) Order(conds ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u upgradePlanDeatilsDo) Distinct(cols ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u upgradePlanDeatilsDo) Omit(cols ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u upgradePlanDeatilsDo) Join(table schema.Tabler, on ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u upgradePlanDeatilsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u upgradePlanDeatilsDo) RightJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u upgradePlanDeatilsDo) Group(cols ...field.Expr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u upgradePlanDeatilsDo) Having(conds ...gen.Condition) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u upgradePlanDeatilsDo) Limit(limit int) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u upgradePlanDeatilsDo) Offset(offset int) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u upgradePlanDeatilsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u upgradePlanDeatilsDo) Unscoped() IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u upgradePlanDeatilsDo) Create(values ...*model.UpgradePlanDeatils) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u upgradePlanDeatilsDo) CreateInBatches(values []*model.UpgradePlanDeatils, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u upgradePlanDeatilsDo) Save(values ...*model.UpgradePlanDeatils) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u upgradePlanDeatilsDo) First() (*model.UpgradePlanDeatils, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDeatils), nil
	}
}

func (u upgradePlanDeatilsDo) Take() (*model.UpgradePlanDeatils, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDeatils), nil
	}
}

func (u upgradePlanDeatilsDo) Last() (*model.UpgradePlanDeatils, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDeatils), nil
	}
}

func (u upgradePlanDeatilsDo) Find() ([]*model.UpgradePlanDeatils, error) {
	result, err := u.DO.Find()
	return result.([]*model.UpgradePlanDeatils), err
}

func (u upgradePlanDeatilsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpgradePlanDeatils, err error) {
	buf := make([]*model.UpgradePlanDeatils, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u upgradePlanDeatilsDo) FindInBatches(result *[]*model.UpgradePlanDeatils, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u upgradePlanDeatilsDo) Attrs(attrs ...field.AssignExpr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u upgradePlanDeatilsDo) Assign(attrs ...field.AssignExpr) IUpgradePlanDeatilsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u upgradePlanDeatilsDo) Joins(fields ...field.RelationField) IUpgradePlanDeatilsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u upgradePlanDeatilsDo) Preload(fields ...field.RelationField) IUpgradePlanDeatilsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u upgradePlanDeatilsDo) FirstOrInit() (*model.UpgradePlanDeatils, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDeatils), nil
	}
}

func (u upgradePlanDeatilsDo) FirstOrCreate() (*model.UpgradePlanDeatils, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanDeatils), nil
	}
}

func (u upgradePlanDeatilsDo) FindByPage(offset int, limit int) (result []*model.UpgradePlanDeatils, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u upgradePlanDeatilsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u upgradePlanDeatilsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u upgradePlanDeatilsDo) Delete(models ...*model.UpgradePlanDeatils) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *upgradePlanDeatilsDo) withDO(do gen.Dao) *upgradePlanDeatilsDo {
	u.DO = *do.(*gen.DO)
	return u
}
