// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUpgradePlanList(db *gorm.DB, opts ...gen.DOOption) upgradePlanList {
	_upgradePlanList := upgradePlanList{}

	_upgradePlanList.upgradePlanListDo.UseDB(db, opts...)
	_upgradePlanList.upgradePlanListDo.UseModel(&model.UpgradePlanList{})

	tableName := _upgradePlanList.upgradePlanListDo.TableName()
	_upgradePlanList.ALL = field.NewAsterisk(tableName)
	_upgradePlanList.UpgradePlanID = field.NewString(tableName, "upgrade_plan_id")
	_upgradePlanList.OpUser = field.NewString(tableName, "op_user")
	_upgradePlanList.CreateTime = field.NewTime(tableName, "create_time")
	_upgradePlanList.PlanStartTime = field.NewTime(tableName, "plan_start_time")
	_upgradePlanList.PlanEndTime = field.NewTime(tableName, "plan_end_time")
	_upgradePlanList.ID = field.NewInt32(tableName, "id")
	_upgradePlanList.ModifyTime = field.NewTime(tableName, "modify_time")
	_upgradePlanList.Title = field.NewString(tableName, "title")
	_upgradePlanList.ServerEnvIDTarget = field.NewString(tableName, "server_env_id_target")
	_upgradePlanList.ServerEnvIDSource = field.NewString(tableName, "server_env_id_source")
	_upgradePlanList.Comments = field.NewString(tableName, "comments")

	_upgradePlanList.fillFieldMap()

	return _upgradePlanList
}

type upgradePlanList struct {
	upgradePlanListDo

	ALL               field.Asterisk
	UpgradePlanID     field.String // UUID--用他做主键
	OpUser            field.String // 操作人（创建人）
	CreateTime        field.Time   // 记录创建时间（数据库自动写入）
	PlanStartTime     field.Time   // 升级计划开始时间（用这个时间，查升级单相关数据）
	PlanEndTime       field.Time   // 升级计划结束时间（用这个时间，查升级单相关数据）
	ID                field.Int32  // 自增长ID(用户显示编号),例如：SUP-100
	ModifyTime        field.Time   // 升级计划修改时间
	Title             field.String // 升级计划标题
	ServerEnvIDTarget field.String // 参考环境ID
	ServerEnvIDSource field.String // 待升级环境server_env_ID
	Comments          field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u upgradePlanList) Table(newTableName string) *upgradePlanList {
	u.upgradePlanListDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u upgradePlanList) As(alias string) *upgradePlanList {
	u.upgradePlanListDo.DO = *(u.upgradePlanListDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *upgradePlanList) updateTableName(table string) *upgradePlanList {
	u.ALL = field.NewAsterisk(table)
	u.UpgradePlanID = field.NewString(table, "upgrade_plan_id")
	u.OpUser = field.NewString(table, "op_user")
	u.CreateTime = field.NewTime(table, "create_time")
	u.PlanStartTime = field.NewTime(table, "plan_start_time")
	u.PlanEndTime = field.NewTime(table, "plan_end_time")
	u.ID = field.NewInt32(table, "id")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Title = field.NewString(table, "title")
	u.ServerEnvIDTarget = field.NewString(table, "server_env_id_target")
	u.ServerEnvIDSource = field.NewString(table, "server_env_id_source")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *upgradePlanList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *upgradePlanList) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["upgrade_plan_id"] = u.UpgradePlanID
	u.fieldMap["op_user"] = u.OpUser
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["plan_start_time"] = u.PlanStartTime
	u.fieldMap["plan_end_time"] = u.PlanEndTime
	u.fieldMap["id"] = u.ID
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["title"] = u.Title
	u.fieldMap["server_env_id_target"] = u.ServerEnvIDTarget
	u.fieldMap["server_env_id_source"] = u.ServerEnvIDSource
	u.fieldMap["comments"] = u.Comments
}

func (u upgradePlanList) clone(db *gorm.DB) upgradePlanList {
	u.upgradePlanListDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u upgradePlanList) replaceDB(db *gorm.DB) upgradePlanList {
	u.upgradePlanListDo.ReplaceDB(db)
	return u
}

type upgradePlanListDo struct{ gen.DO }

type IUpgradePlanListDo interface {
	gen.SubQuery
	Debug() IUpgradePlanListDo
	WithContext(ctx context.Context) IUpgradePlanListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUpgradePlanListDo
	WriteDB() IUpgradePlanListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUpgradePlanListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUpgradePlanListDo
	Not(conds ...gen.Condition) IUpgradePlanListDo
	Or(conds ...gen.Condition) IUpgradePlanListDo
	Select(conds ...field.Expr) IUpgradePlanListDo
	Where(conds ...gen.Condition) IUpgradePlanListDo
	Order(conds ...field.Expr) IUpgradePlanListDo
	Distinct(cols ...field.Expr) IUpgradePlanListDo
	Omit(cols ...field.Expr) IUpgradePlanListDo
	Join(table schema.Tabler, on ...field.Expr) IUpgradePlanListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanListDo
	Group(cols ...field.Expr) IUpgradePlanListDo
	Having(conds ...gen.Condition) IUpgradePlanListDo
	Limit(limit int) IUpgradePlanListDo
	Offset(offset int) IUpgradePlanListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUpgradePlanListDo
	Unscoped() IUpgradePlanListDo
	Create(values ...*model.UpgradePlanList) error
	CreateInBatches(values []*model.UpgradePlanList, batchSize int) error
	Save(values ...*model.UpgradePlanList) error
	First() (*model.UpgradePlanList, error)
	Take() (*model.UpgradePlanList, error)
	Last() (*model.UpgradePlanList, error)
	Find() ([]*model.UpgradePlanList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpgradePlanList, err error)
	FindInBatches(result *[]*model.UpgradePlanList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UpgradePlanList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUpgradePlanListDo
	Assign(attrs ...field.AssignExpr) IUpgradePlanListDo
	Joins(fields ...field.RelationField) IUpgradePlanListDo
	Preload(fields ...field.RelationField) IUpgradePlanListDo
	FirstOrInit() (*model.UpgradePlanList, error)
	FirstOrCreate() (*model.UpgradePlanList, error)
	FindByPage(offset int, limit int) (result []*model.UpgradePlanList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUpgradePlanListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u upgradePlanListDo) Debug() IUpgradePlanListDo {
	return u.withDO(u.DO.Debug())
}

func (u upgradePlanListDo) WithContext(ctx context.Context) IUpgradePlanListDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u upgradePlanListDo) ReadDB() IUpgradePlanListDo {
	return u.Clauses(dbresolver.Read)
}

func (u upgradePlanListDo) WriteDB() IUpgradePlanListDo {
	return u.Clauses(dbresolver.Write)
}

func (u upgradePlanListDo) Session(config *gorm.Session) IUpgradePlanListDo {
	return u.withDO(u.DO.Session(config))
}

func (u upgradePlanListDo) Clauses(conds ...clause.Expression) IUpgradePlanListDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u upgradePlanListDo) Returning(value interface{}, columns ...string) IUpgradePlanListDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u upgradePlanListDo) Not(conds ...gen.Condition) IUpgradePlanListDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u upgradePlanListDo) Or(conds ...gen.Condition) IUpgradePlanListDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u upgradePlanListDo) Select(conds ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u upgradePlanListDo) Where(conds ...gen.Condition) IUpgradePlanListDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u upgradePlanListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUpgradePlanListDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u upgradePlanListDo) Order(conds ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u upgradePlanListDo) Distinct(cols ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u upgradePlanListDo) Omit(cols ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u upgradePlanListDo) Join(table schema.Tabler, on ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u upgradePlanListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u upgradePlanListDo) RightJoin(table schema.Tabler, on ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u upgradePlanListDo) Group(cols ...field.Expr) IUpgradePlanListDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u upgradePlanListDo) Having(conds ...gen.Condition) IUpgradePlanListDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u upgradePlanListDo) Limit(limit int) IUpgradePlanListDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u upgradePlanListDo) Offset(offset int) IUpgradePlanListDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u upgradePlanListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUpgradePlanListDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u upgradePlanListDo) Unscoped() IUpgradePlanListDo {
	return u.withDO(u.DO.Unscoped())
}

func (u upgradePlanListDo) Create(values ...*model.UpgradePlanList) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u upgradePlanListDo) CreateInBatches(values []*model.UpgradePlanList, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u upgradePlanListDo) Save(values ...*model.UpgradePlanList) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u upgradePlanListDo) First() (*model.UpgradePlanList, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanList), nil
	}
}

func (u upgradePlanListDo) Take() (*model.UpgradePlanList, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanList), nil
	}
}

func (u upgradePlanListDo) Last() (*model.UpgradePlanList, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanList), nil
	}
}

func (u upgradePlanListDo) Find() ([]*model.UpgradePlanList, error) {
	result, err := u.DO.Find()
	return result.([]*model.UpgradePlanList), err
}

func (u upgradePlanListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UpgradePlanList, err error) {
	buf := make([]*model.UpgradePlanList, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u upgradePlanListDo) FindInBatches(result *[]*model.UpgradePlanList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u upgradePlanListDo) Attrs(attrs ...field.AssignExpr) IUpgradePlanListDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u upgradePlanListDo) Assign(attrs ...field.AssignExpr) IUpgradePlanListDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u upgradePlanListDo) Joins(fields ...field.RelationField) IUpgradePlanListDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u upgradePlanListDo) Preload(fields ...field.RelationField) IUpgradePlanListDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u upgradePlanListDo) FirstOrInit() (*model.UpgradePlanList, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanList), nil
	}
}

func (u upgradePlanListDo) FirstOrCreate() (*model.UpgradePlanList, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UpgradePlanList), nil
	}
}

func (u upgradePlanListDo) FindByPage(offset int, limit int) (result []*model.UpgradePlanList, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u upgradePlanListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u upgradePlanListDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u upgradePlanListDo) Delete(models ...*model.UpgradePlanList) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *upgradePlanListDo) withDO(do gen.Dao) *upgradePlanListDo {
	u.DO = *do.(*gen.DO)
	return u
}
