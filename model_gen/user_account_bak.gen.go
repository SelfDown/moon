// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserAccountBak(db *gorm.DB, opts ...gen.DOOption) userAccountBak {
	_userAccountBak := userAccountBak{}

	_userAccountBak.userAccountBakDo.UseDB(db, opts...)
	_userAccountBak.userAccountBakDo.UseModel(&model.UserAccountBak{})

	tableName := _userAccountBak.userAccountBakDo.TableName()
	_userAccountBak.ALL = field.NewAsterisk(tableName)
	_userAccountBak.Userid = field.NewString(tableName, "userid")
	_userAccountBak.RoleID = field.NewString(tableName, "role_id")
	_userAccountBak.Username = field.NewString(tableName, "username")
	_userAccountBak.Userpwd = field.NewString(tableName, "userpwd")
	_userAccountBak.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_userAccountBak.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_userAccountBak.Email = field.NewString(tableName, "email")
	_userAccountBak.Nick = field.NewString(tableName, "nick")
	_userAccountBak.Statu = field.NewInt32(tableName, "statu")
	_userAccountBak.Address = field.NewString(tableName, "address")
	_userAccountBak.Note = field.NewString(tableName, "note")
	_userAccountBak.Email2 = field.NewString(tableName, "email2")
	_userAccountBak.CreateTime = field.NewTime(tableName, "create_time")
	_userAccountBak.LastLoginFailureTime = field.NewTime(tableName, "last_login_failure_time")
	_userAccountBak.LoginFailureCount = field.NewInt32(tableName, "login_failure_count")
	_userAccountBak.Avatar = field.NewString(tableName, "avatar")
	_userAccountBak.ModifyTime = field.NewTime(tableName, "modify_time")
	_userAccountBak.Comments = field.NewString(tableName, "comments")

	_userAccountBak.fillFieldMap()

	return _userAccountBak
}

type userAccountBak struct {
	userAccountBakDo

	ALL                  field.Asterisk
	Userid               field.String
	RoleID               field.String
	Username             field.String
	Userpwd              field.String
	LastLoginTime        field.Time
	LastLoginIP          field.String
	Email                field.String
	Nick                 field.String
	Statu                field.Int32
	Address              field.String
	Note                 field.String
	Email2               field.String
	CreateTime           field.Time
	LastLoginFailureTime field.Time
	LoginFailureCount    field.Int32
	Avatar               field.String
	ModifyTime           field.Time
	Comments             field.String

	fieldMap map[string]field.Expr
}

func (u userAccountBak) Table(newTableName string) *userAccountBak {
	u.userAccountBakDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAccountBak) As(alias string) *userAccountBak {
	u.userAccountBakDo.DO = *(u.userAccountBakDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAccountBak) updateTableName(table string) *userAccountBak {
	u.ALL = field.NewAsterisk(table)
	u.Userid = field.NewString(table, "userid")
	u.RoleID = field.NewString(table, "role_id")
	u.Username = field.NewString(table, "username")
	u.Userpwd = field.NewString(table, "userpwd")
	u.LastLoginTime = field.NewTime(table, "last_login_time")
	u.LastLoginIP = field.NewString(table, "last_login_ip")
	u.Email = field.NewString(table, "email")
	u.Nick = field.NewString(table, "nick")
	u.Statu = field.NewInt32(table, "statu")
	u.Address = field.NewString(table, "address")
	u.Note = field.NewString(table, "note")
	u.Email2 = field.NewString(table, "email2")
	u.CreateTime = field.NewTime(table, "create_time")
	u.LastLoginFailureTime = field.NewTime(table, "last_login_failure_time")
	u.LoginFailureCount = field.NewInt32(table, "login_failure_count")
	u.Avatar = field.NewString(table, "avatar")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *userAccountBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAccountBak) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["userid"] = u.Userid
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["username"] = u.Username
	u.fieldMap["userpwd"] = u.Userpwd
	u.fieldMap["last_login_time"] = u.LastLoginTime
	u.fieldMap["last_login_ip"] = u.LastLoginIP
	u.fieldMap["email"] = u.Email
	u.fieldMap["nick"] = u.Nick
	u.fieldMap["statu"] = u.Statu
	u.fieldMap["address"] = u.Address
	u.fieldMap["note"] = u.Note
	u.fieldMap["email2"] = u.Email2
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["last_login_failure_time"] = u.LastLoginFailureTime
	u.fieldMap["login_failure_count"] = u.LoginFailureCount
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u userAccountBak) clone(db *gorm.DB) userAccountBak {
	u.userAccountBakDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAccountBak) replaceDB(db *gorm.DB) userAccountBak {
	u.userAccountBakDo.ReplaceDB(db)
	return u
}

type userAccountBakDo struct{ gen.DO }

type IUserAccountBakDo interface {
	gen.SubQuery
	Debug() IUserAccountBakDo
	WithContext(ctx context.Context) IUserAccountBakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAccountBakDo
	WriteDB() IUserAccountBakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAccountBakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAccountBakDo
	Not(conds ...gen.Condition) IUserAccountBakDo
	Or(conds ...gen.Condition) IUserAccountBakDo
	Select(conds ...field.Expr) IUserAccountBakDo
	Where(conds ...gen.Condition) IUserAccountBakDo
	Order(conds ...field.Expr) IUserAccountBakDo
	Distinct(cols ...field.Expr) IUserAccountBakDo
	Omit(cols ...field.Expr) IUserAccountBakDo
	Join(table schema.Tabler, on ...field.Expr) IUserAccountBakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccountBakDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAccountBakDo
	Group(cols ...field.Expr) IUserAccountBakDo
	Having(conds ...gen.Condition) IUserAccountBakDo
	Limit(limit int) IUserAccountBakDo
	Offset(offset int) IUserAccountBakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccountBakDo
	Unscoped() IUserAccountBakDo
	Create(values ...*model.UserAccountBak) error
	CreateInBatches(values []*model.UserAccountBak, batchSize int) error
	Save(values ...*model.UserAccountBak) error
	First() (*model.UserAccountBak, error)
	Take() (*model.UserAccountBak, error)
	Last() (*model.UserAccountBak, error)
	Find() ([]*model.UserAccountBak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccountBak, err error)
	FindInBatches(result *[]*model.UserAccountBak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAccountBak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAccountBakDo
	Assign(attrs ...field.AssignExpr) IUserAccountBakDo
	Joins(fields ...field.RelationField) IUserAccountBakDo
	Preload(fields ...field.RelationField) IUserAccountBakDo
	FirstOrInit() (*model.UserAccountBak, error)
	FirstOrCreate() (*model.UserAccountBak, error)
	FindByPage(offset int, limit int) (result []*model.UserAccountBak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAccountBakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAccountBakDo) Debug() IUserAccountBakDo {
	return u.withDO(u.DO.Debug())
}

func (u userAccountBakDo) WithContext(ctx context.Context) IUserAccountBakDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAccountBakDo) ReadDB() IUserAccountBakDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAccountBakDo) WriteDB() IUserAccountBakDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAccountBakDo) Session(config *gorm.Session) IUserAccountBakDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAccountBakDo) Clauses(conds ...clause.Expression) IUserAccountBakDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAccountBakDo) Returning(value interface{}, columns ...string) IUserAccountBakDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAccountBakDo) Not(conds ...gen.Condition) IUserAccountBakDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAccountBakDo) Or(conds ...gen.Condition) IUserAccountBakDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAccountBakDo) Select(conds ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAccountBakDo) Where(conds ...gen.Condition) IUserAccountBakDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAccountBakDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserAccountBakDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAccountBakDo) Order(conds ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAccountBakDo) Distinct(cols ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAccountBakDo) Omit(cols ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAccountBakDo) Join(table schema.Tabler, on ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAccountBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAccountBakDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAccountBakDo) Group(cols ...field.Expr) IUserAccountBakDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAccountBakDo) Having(conds ...gen.Condition) IUserAccountBakDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAccountBakDo) Limit(limit int) IUserAccountBakDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAccountBakDo) Offset(offset int) IUserAccountBakDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAccountBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccountBakDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAccountBakDo) Unscoped() IUserAccountBakDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAccountBakDo) Create(values ...*model.UserAccountBak) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAccountBakDo) CreateInBatches(values []*model.UserAccountBak, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAccountBakDo) Save(values ...*model.UserAccountBak) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAccountBakDo) First() (*model.UserAccountBak, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountBak), nil
	}
}

func (u userAccountBakDo) Take() (*model.UserAccountBak, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountBak), nil
	}
}

func (u userAccountBakDo) Last() (*model.UserAccountBak, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountBak), nil
	}
}

func (u userAccountBakDo) Find() ([]*model.UserAccountBak, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAccountBak), err
}

func (u userAccountBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccountBak, err error) {
	buf := make([]*model.UserAccountBak, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAccountBakDo) FindInBatches(result *[]*model.UserAccountBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAccountBakDo) Attrs(attrs ...field.AssignExpr) IUserAccountBakDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAccountBakDo) Assign(attrs ...field.AssignExpr) IUserAccountBakDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAccountBakDo) Joins(fields ...field.RelationField) IUserAccountBakDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAccountBakDo) Preload(fields ...field.RelationField) IUserAccountBakDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAccountBakDo) FirstOrInit() (*model.UserAccountBak, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountBak), nil
	}
}

func (u userAccountBakDo) FirstOrCreate() (*model.UserAccountBak, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountBak), nil
	}
}

func (u userAccountBakDo) FindByPage(offset int, limit int) (result []*model.UserAccountBak, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAccountBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAccountBakDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAccountBakDo) Delete(models ...*model.UserAccountBak) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAccountBakDo) withDO(do gen.Dao) *userAccountBakDo {
	u.DO = *do.(*gen.DO)
	return u
}
