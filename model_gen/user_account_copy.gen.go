// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserAccountCopy(db *gorm.DB, opts ...gen.DOOption) userAccountCopy {
	_userAccountCopy := userAccountCopy{}

	_userAccountCopy.userAccountCopyDo.UseDB(db, opts...)
	_userAccountCopy.userAccountCopyDo.UseModel(&model.UserAccountCopy{})

	tableName := _userAccountCopy.userAccountCopyDo.TableName()
	_userAccountCopy.ALL = field.NewAsterisk(tableName)
	_userAccountCopy.Userid = field.NewString(tableName, "userid")
	_userAccountCopy.RoleID = field.NewString(tableName, "role_id")
	_userAccountCopy.Username = field.NewString(tableName, "username")
	_userAccountCopy.Userpwd = field.NewString(tableName, "userpwd")
	_userAccountCopy.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_userAccountCopy.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_userAccountCopy.Email = field.NewString(tableName, "email")
	_userAccountCopy.Nick = field.NewString(tableName, "nick")
	_userAccountCopy.Statu = field.NewInt32(tableName, "statu")
	_userAccountCopy.Address = field.NewString(tableName, "address")
	_userAccountCopy.Note = field.NewString(tableName, "note")
	_userAccountCopy.Email2 = field.NewString(tableName, "email2")
	_userAccountCopy.CreateTime = field.NewTime(tableName, "create_time")
	_userAccountCopy.LastLoginFailureTime = field.NewTime(tableName, "last_login_failure_time")
	_userAccountCopy.LoginFailureCount = field.NewInt32(tableName, "login_failure_count")
	_userAccountCopy.Avatar = field.NewString(tableName, "avatar")
	_userAccountCopy.ModifyTime = field.NewTime(tableName, "modify_time")
	_userAccountCopy.Comments = field.NewString(tableName, "comments")

	_userAccountCopy.fillFieldMap()

	return _userAccountCopy
}

type userAccountCopy struct {
	userAccountCopyDo

	ALL                  field.Asterisk
	Userid               field.String
	RoleID               field.String
	Username             field.String
	Userpwd              field.String
	LastLoginTime        field.Time   // 最后一次登录时间
	LastLoginIP          field.String // 最后一次登录IP
	Email                field.String // 用户邮箱
	Nick                 field.String // 用户昵称
	Statu                field.Int32  // 1 启用，0禁用
	Address              field.String // 物理地址
	Note                 field.String
	Email2               field.String // 用户备用邮箱
	CreateTime           field.Time   // 记录创建时间（数据库自动写入）
	LastLoginFailureTime field.Time   // 最近一次登录失败时间
	LoginFailureCount    field.Int32  // 登录失败计数
	Avatar               field.String // 用户头像base64
	ModifyTime           field.Time   // 记录修改时间（数据库自动写入）
	Comments             field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u userAccountCopy) Table(newTableName string) *userAccountCopy {
	u.userAccountCopyDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAccountCopy) As(alias string) *userAccountCopy {
	u.userAccountCopyDo.DO = *(u.userAccountCopyDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAccountCopy) updateTableName(table string) *userAccountCopy {
	u.ALL = field.NewAsterisk(table)
	u.Userid = field.NewString(table, "userid")
	u.RoleID = field.NewString(table, "role_id")
	u.Username = field.NewString(table, "username")
	u.Userpwd = field.NewString(table, "userpwd")
	u.LastLoginTime = field.NewTime(table, "last_login_time")
	u.LastLoginIP = field.NewString(table, "last_login_ip")
	u.Email = field.NewString(table, "email")
	u.Nick = field.NewString(table, "nick")
	u.Statu = field.NewInt32(table, "statu")
	u.Address = field.NewString(table, "address")
	u.Note = field.NewString(table, "note")
	u.Email2 = field.NewString(table, "email2")
	u.CreateTime = field.NewTime(table, "create_time")
	u.LastLoginFailureTime = field.NewTime(table, "last_login_failure_time")
	u.LoginFailureCount = field.NewInt32(table, "login_failure_count")
	u.Avatar = field.NewString(table, "avatar")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *userAccountCopy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAccountCopy) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["userid"] = u.Userid
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["username"] = u.Username
	u.fieldMap["userpwd"] = u.Userpwd
	u.fieldMap["last_login_time"] = u.LastLoginTime
	u.fieldMap["last_login_ip"] = u.LastLoginIP
	u.fieldMap["email"] = u.Email
	u.fieldMap["nick"] = u.Nick
	u.fieldMap["statu"] = u.Statu
	u.fieldMap["address"] = u.Address
	u.fieldMap["note"] = u.Note
	u.fieldMap["email2"] = u.Email2
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["last_login_failure_time"] = u.LastLoginFailureTime
	u.fieldMap["login_failure_count"] = u.LoginFailureCount
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u userAccountCopy) clone(db *gorm.DB) userAccountCopy {
	u.userAccountCopyDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAccountCopy) replaceDB(db *gorm.DB) userAccountCopy {
	u.userAccountCopyDo.ReplaceDB(db)
	return u
}

type userAccountCopyDo struct{ gen.DO }

type IUserAccountCopyDo interface {
	gen.SubQuery
	Debug() IUserAccountCopyDo
	WithContext(ctx context.Context) IUserAccountCopyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserAccountCopyDo
	WriteDB() IUserAccountCopyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserAccountCopyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserAccountCopyDo
	Not(conds ...gen.Condition) IUserAccountCopyDo
	Or(conds ...gen.Condition) IUserAccountCopyDo
	Select(conds ...field.Expr) IUserAccountCopyDo
	Where(conds ...gen.Condition) IUserAccountCopyDo
	Order(conds ...field.Expr) IUserAccountCopyDo
	Distinct(cols ...field.Expr) IUserAccountCopyDo
	Omit(cols ...field.Expr) IUserAccountCopyDo
	Join(table schema.Tabler, on ...field.Expr) IUserAccountCopyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccountCopyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserAccountCopyDo
	Group(cols ...field.Expr) IUserAccountCopyDo
	Having(conds ...gen.Condition) IUserAccountCopyDo
	Limit(limit int) IUserAccountCopyDo
	Offset(offset int) IUserAccountCopyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccountCopyDo
	Unscoped() IUserAccountCopyDo
	Create(values ...*model.UserAccountCopy) error
	CreateInBatches(values []*model.UserAccountCopy, batchSize int) error
	Save(values ...*model.UserAccountCopy) error
	First() (*model.UserAccountCopy, error)
	Take() (*model.UserAccountCopy, error)
	Last() (*model.UserAccountCopy, error)
	Find() ([]*model.UserAccountCopy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccountCopy, err error)
	FindInBatches(result *[]*model.UserAccountCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserAccountCopy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserAccountCopyDo
	Assign(attrs ...field.AssignExpr) IUserAccountCopyDo
	Joins(fields ...field.RelationField) IUserAccountCopyDo
	Preload(fields ...field.RelationField) IUserAccountCopyDo
	FirstOrInit() (*model.UserAccountCopy, error)
	FirstOrCreate() (*model.UserAccountCopy, error)
	FindByPage(offset int, limit int) (result []*model.UserAccountCopy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserAccountCopyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userAccountCopyDo) Debug() IUserAccountCopyDo {
	return u.withDO(u.DO.Debug())
}

func (u userAccountCopyDo) WithContext(ctx context.Context) IUserAccountCopyDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAccountCopyDo) ReadDB() IUserAccountCopyDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAccountCopyDo) WriteDB() IUserAccountCopyDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAccountCopyDo) Session(config *gorm.Session) IUserAccountCopyDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAccountCopyDo) Clauses(conds ...clause.Expression) IUserAccountCopyDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAccountCopyDo) Returning(value interface{}, columns ...string) IUserAccountCopyDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAccountCopyDo) Not(conds ...gen.Condition) IUserAccountCopyDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAccountCopyDo) Or(conds ...gen.Condition) IUserAccountCopyDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAccountCopyDo) Select(conds ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAccountCopyDo) Where(conds ...gen.Condition) IUserAccountCopyDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAccountCopyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserAccountCopyDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAccountCopyDo) Order(conds ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAccountCopyDo) Distinct(cols ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAccountCopyDo) Omit(cols ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAccountCopyDo) Join(table schema.Tabler, on ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAccountCopyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAccountCopyDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAccountCopyDo) Group(cols ...field.Expr) IUserAccountCopyDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAccountCopyDo) Having(conds ...gen.Condition) IUserAccountCopyDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAccountCopyDo) Limit(limit int) IUserAccountCopyDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAccountCopyDo) Offset(offset int) IUserAccountCopyDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAccountCopyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserAccountCopyDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAccountCopyDo) Unscoped() IUserAccountCopyDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAccountCopyDo) Create(values ...*model.UserAccountCopy) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAccountCopyDo) CreateInBatches(values []*model.UserAccountCopy, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAccountCopyDo) Save(values ...*model.UserAccountCopy) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAccountCopyDo) First() (*model.UserAccountCopy, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountCopy), nil
	}
}

func (u userAccountCopyDo) Take() (*model.UserAccountCopy, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountCopy), nil
	}
}

func (u userAccountCopyDo) Last() (*model.UserAccountCopy, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountCopy), nil
	}
}

func (u userAccountCopyDo) Find() ([]*model.UserAccountCopy, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAccountCopy), err
}

func (u userAccountCopyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccountCopy, err error) {
	buf := make([]*model.UserAccountCopy, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAccountCopyDo) FindInBatches(result *[]*model.UserAccountCopy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAccountCopyDo) Attrs(attrs ...field.AssignExpr) IUserAccountCopyDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAccountCopyDo) Assign(attrs ...field.AssignExpr) IUserAccountCopyDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAccountCopyDo) Joins(fields ...field.RelationField) IUserAccountCopyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAccountCopyDo) Preload(fields ...field.RelationField) IUserAccountCopyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAccountCopyDo) FirstOrInit() (*model.UserAccountCopy, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountCopy), nil
	}
}

func (u userAccountCopyDo) FirstOrCreate() (*model.UserAccountCopy, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountCopy), nil
	}
}

func (u userAccountCopyDo) FindByPage(offset int, limit int) (result []*model.UserAccountCopy, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAccountCopyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAccountCopyDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAccountCopyDo) Delete(models ...*model.UserAccountCopy) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAccountCopyDo) withDO(do gen.Dao) *userAccountCopyDo {
	u.DO = *do.(*gen.DO)
	return u
}
