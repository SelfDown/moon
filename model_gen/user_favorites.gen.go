// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserFavorites(db *gorm.DB, opts ...gen.DOOption) userFavorites {
	_userFavorites := userFavorites{}

	_userFavorites.userFavoritesDo.UseDB(db, opts...)
	_userFavorites.userFavoritesDo.UseModel(&model.UserFavorites{})

	tableName := _userFavorites.userFavoritesDo.TableName()
	_userFavorites.ALL = field.NewAsterisk(tableName)
	_userFavorites.UserFavoritesID = field.NewString(tableName, "user_favorites_id")
	_userFavorites.UserID = field.NewString(tableName, "user_id")
	_userFavorites.BusiID = field.NewString(tableName, "busi_id")
	_userFavorites.CreateTime = field.NewTime(tableName, "create_time")
	_userFavorites.Note = field.NewString(tableName, "note")
	_userFavorites.ModifyTime = field.NewTime(tableName, "modify_time")
	_userFavorites.Comments = field.NewString(tableName, "comments")

	_userFavorites.fillFieldMap()

	return _userFavorites
}

type userFavorites struct {
	userFavoritesDo

	ALL             field.Asterisk
	UserFavoritesID field.String
	UserID          field.String
	/*
		其他表的主键

	*/
	BusiID     field.String
	CreateTime field.Time // 记录创建时间（数据库自动写入）
	Note       field.String
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u userFavorites) Table(newTableName string) *userFavorites {
	u.userFavoritesDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFavorites) As(alias string) *userFavorites {
	u.userFavoritesDo.DO = *(u.userFavoritesDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFavorites) updateTableName(table string) *userFavorites {
	u.ALL = field.NewAsterisk(table)
	u.UserFavoritesID = field.NewString(table, "user_favorites_id")
	u.UserID = field.NewString(table, "user_id")
	u.BusiID = field.NewString(table, "busi_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Note = field.NewString(table, "note")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *userFavorites) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFavorites) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["user_favorites_id"] = u.UserFavoritesID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["busi_id"] = u.BusiID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["note"] = u.Note
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u userFavorites) clone(db *gorm.DB) userFavorites {
	u.userFavoritesDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFavorites) replaceDB(db *gorm.DB) userFavorites {
	u.userFavoritesDo.ReplaceDB(db)
	return u
}

type userFavoritesDo struct{ gen.DO }

type IUserFavoritesDo interface {
	gen.SubQuery
	Debug() IUserFavoritesDo
	WithContext(ctx context.Context) IUserFavoritesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFavoritesDo
	WriteDB() IUserFavoritesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFavoritesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFavoritesDo
	Not(conds ...gen.Condition) IUserFavoritesDo
	Or(conds ...gen.Condition) IUserFavoritesDo
	Select(conds ...field.Expr) IUserFavoritesDo
	Where(conds ...gen.Condition) IUserFavoritesDo
	Order(conds ...field.Expr) IUserFavoritesDo
	Distinct(cols ...field.Expr) IUserFavoritesDo
	Omit(cols ...field.Expr) IUserFavoritesDo
	Join(table schema.Tabler, on ...field.Expr) IUserFavoritesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFavoritesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFavoritesDo
	Group(cols ...field.Expr) IUserFavoritesDo
	Having(conds ...gen.Condition) IUserFavoritesDo
	Limit(limit int) IUserFavoritesDo
	Offset(offset int) IUserFavoritesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFavoritesDo
	Unscoped() IUserFavoritesDo
	Create(values ...*model.UserFavorites) error
	CreateInBatches(values []*model.UserFavorites, batchSize int) error
	Save(values ...*model.UserFavorites) error
	First() (*model.UserFavorites, error)
	Take() (*model.UserFavorites, error)
	Last() (*model.UserFavorites, error)
	Find() ([]*model.UserFavorites, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFavorites, err error)
	FindInBatches(result *[]*model.UserFavorites, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFavorites) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFavoritesDo
	Assign(attrs ...field.AssignExpr) IUserFavoritesDo
	Joins(fields ...field.RelationField) IUserFavoritesDo
	Preload(fields ...field.RelationField) IUserFavoritesDo
	FirstOrInit() (*model.UserFavorites, error)
	FirstOrCreate() (*model.UserFavorites, error)
	FindByPage(offset int, limit int) (result []*model.UserFavorites, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFavoritesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFavoritesDo) Debug() IUserFavoritesDo {
	return u.withDO(u.DO.Debug())
}

func (u userFavoritesDo) WithContext(ctx context.Context) IUserFavoritesDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFavoritesDo) ReadDB() IUserFavoritesDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFavoritesDo) WriteDB() IUserFavoritesDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFavoritesDo) Session(config *gorm.Session) IUserFavoritesDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFavoritesDo) Clauses(conds ...clause.Expression) IUserFavoritesDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFavoritesDo) Returning(value interface{}, columns ...string) IUserFavoritesDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFavoritesDo) Not(conds ...gen.Condition) IUserFavoritesDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFavoritesDo) Or(conds ...gen.Condition) IUserFavoritesDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFavoritesDo) Select(conds ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFavoritesDo) Where(conds ...gen.Condition) IUserFavoritesDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFavoritesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserFavoritesDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userFavoritesDo) Order(conds ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFavoritesDo) Distinct(cols ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFavoritesDo) Omit(cols ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFavoritesDo) Join(table schema.Tabler, on ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFavoritesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFavoritesDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFavoritesDo) Group(cols ...field.Expr) IUserFavoritesDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFavoritesDo) Having(conds ...gen.Condition) IUserFavoritesDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFavoritesDo) Limit(limit int) IUserFavoritesDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFavoritesDo) Offset(offset int) IUserFavoritesDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFavoritesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFavoritesDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFavoritesDo) Unscoped() IUserFavoritesDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFavoritesDo) Create(values ...*model.UserFavorites) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFavoritesDo) CreateInBatches(values []*model.UserFavorites, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFavoritesDo) Save(values ...*model.UserFavorites) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFavoritesDo) First() (*model.UserFavorites, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavorites), nil
	}
}

func (u userFavoritesDo) Take() (*model.UserFavorites, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavorites), nil
	}
}

func (u userFavoritesDo) Last() (*model.UserFavorites, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavorites), nil
	}
}

func (u userFavoritesDo) Find() ([]*model.UserFavorites, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFavorites), err
}

func (u userFavoritesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFavorites, err error) {
	buf := make([]*model.UserFavorites, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFavoritesDo) FindInBatches(result *[]*model.UserFavorites, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFavoritesDo) Attrs(attrs ...field.AssignExpr) IUserFavoritesDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFavoritesDo) Assign(attrs ...field.AssignExpr) IUserFavoritesDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFavoritesDo) Joins(fields ...field.RelationField) IUserFavoritesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFavoritesDo) Preload(fields ...field.RelationField) IUserFavoritesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFavoritesDo) FirstOrInit() (*model.UserFavorites, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavorites), nil
	}
}

func (u userFavoritesDo) FirstOrCreate() (*model.UserFavorites, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFavorites), nil
	}
}

func (u userFavoritesDo) FindByPage(offset int, limit int) (result []*model.UserFavorites, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFavoritesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFavoritesDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFavoritesDo) Delete(models ...*model.UserFavorites) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFavoritesDo) withDO(do gen.Dao) *userFavoritesDo {
	u.DO = *do.(*gen.DO)
	return u
}
