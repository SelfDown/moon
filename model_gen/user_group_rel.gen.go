// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserGroupRel(db *gorm.DB, opts ...gen.DOOption) userGroupRel {
	_userGroupRel := userGroupRel{}

	_userGroupRel.userGroupRelDo.UseDB(db, opts...)
	_userGroupRel.userGroupRelDo.UseModel(&model.UserGroupRel{})

	tableName := _userGroupRel.userGroupRelDo.TableName()
	_userGroupRel.ALL = field.NewAsterisk(tableName)
	_userGroupRel.ID = field.NewInt32(tableName, "id")
	_userGroupRel.UserID = field.NewString(tableName, "user_id")
	_userGroupRel.CreateTime = field.NewTime(tableName, "create_time")
	_userGroupRel.ModifyTime = field.NewTime(tableName, "modify_time")
	_userGroupRel.Comments = field.NewString(tableName, "comments")
	_userGroupRel.UserGroupID = field.NewString(tableName, "user_group_id")

	_userGroupRel.fillFieldMap()

	return _userGroupRel
}

type userGroupRel struct {
	userGroupRelDo

	ALL         field.Asterisk
	ID          field.Int32
	UserID      field.String
	CreateTime  field.Time
	ModifyTime  field.Time
	Comments    field.String
	UserGroupID field.String

	fieldMap map[string]field.Expr
}

func (u userGroupRel) Table(newTableName string) *userGroupRel {
	u.userGroupRelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGroupRel) As(alias string) *userGroupRel {
	u.userGroupRelDo.DO = *(u.userGroupRelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGroupRel) updateTableName(table string) *userGroupRel {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")
	u.UserGroupID = field.NewString(table, "user_group_id")

	u.fillFieldMap()

	return u
}

func (u *userGroupRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGroupRel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
	u.fieldMap["user_group_id"] = u.UserGroupID
}

func (u userGroupRel) clone(db *gorm.DB) userGroupRel {
	u.userGroupRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGroupRel) replaceDB(db *gorm.DB) userGroupRel {
	u.userGroupRelDo.ReplaceDB(db)
	return u
}

type userGroupRelDo struct{ gen.DO }

type IUserGroupRelDo interface {
	gen.SubQuery
	Debug() IUserGroupRelDo
	WithContext(ctx context.Context) IUserGroupRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGroupRelDo
	WriteDB() IUserGroupRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGroupRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGroupRelDo
	Not(conds ...gen.Condition) IUserGroupRelDo
	Or(conds ...gen.Condition) IUserGroupRelDo
	Select(conds ...field.Expr) IUserGroupRelDo
	Where(conds ...gen.Condition) IUserGroupRelDo
	Order(conds ...field.Expr) IUserGroupRelDo
	Distinct(cols ...field.Expr) IUserGroupRelDo
	Omit(cols ...field.Expr) IUserGroupRelDo
	Join(table schema.Tabler, on ...field.Expr) IUserGroupRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupRelDo
	Group(cols ...field.Expr) IUserGroupRelDo
	Having(conds ...gen.Condition) IUserGroupRelDo
	Limit(limit int) IUserGroupRelDo
	Offset(offset int) IUserGroupRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupRelDo
	Unscoped() IUserGroupRelDo
	Create(values ...*model.UserGroupRel) error
	CreateInBatches(values []*model.UserGroupRel, batchSize int) error
	Save(values ...*model.UserGroupRel) error
	First() (*model.UserGroupRel, error)
	Take() (*model.UserGroupRel, error)
	Last() (*model.UserGroupRel, error)
	Find() ([]*model.UserGroupRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupRel, err error)
	FindInBatches(result *[]*model.UserGroupRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGroupRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGroupRelDo
	Assign(attrs ...field.AssignExpr) IUserGroupRelDo
	Joins(fields ...field.RelationField) IUserGroupRelDo
	Preload(fields ...field.RelationField) IUserGroupRelDo
	FirstOrInit() (*model.UserGroupRel, error)
	FirstOrCreate() (*model.UserGroupRel, error)
	FindByPage(offset int, limit int) (result []*model.UserGroupRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGroupRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGroupRelDo) Debug() IUserGroupRelDo {
	return u.withDO(u.DO.Debug())
}

func (u userGroupRelDo) WithContext(ctx context.Context) IUserGroupRelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGroupRelDo) ReadDB() IUserGroupRelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGroupRelDo) WriteDB() IUserGroupRelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGroupRelDo) Session(config *gorm.Session) IUserGroupRelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGroupRelDo) Clauses(conds ...clause.Expression) IUserGroupRelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGroupRelDo) Returning(value interface{}, columns ...string) IUserGroupRelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGroupRelDo) Not(conds ...gen.Condition) IUserGroupRelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGroupRelDo) Or(conds ...gen.Condition) IUserGroupRelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGroupRelDo) Select(conds ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGroupRelDo) Where(conds ...gen.Condition) IUserGroupRelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGroupRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserGroupRelDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userGroupRelDo) Order(conds ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGroupRelDo) Distinct(cols ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGroupRelDo) Omit(cols ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGroupRelDo) Join(table schema.Tabler, on ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGroupRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGroupRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGroupRelDo) Group(cols ...field.Expr) IUserGroupRelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGroupRelDo) Having(conds ...gen.Condition) IUserGroupRelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGroupRelDo) Limit(limit int) IUserGroupRelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGroupRelDo) Offset(offset int) IUserGroupRelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGroupRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupRelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGroupRelDo) Unscoped() IUserGroupRelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGroupRelDo) Create(values ...*model.UserGroupRel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGroupRelDo) CreateInBatches(values []*model.UserGroupRel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGroupRelDo) Save(values ...*model.UserGroupRel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGroupRelDo) First() (*model.UserGroupRel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRel), nil
	}
}

func (u userGroupRelDo) Take() (*model.UserGroupRel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRel), nil
	}
}

func (u userGroupRelDo) Last() (*model.UserGroupRel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRel), nil
	}
}

func (u userGroupRelDo) Find() ([]*model.UserGroupRel, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGroupRel), err
}

func (u userGroupRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupRel, err error) {
	buf := make([]*model.UserGroupRel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGroupRelDo) FindInBatches(result *[]*model.UserGroupRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGroupRelDo) Attrs(attrs ...field.AssignExpr) IUserGroupRelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGroupRelDo) Assign(attrs ...field.AssignExpr) IUserGroupRelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGroupRelDo) Joins(fields ...field.RelationField) IUserGroupRelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGroupRelDo) Preload(fields ...field.RelationField) IUserGroupRelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGroupRelDo) FirstOrInit() (*model.UserGroupRel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRel), nil
	}
}

func (u userGroupRelDo) FirstOrCreate() (*model.UserGroupRel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupRel), nil
	}
}

func (u userGroupRelDo) FindByPage(offset int, limit int) (result []*model.UserGroupRel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGroupRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGroupRelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGroupRelDo) Delete(models ...*model.UserGroupRel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGroupRelDo) withDO(do gen.Dao) *userGroupRelDo {
	u.DO = *do.(*gen.DO)
	return u
}
