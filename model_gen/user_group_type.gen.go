// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserGroupType(db *gorm.DB, opts ...gen.DOOption) userGroupType {
	_userGroupType := userGroupType{}

	_userGroupType.userGroupTypeDo.UseDB(db, opts...)
	_userGroupType.userGroupTypeDo.UseModel(&model.UserGroupType{})

	tableName := _userGroupType.userGroupTypeDo.TableName()
	_userGroupType.ALL = field.NewAsterisk(tableName)
	_userGroupType.Username = field.NewString(tableName, "username")
	_userGroupType.GroupType = field.NewString(tableName, "group_type")
	_userGroupType.UserType = field.NewString(tableName, "user_type")
	_userGroupType.ID = field.NewString(tableName, "id")

	_userGroupType.fillFieldMap()

	return _userGroupType
}

type userGroupType struct {
	userGroupTypeDo

	ALL       field.Asterisk
	Username  field.String
	GroupType field.String
	UserType  field.String
	ID        field.String

	fieldMap map[string]field.Expr
}

func (u userGroupType) Table(newTableName string) *userGroupType {
	u.userGroupTypeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userGroupType) As(alias string) *userGroupType {
	u.userGroupTypeDo.DO = *(u.userGroupTypeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userGroupType) updateTableName(table string) *userGroupType {
	u.ALL = field.NewAsterisk(table)
	u.Username = field.NewString(table, "username")
	u.GroupType = field.NewString(table, "group_type")
	u.UserType = field.NewString(table, "user_type")
	u.ID = field.NewString(table, "id")

	u.fillFieldMap()

	return u
}

func (u *userGroupType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userGroupType) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["username"] = u.Username
	u.fieldMap["group_type"] = u.GroupType
	u.fieldMap["user_type"] = u.UserType
	u.fieldMap["id"] = u.ID
}

func (u userGroupType) clone(db *gorm.DB) userGroupType {
	u.userGroupTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userGroupType) replaceDB(db *gorm.DB) userGroupType {
	u.userGroupTypeDo.ReplaceDB(db)
	return u
}

type userGroupTypeDo struct{ gen.DO }

type IUserGroupTypeDo interface {
	gen.SubQuery
	Debug() IUserGroupTypeDo
	WithContext(ctx context.Context) IUserGroupTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserGroupTypeDo
	WriteDB() IUserGroupTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserGroupTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserGroupTypeDo
	Not(conds ...gen.Condition) IUserGroupTypeDo
	Or(conds ...gen.Condition) IUserGroupTypeDo
	Select(conds ...field.Expr) IUserGroupTypeDo
	Where(conds ...gen.Condition) IUserGroupTypeDo
	Order(conds ...field.Expr) IUserGroupTypeDo
	Distinct(cols ...field.Expr) IUserGroupTypeDo
	Omit(cols ...field.Expr) IUserGroupTypeDo
	Join(table schema.Tabler, on ...field.Expr) IUserGroupTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupTypeDo
	Group(cols ...field.Expr) IUserGroupTypeDo
	Having(conds ...gen.Condition) IUserGroupTypeDo
	Limit(limit int) IUserGroupTypeDo
	Offset(offset int) IUserGroupTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupTypeDo
	Unscoped() IUserGroupTypeDo
	Create(values ...*model.UserGroupType) error
	CreateInBatches(values []*model.UserGroupType, batchSize int) error
	Save(values ...*model.UserGroupType) error
	First() (*model.UserGroupType, error)
	Take() (*model.UserGroupType, error)
	Last() (*model.UserGroupType, error)
	Find() ([]*model.UserGroupType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupType, err error)
	FindInBatches(result *[]*model.UserGroupType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserGroupType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserGroupTypeDo
	Assign(attrs ...field.AssignExpr) IUserGroupTypeDo
	Joins(fields ...field.RelationField) IUserGroupTypeDo
	Preload(fields ...field.RelationField) IUserGroupTypeDo
	FirstOrInit() (*model.UserGroupType, error)
	FirstOrCreate() (*model.UserGroupType, error)
	FindByPage(offset int, limit int) (result []*model.UserGroupType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserGroupTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userGroupTypeDo) Debug() IUserGroupTypeDo {
	return u.withDO(u.DO.Debug())
}

func (u userGroupTypeDo) WithContext(ctx context.Context) IUserGroupTypeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userGroupTypeDo) ReadDB() IUserGroupTypeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userGroupTypeDo) WriteDB() IUserGroupTypeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userGroupTypeDo) Session(config *gorm.Session) IUserGroupTypeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userGroupTypeDo) Clauses(conds ...clause.Expression) IUserGroupTypeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userGroupTypeDo) Returning(value interface{}, columns ...string) IUserGroupTypeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userGroupTypeDo) Not(conds ...gen.Condition) IUserGroupTypeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userGroupTypeDo) Or(conds ...gen.Condition) IUserGroupTypeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userGroupTypeDo) Select(conds ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userGroupTypeDo) Where(conds ...gen.Condition) IUserGroupTypeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userGroupTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserGroupTypeDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userGroupTypeDo) Order(conds ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userGroupTypeDo) Distinct(cols ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userGroupTypeDo) Omit(cols ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userGroupTypeDo) Join(table schema.Tabler, on ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userGroupTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userGroupTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userGroupTypeDo) Group(cols ...field.Expr) IUserGroupTypeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userGroupTypeDo) Having(conds ...gen.Condition) IUserGroupTypeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userGroupTypeDo) Limit(limit int) IUserGroupTypeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userGroupTypeDo) Offset(offset int) IUserGroupTypeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userGroupTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserGroupTypeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userGroupTypeDo) Unscoped() IUserGroupTypeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userGroupTypeDo) Create(values ...*model.UserGroupType) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userGroupTypeDo) CreateInBatches(values []*model.UserGroupType, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userGroupTypeDo) Save(values ...*model.UserGroupType) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userGroupTypeDo) First() (*model.UserGroupType, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupType), nil
	}
}

func (u userGroupTypeDo) Take() (*model.UserGroupType, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupType), nil
	}
}

func (u userGroupTypeDo) Last() (*model.UserGroupType, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupType), nil
	}
}

func (u userGroupTypeDo) Find() ([]*model.UserGroupType, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserGroupType), err
}

func (u userGroupTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserGroupType, err error) {
	buf := make([]*model.UserGroupType, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userGroupTypeDo) FindInBatches(result *[]*model.UserGroupType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userGroupTypeDo) Attrs(attrs ...field.AssignExpr) IUserGroupTypeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userGroupTypeDo) Assign(attrs ...field.AssignExpr) IUserGroupTypeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userGroupTypeDo) Joins(fields ...field.RelationField) IUserGroupTypeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userGroupTypeDo) Preload(fields ...field.RelationField) IUserGroupTypeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userGroupTypeDo) FirstOrInit() (*model.UserGroupType, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupType), nil
	}
}

func (u userGroupTypeDo) FirstOrCreate() (*model.UserGroupType, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserGroupType), nil
	}
}

func (u userGroupTypeDo) FindByPage(offset int, limit int) (result []*model.UserGroupType, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userGroupTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userGroupTypeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userGroupTypeDo) Delete(models ...*model.UserGroupType) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userGroupTypeDo) withDO(do gen.Dao) *userGroupTypeDo {
	u.DO = *do.(*gen.DO)
	return u
}
