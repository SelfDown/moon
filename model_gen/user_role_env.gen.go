// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserRoleEnv(db *gorm.DB, opts ...gen.DOOption) userRoleEnv {
	_userRoleEnv := userRoleEnv{}

	_userRoleEnv.userRoleEnvDo.UseDB(db, opts...)
	_userRoleEnv.userRoleEnvDo.UseModel(&model.UserRoleEnv{})

	tableName := _userRoleEnv.userRoleEnvDo.TableName()
	_userRoleEnv.ALL = field.NewAsterisk(tableName)
	_userRoleEnv.RoleID = field.NewString(tableName, "role_id")
	_userRoleEnv.EnvCode = field.NewString(tableName, "env_code")
	_userRoleEnv.CreateTime = field.NewTime(tableName, "create_time")
	_userRoleEnv.ModifyTime = field.NewTime(tableName, "modify_time")
	_userRoleEnv.Comments = field.NewString(tableName, "comments")

	_userRoleEnv.fillFieldMap()

	return _userRoleEnv
}

type userRoleEnv struct {
	userRoleEnvDo

	ALL        field.Asterisk
	RoleID     field.String
	EnvCode    field.String
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u userRoleEnv) Table(newTableName string) *userRoleEnv {
	u.userRoleEnvDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoleEnv) As(alias string) *userRoleEnv {
	u.userRoleEnvDo.DO = *(u.userRoleEnvDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoleEnv) updateTableName(table string) *userRoleEnv {
	u.ALL = field.NewAsterisk(table)
	u.RoleID = field.NewString(table, "role_id")
	u.EnvCode = field.NewString(table, "env_code")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *userRoleEnv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoleEnv) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["env_code"] = u.EnvCode
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u userRoleEnv) clone(db *gorm.DB) userRoleEnv {
	u.userRoleEnvDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoleEnv) replaceDB(db *gorm.DB) userRoleEnv {
	u.userRoleEnvDo.ReplaceDB(db)
	return u
}

type userRoleEnvDo struct{ gen.DO }

type IUserRoleEnvDo interface {
	gen.SubQuery
	Debug() IUserRoleEnvDo
	WithContext(ctx context.Context) IUserRoleEnvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRoleEnvDo
	WriteDB() IUserRoleEnvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRoleEnvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRoleEnvDo
	Not(conds ...gen.Condition) IUserRoleEnvDo
	Or(conds ...gen.Condition) IUserRoleEnvDo
	Select(conds ...field.Expr) IUserRoleEnvDo
	Where(conds ...gen.Condition) IUserRoleEnvDo
	Order(conds ...field.Expr) IUserRoleEnvDo
	Distinct(cols ...field.Expr) IUserRoleEnvDo
	Omit(cols ...field.Expr) IUserRoleEnvDo
	Join(table schema.Tabler, on ...field.Expr) IUserRoleEnvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleEnvDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleEnvDo
	Group(cols ...field.Expr) IUserRoleEnvDo
	Having(conds ...gen.Condition) IUserRoleEnvDo
	Limit(limit int) IUserRoleEnvDo
	Offset(offset int) IUserRoleEnvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleEnvDo
	Unscoped() IUserRoleEnvDo
	Create(values ...*model.UserRoleEnv) error
	CreateInBatches(values []*model.UserRoleEnv, batchSize int) error
	Save(values ...*model.UserRoleEnv) error
	First() (*model.UserRoleEnv, error)
	Take() (*model.UserRoleEnv, error)
	Last() (*model.UserRoleEnv, error)
	Find() ([]*model.UserRoleEnv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleEnv, err error)
	FindInBatches(result *[]*model.UserRoleEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRoleEnv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRoleEnvDo
	Assign(attrs ...field.AssignExpr) IUserRoleEnvDo
	Joins(fields ...field.RelationField) IUserRoleEnvDo
	Preload(fields ...field.RelationField) IUserRoleEnvDo
	FirstOrInit() (*model.UserRoleEnv, error)
	FirstOrCreate() (*model.UserRoleEnv, error)
	FindByPage(offset int, limit int) (result []*model.UserRoleEnv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRoleEnvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRoleEnvDo) Debug() IUserRoleEnvDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoleEnvDo) WithContext(ctx context.Context) IUserRoleEnvDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoleEnvDo) ReadDB() IUserRoleEnvDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoleEnvDo) WriteDB() IUserRoleEnvDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoleEnvDo) Session(config *gorm.Session) IUserRoleEnvDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoleEnvDo) Clauses(conds ...clause.Expression) IUserRoleEnvDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoleEnvDo) Returning(value interface{}, columns ...string) IUserRoleEnvDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoleEnvDo) Not(conds ...gen.Condition) IUserRoleEnvDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoleEnvDo) Or(conds ...gen.Condition) IUserRoleEnvDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoleEnvDo) Select(conds ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoleEnvDo) Where(conds ...gen.Condition) IUserRoleEnvDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoleEnvDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserRoleEnvDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userRoleEnvDo) Order(conds ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoleEnvDo) Distinct(cols ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoleEnvDo) Omit(cols ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoleEnvDo) Join(table schema.Tabler, on ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoleEnvDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoleEnvDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoleEnvDo) Group(cols ...field.Expr) IUserRoleEnvDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoleEnvDo) Having(conds ...gen.Condition) IUserRoleEnvDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoleEnvDo) Limit(limit int) IUserRoleEnvDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoleEnvDo) Offset(offset int) IUserRoleEnvDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoleEnvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleEnvDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoleEnvDo) Unscoped() IUserRoleEnvDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoleEnvDo) Create(values ...*model.UserRoleEnv) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoleEnvDo) CreateInBatches(values []*model.UserRoleEnv, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoleEnvDo) Save(values ...*model.UserRoleEnv) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoleEnvDo) First() (*model.UserRoleEnv, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleEnv), nil
	}
}

func (u userRoleEnvDo) Take() (*model.UserRoleEnv, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleEnv), nil
	}
}

func (u userRoleEnvDo) Last() (*model.UserRoleEnv, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleEnv), nil
	}
}

func (u userRoleEnvDo) Find() ([]*model.UserRoleEnv, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRoleEnv), err
}

func (u userRoleEnvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleEnv, err error) {
	buf := make([]*model.UserRoleEnv, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoleEnvDo) FindInBatches(result *[]*model.UserRoleEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoleEnvDo) Attrs(attrs ...field.AssignExpr) IUserRoleEnvDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoleEnvDo) Assign(attrs ...field.AssignExpr) IUserRoleEnvDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoleEnvDo) Joins(fields ...field.RelationField) IUserRoleEnvDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoleEnvDo) Preload(fields ...field.RelationField) IUserRoleEnvDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoleEnvDo) FirstOrInit() (*model.UserRoleEnv, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleEnv), nil
	}
}

func (u userRoleEnvDo) FirstOrCreate() (*model.UserRoleEnv, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleEnv), nil
	}
}

func (u userRoleEnvDo) FindByPage(offset int, limit int) (result []*model.UserRoleEnv, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoleEnvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoleEnvDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoleEnvDo) Delete(models ...*model.UserRoleEnv) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoleEnvDo) withDO(do gen.Dao) *userRoleEnvDo {
	u.DO = *do.(*gen.DO)
	return u
}
