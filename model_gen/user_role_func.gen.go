// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserRoleFunc(db *gorm.DB, opts ...gen.DOOption) userRoleFunc {
	_userRoleFunc := userRoleFunc{}

	_userRoleFunc.userRoleFuncDo.UseDB(db, opts...)
	_userRoleFunc.userRoleFuncDo.UseModel(&model.UserRoleFunc{})

	tableName := _userRoleFunc.userRoleFuncDo.TableName()
	_userRoleFunc.ALL = field.NewAsterisk(tableName)
	_userRoleFunc.RoleID = field.NewString(tableName, "role_id")
	_userRoleFunc.FuncID = field.NewString(tableName, "func_id")
	_userRoleFunc.EnvID = field.NewString(tableName, "env_id")
	_userRoleFunc.CreateTime = field.NewTime(tableName, "create_time")
	_userRoleFunc.Comments = field.NewString(tableName, "comments")
	_userRoleFunc.UserRoleFuncID = field.NewString(tableName, "user_role_func_id")
	_userRoleFunc.MenuID = field.NewString(tableName, "menu_id")

	_userRoleFunc.fillFieldMap()

	return _userRoleFunc
}

type userRoleFunc struct {
	userRoleFuncDo

	ALL            field.Asterisk
	RoleID         field.String
	FuncID         field.String
	EnvID          field.String
	CreateTime     field.Time
	Comments       field.String
	UserRoleFuncID field.String
	MenuID         field.String

	fieldMap map[string]field.Expr
}

func (u userRoleFunc) Table(newTableName string) *userRoleFunc {
	u.userRoleFuncDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoleFunc) As(alias string) *userRoleFunc {
	u.userRoleFuncDo.DO = *(u.userRoleFuncDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoleFunc) updateTableName(table string) *userRoleFunc {
	u.ALL = field.NewAsterisk(table)
	u.RoleID = field.NewString(table, "role_id")
	u.FuncID = field.NewString(table, "func_id")
	u.EnvID = field.NewString(table, "env_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.Comments = field.NewString(table, "comments")
	u.UserRoleFuncID = field.NewString(table, "user_role_func_id")
	u.MenuID = field.NewString(table, "menu_id")

	u.fillFieldMap()

	return u
}

func (u *userRoleFunc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoleFunc) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["func_id"] = u.FuncID
	u.fieldMap["env_id"] = u.EnvID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["comments"] = u.Comments
	u.fieldMap["user_role_func_id"] = u.UserRoleFuncID
	u.fieldMap["menu_id"] = u.MenuID
}

func (u userRoleFunc) clone(db *gorm.DB) userRoleFunc {
	u.userRoleFuncDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoleFunc) replaceDB(db *gorm.DB) userRoleFunc {
	u.userRoleFuncDo.ReplaceDB(db)
	return u
}

type userRoleFuncDo struct{ gen.DO }

type IUserRoleFuncDo interface {
	gen.SubQuery
	Debug() IUserRoleFuncDo
	WithContext(ctx context.Context) IUserRoleFuncDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRoleFuncDo
	WriteDB() IUserRoleFuncDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRoleFuncDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRoleFuncDo
	Not(conds ...gen.Condition) IUserRoleFuncDo
	Or(conds ...gen.Condition) IUserRoleFuncDo
	Select(conds ...field.Expr) IUserRoleFuncDo
	Where(conds ...gen.Condition) IUserRoleFuncDo
	Order(conds ...field.Expr) IUserRoleFuncDo
	Distinct(cols ...field.Expr) IUserRoleFuncDo
	Omit(cols ...field.Expr) IUserRoleFuncDo
	Join(table schema.Tabler, on ...field.Expr) IUserRoleFuncDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleFuncDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleFuncDo
	Group(cols ...field.Expr) IUserRoleFuncDo
	Having(conds ...gen.Condition) IUserRoleFuncDo
	Limit(limit int) IUserRoleFuncDo
	Offset(offset int) IUserRoleFuncDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleFuncDo
	Unscoped() IUserRoleFuncDo
	Create(values ...*model.UserRoleFunc) error
	CreateInBatches(values []*model.UserRoleFunc, batchSize int) error
	Save(values ...*model.UserRoleFunc) error
	First() (*model.UserRoleFunc, error)
	Take() (*model.UserRoleFunc, error)
	Last() (*model.UserRoleFunc, error)
	Find() ([]*model.UserRoleFunc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleFunc, err error)
	FindInBatches(result *[]*model.UserRoleFunc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRoleFunc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRoleFuncDo
	Assign(attrs ...field.AssignExpr) IUserRoleFuncDo
	Joins(fields ...field.RelationField) IUserRoleFuncDo
	Preload(fields ...field.RelationField) IUserRoleFuncDo
	FirstOrInit() (*model.UserRoleFunc, error)
	FirstOrCreate() (*model.UserRoleFunc, error)
	FindByPage(offset int, limit int) (result []*model.UserRoleFunc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRoleFuncDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRoleFuncDo) Debug() IUserRoleFuncDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoleFuncDo) WithContext(ctx context.Context) IUserRoleFuncDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoleFuncDo) ReadDB() IUserRoleFuncDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoleFuncDo) WriteDB() IUserRoleFuncDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoleFuncDo) Session(config *gorm.Session) IUserRoleFuncDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoleFuncDo) Clauses(conds ...clause.Expression) IUserRoleFuncDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoleFuncDo) Returning(value interface{}, columns ...string) IUserRoleFuncDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoleFuncDo) Not(conds ...gen.Condition) IUserRoleFuncDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoleFuncDo) Or(conds ...gen.Condition) IUserRoleFuncDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoleFuncDo) Select(conds ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoleFuncDo) Where(conds ...gen.Condition) IUserRoleFuncDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoleFuncDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserRoleFuncDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userRoleFuncDo) Order(conds ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoleFuncDo) Distinct(cols ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoleFuncDo) Omit(cols ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoleFuncDo) Join(table schema.Tabler, on ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoleFuncDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoleFuncDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoleFuncDo) Group(cols ...field.Expr) IUserRoleFuncDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoleFuncDo) Having(conds ...gen.Condition) IUserRoleFuncDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoleFuncDo) Limit(limit int) IUserRoleFuncDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoleFuncDo) Offset(offset int) IUserRoleFuncDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoleFuncDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleFuncDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoleFuncDo) Unscoped() IUserRoleFuncDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoleFuncDo) Create(values ...*model.UserRoleFunc) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoleFuncDo) CreateInBatches(values []*model.UserRoleFunc, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoleFuncDo) Save(values ...*model.UserRoleFunc) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoleFuncDo) First() (*model.UserRoleFunc, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleFunc), nil
	}
}

func (u userRoleFuncDo) Take() (*model.UserRoleFunc, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleFunc), nil
	}
}

func (u userRoleFuncDo) Last() (*model.UserRoleFunc, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleFunc), nil
	}
}

func (u userRoleFuncDo) Find() ([]*model.UserRoleFunc, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRoleFunc), err
}

func (u userRoleFuncDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleFunc, err error) {
	buf := make([]*model.UserRoleFunc, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoleFuncDo) FindInBatches(result *[]*model.UserRoleFunc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoleFuncDo) Attrs(attrs ...field.AssignExpr) IUserRoleFuncDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoleFuncDo) Assign(attrs ...field.AssignExpr) IUserRoleFuncDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoleFuncDo) Joins(fields ...field.RelationField) IUserRoleFuncDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoleFuncDo) Preload(fields ...field.RelationField) IUserRoleFuncDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoleFuncDo) FirstOrInit() (*model.UserRoleFunc, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleFunc), nil
	}
}

func (u userRoleFuncDo) FirstOrCreate() (*model.UserRoleFunc, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleFunc), nil
	}
}

func (u userRoleFuncDo) FindByPage(offset int, limit int) (result []*model.UserRoleFunc, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoleFuncDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoleFuncDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoleFuncDo) Delete(models ...*model.UserRoleFunc) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoleFuncDo) withDO(do gen.Dao) *userRoleFuncDo {
	u.DO = *do.(*gen.DO)
	return u
}
