// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUserRoleMenu(db *gorm.DB, opts ...gen.DOOption) userRoleMenu {
	_userRoleMenu := userRoleMenu{}

	_userRoleMenu.userRoleMenuDo.UseDB(db, opts...)
	_userRoleMenu.userRoleMenuDo.UseModel(&model.UserRoleMenu{})

	tableName := _userRoleMenu.userRoleMenuDo.TableName()
	_userRoleMenu.ALL = field.NewAsterisk(tableName)
	_userRoleMenu.RoleID = field.NewString(tableName, "role_id")
	_userRoleMenu.MenuID = field.NewString(tableName, "menu_id")
	_userRoleMenu.CreateTime = field.NewTime(tableName, "create_time")
	_userRoleMenu.ModifyTime = field.NewTime(tableName, "modify_time")
	_userRoleMenu.Comments = field.NewString(tableName, "comments")
	_userRoleMenu.SysProjectID = field.NewString(tableName, "sys_project_id")
	_userRoleMenu.UserRoleMenuID = field.NewString(tableName, "user_role_menu_id")

	_userRoleMenu.fillFieldMap()

	return _userRoleMenu
}

type userRoleMenu struct {
	userRoleMenuDo

	ALL            field.Asterisk
	RoleID         field.String
	MenuID         field.String
	CreateTime     field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime     field.Time   // 记录修改时间（数据库自动写入）
	Comments       field.String // 备注说明
	SysProjectID   field.String // 项目点ID
	UserRoleMenuID field.String

	fieldMap map[string]field.Expr
}

func (u userRoleMenu) Table(newTableName string) *userRoleMenu {
	u.userRoleMenuDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoleMenu) As(alias string) *userRoleMenu {
	u.userRoleMenuDo.DO = *(u.userRoleMenuDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoleMenu) updateTableName(table string) *userRoleMenu {
	u.ALL = field.NewAsterisk(table)
	u.RoleID = field.NewString(table, "role_id")
	u.MenuID = field.NewString(table, "menu_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")
	u.SysProjectID = field.NewString(table, "sys_project_id")
	u.UserRoleMenuID = field.NewString(table, "user_role_menu_id")

	u.fillFieldMap()

	return u
}

func (u *userRoleMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoleMenu) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["role_id"] = u.RoleID
	u.fieldMap["menu_id"] = u.MenuID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
	u.fieldMap["sys_project_id"] = u.SysProjectID
	u.fieldMap["user_role_menu_id"] = u.UserRoleMenuID
}

func (u userRoleMenu) clone(db *gorm.DB) userRoleMenu {
	u.userRoleMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoleMenu) replaceDB(db *gorm.DB) userRoleMenu {
	u.userRoleMenuDo.ReplaceDB(db)
	return u
}

type userRoleMenuDo struct{ gen.DO }

type IUserRoleMenuDo interface {
	gen.SubQuery
	Debug() IUserRoleMenuDo
	WithContext(ctx context.Context) IUserRoleMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRoleMenuDo
	WriteDB() IUserRoleMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRoleMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRoleMenuDo
	Not(conds ...gen.Condition) IUserRoleMenuDo
	Or(conds ...gen.Condition) IUserRoleMenuDo
	Select(conds ...field.Expr) IUserRoleMenuDo
	Where(conds ...gen.Condition) IUserRoleMenuDo
	Order(conds ...field.Expr) IUserRoleMenuDo
	Distinct(cols ...field.Expr) IUserRoleMenuDo
	Omit(cols ...field.Expr) IUserRoleMenuDo
	Join(table schema.Tabler, on ...field.Expr) IUserRoleMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleMenuDo
	Group(cols ...field.Expr) IUserRoleMenuDo
	Having(conds ...gen.Condition) IUserRoleMenuDo
	Limit(limit int) IUserRoleMenuDo
	Offset(offset int) IUserRoleMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleMenuDo
	Unscoped() IUserRoleMenuDo
	Create(values ...*model.UserRoleMenu) error
	CreateInBatches(values []*model.UserRoleMenu, batchSize int) error
	Save(values ...*model.UserRoleMenu) error
	First() (*model.UserRoleMenu, error)
	Take() (*model.UserRoleMenu, error)
	Last() (*model.UserRoleMenu, error)
	Find() ([]*model.UserRoleMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleMenu, err error)
	FindInBatches(result *[]*model.UserRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRoleMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRoleMenuDo
	Assign(attrs ...field.AssignExpr) IUserRoleMenuDo
	Joins(fields ...field.RelationField) IUserRoleMenuDo
	Preload(fields ...field.RelationField) IUserRoleMenuDo
	FirstOrInit() (*model.UserRoleMenu, error)
	FirstOrCreate() (*model.UserRoleMenu, error)
	FindByPage(offset int, limit int) (result []*model.UserRoleMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRoleMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRoleMenuDo) Debug() IUserRoleMenuDo {
	return u.withDO(u.DO.Debug())
}

func (u userRoleMenuDo) WithContext(ctx context.Context) IUserRoleMenuDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRoleMenuDo) ReadDB() IUserRoleMenuDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRoleMenuDo) WriteDB() IUserRoleMenuDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRoleMenuDo) Session(config *gorm.Session) IUserRoleMenuDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRoleMenuDo) Clauses(conds ...clause.Expression) IUserRoleMenuDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRoleMenuDo) Returning(value interface{}, columns ...string) IUserRoleMenuDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRoleMenuDo) Not(conds ...gen.Condition) IUserRoleMenuDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRoleMenuDo) Or(conds ...gen.Condition) IUserRoleMenuDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRoleMenuDo) Select(conds ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRoleMenuDo) Where(conds ...gen.Condition) IUserRoleMenuDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRoleMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserRoleMenuDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userRoleMenuDo) Order(conds ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRoleMenuDo) Distinct(cols ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRoleMenuDo) Omit(cols ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRoleMenuDo) Join(table schema.Tabler, on ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRoleMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRoleMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRoleMenuDo) Group(cols ...field.Expr) IUserRoleMenuDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRoleMenuDo) Having(conds ...gen.Condition) IUserRoleMenuDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRoleMenuDo) Limit(limit int) IUserRoleMenuDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRoleMenuDo) Offset(offset int) IUserRoleMenuDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRoleMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRoleMenuDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRoleMenuDo) Unscoped() IUserRoleMenuDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRoleMenuDo) Create(values ...*model.UserRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRoleMenuDo) CreateInBatches(values []*model.UserRoleMenu, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRoleMenuDo) Save(values ...*model.UserRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRoleMenuDo) First() (*model.UserRoleMenu, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMenu), nil
	}
}

func (u userRoleMenuDo) Take() (*model.UserRoleMenu, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMenu), nil
	}
}

func (u userRoleMenuDo) Last() (*model.UserRoleMenu, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMenu), nil
	}
}

func (u userRoleMenuDo) Find() ([]*model.UserRoleMenu, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRoleMenu), err
}

func (u userRoleMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoleMenu, err error) {
	buf := make([]*model.UserRoleMenu, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRoleMenuDo) FindInBatches(result *[]*model.UserRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRoleMenuDo) Attrs(attrs ...field.AssignExpr) IUserRoleMenuDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRoleMenuDo) Assign(attrs ...field.AssignExpr) IUserRoleMenuDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRoleMenuDo) Joins(fields ...field.RelationField) IUserRoleMenuDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRoleMenuDo) Preload(fields ...field.RelationField) IUserRoleMenuDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRoleMenuDo) FirstOrInit() (*model.UserRoleMenu, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMenu), nil
	}
}

func (u userRoleMenuDo) FirstOrCreate() (*model.UserRoleMenu, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoleMenu), nil
	}
}

func (u userRoleMenuDo) FindByPage(offset int, limit int) (result []*model.UserRoleMenu, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRoleMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRoleMenuDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRoleMenuDo) Delete(models ...*model.UserRoleMenu) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRoleMenuDo) withDO(do gen.Dao) *userRoleMenuDo {
	u.DO = *do.(*gen.DO)
	return u
}
