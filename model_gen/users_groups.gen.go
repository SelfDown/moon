// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newUsersGroups(db *gorm.DB, opts ...gen.DOOption) usersGroups {
	_usersGroups := usersGroups{}

	_usersGroups.usersGroupsDo.UseDB(db, opts...)
	_usersGroups.usersGroupsDo.UseModel(&model.UsersGroups{})

	tableName := _usersGroups.usersGroupsDo.TableName()
	_usersGroups.ALL = field.NewAsterisk(tableName)
	_usersGroups.ID = field.NewInt32(tableName, "id")
	_usersGroups.UserID = field.NewInt32(tableName, "user_id")
	_usersGroups.GroupID = field.NewInt32(tableName, "group_id")
	_usersGroups.CreateTime = field.NewTime(tableName, "create_time")
	_usersGroups.ModifyTime = field.NewTime(tableName, "modify_time")
	_usersGroups.Comments = field.NewString(tableName, "comments")

	_usersGroups.fillFieldMap()

	return _usersGroups
}

type usersGroups struct {
	usersGroupsDo

	ALL        field.Asterisk
	ID         field.Int32
	UserID     field.Int32
	GroupID    field.Int32
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (u usersGroups) Table(newTableName string) *usersGroups {
	u.usersGroupsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersGroups) As(alias string) *usersGroups {
	u.usersGroupsDo.DO = *(u.usersGroupsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersGroups) updateTableName(table string) *usersGroups {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.GroupID = field.NewInt32(table, "group_id")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.Comments = field.NewString(table, "comments")

	u.fillFieldMap()

	return u
}

func (u *usersGroups) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersGroups) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["group_id"] = u.GroupID
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["comments"] = u.Comments
}

func (u usersGroups) clone(db *gorm.DB) usersGroups {
	u.usersGroupsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersGroups) replaceDB(db *gorm.DB) usersGroups {
	u.usersGroupsDo.ReplaceDB(db)
	return u
}

type usersGroupsDo struct{ gen.DO }

type IUsersGroupsDo interface {
	gen.SubQuery
	Debug() IUsersGroupsDo
	WithContext(ctx context.Context) IUsersGroupsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersGroupsDo
	WriteDB() IUsersGroupsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersGroupsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersGroupsDo
	Not(conds ...gen.Condition) IUsersGroupsDo
	Or(conds ...gen.Condition) IUsersGroupsDo
	Select(conds ...field.Expr) IUsersGroupsDo
	Where(conds ...gen.Condition) IUsersGroupsDo
	Order(conds ...field.Expr) IUsersGroupsDo
	Distinct(cols ...field.Expr) IUsersGroupsDo
	Omit(cols ...field.Expr) IUsersGroupsDo
	Join(table schema.Tabler, on ...field.Expr) IUsersGroupsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersGroupsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersGroupsDo
	Group(cols ...field.Expr) IUsersGroupsDo
	Having(conds ...gen.Condition) IUsersGroupsDo
	Limit(limit int) IUsersGroupsDo
	Offset(offset int) IUsersGroupsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersGroupsDo
	Unscoped() IUsersGroupsDo
	Create(values ...*model.UsersGroups) error
	CreateInBatches(values []*model.UsersGroups, batchSize int) error
	Save(values ...*model.UsersGroups) error
	First() (*model.UsersGroups, error)
	Take() (*model.UsersGroups, error)
	Last() (*model.UsersGroups, error)
	Find() ([]*model.UsersGroups, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersGroups, err error)
	FindInBatches(result *[]*model.UsersGroups, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UsersGroups) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersGroupsDo
	Assign(attrs ...field.AssignExpr) IUsersGroupsDo
	Joins(fields ...field.RelationField) IUsersGroupsDo
	Preload(fields ...field.RelationField) IUsersGroupsDo
	FirstOrInit() (*model.UsersGroups, error)
	FirstOrCreate() (*model.UsersGroups, error)
	FindByPage(offset int, limit int) (result []*model.UsersGroups, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersGroupsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersGroupsDo) Debug() IUsersGroupsDo {
	return u.withDO(u.DO.Debug())
}

func (u usersGroupsDo) WithContext(ctx context.Context) IUsersGroupsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersGroupsDo) ReadDB() IUsersGroupsDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersGroupsDo) WriteDB() IUsersGroupsDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersGroupsDo) Session(config *gorm.Session) IUsersGroupsDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersGroupsDo) Clauses(conds ...clause.Expression) IUsersGroupsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersGroupsDo) Returning(value interface{}, columns ...string) IUsersGroupsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersGroupsDo) Not(conds ...gen.Condition) IUsersGroupsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersGroupsDo) Or(conds ...gen.Condition) IUsersGroupsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersGroupsDo) Select(conds ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersGroupsDo) Where(conds ...gen.Condition) IUsersGroupsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersGroupsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUsersGroupsDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u usersGroupsDo) Order(conds ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersGroupsDo) Distinct(cols ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersGroupsDo) Omit(cols ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersGroupsDo) Join(table schema.Tabler, on ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersGroupsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersGroupsDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersGroupsDo) Group(cols ...field.Expr) IUsersGroupsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersGroupsDo) Having(conds ...gen.Condition) IUsersGroupsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersGroupsDo) Limit(limit int) IUsersGroupsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersGroupsDo) Offset(offset int) IUsersGroupsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersGroupsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersGroupsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersGroupsDo) Unscoped() IUsersGroupsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersGroupsDo) Create(values ...*model.UsersGroups) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersGroupsDo) CreateInBatches(values []*model.UsersGroups, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersGroupsDo) Save(values ...*model.UsersGroups) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersGroupsDo) First() (*model.UsersGroups, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersGroups), nil
	}
}

func (u usersGroupsDo) Take() (*model.UsersGroups, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersGroups), nil
	}
}

func (u usersGroupsDo) Last() (*model.UsersGroups, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersGroups), nil
	}
}

func (u usersGroupsDo) Find() ([]*model.UsersGroups, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersGroups), err
}

func (u usersGroupsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersGroups, err error) {
	buf := make([]*model.UsersGroups, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersGroupsDo) FindInBatches(result *[]*model.UsersGroups, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersGroupsDo) Attrs(attrs ...field.AssignExpr) IUsersGroupsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersGroupsDo) Assign(attrs ...field.AssignExpr) IUsersGroupsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersGroupsDo) Joins(fields ...field.RelationField) IUsersGroupsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersGroupsDo) Preload(fields ...field.RelationField) IUsersGroupsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersGroupsDo) FirstOrInit() (*model.UsersGroups, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersGroups), nil
	}
}

func (u usersGroupsDo) FirstOrCreate() (*model.UsersGroups, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersGroups), nil
	}
}

func (u usersGroupsDo) FindByPage(offset int, limit int) (result []*model.UsersGroups, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersGroupsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersGroupsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersGroupsDo) Delete(models ...*model.UsersGroups) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersGroupsDo) withDO(do gen.Dao) *usersGroupsDo {
	u.DO = *do.(*gen.DO)
	return u
}
