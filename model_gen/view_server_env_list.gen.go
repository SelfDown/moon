// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newViewServerEnvList(db *gorm.DB, opts ...gen.DOOption) viewServerEnvList {
	_viewServerEnvList := viewServerEnvList{}

	_viewServerEnvList.viewServerEnvListDo.UseDB(db, opts...)
	_viewServerEnvList.viewServerEnvListDo.UseModel(&model.ViewServerEnvList{})

	tableName := _viewServerEnvList.viewServerEnvListDo.TableName()
	_viewServerEnvList.ALL = field.NewAsterisk(tableName)
	_viewServerEnvList.HospitalCode = field.NewString(tableName, "hospital_code")
	_viewServerEnvList.HospitalName = field.NewString(tableName, "hospital_name")
	_viewServerEnvList.ServerEnvID = field.NewString(tableName, "server_env_id")
	_viewServerEnvList.ServerEnvName = field.NewString(tableName, "server_env_name")
	_viewServerEnvList.SysProjectID = field.NewString(tableName, "sys_project_id")
	_viewServerEnvList.ProjectCode = field.NewString(tableName, "project_code")
	_viewServerEnvList.ProjectName = field.NewString(tableName, "project_name")
	_viewServerEnvList.EnvName = field.NewString(tableName, "env_name")
	_viewServerEnvList.EnvCode = field.NewString(tableName, "env_code")

	_viewServerEnvList.fillFieldMap()

	return _viewServerEnvList
}

type viewServerEnvList struct {
	viewServerEnvListDo

	ALL           field.Asterisk
	HospitalCode  field.String // 参数值
	HospitalName  field.String // 参数名称
	ServerEnvID   field.String // 服务器分组ID
	ServerEnvName field.String // 服务器分组名称
	SysProjectID  field.String
	ProjectCode   field.String
	ProjectName   field.String
	EnvName       field.String // 参数值
	EnvCode       field.String // 参数名称

	fieldMap map[string]field.Expr
}

func (v viewServerEnvList) Table(newTableName string) *viewServerEnvList {
	v.viewServerEnvListDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v viewServerEnvList) As(alias string) *viewServerEnvList {
	v.viewServerEnvListDo.DO = *(v.viewServerEnvListDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *viewServerEnvList) updateTableName(table string) *viewServerEnvList {
	v.ALL = field.NewAsterisk(table)
	v.HospitalCode = field.NewString(table, "hospital_code")
	v.HospitalName = field.NewString(table, "hospital_name")
	v.ServerEnvID = field.NewString(table, "server_env_id")
	v.ServerEnvName = field.NewString(table, "server_env_name")
	v.SysProjectID = field.NewString(table, "sys_project_id")
	v.ProjectCode = field.NewString(table, "project_code")
	v.ProjectName = field.NewString(table, "project_name")
	v.EnvName = field.NewString(table, "env_name")
	v.EnvCode = field.NewString(table, "env_code")

	v.fillFieldMap()

	return v
}

func (v *viewServerEnvList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *viewServerEnvList) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["hospital_code"] = v.HospitalCode
	v.fieldMap["hospital_name"] = v.HospitalName
	v.fieldMap["server_env_id"] = v.ServerEnvID
	v.fieldMap["server_env_name"] = v.ServerEnvName
	v.fieldMap["sys_project_id"] = v.SysProjectID
	v.fieldMap["project_code"] = v.ProjectCode
	v.fieldMap["project_name"] = v.ProjectName
	v.fieldMap["env_name"] = v.EnvName
	v.fieldMap["env_code"] = v.EnvCode
}

func (v viewServerEnvList) clone(db *gorm.DB) viewServerEnvList {
	v.viewServerEnvListDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v viewServerEnvList) replaceDB(db *gorm.DB) viewServerEnvList {
	v.viewServerEnvListDo.ReplaceDB(db)
	return v
}

type viewServerEnvListDo struct{ gen.DO }

type IViewServerEnvListDo interface {
	gen.SubQuery
	Debug() IViewServerEnvListDo
	WithContext(ctx context.Context) IViewServerEnvListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IViewServerEnvListDo
	WriteDB() IViewServerEnvListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IViewServerEnvListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IViewServerEnvListDo
	Not(conds ...gen.Condition) IViewServerEnvListDo
	Or(conds ...gen.Condition) IViewServerEnvListDo
	Select(conds ...field.Expr) IViewServerEnvListDo
	Where(conds ...gen.Condition) IViewServerEnvListDo
	Order(conds ...field.Expr) IViewServerEnvListDo
	Distinct(cols ...field.Expr) IViewServerEnvListDo
	Omit(cols ...field.Expr) IViewServerEnvListDo
	Join(table schema.Tabler, on ...field.Expr) IViewServerEnvListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IViewServerEnvListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IViewServerEnvListDo
	Group(cols ...field.Expr) IViewServerEnvListDo
	Having(conds ...gen.Condition) IViewServerEnvListDo
	Limit(limit int) IViewServerEnvListDo
	Offset(offset int) IViewServerEnvListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IViewServerEnvListDo
	Unscoped() IViewServerEnvListDo
	Create(values ...*model.ViewServerEnvList) error
	CreateInBatches(values []*model.ViewServerEnvList, batchSize int) error
	Save(values ...*model.ViewServerEnvList) error
	First() (*model.ViewServerEnvList, error)
	Take() (*model.ViewServerEnvList, error)
	Last() (*model.ViewServerEnvList, error)
	Find() ([]*model.ViewServerEnvList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ViewServerEnvList, err error)
	FindInBatches(result *[]*model.ViewServerEnvList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ViewServerEnvList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IViewServerEnvListDo
	Assign(attrs ...field.AssignExpr) IViewServerEnvListDo
	Joins(fields ...field.RelationField) IViewServerEnvListDo
	Preload(fields ...field.RelationField) IViewServerEnvListDo
	FirstOrInit() (*model.ViewServerEnvList, error)
	FirstOrCreate() (*model.ViewServerEnvList, error)
	FindByPage(offset int, limit int) (result []*model.ViewServerEnvList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IViewServerEnvListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v viewServerEnvListDo) Debug() IViewServerEnvListDo {
	return v.withDO(v.DO.Debug())
}

func (v viewServerEnvListDo) WithContext(ctx context.Context) IViewServerEnvListDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v viewServerEnvListDo) ReadDB() IViewServerEnvListDo {
	return v.Clauses(dbresolver.Read)
}

func (v viewServerEnvListDo) WriteDB() IViewServerEnvListDo {
	return v.Clauses(dbresolver.Write)
}

func (v viewServerEnvListDo) Session(config *gorm.Session) IViewServerEnvListDo {
	return v.withDO(v.DO.Session(config))
}

func (v viewServerEnvListDo) Clauses(conds ...clause.Expression) IViewServerEnvListDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v viewServerEnvListDo) Returning(value interface{}, columns ...string) IViewServerEnvListDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v viewServerEnvListDo) Not(conds ...gen.Condition) IViewServerEnvListDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v viewServerEnvListDo) Or(conds ...gen.Condition) IViewServerEnvListDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v viewServerEnvListDo) Select(conds ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v viewServerEnvListDo) Where(conds ...gen.Condition) IViewServerEnvListDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v viewServerEnvListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IViewServerEnvListDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v viewServerEnvListDo) Order(conds ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v viewServerEnvListDo) Distinct(cols ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v viewServerEnvListDo) Omit(cols ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v viewServerEnvListDo) Join(table schema.Tabler, on ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v viewServerEnvListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v viewServerEnvListDo) RightJoin(table schema.Tabler, on ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v viewServerEnvListDo) Group(cols ...field.Expr) IViewServerEnvListDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v viewServerEnvListDo) Having(conds ...gen.Condition) IViewServerEnvListDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v viewServerEnvListDo) Limit(limit int) IViewServerEnvListDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v viewServerEnvListDo) Offset(offset int) IViewServerEnvListDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v viewServerEnvListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IViewServerEnvListDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v viewServerEnvListDo) Unscoped() IViewServerEnvListDo {
	return v.withDO(v.DO.Unscoped())
}

func (v viewServerEnvListDo) Create(values ...*model.ViewServerEnvList) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v viewServerEnvListDo) CreateInBatches(values []*model.ViewServerEnvList, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v viewServerEnvListDo) Save(values ...*model.ViewServerEnvList) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v viewServerEnvListDo) First() (*model.ViewServerEnvList, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ViewServerEnvList), nil
	}
}

func (v viewServerEnvListDo) Take() (*model.ViewServerEnvList, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ViewServerEnvList), nil
	}
}

func (v viewServerEnvListDo) Last() (*model.ViewServerEnvList, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ViewServerEnvList), nil
	}
}

func (v viewServerEnvListDo) Find() ([]*model.ViewServerEnvList, error) {
	result, err := v.DO.Find()
	return result.([]*model.ViewServerEnvList), err
}

func (v viewServerEnvListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ViewServerEnvList, err error) {
	buf := make([]*model.ViewServerEnvList, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v viewServerEnvListDo) FindInBatches(result *[]*model.ViewServerEnvList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v viewServerEnvListDo) Attrs(attrs ...field.AssignExpr) IViewServerEnvListDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v viewServerEnvListDo) Assign(attrs ...field.AssignExpr) IViewServerEnvListDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v viewServerEnvListDo) Joins(fields ...field.RelationField) IViewServerEnvListDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v viewServerEnvListDo) Preload(fields ...field.RelationField) IViewServerEnvListDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v viewServerEnvListDo) FirstOrInit() (*model.ViewServerEnvList, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ViewServerEnvList), nil
	}
}

func (v viewServerEnvListDo) FirstOrCreate() (*model.ViewServerEnvList, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ViewServerEnvList), nil
	}
}

func (v viewServerEnvListDo) FindByPage(offset int, limit int) (result []*model.ViewServerEnvList, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v viewServerEnvListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v viewServerEnvListDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v viewServerEnvListDo) Delete(models ...*model.ViewServerEnvList) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *viewServerEnvListDo) withDO(do gen.Dao) *viewServerEnvListDo {
	v.DO = *do.(*gen.DO)
	return v
}
