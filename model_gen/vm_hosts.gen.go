// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newVMHosts(db *gorm.DB, opts ...gen.DOOption) vMHosts {
	_vMHosts := vMHosts{}

	_vMHosts.vMHostsDo.UseDB(db, opts...)
	_vMHosts.vMHostsDo.UseModel(&model.VMHosts{})

	tableName := _vMHosts.vMHostsDo.TableName()
	_vMHosts.ALL = field.NewAsterisk(tableName)
	_vMHosts.VMHostsID = field.NewInt32(tableName, "vm_hosts_id")
	_vMHosts.VMID = field.NewString(tableName, "vm_id")
	_vMHosts.VMIP = field.NewString(tableName, "vm_ip")
	_vMHosts.VMName = field.NewString(tableName, "vm_name")
	_vMHosts.CreateTime = field.NewTime(tableName, "create_time")
	_vMHosts.ModifyTime = field.NewTime(tableName, "modify_time")
	_vMHosts.Comments = field.NewString(tableName, "comments")
	_vMHosts.HostMachineIP = field.NewString(tableName, "host_machine_ip")
	_vMHosts.OsType = field.NewString(tableName, "os_type")
	_vMHosts.VMCreateTime = field.NewTime(tableName, "vm_create_time")

	_vMHosts.fillFieldMap()

	return _vMHosts
}

type vMHosts struct {
	vMHostsDo

	ALL           field.Asterisk
	VMHostsID     field.Int32
	VMID          field.String // 主键，与 server_instance.server_id关联
	VMIP          field.String
	VMName        field.String // 虚拟机名称
	CreateTime    field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime    field.Time   // 记录修改时间（数据库自动写入）
	Comments      field.String // 备注说明
	HostMachineIP field.String // 宿主机ip
	OsType        field.String // 操作系统类型
	VMCreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (v vMHosts) Table(newTableName string) *vMHosts {
	v.vMHostsDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vMHosts) As(alias string) *vMHosts {
	v.vMHostsDo.DO = *(v.vMHostsDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vMHosts) updateTableName(table string) *vMHosts {
	v.ALL = field.NewAsterisk(table)
	v.VMHostsID = field.NewInt32(table, "vm_hosts_id")
	v.VMID = field.NewString(table, "vm_id")
	v.VMIP = field.NewString(table, "vm_ip")
	v.VMName = field.NewString(table, "vm_name")
	v.CreateTime = field.NewTime(table, "create_time")
	v.ModifyTime = field.NewTime(table, "modify_time")
	v.Comments = field.NewString(table, "comments")
	v.HostMachineIP = field.NewString(table, "host_machine_ip")
	v.OsType = field.NewString(table, "os_type")
	v.VMCreateTime = field.NewTime(table, "vm_create_time")

	v.fillFieldMap()

	return v
}

func (v *vMHosts) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vMHosts) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 10)
	v.fieldMap["vm_hosts_id"] = v.VMHostsID
	v.fieldMap["vm_id"] = v.VMID
	v.fieldMap["vm_ip"] = v.VMIP
	v.fieldMap["vm_name"] = v.VMName
	v.fieldMap["create_time"] = v.CreateTime
	v.fieldMap["modify_time"] = v.ModifyTime
	v.fieldMap["comments"] = v.Comments
	v.fieldMap["host_machine_ip"] = v.HostMachineIP
	v.fieldMap["os_type"] = v.OsType
	v.fieldMap["vm_create_time"] = v.VMCreateTime
}

func (v vMHosts) clone(db *gorm.DB) vMHosts {
	v.vMHostsDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vMHosts) replaceDB(db *gorm.DB) vMHosts {
	v.vMHostsDo.ReplaceDB(db)
	return v
}

type vMHostsDo struct{ gen.DO }

type IVMHostsDo interface {
	gen.SubQuery
	Debug() IVMHostsDo
	WithContext(ctx context.Context) IVMHostsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVMHostsDo
	WriteDB() IVMHostsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVMHostsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVMHostsDo
	Not(conds ...gen.Condition) IVMHostsDo
	Or(conds ...gen.Condition) IVMHostsDo
	Select(conds ...field.Expr) IVMHostsDo
	Where(conds ...gen.Condition) IVMHostsDo
	Order(conds ...field.Expr) IVMHostsDo
	Distinct(cols ...field.Expr) IVMHostsDo
	Omit(cols ...field.Expr) IVMHostsDo
	Join(table schema.Tabler, on ...field.Expr) IVMHostsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVMHostsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVMHostsDo
	Group(cols ...field.Expr) IVMHostsDo
	Having(conds ...gen.Condition) IVMHostsDo
	Limit(limit int) IVMHostsDo
	Offset(offset int) IVMHostsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVMHostsDo
	Unscoped() IVMHostsDo
	Create(values ...*model.VMHosts) error
	CreateInBatches(values []*model.VMHosts, batchSize int) error
	Save(values ...*model.VMHosts) error
	First() (*model.VMHosts, error)
	Take() (*model.VMHosts, error)
	Last() (*model.VMHosts, error)
	Find() ([]*model.VMHosts, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VMHosts, err error)
	FindInBatches(result *[]*model.VMHosts, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VMHosts) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVMHostsDo
	Assign(attrs ...field.AssignExpr) IVMHostsDo
	Joins(fields ...field.RelationField) IVMHostsDo
	Preload(fields ...field.RelationField) IVMHostsDo
	FirstOrInit() (*model.VMHosts, error)
	FirstOrCreate() (*model.VMHosts, error)
	FindByPage(offset int, limit int) (result []*model.VMHosts, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVMHostsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vMHostsDo) Debug() IVMHostsDo {
	return v.withDO(v.DO.Debug())
}

func (v vMHostsDo) WithContext(ctx context.Context) IVMHostsDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vMHostsDo) ReadDB() IVMHostsDo {
	return v.Clauses(dbresolver.Read)
}

func (v vMHostsDo) WriteDB() IVMHostsDo {
	return v.Clauses(dbresolver.Write)
}

func (v vMHostsDo) Session(config *gorm.Session) IVMHostsDo {
	return v.withDO(v.DO.Session(config))
}

func (v vMHostsDo) Clauses(conds ...clause.Expression) IVMHostsDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vMHostsDo) Returning(value interface{}, columns ...string) IVMHostsDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vMHostsDo) Not(conds ...gen.Condition) IVMHostsDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vMHostsDo) Or(conds ...gen.Condition) IVMHostsDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vMHostsDo) Select(conds ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vMHostsDo) Where(conds ...gen.Condition) IVMHostsDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vMHostsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IVMHostsDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v vMHostsDo) Order(conds ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vMHostsDo) Distinct(cols ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vMHostsDo) Omit(cols ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vMHostsDo) Join(table schema.Tabler, on ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vMHostsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vMHostsDo) RightJoin(table schema.Tabler, on ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vMHostsDo) Group(cols ...field.Expr) IVMHostsDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vMHostsDo) Having(conds ...gen.Condition) IVMHostsDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vMHostsDo) Limit(limit int) IVMHostsDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vMHostsDo) Offset(offset int) IVMHostsDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vMHostsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVMHostsDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vMHostsDo) Unscoped() IVMHostsDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vMHostsDo) Create(values ...*model.VMHosts) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vMHostsDo) CreateInBatches(values []*model.VMHosts, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vMHostsDo) Save(values ...*model.VMHosts) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vMHostsDo) First() (*model.VMHosts, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMHosts), nil
	}
}

func (v vMHostsDo) Take() (*model.VMHosts, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMHosts), nil
	}
}

func (v vMHostsDo) Last() (*model.VMHosts, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMHosts), nil
	}
}

func (v vMHostsDo) Find() ([]*model.VMHosts, error) {
	result, err := v.DO.Find()
	return result.([]*model.VMHosts), err
}

func (v vMHostsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VMHosts, err error) {
	buf := make([]*model.VMHosts, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vMHostsDo) FindInBatches(result *[]*model.VMHosts, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vMHostsDo) Attrs(attrs ...field.AssignExpr) IVMHostsDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vMHostsDo) Assign(attrs ...field.AssignExpr) IVMHostsDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vMHostsDo) Joins(fields ...field.RelationField) IVMHostsDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vMHostsDo) Preload(fields ...field.RelationField) IVMHostsDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vMHostsDo) FirstOrInit() (*model.VMHosts, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMHosts), nil
	}
}

func (v vMHostsDo) FirstOrCreate() (*model.VMHosts, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VMHosts), nil
	}
}

func (v vMHostsDo) FindByPage(offset int, limit int) (result []*model.VMHosts, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vMHostsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vMHostsDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vMHostsDo) Delete(models ...*model.VMHosts) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vMHostsDo) withDO(do gen.Dao) *vMHostsDo {
	v.DO = *do.(*gen.DO)
	return v
}
