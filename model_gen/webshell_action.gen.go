// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellAction(db *gorm.DB, opts ...gen.DOOption) webshellAction {
	_webshellAction := webshellAction{}

	_webshellAction.webshellActionDo.UseDB(db, opts...)
	_webshellAction.webshellActionDo.UseModel(&model.WebshellAction{})

	tableName := _webshellAction.webshellActionDo.TableName()
	_webshellAction.ALL = field.NewAsterisk(tableName)
	_webshellAction.WebshellActionID = field.NewString(tableName, "webshell_action_id")
	_webshellAction.SysProjectID = field.NewString(tableName, "sys_project_id")
	_webshellAction.ServerID = field.NewString(tableName, "server_id")
	_webshellAction.Username = field.NewString(tableName, "username")
	_webshellAction.ActionName = field.NewString(tableName, "action_name")
	_webshellAction.ActionCode = field.NewString(tableName, "action_code")
	_webshellAction.ActionTime = field.NewTime(tableName, "action_time")
	_webshellAction.Notes = field.NewString(tableName, "notes")

	_webshellAction.fillFieldMap()

	return _webshellAction
}

type webshellAction struct {
	webshellActionDo

	ALL              field.Asterisk
	WebshellActionID field.String // UUID,主键
	SysProjectID     field.String
	ServerID         field.String // 主键
	Username         field.String // 登录人
	ActionName       field.String // 登入时间
	ActionCode       field.String // 登出时间
	ActionTime       field.Time   // 记录添加时间
	Notes            field.String // 操作人客户端IP

	fieldMap map[string]field.Expr
}

func (w webshellAction) Table(newTableName string) *webshellAction {
	w.webshellActionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellAction) As(alias string) *webshellAction {
	w.webshellActionDo.DO = *(w.webshellActionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellAction) updateTableName(table string) *webshellAction {
	w.ALL = field.NewAsterisk(table)
	w.WebshellActionID = field.NewString(table, "webshell_action_id")
	w.SysProjectID = field.NewString(table, "sys_project_id")
	w.ServerID = field.NewString(table, "server_id")
	w.Username = field.NewString(table, "username")
	w.ActionName = field.NewString(table, "action_name")
	w.ActionCode = field.NewString(table, "action_code")
	w.ActionTime = field.NewTime(table, "action_time")
	w.Notes = field.NewString(table, "notes")

	w.fillFieldMap()

	return w
}

func (w *webshellAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellAction) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["webshell_action_id"] = w.WebshellActionID
	w.fieldMap["sys_project_id"] = w.SysProjectID
	w.fieldMap["server_id"] = w.ServerID
	w.fieldMap["username"] = w.Username
	w.fieldMap["action_name"] = w.ActionName
	w.fieldMap["action_code"] = w.ActionCode
	w.fieldMap["action_time"] = w.ActionTime
	w.fieldMap["notes"] = w.Notes
}

func (w webshellAction) clone(db *gorm.DB) webshellAction {
	w.webshellActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellAction) replaceDB(db *gorm.DB) webshellAction {
	w.webshellActionDo.ReplaceDB(db)
	return w
}

type webshellActionDo struct{ gen.DO }

type IWebshellActionDo interface {
	gen.SubQuery
	Debug() IWebshellActionDo
	WithContext(ctx context.Context) IWebshellActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellActionDo
	WriteDB() IWebshellActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellActionDo
	Not(conds ...gen.Condition) IWebshellActionDo
	Or(conds ...gen.Condition) IWebshellActionDo
	Select(conds ...field.Expr) IWebshellActionDo
	Where(conds ...gen.Condition) IWebshellActionDo
	Order(conds ...field.Expr) IWebshellActionDo
	Distinct(cols ...field.Expr) IWebshellActionDo
	Omit(cols ...field.Expr) IWebshellActionDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellActionDo
	Group(cols ...field.Expr) IWebshellActionDo
	Having(conds ...gen.Condition) IWebshellActionDo
	Limit(limit int) IWebshellActionDo
	Offset(offset int) IWebshellActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellActionDo
	Unscoped() IWebshellActionDo
	Create(values ...*model.WebshellAction) error
	CreateInBatches(values []*model.WebshellAction, batchSize int) error
	Save(values ...*model.WebshellAction) error
	First() (*model.WebshellAction, error)
	Take() (*model.WebshellAction, error)
	Last() (*model.WebshellAction, error)
	Find() ([]*model.WebshellAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellAction, err error)
	FindInBatches(result *[]*model.WebshellAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellActionDo
	Assign(attrs ...field.AssignExpr) IWebshellActionDo
	Joins(fields ...field.RelationField) IWebshellActionDo
	Preload(fields ...field.RelationField) IWebshellActionDo
	FirstOrInit() (*model.WebshellAction, error)
	FirstOrCreate() (*model.WebshellAction, error)
	FindByPage(offset int, limit int) (result []*model.WebshellAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellActionDo) Debug() IWebshellActionDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellActionDo) WithContext(ctx context.Context) IWebshellActionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellActionDo) ReadDB() IWebshellActionDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellActionDo) WriteDB() IWebshellActionDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellActionDo) Session(config *gorm.Session) IWebshellActionDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellActionDo) Clauses(conds ...clause.Expression) IWebshellActionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellActionDo) Returning(value interface{}, columns ...string) IWebshellActionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellActionDo) Not(conds ...gen.Condition) IWebshellActionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellActionDo) Or(conds ...gen.Condition) IWebshellActionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellActionDo) Select(conds ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellActionDo) Where(conds ...gen.Condition) IWebshellActionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellActionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellActionDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellActionDo) Order(conds ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellActionDo) Distinct(cols ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellActionDo) Omit(cols ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellActionDo) Join(table schema.Tabler, on ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellActionDo) Group(cols ...field.Expr) IWebshellActionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellActionDo) Having(conds ...gen.Condition) IWebshellActionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellActionDo) Limit(limit int) IWebshellActionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellActionDo) Offset(offset int) IWebshellActionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellActionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellActionDo) Unscoped() IWebshellActionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellActionDo) Create(values ...*model.WebshellAction) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellActionDo) CreateInBatches(values []*model.WebshellAction, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellActionDo) Save(values ...*model.WebshellAction) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellActionDo) First() (*model.WebshellAction, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellAction), nil
	}
}

func (w webshellActionDo) Take() (*model.WebshellAction, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellAction), nil
	}
}

func (w webshellActionDo) Last() (*model.WebshellAction, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellAction), nil
	}
}

func (w webshellActionDo) Find() ([]*model.WebshellAction, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellAction), err
}

func (w webshellActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellAction, err error) {
	buf := make([]*model.WebshellAction, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellActionDo) FindInBatches(result *[]*model.WebshellAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellActionDo) Attrs(attrs ...field.AssignExpr) IWebshellActionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellActionDo) Assign(attrs ...field.AssignExpr) IWebshellActionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellActionDo) Joins(fields ...field.RelationField) IWebshellActionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellActionDo) Preload(fields ...field.RelationField) IWebshellActionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellActionDo) FirstOrInit() (*model.WebshellAction, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellAction), nil
	}
}

func (w webshellActionDo) FirstOrCreate() (*model.WebshellAction, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellAction), nil
	}
}

func (w webshellActionDo) FindByPage(offset int, limit int) (result []*model.WebshellAction, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellActionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellActionDo) Delete(models ...*model.WebshellAction) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellActionDo) withDO(do gen.Dao) *webshellActionDo {
	w.DO = *do.(*gen.DO)
	return w
}
