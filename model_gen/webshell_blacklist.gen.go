// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellBlacklist(db *gorm.DB, opts ...gen.DOOption) webshellBlacklist {
	_webshellBlacklist := webshellBlacklist{}

	_webshellBlacklist.webshellBlacklistDo.UseDB(db, opts...)
	_webshellBlacklist.webshellBlacklistDo.UseModel(&model.WebshellBlacklist{})

	tableName := _webshellBlacklist.webshellBlacklistDo.TableName()
	_webshellBlacklist.ALL = field.NewAsterisk(tableName)
	_webshellBlacklist.WebshellBlacklistID = field.NewString(tableName, "webshell_blacklist_id")
	_webshellBlacklist.AddTime = field.NewTime(tableName, "add_time")
	_webshellBlacklist.Comments = field.NewString(tableName, "comments")
	_webshellBlacklist.OpUser = field.NewString(tableName, "op_user")
	_webshellBlacklist.Action = field.NewString(tableName, "action")
	_webshellBlacklist.MatchType = field.NewString(tableName, "match_type")
	_webshellBlacklist.ActionType = field.NewString(tableName, "action_type")

	_webshellBlacklist.fillFieldMap()

	return _webshellBlacklist
}

type webshellBlacklist struct {
	webshellBlacklistDo

	ALL                 field.Asterisk
	WebshellBlacklistID field.String
	AddTime             field.Time
	Comments            field.String
	OpUser              field.String
	Action              field.String
	MatchType           field.String
	ActionType          field.String

	fieldMap map[string]field.Expr
}

func (w webshellBlacklist) Table(newTableName string) *webshellBlacklist {
	w.webshellBlacklistDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellBlacklist) As(alias string) *webshellBlacklist {
	w.webshellBlacklistDo.DO = *(w.webshellBlacklistDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellBlacklist) updateTableName(table string) *webshellBlacklist {
	w.ALL = field.NewAsterisk(table)
	w.WebshellBlacklistID = field.NewString(table, "webshell_blacklist_id")
	w.AddTime = field.NewTime(table, "add_time")
	w.Comments = field.NewString(table, "comments")
	w.OpUser = field.NewString(table, "op_user")
	w.Action = field.NewString(table, "action")
	w.MatchType = field.NewString(table, "match_type")
	w.ActionType = field.NewString(table, "action_type")

	w.fillFieldMap()

	return w
}

func (w *webshellBlacklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellBlacklist) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["webshell_blacklist_id"] = w.WebshellBlacklistID
	w.fieldMap["add_time"] = w.AddTime
	w.fieldMap["comments"] = w.Comments
	w.fieldMap["op_user"] = w.OpUser
	w.fieldMap["action"] = w.Action
	w.fieldMap["match_type"] = w.MatchType
	w.fieldMap["action_type"] = w.ActionType
}

func (w webshellBlacklist) clone(db *gorm.DB) webshellBlacklist {
	w.webshellBlacklistDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellBlacklist) replaceDB(db *gorm.DB) webshellBlacklist {
	w.webshellBlacklistDo.ReplaceDB(db)
	return w
}

type webshellBlacklistDo struct{ gen.DO }

type IWebshellBlacklistDo interface {
	gen.SubQuery
	Debug() IWebshellBlacklistDo
	WithContext(ctx context.Context) IWebshellBlacklistDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellBlacklistDo
	WriteDB() IWebshellBlacklistDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellBlacklistDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellBlacklistDo
	Not(conds ...gen.Condition) IWebshellBlacklistDo
	Or(conds ...gen.Condition) IWebshellBlacklistDo
	Select(conds ...field.Expr) IWebshellBlacklistDo
	Where(conds ...gen.Condition) IWebshellBlacklistDo
	Order(conds ...field.Expr) IWebshellBlacklistDo
	Distinct(cols ...field.Expr) IWebshellBlacklistDo
	Omit(cols ...field.Expr) IWebshellBlacklistDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellBlacklistDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellBlacklistDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellBlacklistDo
	Group(cols ...field.Expr) IWebshellBlacklistDo
	Having(conds ...gen.Condition) IWebshellBlacklistDo
	Limit(limit int) IWebshellBlacklistDo
	Offset(offset int) IWebshellBlacklistDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellBlacklistDo
	Unscoped() IWebshellBlacklistDo
	Create(values ...*model.WebshellBlacklist) error
	CreateInBatches(values []*model.WebshellBlacklist, batchSize int) error
	Save(values ...*model.WebshellBlacklist) error
	First() (*model.WebshellBlacklist, error)
	Take() (*model.WebshellBlacklist, error)
	Last() (*model.WebshellBlacklist, error)
	Find() ([]*model.WebshellBlacklist, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellBlacklist, err error)
	FindInBatches(result *[]*model.WebshellBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellBlacklist) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellBlacklistDo
	Assign(attrs ...field.AssignExpr) IWebshellBlacklistDo
	Joins(fields ...field.RelationField) IWebshellBlacklistDo
	Preload(fields ...field.RelationField) IWebshellBlacklistDo
	FirstOrInit() (*model.WebshellBlacklist, error)
	FirstOrCreate() (*model.WebshellBlacklist, error)
	FindByPage(offset int, limit int) (result []*model.WebshellBlacklist, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellBlacklistDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellBlacklistDo) Debug() IWebshellBlacklistDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellBlacklistDo) WithContext(ctx context.Context) IWebshellBlacklistDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellBlacklistDo) ReadDB() IWebshellBlacklistDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellBlacklistDo) WriteDB() IWebshellBlacklistDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellBlacklistDo) Session(config *gorm.Session) IWebshellBlacklistDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellBlacklistDo) Clauses(conds ...clause.Expression) IWebshellBlacklistDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellBlacklistDo) Returning(value interface{}, columns ...string) IWebshellBlacklistDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellBlacklistDo) Not(conds ...gen.Condition) IWebshellBlacklistDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellBlacklistDo) Or(conds ...gen.Condition) IWebshellBlacklistDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellBlacklistDo) Select(conds ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellBlacklistDo) Where(conds ...gen.Condition) IWebshellBlacklistDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellBlacklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellBlacklistDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellBlacklistDo) Order(conds ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellBlacklistDo) Distinct(cols ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellBlacklistDo) Omit(cols ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellBlacklistDo) Join(table schema.Tabler, on ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellBlacklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellBlacklistDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellBlacklistDo) Group(cols ...field.Expr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellBlacklistDo) Having(conds ...gen.Condition) IWebshellBlacklistDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellBlacklistDo) Limit(limit int) IWebshellBlacklistDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellBlacklistDo) Offset(offset int) IWebshellBlacklistDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellBlacklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellBlacklistDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellBlacklistDo) Unscoped() IWebshellBlacklistDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellBlacklistDo) Create(values ...*model.WebshellBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellBlacklistDo) CreateInBatches(values []*model.WebshellBlacklist, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellBlacklistDo) Save(values ...*model.WebshellBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellBlacklistDo) First() (*model.WebshellBlacklist, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellBlacklist), nil
	}
}

func (w webshellBlacklistDo) Take() (*model.WebshellBlacklist, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellBlacklist), nil
	}
}

func (w webshellBlacklistDo) Last() (*model.WebshellBlacklist, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellBlacklist), nil
	}
}

func (w webshellBlacklistDo) Find() ([]*model.WebshellBlacklist, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellBlacklist), err
}

func (w webshellBlacklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellBlacklist, err error) {
	buf := make([]*model.WebshellBlacklist, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellBlacklistDo) FindInBatches(result *[]*model.WebshellBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellBlacklistDo) Attrs(attrs ...field.AssignExpr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellBlacklistDo) Assign(attrs ...field.AssignExpr) IWebshellBlacklistDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellBlacklistDo) Joins(fields ...field.RelationField) IWebshellBlacklistDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellBlacklistDo) Preload(fields ...field.RelationField) IWebshellBlacklistDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellBlacklistDo) FirstOrInit() (*model.WebshellBlacklist, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellBlacklist), nil
	}
}

func (w webshellBlacklistDo) FirstOrCreate() (*model.WebshellBlacklist, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellBlacklist), nil
	}
}

func (w webshellBlacklistDo) FindByPage(offset int, limit int) (result []*model.WebshellBlacklist, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellBlacklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellBlacklistDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellBlacklistDo) Delete(models ...*model.WebshellBlacklist) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellBlacklistDo) withDO(do gen.Dao) *webshellBlacklistDo {
	w.DO = *do.(*gen.DO)
	return w
}
