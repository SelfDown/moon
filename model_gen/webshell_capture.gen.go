// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellCapture(db *gorm.DB, opts ...gen.DOOption) webshellCapture {
	_webshellCapture := webshellCapture{}

	_webshellCapture.webshellCaptureDo.UseDB(db, opts...)
	_webshellCapture.webshellCaptureDo.UseModel(&model.WebshellCapture{})

	tableName := _webshellCapture.webshellCaptureDo.TableName()
	_webshellCapture.ALL = field.NewAsterisk(tableName)
	_webshellCapture.CaptureID = field.NewString(tableName, "capture_id")
	_webshellCapture.Userid = field.NewString(tableName, "userid")
	_webshellCapture.ServerID = field.NewString(tableName, "server_id")
	_webshellCapture.Begtime = field.NewTime(tableName, "begtime")
	_webshellCapture.Endtime = field.NewTime(tableName, "endtime")
	_webshellCapture.CaptureContentName = field.NewString(tableName, "capture_content_name")
	_webshellCapture.CaptureContenFilePath = field.NewString(tableName, "capture_conten_file_path")
	_webshellCapture.Token = field.NewString(tableName, "token")
	_webshellCapture.IsDel = field.NewString(tableName, "is_del")
	_webshellCapture.CaptureRecTime = field.NewInt32(tableName, "capture_rec_time")
	_webshellCapture.ServerIP = field.NewString(tableName, "server_ip")

	_webshellCapture.fillFieldMap()

	return _webshellCapture
}

type webshellCapture struct {
	webshellCaptureDo

	ALL                   field.Asterisk
	CaptureID             field.String
	Userid                field.String
	ServerID              field.String
	Begtime               field.Time
	Endtime               field.Time
	CaptureContentName    field.String
	CaptureContenFilePath field.String
	Token                 field.String
	IsDel                 field.String
	CaptureRecTime        field.Int32
	ServerIP              field.String

	fieldMap map[string]field.Expr
}

func (w webshellCapture) Table(newTableName string) *webshellCapture {
	w.webshellCaptureDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellCapture) As(alias string) *webshellCapture {
	w.webshellCaptureDo.DO = *(w.webshellCaptureDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellCapture) updateTableName(table string) *webshellCapture {
	w.ALL = field.NewAsterisk(table)
	w.CaptureID = field.NewString(table, "capture_id")
	w.Userid = field.NewString(table, "userid")
	w.ServerID = field.NewString(table, "server_id")
	w.Begtime = field.NewTime(table, "begtime")
	w.Endtime = field.NewTime(table, "endtime")
	w.CaptureContentName = field.NewString(table, "capture_content_name")
	w.CaptureContenFilePath = field.NewString(table, "capture_conten_file_path")
	w.Token = field.NewString(table, "token")
	w.IsDel = field.NewString(table, "is_del")
	w.CaptureRecTime = field.NewInt32(table, "capture_rec_time")
	w.ServerIP = field.NewString(table, "server_ip")

	w.fillFieldMap()

	return w
}

func (w *webshellCapture) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellCapture) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["capture_id"] = w.CaptureID
	w.fieldMap["userid"] = w.Userid
	w.fieldMap["server_id"] = w.ServerID
	w.fieldMap["begtime"] = w.Begtime
	w.fieldMap["endtime"] = w.Endtime
	w.fieldMap["capture_content_name"] = w.CaptureContentName
	w.fieldMap["capture_conten_file_path"] = w.CaptureContenFilePath
	w.fieldMap["token"] = w.Token
	w.fieldMap["is_del"] = w.IsDel
	w.fieldMap["capture_rec_time"] = w.CaptureRecTime
	w.fieldMap["server_ip"] = w.ServerIP
}

func (w webshellCapture) clone(db *gorm.DB) webshellCapture {
	w.webshellCaptureDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellCapture) replaceDB(db *gorm.DB) webshellCapture {
	w.webshellCaptureDo.ReplaceDB(db)
	return w
}

type webshellCaptureDo struct{ gen.DO }

type IWebshellCaptureDo interface {
	gen.SubQuery
	Debug() IWebshellCaptureDo
	WithContext(ctx context.Context) IWebshellCaptureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellCaptureDo
	WriteDB() IWebshellCaptureDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellCaptureDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellCaptureDo
	Not(conds ...gen.Condition) IWebshellCaptureDo
	Or(conds ...gen.Condition) IWebshellCaptureDo
	Select(conds ...field.Expr) IWebshellCaptureDo
	Where(conds ...gen.Condition) IWebshellCaptureDo
	Order(conds ...field.Expr) IWebshellCaptureDo
	Distinct(cols ...field.Expr) IWebshellCaptureDo
	Omit(cols ...field.Expr) IWebshellCaptureDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellCaptureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDo
	Group(cols ...field.Expr) IWebshellCaptureDo
	Having(conds ...gen.Condition) IWebshellCaptureDo
	Limit(limit int) IWebshellCaptureDo
	Offset(offset int) IWebshellCaptureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellCaptureDo
	Unscoped() IWebshellCaptureDo
	Create(values ...*model.WebshellCapture) error
	CreateInBatches(values []*model.WebshellCapture, batchSize int) error
	Save(values ...*model.WebshellCapture) error
	First() (*model.WebshellCapture, error)
	Take() (*model.WebshellCapture, error)
	Last() (*model.WebshellCapture, error)
	Find() ([]*model.WebshellCapture, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellCapture, err error)
	FindInBatches(result *[]*model.WebshellCapture, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellCapture) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellCaptureDo
	Assign(attrs ...field.AssignExpr) IWebshellCaptureDo
	Joins(fields ...field.RelationField) IWebshellCaptureDo
	Preload(fields ...field.RelationField) IWebshellCaptureDo
	FirstOrInit() (*model.WebshellCapture, error)
	FirstOrCreate() (*model.WebshellCapture, error)
	FindByPage(offset int, limit int) (result []*model.WebshellCapture, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellCaptureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellCaptureDo) Debug() IWebshellCaptureDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellCaptureDo) WithContext(ctx context.Context) IWebshellCaptureDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellCaptureDo) ReadDB() IWebshellCaptureDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellCaptureDo) WriteDB() IWebshellCaptureDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellCaptureDo) Session(config *gorm.Session) IWebshellCaptureDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellCaptureDo) Clauses(conds ...clause.Expression) IWebshellCaptureDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellCaptureDo) Returning(value interface{}, columns ...string) IWebshellCaptureDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellCaptureDo) Not(conds ...gen.Condition) IWebshellCaptureDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellCaptureDo) Or(conds ...gen.Condition) IWebshellCaptureDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellCaptureDo) Select(conds ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellCaptureDo) Where(conds ...gen.Condition) IWebshellCaptureDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellCaptureDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellCaptureDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellCaptureDo) Order(conds ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellCaptureDo) Distinct(cols ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellCaptureDo) Omit(cols ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellCaptureDo) Join(table schema.Tabler, on ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellCaptureDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellCaptureDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellCaptureDo) Group(cols ...field.Expr) IWebshellCaptureDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellCaptureDo) Having(conds ...gen.Condition) IWebshellCaptureDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellCaptureDo) Limit(limit int) IWebshellCaptureDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellCaptureDo) Offset(offset int) IWebshellCaptureDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellCaptureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellCaptureDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellCaptureDo) Unscoped() IWebshellCaptureDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellCaptureDo) Create(values ...*model.WebshellCapture) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellCaptureDo) CreateInBatches(values []*model.WebshellCapture, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellCaptureDo) Save(values ...*model.WebshellCapture) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellCaptureDo) First() (*model.WebshellCapture, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCapture), nil
	}
}

func (w webshellCaptureDo) Take() (*model.WebshellCapture, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCapture), nil
	}
}

func (w webshellCaptureDo) Last() (*model.WebshellCapture, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCapture), nil
	}
}

func (w webshellCaptureDo) Find() ([]*model.WebshellCapture, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellCapture), err
}

func (w webshellCaptureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellCapture, err error) {
	buf := make([]*model.WebshellCapture, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellCaptureDo) FindInBatches(result *[]*model.WebshellCapture, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellCaptureDo) Attrs(attrs ...field.AssignExpr) IWebshellCaptureDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellCaptureDo) Assign(attrs ...field.AssignExpr) IWebshellCaptureDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellCaptureDo) Joins(fields ...field.RelationField) IWebshellCaptureDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellCaptureDo) Preload(fields ...field.RelationField) IWebshellCaptureDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellCaptureDo) FirstOrInit() (*model.WebshellCapture, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCapture), nil
	}
}

func (w webshellCaptureDo) FirstOrCreate() (*model.WebshellCapture, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCapture), nil
	}
}

func (w webshellCaptureDo) FindByPage(offset int, limit int) (result []*model.WebshellCapture, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellCaptureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellCaptureDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellCaptureDo) Delete(models ...*model.WebshellCapture) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellCaptureDo) withDO(do gen.Dao) *webshellCaptureDo {
	w.DO = *do.(*gen.DO)
	return w
}
