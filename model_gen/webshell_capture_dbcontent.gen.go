// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellCaptureDbcontent(db *gorm.DB, opts ...gen.DOOption) webshellCaptureDbcontent {
	_webshellCaptureDbcontent := webshellCaptureDbcontent{}

	_webshellCaptureDbcontent.webshellCaptureDbcontentDo.UseDB(db, opts...)
	_webshellCaptureDbcontent.webshellCaptureDbcontentDo.UseModel(&model.WebshellCaptureDbcontent{})

	tableName := _webshellCaptureDbcontent.webshellCaptureDbcontentDo.TableName()
	_webshellCaptureDbcontent.ALL = field.NewAsterisk(tableName)
	_webshellCaptureDbcontent.CaptureDbcontentID = field.NewString(tableName, "capture_dbcontent_id")
	_webshellCaptureDbcontent.CaptureID = field.NewString(tableName, "capture_id")
	_webshellCaptureDbcontent.CaptureDbcontent = field.NewString(tableName, "capture_dbcontent")

	_webshellCaptureDbcontent.fillFieldMap()

	return _webshellCaptureDbcontent
}

type webshellCaptureDbcontent struct {
	webshellCaptureDbcontentDo

	ALL                field.Asterisk
	CaptureDbcontentID field.String
	CaptureID          field.String
	CaptureDbcontent   field.String

	fieldMap map[string]field.Expr
}

func (w webshellCaptureDbcontent) Table(newTableName string) *webshellCaptureDbcontent {
	w.webshellCaptureDbcontentDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellCaptureDbcontent) As(alias string) *webshellCaptureDbcontent {
	w.webshellCaptureDbcontentDo.DO = *(w.webshellCaptureDbcontentDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellCaptureDbcontent) updateTableName(table string) *webshellCaptureDbcontent {
	w.ALL = field.NewAsterisk(table)
	w.CaptureDbcontentID = field.NewString(table, "capture_dbcontent_id")
	w.CaptureID = field.NewString(table, "capture_id")
	w.CaptureDbcontent = field.NewString(table, "capture_dbcontent")

	w.fillFieldMap()

	return w
}

func (w *webshellCaptureDbcontent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellCaptureDbcontent) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["capture_dbcontent_id"] = w.CaptureDbcontentID
	w.fieldMap["capture_id"] = w.CaptureID
	w.fieldMap["capture_dbcontent"] = w.CaptureDbcontent
}

func (w webshellCaptureDbcontent) clone(db *gorm.DB) webshellCaptureDbcontent {
	w.webshellCaptureDbcontentDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellCaptureDbcontent) replaceDB(db *gorm.DB) webshellCaptureDbcontent {
	w.webshellCaptureDbcontentDo.ReplaceDB(db)
	return w
}

type webshellCaptureDbcontentDo struct{ gen.DO }

type IWebshellCaptureDbcontentDo interface {
	gen.SubQuery
	Debug() IWebshellCaptureDbcontentDo
	WithContext(ctx context.Context) IWebshellCaptureDbcontentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellCaptureDbcontentDo
	WriteDB() IWebshellCaptureDbcontentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellCaptureDbcontentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellCaptureDbcontentDo
	Not(conds ...gen.Condition) IWebshellCaptureDbcontentDo
	Or(conds ...gen.Condition) IWebshellCaptureDbcontentDo
	Select(conds ...field.Expr) IWebshellCaptureDbcontentDo
	Where(conds ...gen.Condition) IWebshellCaptureDbcontentDo
	Order(conds ...field.Expr) IWebshellCaptureDbcontentDo
	Distinct(cols ...field.Expr) IWebshellCaptureDbcontentDo
	Omit(cols ...field.Expr) IWebshellCaptureDbcontentDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellCaptureDbcontentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDbcontentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDbcontentDo
	Group(cols ...field.Expr) IWebshellCaptureDbcontentDo
	Having(conds ...gen.Condition) IWebshellCaptureDbcontentDo
	Limit(limit int) IWebshellCaptureDbcontentDo
	Offset(offset int) IWebshellCaptureDbcontentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellCaptureDbcontentDo
	Unscoped() IWebshellCaptureDbcontentDo
	Create(values ...*model.WebshellCaptureDbcontent) error
	CreateInBatches(values []*model.WebshellCaptureDbcontent, batchSize int) error
	Save(values ...*model.WebshellCaptureDbcontent) error
	First() (*model.WebshellCaptureDbcontent, error)
	Take() (*model.WebshellCaptureDbcontent, error)
	Last() (*model.WebshellCaptureDbcontent, error)
	Find() ([]*model.WebshellCaptureDbcontent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellCaptureDbcontent, err error)
	FindInBatches(result *[]*model.WebshellCaptureDbcontent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellCaptureDbcontent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellCaptureDbcontentDo
	Assign(attrs ...field.AssignExpr) IWebshellCaptureDbcontentDo
	Joins(fields ...field.RelationField) IWebshellCaptureDbcontentDo
	Preload(fields ...field.RelationField) IWebshellCaptureDbcontentDo
	FirstOrInit() (*model.WebshellCaptureDbcontent, error)
	FirstOrCreate() (*model.WebshellCaptureDbcontent, error)
	FindByPage(offset int, limit int) (result []*model.WebshellCaptureDbcontent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellCaptureDbcontentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellCaptureDbcontentDo) Debug() IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellCaptureDbcontentDo) WithContext(ctx context.Context) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellCaptureDbcontentDo) ReadDB() IWebshellCaptureDbcontentDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellCaptureDbcontentDo) WriteDB() IWebshellCaptureDbcontentDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellCaptureDbcontentDo) Session(config *gorm.Session) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellCaptureDbcontentDo) Clauses(conds ...clause.Expression) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellCaptureDbcontentDo) Returning(value interface{}, columns ...string) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellCaptureDbcontentDo) Not(conds ...gen.Condition) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellCaptureDbcontentDo) Or(conds ...gen.Condition) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellCaptureDbcontentDo) Select(conds ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellCaptureDbcontentDo) Where(conds ...gen.Condition) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellCaptureDbcontentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellCaptureDbcontentDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellCaptureDbcontentDo) Order(conds ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellCaptureDbcontentDo) Distinct(cols ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellCaptureDbcontentDo) Omit(cols ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellCaptureDbcontentDo) Join(table schema.Tabler, on ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellCaptureDbcontentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellCaptureDbcontentDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellCaptureDbcontentDo) Group(cols ...field.Expr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellCaptureDbcontentDo) Having(conds ...gen.Condition) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellCaptureDbcontentDo) Limit(limit int) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellCaptureDbcontentDo) Offset(offset int) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellCaptureDbcontentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellCaptureDbcontentDo) Unscoped() IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellCaptureDbcontentDo) Create(values ...*model.WebshellCaptureDbcontent) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellCaptureDbcontentDo) CreateInBatches(values []*model.WebshellCaptureDbcontent, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellCaptureDbcontentDo) Save(values ...*model.WebshellCaptureDbcontent) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellCaptureDbcontentDo) First() (*model.WebshellCaptureDbcontent, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCaptureDbcontent), nil
	}
}

func (w webshellCaptureDbcontentDo) Take() (*model.WebshellCaptureDbcontent, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCaptureDbcontent), nil
	}
}

func (w webshellCaptureDbcontentDo) Last() (*model.WebshellCaptureDbcontent, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCaptureDbcontent), nil
	}
}

func (w webshellCaptureDbcontentDo) Find() ([]*model.WebshellCaptureDbcontent, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellCaptureDbcontent), err
}

func (w webshellCaptureDbcontentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellCaptureDbcontent, err error) {
	buf := make([]*model.WebshellCaptureDbcontent, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellCaptureDbcontentDo) FindInBatches(result *[]*model.WebshellCaptureDbcontent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellCaptureDbcontentDo) Attrs(attrs ...field.AssignExpr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellCaptureDbcontentDo) Assign(attrs ...field.AssignExpr) IWebshellCaptureDbcontentDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellCaptureDbcontentDo) Joins(fields ...field.RelationField) IWebshellCaptureDbcontentDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellCaptureDbcontentDo) Preload(fields ...field.RelationField) IWebshellCaptureDbcontentDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellCaptureDbcontentDo) FirstOrInit() (*model.WebshellCaptureDbcontent, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCaptureDbcontent), nil
	}
}

func (w webshellCaptureDbcontentDo) FirstOrCreate() (*model.WebshellCaptureDbcontent, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellCaptureDbcontent), nil
	}
}

func (w webshellCaptureDbcontentDo) FindByPage(offset int, limit int) (result []*model.WebshellCaptureDbcontent, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellCaptureDbcontentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellCaptureDbcontentDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellCaptureDbcontentDo) Delete(models ...*model.WebshellCaptureDbcontent) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellCaptureDbcontentDo) withDO(do gen.Dao) *webshellCaptureDbcontentDo {
	w.DO = *do.(*gen.DO)
	return w
}
