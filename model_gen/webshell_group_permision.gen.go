// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellGroupPermision(db *gorm.DB, opts ...gen.DOOption) webshellGroupPermision {
	_webshellGroupPermision := webshellGroupPermision{}

	_webshellGroupPermision.webshellGroupPermisionDo.UseDB(db, opts...)
	_webshellGroupPermision.webshellGroupPermisionDo.UseModel(&model.WebshellGroupPermision{})

	tableName := _webshellGroupPermision.webshellGroupPermisionDo.TableName()
	_webshellGroupPermision.ALL = field.NewAsterisk(tableName)
	_webshellGroupPermision.GroupPermisionID = field.NewString(tableName, "group_permision_id")
	_webshellGroupPermision.GroupPermisionName = field.NewString(tableName, "group_permision_name")
	_webshellGroupPermision.AddTime = field.NewTime(tableName, "add_time")
	_webshellGroupPermision.Comments = field.NewString(tableName, "comments")
	_webshellGroupPermision.OpUser = field.NewString(tableName, "op_user")
	_webshellGroupPermision.PermisionSrcType = field.NewString(tableName, "permision_src_type")

	_webshellGroupPermision.fillFieldMap()

	return _webshellGroupPermision
}

type webshellGroupPermision struct {
	webshellGroupPermisionDo

	ALL                field.Asterisk
	GroupPermisionID   field.String // UUID,主键
	GroupPermisionName field.String // 授权名称
	AddTime            field.Time   // 写入事件
	Comments           field.String // 备注说明
	OpUser             field.String // 操作人，登录系统人，可能是代为审批人，所以记录下来
	PermisionSrcType   field.String // 权限关系类型 1、资源全局  2、限定资源

	fieldMap map[string]field.Expr
}

func (w webshellGroupPermision) Table(newTableName string) *webshellGroupPermision {
	w.webshellGroupPermisionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellGroupPermision) As(alias string) *webshellGroupPermision {
	w.webshellGroupPermisionDo.DO = *(w.webshellGroupPermisionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellGroupPermision) updateTableName(table string) *webshellGroupPermision {
	w.ALL = field.NewAsterisk(table)
	w.GroupPermisionID = field.NewString(table, "group_permision_id")
	w.GroupPermisionName = field.NewString(table, "group_permision_name")
	w.AddTime = field.NewTime(table, "add_time")
	w.Comments = field.NewString(table, "comments")
	w.OpUser = field.NewString(table, "op_user")
	w.PermisionSrcType = field.NewString(table, "permision_src_type")

	w.fillFieldMap()

	return w
}

func (w *webshellGroupPermision) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellGroupPermision) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["group_permision_id"] = w.GroupPermisionID
	w.fieldMap["group_permision_name"] = w.GroupPermisionName
	w.fieldMap["add_time"] = w.AddTime
	w.fieldMap["comments"] = w.Comments
	w.fieldMap["op_user"] = w.OpUser
	w.fieldMap["permision_src_type"] = w.PermisionSrcType
}

func (w webshellGroupPermision) clone(db *gorm.DB) webshellGroupPermision {
	w.webshellGroupPermisionDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellGroupPermision) replaceDB(db *gorm.DB) webshellGroupPermision {
	w.webshellGroupPermisionDo.ReplaceDB(db)
	return w
}

type webshellGroupPermisionDo struct{ gen.DO }

type IWebshellGroupPermisionDo interface {
	gen.SubQuery
	Debug() IWebshellGroupPermisionDo
	WithContext(ctx context.Context) IWebshellGroupPermisionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellGroupPermisionDo
	WriteDB() IWebshellGroupPermisionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellGroupPermisionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellGroupPermisionDo
	Not(conds ...gen.Condition) IWebshellGroupPermisionDo
	Or(conds ...gen.Condition) IWebshellGroupPermisionDo
	Select(conds ...field.Expr) IWebshellGroupPermisionDo
	Where(conds ...gen.Condition) IWebshellGroupPermisionDo
	Order(conds ...field.Expr) IWebshellGroupPermisionDo
	Distinct(cols ...field.Expr) IWebshellGroupPermisionDo
	Omit(cols ...field.Expr) IWebshellGroupPermisionDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellGroupPermisionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupPermisionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupPermisionDo
	Group(cols ...field.Expr) IWebshellGroupPermisionDo
	Having(conds ...gen.Condition) IWebshellGroupPermisionDo
	Limit(limit int) IWebshellGroupPermisionDo
	Offset(offset int) IWebshellGroupPermisionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellGroupPermisionDo
	Unscoped() IWebshellGroupPermisionDo
	Create(values ...*model.WebshellGroupPermision) error
	CreateInBatches(values []*model.WebshellGroupPermision, batchSize int) error
	Save(values ...*model.WebshellGroupPermision) error
	First() (*model.WebshellGroupPermision, error)
	Take() (*model.WebshellGroupPermision, error)
	Last() (*model.WebshellGroupPermision, error)
	Find() ([]*model.WebshellGroupPermision, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellGroupPermision, err error)
	FindInBatches(result *[]*model.WebshellGroupPermision, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellGroupPermision) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellGroupPermisionDo
	Assign(attrs ...field.AssignExpr) IWebshellGroupPermisionDo
	Joins(fields ...field.RelationField) IWebshellGroupPermisionDo
	Preload(fields ...field.RelationField) IWebshellGroupPermisionDo
	FirstOrInit() (*model.WebshellGroupPermision, error)
	FirstOrCreate() (*model.WebshellGroupPermision, error)
	FindByPage(offset int, limit int) (result []*model.WebshellGroupPermision, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellGroupPermisionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellGroupPermisionDo) Debug() IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellGroupPermisionDo) WithContext(ctx context.Context) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellGroupPermisionDo) ReadDB() IWebshellGroupPermisionDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellGroupPermisionDo) WriteDB() IWebshellGroupPermisionDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellGroupPermisionDo) Session(config *gorm.Session) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellGroupPermisionDo) Clauses(conds ...clause.Expression) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellGroupPermisionDo) Returning(value interface{}, columns ...string) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellGroupPermisionDo) Not(conds ...gen.Condition) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellGroupPermisionDo) Or(conds ...gen.Condition) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellGroupPermisionDo) Select(conds ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellGroupPermisionDo) Where(conds ...gen.Condition) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellGroupPermisionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellGroupPermisionDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellGroupPermisionDo) Order(conds ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellGroupPermisionDo) Distinct(cols ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellGroupPermisionDo) Omit(cols ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellGroupPermisionDo) Join(table schema.Tabler, on ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellGroupPermisionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellGroupPermisionDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellGroupPermisionDo) Group(cols ...field.Expr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellGroupPermisionDo) Having(conds ...gen.Condition) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellGroupPermisionDo) Limit(limit int) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellGroupPermisionDo) Offset(offset int) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellGroupPermisionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellGroupPermisionDo) Unscoped() IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellGroupPermisionDo) Create(values ...*model.WebshellGroupPermision) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellGroupPermisionDo) CreateInBatches(values []*model.WebshellGroupPermision, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellGroupPermisionDo) Save(values ...*model.WebshellGroupPermision) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellGroupPermisionDo) First() (*model.WebshellGroupPermision, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupPermision), nil
	}
}

func (w webshellGroupPermisionDo) Take() (*model.WebshellGroupPermision, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupPermision), nil
	}
}

func (w webshellGroupPermisionDo) Last() (*model.WebshellGroupPermision, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupPermision), nil
	}
}

func (w webshellGroupPermisionDo) Find() ([]*model.WebshellGroupPermision, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellGroupPermision), err
}

func (w webshellGroupPermisionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellGroupPermision, err error) {
	buf := make([]*model.WebshellGroupPermision, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellGroupPermisionDo) FindInBatches(result *[]*model.WebshellGroupPermision, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellGroupPermisionDo) Attrs(attrs ...field.AssignExpr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellGroupPermisionDo) Assign(attrs ...field.AssignExpr) IWebshellGroupPermisionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellGroupPermisionDo) Joins(fields ...field.RelationField) IWebshellGroupPermisionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellGroupPermisionDo) Preload(fields ...field.RelationField) IWebshellGroupPermisionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellGroupPermisionDo) FirstOrInit() (*model.WebshellGroupPermision, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupPermision), nil
	}
}

func (w webshellGroupPermisionDo) FirstOrCreate() (*model.WebshellGroupPermision, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupPermision), nil
	}
}

func (w webshellGroupPermisionDo) FindByPage(offset int, limit int) (result []*model.WebshellGroupPermision, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellGroupPermisionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellGroupPermisionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellGroupPermisionDo) Delete(models ...*model.WebshellGroupPermision) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellGroupPermisionDo) withDO(do gen.Dao) *webshellGroupPermisionDo {
	w.DO = *do.(*gen.DO)
	return w
}
