// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellGroupRel(db *gorm.DB, opts ...gen.DOOption) webshellGroupRel {
	_webshellGroupRel := webshellGroupRel{}

	_webshellGroupRel.webshellGroupRelDo.UseDB(db, opts...)
	_webshellGroupRel.webshellGroupRelDo.UseModel(&model.WebshellGroupRel{})

	tableName := _webshellGroupRel.webshellGroupRelDo.TableName()
	_webshellGroupRel.ALL = field.NewAsterisk(tableName)
	_webshellGroupRel.WebshellUserGroupRelID = field.NewString(tableName, "webshell_user_group_rel_id")
	_webshellGroupRel.UserGroupPermisionID = field.NewString(tableName, "user_group_permision_id")
	_webshellGroupRel.UserGroupCode = field.NewString(tableName, "user_group_code")

	_webshellGroupRel.fillFieldMap()

	return _webshellGroupRel
}

type webshellGroupRel struct {
	webshellGroupRelDo

	ALL                    field.Asterisk
	WebshellUserGroupRelID field.String
	UserGroupPermisionID   field.String // UUID,主键
	UserGroupCode          field.String // user_group_code

	fieldMap map[string]field.Expr
}

func (w webshellGroupRel) Table(newTableName string) *webshellGroupRel {
	w.webshellGroupRelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellGroupRel) As(alias string) *webshellGroupRel {
	w.webshellGroupRelDo.DO = *(w.webshellGroupRelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellGroupRel) updateTableName(table string) *webshellGroupRel {
	w.ALL = field.NewAsterisk(table)
	w.WebshellUserGroupRelID = field.NewString(table, "webshell_user_group_rel_id")
	w.UserGroupPermisionID = field.NewString(table, "user_group_permision_id")
	w.UserGroupCode = field.NewString(table, "user_group_code")

	w.fillFieldMap()

	return w
}

func (w *webshellGroupRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellGroupRel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["webshell_user_group_rel_id"] = w.WebshellUserGroupRelID
	w.fieldMap["user_group_permision_id"] = w.UserGroupPermisionID
	w.fieldMap["user_group_code"] = w.UserGroupCode
}

func (w webshellGroupRel) clone(db *gorm.DB) webshellGroupRel {
	w.webshellGroupRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellGroupRel) replaceDB(db *gorm.DB) webshellGroupRel {
	w.webshellGroupRelDo.ReplaceDB(db)
	return w
}

type webshellGroupRelDo struct{ gen.DO }

type IWebshellGroupRelDo interface {
	gen.SubQuery
	Debug() IWebshellGroupRelDo
	WithContext(ctx context.Context) IWebshellGroupRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellGroupRelDo
	WriteDB() IWebshellGroupRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellGroupRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellGroupRelDo
	Not(conds ...gen.Condition) IWebshellGroupRelDo
	Or(conds ...gen.Condition) IWebshellGroupRelDo
	Select(conds ...field.Expr) IWebshellGroupRelDo
	Where(conds ...gen.Condition) IWebshellGroupRelDo
	Order(conds ...field.Expr) IWebshellGroupRelDo
	Distinct(cols ...field.Expr) IWebshellGroupRelDo
	Omit(cols ...field.Expr) IWebshellGroupRelDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellGroupRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupRelDo
	Group(cols ...field.Expr) IWebshellGroupRelDo
	Having(conds ...gen.Condition) IWebshellGroupRelDo
	Limit(limit int) IWebshellGroupRelDo
	Offset(offset int) IWebshellGroupRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellGroupRelDo
	Unscoped() IWebshellGroupRelDo
	Create(values ...*model.WebshellGroupRel) error
	CreateInBatches(values []*model.WebshellGroupRel, batchSize int) error
	Save(values ...*model.WebshellGroupRel) error
	First() (*model.WebshellGroupRel, error)
	Take() (*model.WebshellGroupRel, error)
	Last() (*model.WebshellGroupRel, error)
	Find() ([]*model.WebshellGroupRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellGroupRel, err error)
	FindInBatches(result *[]*model.WebshellGroupRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellGroupRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellGroupRelDo
	Assign(attrs ...field.AssignExpr) IWebshellGroupRelDo
	Joins(fields ...field.RelationField) IWebshellGroupRelDo
	Preload(fields ...field.RelationField) IWebshellGroupRelDo
	FirstOrInit() (*model.WebshellGroupRel, error)
	FirstOrCreate() (*model.WebshellGroupRel, error)
	FindByPage(offset int, limit int) (result []*model.WebshellGroupRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellGroupRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellGroupRelDo) Debug() IWebshellGroupRelDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellGroupRelDo) WithContext(ctx context.Context) IWebshellGroupRelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellGroupRelDo) ReadDB() IWebshellGroupRelDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellGroupRelDo) WriteDB() IWebshellGroupRelDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellGroupRelDo) Session(config *gorm.Session) IWebshellGroupRelDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellGroupRelDo) Clauses(conds ...clause.Expression) IWebshellGroupRelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellGroupRelDo) Returning(value interface{}, columns ...string) IWebshellGroupRelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellGroupRelDo) Not(conds ...gen.Condition) IWebshellGroupRelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellGroupRelDo) Or(conds ...gen.Condition) IWebshellGroupRelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellGroupRelDo) Select(conds ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellGroupRelDo) Where(conds ...gen.Condition) IWebshellGroupRelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellGroupRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellGroupRelDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellGroupRelDo) Order(conds ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellGroupRelDo) Distinct(cols ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellGroupRelDo) Omit(cols ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellGroupRelDo) Join(table schema.Tabler, on ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellGroupRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellGroupRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellGroupRelDo) Group(cols ...field.Expr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellGroupRelDo) Having(conds ...gen.Condition) IWebshellGroupRelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellGroupRelDo) Limit(limit int) IWebshellGroupRelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellGroupRelDo) Offset(offset int) IWebshellGroupRelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellGroupRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellGroupRelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellGroupRelDo) Unscoped() IWebshellGroupRelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellGroupRelDo) Create(values ...*model.WebshellGroupRel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellGroupRelDo) CreateInBatches(values []*model.WebshellGroupRel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellGroupRelDo) Save(values ...*model.WebshellGroupRel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellGroupRelDo) First() (*model.WebshellGroupRel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupRel), nil
	}
}

func (w webshellGroupRelDo) Take() (*model.WebshellGroupRel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupRel), nil
	}
}

func (w webshellGroupRelDo) Last() (*model.WebshellGroupRel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupRel), nil
	}
}

func (w webshellGroupRelDo) Find() ([]*model.WebshellGroupRel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellGroupRel), err
}

func (w webshellGroupRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellGroupRel, err error) {
	buf := make([]*model.WebshellGroupRel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellGroupRelDo) FindInBatches(result *[]*model.WebshellGroupRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellGroupRelDo) Attrs(attrs ...field.AssignExpr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellGroupRelDo) Assign(attrs ...field.AssignExpr) IWebshellGroupRelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellGroupRelDo) Joins(fields ...field.RelationField) IWebshellGroupRelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellGroupRelDo) Preload(fields ...field.RelationField) IWebshellGroupRelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellGroupRelDo) FirstOrInit() (*model.WebshellGroupRel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupRel), nil
	}
}

func (w webshellGroupRelDo) FirstOrCreate() (*model.WebshellGroupRel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellGroupRel), nil
	}
}

func (w webshellGroupRelDo) FindByPage(offset int, limit int) (result []*model.WebshellGroupRel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellGroupRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellGroupRelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellGroupRelDo) Delete(models ...*model.WebshellGroupRel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellGroupRelDo) withDO(do gen.Dao) *webshellGroupRelDo {
	w.DO = *do.(*gen.DO)
	return w
}
