// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellLog(db *gorm.DB, opts ...gen.DOOption) webshellLog {
	_webshellLog := webshellLog{}

	_webshellLog.webshellLogDo.UseDB(db, opts...)
	_webshellLog.webshellLogDo.UseModel(&model.WebshellLog{})

	tableName := _webshellLog.webshellLogDo.TableName()
	_webshellLog.ALL = field.NewAsterisk(tableName)
	_webshellLog.WebshellLogID = field.NewString(tableName, "webshell_log_id")
	_webshellLog.Token = field.NewInt64(tableName, "token")
	_webshellLog.CreateTime = field.NewInt64(tableName, "create_time")
	_webshellLog.Data = field.NewBytes(tableName, "data")

	_webshellLog.fillFieldMap()

	return _webshellLog
}

type webshellLog struct {
	webshellLogDo

	ALL           field.Asterisk
	WebshellLogID field.String
	Token         field.Int64
	CreateTime    field.Int64
	Data          field.Bytes

	fieldMap map[string]field.Expr
}

func (w webshellLog) Table(newTableName string) *webshellLog {
	w.webshellLogDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellLog) As(alias string) *webshellLog {
	w.webshellLogDo.DO = *(w.webshellLogDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellLog) updateTableName(table string) *webshellLog {
	w.ALL = field.NewAsterisk(table)
	w.WebshellLogID = field.NewString(table, "webshell_log_id")
	w.Token = field.NewInt64(table, "token")
	w.CreateTime = field.NewInt64(table, "create_time")
	w.Data = field.NewBytes(table, "data")

	w.fillFieldMap()

	return w
}

func (w *webshellLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellLog) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["webshell_log_id"] = w.WebshellLogID
	w.fieldMap["token"] = w.Token
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["data"] = w.Data
}

func (w webshellLog) clone(db *gorm.DB) webshellLog {
	w.webshellLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellLog) replaceDB(db *gorm.DB) webshellLog {
	w.webshellLogDo.ReplaceDB(db)
	return w
}

type webshellLogDo struct{ gen.DO }

type IWebshellLogDo interface {
	gen.SubQuery
	Debug() IWebshellLogDo
	WithContext(ctx context.Context) IWebshellLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellLogDo
	WriteDB() IWebshellLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellLogDo
	Not(conds ...gen.Condition) IWebshellLogDo
	Or(conds ...gen.Condition) IWebshellLogDo
	Select(conds ...field.Expr) IWebshellLogDo
	Where(conds ...gen.Condition) IWebshellLogDo
	Order(conds ...field.Expr) IWebshellLogDo
	Distinct(cols ...field.Expr) IWebshellLogDo
	Omit(cols ...field.Expr) IWebshellLogDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellLogDo
	Group(cols ...field.Expr) IWebshellLogDo
	Having(conds ...gen.Condition) IWebshellLogDo
	Limit(limit int) IWebshellLogDo
	Offset(offset int) IWebshellLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellLogDo
	Unscoped() IWebshellLogDo
	Create(values ...*model.WebshellLog) error
	CreateInBatches(values []*model.WebshellLog, batchSize int) error
	Save(values ...*model.WebshellLog) error
	First() (*model.WebshellLog, error)
	Take() (*model.WebshellLog, error)
	Last() (*model.WebshellLog, error)
	Find() ([]*model.WebshellLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellLog, err error)
	FindInBatches(result *[]*model.WebshellLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellLogDo
	Assign(attrs ...field.AssignExpr) IWebshellLogDo
	Joins(fields ...field.RelationField) IWebshellLogDo
	Preload(fields ...field.RelationField) IWebshellLogDo
	FirstOrInit() (*model.WebshellLog, error)
	FirstOrCreate() (*model.WebshellLog, error)
	FindByPage(offset int, limit int) (result []*model.WebshellLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellLogDo) Debug() IWebshellLogDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellLogDo) WithContext(ctx context.Context) IWebshellLogDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellLogDo) ReadDB() IWebshellLogDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellLogDo) WriteDB() IWebshellLogDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellLogDo) Session(config *gorm.Session) IWebshellLogDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellLogDo) Clauses(conds ...clause.Expression) IWebshellLogDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellLogDo) Returning(value interface{}, columns ...string) IWebshellLogDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellLogDo) Not(conds ...gen.Condition) IWebshellLogDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellLogDo) Or(conds ...gen.Condition) IWebshellLogDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellLogDo) Select(conds ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellLogDo) Where(conds ...gen.Condition) IWebshellLogDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellLogDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellLogDo) Order(conds ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellLogDo) Distinct(cols ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellLogDo) Omit(cols ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellLogDo) Join(table schema.Tabler, on ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellLogDo) Group(cols ...field.Expr) IWebshellLogDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellLogDo) Having(conds ...gen.Condition) IWebshellLogDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellLogDo) Limit(limit int) IWebshellLogDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellLogDo) Offset(offset int) IWebshellLogDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellLogDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellLogDo) Unscoped() IWebshellLogDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellLogDo) Create(values ...*model.WebshellLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellLogDo) CreateInBatches(values []*model.WebshellLog, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellLogDo) Save(values ...*model.WebshellLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellLogDo) First() (*model.WebshellLog, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellLog), nil
	}
}

func (w webshellLogDo) Take() (*model.WebshellLog, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellLog), nil
	}
}

func (w webshellLogDo) Last() (*model.WebshellLog, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellLog), nil
	}
}

func (w webshellLogDo) Find() ([]*model.WebshellLog, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellLog), err
}

func (w webshellLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellLog, err error) {
	buf := make([]*model.WebshellLog, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellLogDo) FindInBatches(result *[]*model.WebshellLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellLogDo) Attrs(attrs ...field.AssignExpr) IWebshellLogDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellLogDo) Assign(attrs ...field.AssignExpr) IWebshellLogDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellLogDo) Joins(fields ...field.RelationField) IWebshellLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellLogDo) Preload(fields ...field.RelationField) IWebshellLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellLogDo) FirstOrInit() (*model.WebshellLog, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellLog), nil
	}
}

func (w webshellLogDo) FirstOrCreate() (*model.WebshellLog, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellLog), nil
	}
}

func (w webshellLogDo) FindByPage(offset int, limit int) (result []*model.WebshellLog, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellLogDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellLogDo) Delete(models ...*model.WebshellLog) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellLogDo) withDO(do gen.Dao) *webshellLogDo {
	w.DO = *do.(*gen.DO)
	return w
}
