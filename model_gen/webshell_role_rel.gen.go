// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellRoleRel(db *gorm.DB, opts ...gen.DOOption) webshellRoleRel {
	_webshellRoleRel := webshellRoleRel{}

	_webshellRoleRel.webshellRoleRelDo.UseDB(db, opts...)
	_webshellRoleRel.webshellRoleRelDo.UseModel(&model.WebshellRoleRel{})

	tableName := _webshellRoleRel.webshellRoleRelDo.TableName()
	_webshellRoleRel.ALL = field.NewAsterisk(tableName)
	_webshellRoleRel.WebshellUserRoleRelid = field.NewString(tableName, "webshell_user_role_relid")
	_webshellRoleRel.UserGroupPermisionID = field.NewString(tableName, "user_group_permision_id")
	_webshellRoleRel.RoleID = field.NewString(tableName, "role_id")

	_webshellRoleRel.fillFieldMap()

	return _webshellRoleRel
}

type webshellRoleRel struct {
	webshellRoleRelDo

	ALL                   field.Asterisk
	WebshellUserRoleRelid field.String
	UserGroupPermisionID  field.String // UUID,主键
	RoleID                field.String // 角色ID

	fieldMap map[string]field.Expr
}

func (w webshellRoleRel) Table(newTableName string) *webshellRoleRel {
	w.webshellRoleRelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellRoleRel) As(alias string) *webshellRoleRel {
	w.webshellRoleRelDo.DO = *(w.webshellRoleRelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellRoleRel) updateTableName(table string) *webshellRoleRel {
	w.ALL = field.NewAsterisk(table)
	w.WebshellUserRoleRelid = field.NewString(table, "webshell_user_role_relid")
	w.UserGroupPermisionID = field.NewString(table, "user_group_permision_id")
	w.RoleID = field.NewString(table, "role_id")

	w.fillFieldMap()

	return w
}

func (w *webshellRoleRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellRoleRel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["webshell_user_role_relid"] = w.WebshellUserRoleRelid
	w.fieldMap["user_group_permision_id"] = w.UserGroupPermisionID
	w.fieldMap["role_id"] = w.RoleID
}

func (w webshellRoleRel) clone(db *gorm.DB) webshellRoleRel {
	w.webshellRoleRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellRoleRel) replaceDB(db *gorm.DB) webshellRoleRel {
	w.webshellRoleRelDo.ReplaceDB(db)
	return w
}

type webshellRoleRelDo struct{ gen.DO }

type IWebshellRoleRelDo interface {
	gen.SubQuery
	Debug() IWebshellRoleRelDo
	WithContext(ctx context.Context) IWebshellRoleRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellRoleRelDo
	WriteDB() IWebshellRoleRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellRoleRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellRoleRelDo
	Not(conds ...gen.Condition) IWebshellRoleRelDo
	Or(conds ...gen.Condition) IWebshellRoleRelDo
	Select(conds ...field.Expr) IWebshellRoleRelDo
	Where(conds ...gen.Condition) IWebshellRoleRelDo
	Order(conds ...field.Expr) IWebshellRoleRelDo
	Distinct(cols ...field.Expr) IWebshellRoleRelDo
	Omit(cols ...field.Expr) IWebshellRoleRelDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellRoleRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellRoleRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellRoleRelDo
	Group(cols ...field.Expr) IWebshellRoleRelDo
	Having(conds ...gen.Condition) IWebshellRoleRelDo
	Limit(limit int) IWebshellRoleRelDo
	Offset(offset int) IWebshellRoleRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellRoleRelDo
	Unscoped() IWebshellRoleRelDo
	Create(values ...*model.WebshellRoleRel) error
	CreateInBatches(values []*model.WebshellRoleRel, batchSize int) error
	Save(values ...*model.WebshellRoleRel) error
	First() (*model.WebshellRoleRel, error)
	Take() (*model.WebshellRoleRel, error)
	Last() (*model.WebshellRoleRel, error)
	Find() ([]*model.WebshellRoleRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellRoleRel, err error)
	FindInBatches(result *[]*model.WebshellRoleRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellRoleRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellRoleRelDo
	Assign(attrs ...field.AssignExpr) IWebshellRoleRelDo
	Joins(fields ...field.RelationField) IWebshellRoleRelDo
	Preload(fields ...field.RelationField) IWebshellRoleRelDo
	FirstOrInit() (*model.WebshellRoleRel, error)
	FirstOrCreate() (*model.WebshellRoleRel, error)
	FindByPage(offset int, limit int) (result []*model.WebshellRoleRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellRoleRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellRoleRelDo) Debug() IWebshellRoleRelDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellRoleRelDo) WithContext(ctx context.Context) IWebshellRoleRelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellRoleRelDo) ReadDB() IWebshellRoleRelDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellRoleRelDo) WriteDB() IWebshellRoleRelDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellRoleRelDo) Session(config *gorm.Session) IWebshellRoleRelDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellRoleRelDo) Clauses(conds ...clause.Expression) IWebshellRoleRelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellRoleRelDo) Returning(value interface{}, columns ...string) IWebshellRoleRelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellRoleRelDo) Not(conds ...gen.Condition) IWebshellRoleRelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellRoleRelDo) Or(conds ...gen.Condition) IWebshellRoleRelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellRoleRelDo) Select(conds ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellRoleRelDo) Where(conds ...gen.Condition) IWebshellRoleRelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellRoleRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellRoleRelDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellRoleRelDo) Order(conds ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellRoleRelDo) Distinct(cols ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellRoleRelDo) Omit(cols ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellRoleRelDo) Join(table schema.Tabler, on ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellRoleRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellRoleRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellRoleRelDo) Group(cols ...field.Expr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellRoleRelDo) Having(conds ...gen.Condition) IWebshellRoleRelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellRoleRelDo) Limit(limit int) IWebshellRoleRelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellRoleRelDo) Offset(offset int) IWebshellRoleRelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellRoleRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellRoleRelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellRoleRelDo) Unscoped() IWebshellRoleRelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellRoleRelDo) Create(values ...*model.WebshellRoleRel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellRoleRelDo) CreateInBatches(values []*model.WebshellRoleRel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellRoleRelDo) Save(values ...*model.WebshellRoleRel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellRoleRelDo) First() (*model.WebshellRoleRel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellRoleRel), nil
	}
}

func (w webshellRoleRelDo) Take() (*model.WebshellRoleRel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellRoleRel), nil
	}
}

func (w webshellRoleRelDo) Last() (*model.WebshellRoleRel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellRoleRel), nil
	}
}

func (w webshellRoleRelDo) Find() ([]*model.WebshellRoleRel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellRoleRel), err
}

func (w webshellRoleRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellRoleRel, err error) {
	buf := make([]*model.WebshellRoleRel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellRoleRelDo) FindInBatches(result *[]*model.WebshellRoleRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellRoleRelDo) Attrs(attrs ...field.AssignExpr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellRoleRelDo) Assign(attrs ...field.AssignExpr) IWebshellRoleRelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellRoleRelDo) Joins(fields ...field.RelationField) IWebshellRoleRelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellRoleRelDo) Preload(fields ...field.RelationField) IWebshellRoleRelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellRoleRelDo) FirstOrInit() (*model.WebshellRoleRel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellRoleRel), nil
	}
}

func (w webshellRoleRelDo) FirstOrCreate() (*model.WebshellRoleRel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellRoleRel), nil
	}
}

func (w webshellRoleRelDo) FindByPage(offset int, limit int) (result []*model.WebshellRoleRel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellRoleRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellRoleRelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellRoleRelDo) Delete(models ...*model.WebshellRoleRel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellRoleRelDo) withDO(do gen.Dao) *webshellRoleRelDo {
	w.DO = *do.(*gen.DO)
	return w
}
