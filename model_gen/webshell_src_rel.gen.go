// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellSrcRel(db *gorm.DB, opts ...gen.DOOption) webshellSrcRel {
	_webshellSrcRel := webshellSrcRel{}

	_webshellSrcRel.webshellSrcRelDo.UseDB(db, opts...)
	_webshellSrcRel.webshellSrcRelDo.UseModel(&model.WebshellSrcRel{})

	tableName := _webshellSrcRel.webshellSrcRelDo.TableName()
	_webshellSrcRel.ALL = field.NewAsterisk(tableName)
	_webshellSrcRel.WebshellSrcRelID = field.NewString(tableName, "webshell_src_rel_id")
	_webshellSrcRel.ServerID = field.NewString(tableName, "server_id")
	_webshellSrcRel.ServerEnvID = field.NewString(tableName, "server_env_id")
	_webshellSrcRel.UserGroupPermisionID = field.NewString(tableName, "user_group_permision_id")

	_webshellSrcRel.fillFieldMap()

	return _webshellSrcRel
}

type webshellSrcRel struct {
	webshellSrcRelDo

	ALL                  field.Asterisk
	WebshellSrcRelID     field.String
	ServerID             field.String // 主键
	ServerEnvID          field.String // 服务器分组ID
	UserGroupPermisionID field.String // UUID,主键

	fieldMap map[string]field.Expr
}

func (w webshellSrcRel) Table(newTableName string) *webshellSrcRel {
	w.webshellSrcRelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellSrcRel) As(alias string) *webshellSrcRel {
	w.webshellSrcRelDo.DO = *(w.webshellSrcRelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellSrcRel) updateTableName(table string) *webshellSrcRel {
	w.ALL = field.NewAsterisk(table)
	w.WebshellSrcRelID = field.NewString(table, "webshell_src_rel_id")
	w.ServerID = field.NewString(table, "server_id")
	w.ServerEnvID = field.NewString(table, "server_env_id")
	w.UserGroupPermisionID = field.NewString(table, "user_group_permision_id")

	w.fillFieldMap()

	return w
}

func (w *webshellSrcRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellSrcRel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["webshell_src_rel_id"] = w.WebshellSrcRelID
	w.fieldMap["server_id"] = w.ServerID
	w.fieldMap["server_env_id"] = w.ServerEnvID
	w.fieldMap["user_group_permision_id"] = w.UserGroupPermisionID
}

func (w webshellSrcRel) clone(db *gorm.DB) webshellSrcRel {
	w.webshellSrcRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellSrcRel) replaceDB(db *gorm.DB) webshellSrcRel {
	w.webshellSrcRelDo.ReplaceDB(db)
	return w
}

type webshellSrcRelDo struct{ gen.DO }

type IWebshellSrcRelDo interface {
	gen.SubQuery
	Debug() IWebshellSrcRelDo
	WithContext(ctx context.Context) IWebshellSrcRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellSrcRelDo
	WriteDB() IWebshellSrcRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellSrcRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellSrcRelDo
	Not(conds ...gen.Condition) IWebshellSrcRelDo
	Or(conds ...gen.Condition) IWebshellSrcRelDo
	Select(conds ...field.Expr) IWebshellSrcRelDo
	Where(conds ...gen.Condition) IWebshellSrcRelDo
	Order(conds ...field.Expr) IWebshellSrcRelDo
	Distinct(cols ...field.Expr) IWebshellSrcRelDo
	Omit(cols ...field.Expr) IWebshellSrcRelDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellSrcRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellSrcRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellSrcRelDo
	Group(cols ...field.Expr) IWebshellSrcRelDo
	Having(conds ...gen.Condition) IWebshellSrcRelDo
	Limit(limit int) IWebshellSrcRelDo
	Offset(offset int) IWebshellSrcRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellSrcRelDo
	Unscoped() IWebshellSrcRelDo
	Create(values ...*model.WebshellSrcRel) error
	CreateInBatches(values []*model.WebshellSrcRel, batchSize int) error
	Save(values ...*model.WebshellSrcRel) error
	First() (*model.WebshellSrcRel, error)
	Take() (*model.WebshellSrcRel, error)
	Last() (*model.WebshellSrcRel, error)
	Find() ([]*model.WebshellSrcRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellSrcRel, err error)
	FindInBatches(result *[]*model.WebshellSrcRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellSrcRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellSrcRelDo
	Assign(attrs ...field.AssignExpr) IWebshellSrcRelDo
	Joins(fields ...field.RelationField) IWebshellSrcRelDo
	Preload(fields ...field.RelationField) IWebshellSrcRelDo
	FirstOrInit() (*model.WebshellSrcRel, error)
	FirstOrCreate() (*model.WebshellSrcRel, error)
	FindByPage(offset int, limit int) (result []*model.WebshellSrcRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellSrcRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellSrcRelDo) Debug() IWebshellSrcRelDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellSrcRelDo) WithContext(ctx context.Context) IWebshellSrcRelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellSrcRelDo) ReadDB() IWebshellSrcRelDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellSrcRelDo) WriteDB() IWebshellSrcRelDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellSrcRelDo) Session(config *gorm.Session) IWebshellSrcRelDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellSrcRelDo) Clauses(conds ...clause.Expression) IWebshellSrcRelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellSrcRelDo) Returning(value interface{}, columns ...string) IWebshellSrcRelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellSrcRelDo) Not(conds ...gen.Condition) IWebshellSrcRelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellSrcRelDo) Or(conds ...gen.Condition) IWebshellSrcRelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellSrcRelDo) Select(conds ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellSrcRelDo) Where(conds ...gen.Condition) IWebshellSrcRelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellSrcRelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellSrcRelDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellSrcRelDo) Order(conds ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellSrcRelDo) Distinct(cols ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellSrcRelDo) Omit(cols ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellSrcRelDo) Join(table schema.Tabler, on ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellSrcRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellSrcRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellSrcRelDo) Group(cols ...field.Expr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellSrcRelDo) Having(conds ...gen.Condition) IWebshellSrcRelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellSrcRelDo) Limit(limit int) IWebshellSrcRelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellSrcRelDo) Offset(offset int) IWebshellSrcRelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellSrcRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellSrcRelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellSrcRelDo) Unscoped() IWebshellSrcRelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellSrcRelDo) Create(values ...*model.WebshellSrcRel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellSrcRelDo) CreateInBatches(values []*model.WebshellSrcRel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellSrcRelDo) Save(values ...*model.WebshellSrcRel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellSrcRelDo) First() (*model.WebshellSrcRel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellSrcRel), nil
	}
}

func (w webshellSrcRelDo) Take() (*model.WebshellSrcRel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellSrcRel), nil
	}
}

func (w webshellSrcRelDo) Last() (*model.WebshellSrcRel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellSrcRel), nil
	}
}

func (w webshellSrcRelDo) Find() ([]*model.WebshellSrcRel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellSrcRel), err
}

func (w webshellSrcRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellSrcRel, err error) {
	buf := make([]*model.WebshellSrcRel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellSrcRelDo) FindInBatches(result *[]*model.WebshellSrcRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellSrcRelDo) Attrs(attrs ...field.AssignExpr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellSrcRelDo) Assign(attrs ...field.AssignExpr) IWebshellSrcRelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellSrcRelDo) Joins(fields ...field.RelationField) IWebshellSrcRelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellSrcRelDo) Preload(fields ...field.RelationField) IWebshellSrcRelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellSrcRelDo) FirstOrInit() (*model.WebshellSrcRel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellSrcRel), nil
	}
}

func (w webshellSrcRelDo) FirstOrCreate() (*model.WebshellSrcRel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellSrcRel), nil
	}
}

func (w webshellSrcRelDo) FindByPage(offset int, limit int) (result []*model.WebshellSrcRel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellSrcRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellSrcRelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellSrcRelDo) Delete(models ...*model.WebshellSrcRel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellSrcRelDo) withDO(do gen.Dao) *webshellSrcRelDo {
	w.DO = *do.(*gen.DO)
	return w
}
