// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebshellToken(db *gorm.DB, opts ...gen.DOOption) webshellToken {
	_webshellToken := webshellToken{}

	_webshellToken.webshellTokenDo.UseDB(db, opts...)
	_webshellToken.webshellTokenDo.UseModel(&model.WebshellToken{})

	tableName := _webshellToken.webshellTokenDo.TableName()
	_webshellToken.ALL = field.NewAsterisk(tableName)
	_webshellToken.WebshellTokenID = field.NewString(tableName, "webshell_token_id")
	_webshellToken.Token = field.NewInt64(tableName, "token")
	_webshellToken.ServerOsUsersID = field.NewString(tableName, "server_os_users_id")
	_webshellToken.CreateTime = field.NewString(tableName, "create_time")
	_webshellToken.CreateUser = field.NewString(tableName, "create_user")
	_webshellToken.CloseTime = field.NewString(tableName, "close_time")
	_webshellToken.IsValid = field.NewString(tableName, "is_valid")

	_webshellToken.fillFieldMap()

	return _webshellToken
}

type webshellToken struct {
	webshellTokenDo

	ALL             field.Asterisk
	WebshellTokenID field.String // ID
	Token           field.Int64  // 令牌值
	ServerOsUsersID field.String // 描述
	CreateTime      field.String // datetime
	CreateUser      field.String // 添加人
	CloseTime       field.String
	IsValid         field.String

	fieldMap map[string]field.Expr
}

func (w webshellToken) Table(newTableName string) *webshellToken {
	w.webshellTokenDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webshellToken) As(alias string) *webshellToken {
	w.webshellTokenDo.DO = *(w.webshellTokenDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webshellToken) updateTableName(table string) *webshellToken {
	w.ALL = field.NewAsterisk(table)
	w.WebshellTokenID = field.NewString(table, "webshell_token_id")
	w.Token = field.NewInt64(table, "token")
	w.ServerOsUsersID = field.NewString(table, "server_os_users_id")
	w.CreateTime = field.NewString(table, "create_time")
	w.CreateUser = field.NewString(table, "create_user")
	w.CloseTime = field.NewString(table, "close_time")
	w.IsValid = field.NewString(table, "is_valid")

	w.fillFieldMap()

	return w
}

func (w *webshellToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webshellToken) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["webshell_token_id"] = w.WebshellTokenID
	w.fieldMap["token"] = w.Token
	w.fieldMap["server_os_users_id"] = w.ServerOsUsersID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["create_user"] = w.CreateUser
	w.fieldMap["close_time"] = w.CloseTime
	w.fieldMap["is_valid"] = w.IsValid
}

func (w webshellToken) clone(db *gorm.DB) webshellToken {
	w.webshellTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webshellToken) replaceDB(db *gorm.DB) webshellToken {
	w.webshellTokenDo.ReplaceDB(db)
	return w
}

type webshellTokenDo struct{ gen.DO }

type IWebshellTokenDo interface {
	gen.SubQuery
	Debug() IWebshellTokenDo
	WithContext(ctx context.Context) IWebshellTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebshellTokenDo
	WriteDB() IWebshellTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebshellTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebshellTokenDo
	Not(conds ...gen.Condition) IWebshellTokenDo
	Or(conds ...gen.Condition) IWebshellTokenDo
	Select(conds ...field.Expr) IWebshellTokenDo
	Where(conds ...gen.Condition) IWebshellTokenDo
	Order(conds ...field.Expr) IWebshellTokenDo
	Distinct(cols ...field.Expr) IWebshellTokenDo
	Omit(cols ...field.Expr) IWebshellTokenDo
	Join(table schema.Tabler, on ...field.Expr) IWebshellTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebshellTokenDo
	Group(cols ...field.Expr) IWebshellTokenDo
	Having(conds ...gen.Condition) IWebshellTokenDo
	Limit(limit int) IWebshellTokenDo
	Offset(offset int) IWebshellTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellTokenDo
	Unscoped() IWebshellTokenDo
	Create(values ...*model.WebshellToken) error
	CreateInBatches(values []*model.WebshellToken, batchSize int) error
	Save(values ...*model.WebshellToken) error
	First() (*model.WebshellToken, error)
	Take() (*model.WebshellToken, error)
	Last() (*model.WebshellToken, error)
	Find() ([]*model.WebshellToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellToken, err error)
	FindInBatches(result *[]*model.WebshellToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebshellToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebshellTokenDo
	Assign(attrs ...field.AssignExpr) IWebshellTokenDo
	Joins(fields ...field.RelationField) IWebshellTokenDo
	Preload(fields ...field.RelationField) IWebshellTokenDo
	FirstOrInit() (*model.WebshellToken, error)
	FirstOrCreate() (*model.WebshellToken, error)
	FindByPage(offset int, limit int) (result []*model.WebshellToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebshellTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webshellTokenDo) Debug() IWebshellTokenDo {
	return w.withDO(w.DO.Debug())
}

func (w webshellTokenDo) WithContext(ctx context.Context) IWebshellTokenDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webshellTokenDo) ReadDB() IWebshellTokenDo {
	return w.Clauses(dbresolver.Read)
}

func (w webshellTokenDo) WriteDB() IWebshellTokenDo {
	return w.Clauses(dbresolver.Write)
}

func (w webshellTokenDo) Session(config *gorm.Session) IWebshellTokenDo {
	return w.withDO(w.DO.Session(config))
}

func (w webshellTokenDo) Clauses(conds ...clause.Expression) IWebshellTokenDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webshellTokenDo) Returning(value interface{}, columns ...string) IWebshellTokenDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webshellTokenDo) Not(conds ...gen.Condition) IWebshellTokenDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webshellTokenDo) Or(conds ...gen.Condition) IWebshellTokenDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webshellTokenDo) Select(conds ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webshellTokenDo) Where(conds ...gen.Condition) IWebshellTokenDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webshellTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebshellTokenDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webshellTokenDo) Order(conds ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webshellTokenDo) Distinct(cols ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webshellTokenDo) Omit(cols ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webshellTokenDo) Join(table schema.Tabler, on ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webshellTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webshellTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webshellTokenDo) Group(cols ...field.Expr) IWebshellTokenDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webshellTokenDo) Having(conds ...gen.Condition) IWebshellTokenDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webshellTokenDo) Limit(limit int) IWebshellTokenDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webshellTokenDo) Offset(offset int) IWebshellTokenDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webshellTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebshellTokenDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webshellTokenDo) Unscoped() IWebshellTokenDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webshellTokenDo) Create(values ...*model.WebshellToken) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webshellTokenDo) CreateInBatches(values []*model.WebshellToken, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webshellTokenDo) Save(values ...*model.WebshellToken) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webshellTokenDo) First() (*model.WebshellToken, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellToken), nil
	}
}

func (w webshellTokenDo) Take() (*model.WebshellToken, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellToken), nil
	}
}

func (w webshellTokenDo) Last() (*model.WebshellToken, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellToken), nil
	}
}

func (w webshellTokenDo) Find() ([]*model.WebshellToken, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebshellToken), err
}

func (w webshellTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebshellToken, err error) {
	buf := make([]*model.WebshellToken, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webshellTokenDo) FindInBatches(result *[]*model.WebshellToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webshellTokenDo) Attrs(attrs ...field.AssignExpr) IWebshellTokenDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webshellTokenDo) Assign(attrs ...field.AssignExpr) IWebshellTokenDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webshellTokenDo) Joins(fields ...field.RelationField) IWebshellTokenDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webshellTokenDo) Preload(fields ...field.RelationField) IWebshellTokenDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webshellTokenDo) FirstOrInit() (*model.WebshellToken, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellToken), nil
	}
}

func (w webshellTokenDo) FirstOrCreate() (*model.WebshellToken, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebshellToken), nil
	}
}

func (w webshellTokenDo) FindByPage(offset int, limit int) (result []*model.WebshellToken, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webshellTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webshellTokenDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webshellTokenDo) Delete(models ...*model.WebshellToken) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webshellTokenDo) withDO(do gen.Dao) *webshellTokenDo {
	w.DO = *do.(*gen.DO)
	return w
}
