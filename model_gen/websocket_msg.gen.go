// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebsocketMsg(db *gorm.DB, opts ...gen.DOOption) websocketMsg {
	_websocketMsg := websocketMsg{}

	_websocketMsg.websocketMsgDo.UseDB(db, opts...)
	_websocketMsg.websocketMsgDo.UseModel(&model.WebsocketMsg{})

	tableName := _websocketMsg.websocketMsgDo.TableName()
	_websocketMsg.ALL = field.NewAsterisk(tableName)
	_websocketMsg.MsgID = field.NewString(tableName, "msg_id")
	_websocketMsg.Msg = field.NewString(tableName, "msg")
	_websocketMsg.Type = field.NewString(tableName, "type")
	_websocketMsg.SendTime = field.NewTime(tableName, "send_time")
	_websocketMsg.CreateTime = field.NewTime(tableName, "create_time")
	_websocketMsg.ModifyTime = field.NewTime(tableName, "modify_time")
	_websocketMsg.Comments = field.NewString(tableName, "comments")

	_websocketMsg.fillFieldMap()

	return _websocketMsg
}

type websocketMsg struct {
	websocketMsgDo

	ALL        field.Asterisk
	MsgID      field.String
	Msg        field.String // 客户端对象序列化
	Type       field.String
	SendTime   field.Time   // 消息发送时间
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (w websocketMsg) Table(newTableName string) *websocketMsg {
	w.websocketMsgDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w websocketMsg) As(alias string) *websocketMsg {
	w.websocketMsgDo.DO = *(w.websocketMsgDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *websocketMsg) updateTableName(table string) *websocketMsg {
	w.ALL = field.NewAsterisk(table)
	w.MsgID = field.NewString(table, "msg_id")
	w.Msg = field.NewString(table, "msg")
	w.Type = field.NewString(table, "type")
	w.SendTime = field.NewTime(table, "send_time")
	w.CreateTime = field.NewTime(table, "create_time")
	w.ModifyTime = field.NewTime(table, "modify_time")
	w.Comments = field.NewString(table, "comments")

	w.fillFieldMap()

	return w
}

func (w *websocketMsg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *websocketMsg) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["msg_id"] = w.MsgID
	w.fieldMap["msg"] = w.Msg
	w.fieldMap["type"] = w.Type
	w.fieldMap["send_time"] = w.SendTime
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["modify_time"] = w.ModifyTime
	w.fieldMap["comments"] = w.Comments
}

func (w websocketMsg) clone(db *gorm.DB) websocketMsg {
	w.websocketMsgDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w websocketMsg) replaceDB(db *gorm.DB) websocketMsg {
	w.websocketMsgDo.ReplaceDB(db)
	return w
}

type websocketMsgDo struct{ gen.DO }

type IWebsocketMsgDo interface {
	gen.SubQuery
	Debug() IWebsocketMsgDo
	WithContext(ctx context.Context) IWebsocketMsgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebsocketMsgDo
	WriteDB() IWebsocketMsgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebsocketMsgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebsocketMsgDo
	Not(conds ...gen.Condition) IWebsocketMsgDo
	Or(conds ...gen.Condition) IWebsocketMsgDo
	Select(conds ...field.Expr) IWebsocketMsgDo
	Where(conds ...gen.Condition) IWebsocketMsgDo
	Order(conds ...field.Expr) IWebsocketMsgDo
	Distinct(cols ...field.Expr) IWebsocketMsgDo
	Omit(cols ...field.Expr) IWebsocketMsgDo
	Join(table schema.Tabler, on ...field.Expr) IWebsocketMsgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgDo
	Group(cols ...field.Expr) IWebsocketMsgDo
	Having(conds ...gen.Condition) IWebsocketMsgDo
	Limit(limit int) IWebsocketMsgDo
	Offset(offset int) IWebsocketMsgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsocketMsgDo
	Unscoped() IWebsocketMsgDo
	Create(values ...*model.WebsocketMsg) error
	CreateInBatches(values []*model.WebsocketMsg, batchSize int) error
	Save(values ...*model.WebsocketMsg) error
	First() (*model.WebsocketMsg, error)
	Take() (*model.WebsocketMsg, error)
	Last() (*model.WebsocketMsg, error)
	Find() ([]*model.WebsocketMsg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsocketMsg, err error)
	FindInBatches(result *[]*model.WebsocketMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebsocketMsg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebsocketMsgDo
	Assign(attrs ...field.AssignExpr) IWebsocketMsgDo
	Joins(fields ...field.RelationField) IWebsocketMsgDo
	Preload(fields ...field.RelationField) IWebsocketMsgDo
	FirstOrInit() (*model.WebsocketMsg, error)
	FirstOrCreate() (*model.WebsocketMsg, error)
	FindByPage(offset int, limit int) (result []*model.WebsocketMsg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebsocketMsgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w websocketMsgDo) Debug() IWebsocketMsgDo {
	return w.withDO(w.DO.Debug())
}

func (w websocketMsgDo) WithContext(ctx context.Context) IWebsocketMsgDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websocketMsgDo) ReadDB() IWebsocketMsgDo {
	return w.Clauses(dbresolver.Read)
}

func (w websocketMsgDo) WriteDB() IWebsocketMsgDo {
	return w.Clauses(dbresolver.Write)
}

func (w websocketMsgDo) Session(config *gorm.Session) IWebsocketMsgDo {
	return w.withDO(w.DO.Session(config))
}

func (w websocketMsgDo) Clauses(conds ...clause.Expression) IWebsocketMsgDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websocketMsgDo) Returning(value interface{}, columns ...string) IWebsocketMsgDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websocketMsgDo) Not(conds ...gen.Condition) IWebsocketMsgDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websocketMsgDo) Or(conds ...gen.Condition) IWebsocketMsgDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websocketMsgDo) Select(conds ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websocketMsgDo) Where(conds ...gen.Condition) IWebsocketMsgDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websocketMsgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebsocketMsgDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w websocketMsgDo) Order(conds ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websocketMsgDo) Distinct(cols ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websocketMsgDo) Omit(cols ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websocketMsgDo) Join(table schema.Tabler, on ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websocketMsgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websocketMsgDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websocketMsgDo) Group(cols ...field.Expr) IWebsocketMsgDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websocketMsgDo) Having(conds ...gen.Condition) IWebsocketMsgDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websocketMsgDo) Limit(limit int) IWebsocketMsgDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websocketMsgDo) Offset(offset int) IWebsocketMsgDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websocketMsgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsocketMsgDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websocketMsgDo) Unscoped() IWebsocketMsgDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websocketMsgDo) Create(values ...*model.WebsocketMsg) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websocketMsgDo) CreateInBatches(values []*model.WebsocketMsg, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websocketMsgDo) Save(values ...*model.WebsocketMsg) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websocketMsgDo) First() (*model.WebsocketMsg, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsg), nil
	}
}

func (w websocketMsgDo) Take() (*model.WebsocketMsg, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsg), nil
	}
}

func (w websocketMsgDo) Last() (*model.WebsocketMsg, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsg), nil
	}
}

func (w websocketMsgDo) Find() ([]*model.WebsocketMsg, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebsocketMsg), err
}

func (w websocketMsgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsocketMsg, err error) {
	buf := make([]*model.WebsocketMsg, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websocketMsgDo) FindInBatches(result *[]*model.WebsocketMsg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websocketMsgDo) Attrs(attrs ...field.AssignExpr) IWebsocketMsgDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websocketMsgDo) Assign(attrs ...field.AssignExpr) IWebsocketMsgDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websocketMsgDo) Joins(fields ...field.RelationField) IWebsocketMsgDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websocketMsgDo) Preload(fields ...field.RelationField) IWebsocketMsgDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websocketMsgDo) FirstOrInit() (*model.WebsocketMsg, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsg), nil
	}
}

func (w websocketMsgDo) FirstOrCreate() (*model.WebsocketMsg, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsg), nil
	}
}

func (w websocketMsgDo) FindByPage(offset int, limit int) (result []*model.WebsocketMsg, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websocketMsgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websocketMsgDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websocketMsgDo) Delete(models ...*model.WebsocketMsg) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websocketMsgDo) withDO(do gen.Dao) *websocketMsgDo {
	w.DO = *do.(*gen.DO)
	return w
}
