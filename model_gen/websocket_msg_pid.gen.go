// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebsocketMsgPid(db *gorm.DB, opts ...gen.DOOption) websocketMsgPid {
	_websocketMsgPid := websocketMsgPid{}

	_websocketMsgPid.websocketMsgPidDo.UseDB(db, opts...)
	_websocketMsgPid.websocketMsgPidDo.UseModel(&model.WebsocketMsgPid{})

	tableName := _websocketMsgPid.websocketMsgPidDo.TableName()
	_websocketMsgPid.ALL = field.NewAsterisk(tableName)
	_websocketMsgPid.MsgID = field.NewString(tableName, "msg_id")
	_websocketMsgPid.Pid = field.NewString(tableName, "pid")
	_websocketMsgPid.ID = field.NewInt32(tableName, "id")
	_websocketMsgPid.CreateTime = field.NewTime(tableName, "create_time")
	_websocketMsgPid.ModifyTime = field.NewTime(tableName, "modify_time")
	_websocketMsgPid.Comments = field.NewString(tableName, "comments")

	_websocketMsgPid.fillFieldMap()

	return _websocketMsgPid
}

type websocketMsgPid struct {
	websocketMsgPidDo

	ALL        field.Asterisk
	MsgID      field.String // 每个进程发送记录
	Pid        field.String // 客户端对象序列化
	ID         field.Int32
	CreateTime field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime field.Time   // 记录修改时间（数据库自动写入）
	Comments   field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (w websocketMsgPid) Table(newTableName string) *websocketMsgPid {
	w.websocketMsgPidDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w websocketMsgPid) As(alias string) *websocketMsgPid {
	w.websocketMsgPidDo.DO = *(w.websocketMsgPidDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *websocketMsgPid) updateTableName(table string) *websocketMsgPid {
	w.ALL = field.NewAsterisk(table)
	w.MsgID = field.NewString(table, "msg_id")
	w.Pid = field.NewString(table, "pid")
	w.ID = field.NewInt32(table, "id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.ModifyTime = field.NewTime(table, "modify_time")
	w.Comments = field.NewString(table, "comments")

	w.fillFieldMap()

	return w
}

func (w *websocketMsgPid) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *websocketMsgPid) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["msg_id"] = w.MsgID
	w.fieldMap["pid"] = w.Pid
	w.fieldMap["id"] = w.ID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["modify_time"] = w.ModifyTime
	w.fieldMap["comments"] = w.Comments
}

func (w websocketMsgPid) clone(db *gorm.DB) websocketMsgPid {
	w.websocketMsgPidDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w websocketMsgPid) replaceDB(db *gorm.DB) websocketMsgPid {
	w.websocketMsgPidDo.ReplaceDB(db)
	return w
}

type websocketMsgPidDo struct{ gen.DO }

type IWebsocketMsgPidDo interface {
	gen.SubQuery
	Debug() IWebsocketMsgPidDo
	WithContext(ctx context.Context) IWebsocketMsgPidDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebsocketMsgPidDo
	WriteDB() IWebsocketMsgPidDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebsocketMsgPidDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebsocketMsgPidDo
	Not(conds ...gen.Condition) IWebsocketMsgPidDo
	Or(conds ...gen.Condition) IWebsocketMsgPidDo
	Select(conds ...field.Expr) IWebsocketMsgPidDo
	Where(conds ...gen.Condition) IWebsocketMsgPidDo
	Order(conds ...field.Expr) IWebsocketMsgPidDo
	Distinct(cols ...field.Expr) IWebsocketMsgPidDo
	Omit(cols ...field.Expr) IWebsocketMsgPidDo
	Join(table schema.Tabler, on ...field.Expr) IWebsocketMsgPidDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgPidDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgPidDo
	Group(cols ...field.Expr) IWebsocketMsgPidDo
	Having(conds ...gen.Condition) IWebsocketMsgPidDo
	Limit(limit int) IWebsocketMsgPidDo
	Offset(offset int) IWebsocketMsgPidDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsocketMsgPidDo
	Unscoped() IWebsocketMsgPidDo
	Create(values ...*model.WebsocketMsgPid) error
	CreateInBatches(values []*model.WebsocketMsgPid, batchSize int) error
	Save(values ...*model.WebsocketMsgPid) error
	First() (*model.WebsocketMsgPid, error)
	Take() (*model.WebsocketMsgPid, error)
	Last() (*model.WebsocketMsgPid, error)
	Find() ([]*model.WebsocketMsgPid, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsocketMsgPid, err error)
	FindInBatches(result *[]*model.WebsocketMsgPid, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebsocketMsgPid) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebsocketMsgPidDo
	Assign(attrs ...field.AssignExpr) IWebsocketMsgPidDo
	Joins(fields ...field.RelationField) IWebsocketMsgPidDo
	Preload(fields ...field.RelationField) IWebsocketMsgPidDo
	FirstOrInit() (*model.WebsocketMsgPid, error)
	FirstOrCreate() (*model.WebsocketMsgPid, error)
	FindByPage(offset int, limit int) (result []*model.WebsocketMsgPid, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebsocketMsgPidDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w websocketMsgPidDo) Debug() IWebsocketMsgPidDo {
	return w.withDO(w.DO.Debug())
}

func (w websocketMsgPidDo) WithContext(ctx context.Context) IWebsocketMsgPidDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websocketMsgPidDo) ReadDB() IWebsocketMsgPidDo {
	return w.Clauses(dbresolver.Read)
}

func (w websocketMsgPidDo) WriteDB() IWebsocketMsgPidDo {
	return w.Clauses(dbresolver.Write)
}

func (w websocketMsgPidDo) Session(config *gorm.Session) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Session(config))
}

func (w websocketMsgPidDo) Clauses(conds ...clause.Expression) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websocketMsgPidDo) Returning(value interface{}, columns ...string) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websocketMsgPidDo) Not(conds ...gen.Condition) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websocketMsgPidDo) Or(conds ...gen.Condition) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websocketMsgPidDo) Select(conds ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websocketMsgPidDo) Where(conds ...gen.Condition) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websocketMsgPidDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebsocketMsgPidDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w websocketMsgPidDo) Order(conds ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websocketMsgPidDo) Distinct(cols ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websocketMsgPidDo) Omit(cols ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websocketMsgPidDo) Join(table schema.Tabler, on ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websocketMsgPidDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websocketMsgPidDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websocketMsgPidDo) Group(cols ...field.Expr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websocketMsgPidDo) Having(conds ...gen.Condition) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websocketMsgPidDo) Limit(limit int) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websocketMsgPidDo) Offset(offset int) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websocketMsgPidDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websocketMsgPidDo) Unscoped() IWebsocketMsgPidDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websocketMsgPidDo) Create(values ...*model.WebsocketMsgPid) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websocketMsgPidDo) CreateInBatches(values []*model.WebsocketMsgPid, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websocketMsgPidDo) Save(values ...*model.WebsocketMsgPid) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websocketMsgPidDo) First() (*model.WebsocketMsgPid, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsgPid), nil
	}
}

func (w websocketMsgPidDo) Take() (*model.WebsocketMsgPid, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsgPid), nil
	}
}

func (w websocketMsgPidDo) Last() (*model.WebsocketMsgPid, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsgPid), nil
	}
}

func (w websocketMsgPidDo) Find() ([]*model.WebsocketMsgPid, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebsocketMsgPid), err
}

func (w websocketMsgPidDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsocketMsgPid, err error) {
	buf := make([]*model.WebsocketMsgPid, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websocketMsgPidDo) FindInBatches(result *[]*model.WebsocketMsgPid, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websocketMsgPidDo) Attrs(attrs ...field.AssignExpr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websocketMsgPidDo) Assign(attrs ...field.AssignExpr) IWebsocketMsgPidDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websocketMsgPidDo) Joins(fields ...field.RelationField) IWebsocketMsgPidDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websocketMsgPidDo) Preload(fields ...field.RelationField) IWebsocketMsgPidDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websocketMsgPidDo) FirstOrInit() (*model.WebsocketMsgPid, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsgPid), nil
	}
}

func (w websocketMsgPidDo) FirstOrCreate() (*model.WebsocketMsgPid, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsocketMsgPid), nil
	}
}

func (w websocketMsgPidDo) FindByPage(offset int, limit int) (result []*model.WebsocketMsgPid, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websocketMsgPidDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websocketMsgPidDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websocketMsgPidDo) Delete(models ...*model.WebsocketMsgPid) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websocketMsgPidDo) withDO(do gen.Dao) *websocketMsgPidDo {
	w.DO = *do.(*gen.DO)
	return w
}
