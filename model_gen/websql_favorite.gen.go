// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebsqlFavorite(db *gorm.DB, opts ...gen.DOOption) websqlFavorite {
	_websqlFavorite := websqlFavorite{}

	_websqlFavorite.websqlFavoriteDo.UseDB(db, opts...)
	_websqlFavorite.websqlFavoriteDo.UseModel(&model.WebsqlFavorite{})

	tableName := _websqlFavorite.websqlFavoriteDo.TableName()
	_websqlFavorite.ALL = field.NewAsterisk(tableName)
	_websqlFavorite.WebsqlFavoriteID = field.NewString(tableName, "websql_favorite_id")
	_websqlFavorite.FavoriteGroupID = field.NewString(tableName, "favorite_group_id")
	_websqlFavorite.Userid = field.NewString(tableName, "userid")
	_websqlFavorite.FavoriteName = field.NewString(tableName, "favorite_name")
	_websqlFavorite.FavoriteType = field.NewString(tableName, "favorite_type")
	_websqlFavorite.UserID = field.NewString(tableName, "user_id")
	_websqlFavorite.SqlText = field.NewString(tableName, "sql_text")
	_websqlFavorite.CreateTime = field.NewTime(tableName, "create_time")
	_websqlFavorite.ModifyTime = field.NewTime(tableName, "modify_time")
	_websqlFavorite.Comments = field.NewString(tableName, "comments")
	_websqlFavorite.Orderindex = field.NewInt32(tableName, "orderindex")

	_websqlFavorite.fillFieldMap()

	return _websqlFavorite
}

type websqlFavorite struct {
	websqlFavoriteDo

	ALL              field.Asterisk
	WebsqlFavoriteID field.String
	FavoriteGroupID  field.String
	Userid           field.String
	FavoriteName     field.String
	FavoriteType     field.String
	UserID           field.String
	SqlText          field.String
	CreateTime       field.Time
	ModifyTime       field.Time
	Comments         field.String
	Orderindex       field.Int32

	fieldMap map[string]field.Expr
}

func (w websqlFavorite) Table(newTableName string) *websqlFavorite {
	w.websqlFavoriteDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w websqlFavorite) As(alias string) *websqlFavorite {
	w.websqlFavoriteDo.DO = *(w.websqlFavoriteDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *websqlFavorite) updateTableName(table string) *websqlFavorite {
	w.ALL = field.NewAsterisk(table)
	w.WebsqlFavoriteID = field.NewString(table, "websql_favorite_id")
	w.FavoriteGroupID = field.NewString(table, "favorite_group_id")
	w.Userid = field.NewString(table, "userid")
	w.FavoriteName = field.NewString(table, "favorite_name")
	w.FavoriteType = field.NewString(table, "favorite_type")
	w.UserID = field.NewString(table, "user_id")
	w.SqlText = field.NewString(table, "sql_text")
	w.CreateTime = field.NewTime(table, "create_time")
	w.ModifyTime = field.NewTime(table, "modify_time")
	w.Comments = field.NewString(table, "comments")
	w.Orderindex = field.NewInt32(table, "orderindex")

	w.fillFieldMap()

	return w
}

func (w *websqlFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *websqlFavorite) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["websql_favorite_id"] = w.WebsqlFavoriteID
	w.fieldMap["favorite_group_id"] = w.FavoriteGroupID
	w.fieldMap["userid"] = w.Userid
	w.fieldMap["favorite_name"] = w.FavoriteName
	w.fieldMap["favorite_type"] = w.FavoriteType
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["sql_text"] = w.SqlText
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["modify_time"] = w.ModifyTime
	w.fieldMap["comments"] = w.Comments
	w.fieldMap["orderindex"] = w.Orderindex
}

func (w websqlFavorite) clone(db *gorm.DB) websqlFavorite {
	w.websqlFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w websqlFavorite) replaceDB(db *gorm.DB) websqlFavorite {
	w.websqlFavoriteDo.ReplaceDB(db)
	return w
}

type websqlFavoriteDo struct{ gen.DO }

type IWebsqlFavoriteDo interface {
	gen.SubQuery
	Debug() IWebsqlFavoriteDo
	WithContext(ctx context.Context) IWebsqlFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebsqlFavoriteDo
	WriteDB() IWebsqlFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebsqlFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebsqlFavoriteDo
	Not(conds ...gen.Condition) IWebsqlFavoriteDo
	Or(conds ...gen.Condition) IWebsqlFavoriteDo
	Select(conds ...field.Expr) IWebsqlFavoriteDo
	Where(conds ...gen.Condition) IWebsqlFavoriteDo
	Order(conds ...field.Expr) IWebsqlFavoriteDo
	Distinct(cols ...field.Expr) IWebsqlFavoriteDo
	Omit(cols ...field.Expr) IWebsqlFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteDo
	Group(cols ...field.Expr) IWebsqlFavoriteDo
	Having(conds ...gen.Condition) IWebsqlFavoriteDo
	Limit(limit int) IWebsqlFavoriteDo
	Offset(offset int) IWebsqlFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsqlFavoriteDo
	Unscoped() IWebsqlFavoriteDo
	Create(values ...*model.WebsqlFavorite) error
	CreateInBatches(values []*model.WebsqlFavorite, batchSize int) error
	Save(values ...*model.WebsqlFavorite) error
	First() (*model.WebsqlFavorite, error)
	Take() (*model.WebsqlFavorite, error)
	Last() (*model.WebsqlFavorite, error)
	Find() ([]*model.WebsqlFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsqlFavorite, err error)
	FindInBatches(result *[]*model.WebsqlFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebsqlFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebsqlFavoriteDo
	Assign(attrs ...field.AssignExpr) IWebsqlFavoriteDo
	Joins(fields ...field.RelationField) IWebsqlFavoriteDo
	Preload(fields ...field.RelationField) IWebsqlFavoriteDo
	FirstOrInit() (*model.WebsqlFavorite, error)
	FirstOrCreate() (*model.WebsqlFavorite, error)
	FindByPage(offset int, limit int) (result []*model.WebsqlFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebsqlFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w websqlFavoriteDo) Debug() IWebsqlFavoriteDo {
	return w.withDO(w.DO.Debug())
}

func (w websqlFavoriteDo) WithContext(ctx context.Context) IWebsqlFavoriteDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websqlFavoriteDo) ReadDB() IWebsqlFavoriteDo {
	return w.Clauses(dbresolver.Read)
}

func (w websqlFavoriteDo) WriteDB() IWebsqlFavoriteDo {
	return w.Clauses(dbresolver.Write)
}

func (w websqlFavoriteDo) Session(config *gorm.Session) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Session(config))
}

func (w websqlFavoriteDo) Clauses(conds ...clause.Expression) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websqlFavoriteDo) Returning(value interface{}, columns ...string) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websqlFavoriteDo) Not(conds ...gen.Condition) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websqlFavoriteDo) Or(conds ...gen.Condition) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websqlFavoriteDo) Select(conds ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websqlFavoriteDo) Where(conds ...gen.Condition) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websqlFavoriteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebsqlFavoriteDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w websqlFavoriteDo) Order(conds ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websqlFavoriteDo) Distinct(cols ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websqlFavoriteDo) Omit(cols ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websqlFavoriteDo) Join(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websqlFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websqlFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websqlFavoriteDo) Group(cols ...field.Expr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websqlFavoriteDo) Having(conds ...gen.Condition) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websqlFavoriteDo) Limit(limit int) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websqlFavoriteDo) Offset(offset int) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websqlFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websqlFavoriteDo) Unscoped() IWebsqlFavoriteDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websqlFavoriteDo) Create(values ...*model.WebsqlFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websqlFavoriteDo) CreateInBatches(values []*model.WebsqlFavorite, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websqlFavoriteDo) Save(values ...*model.WebsqlFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websqlFavoriteDo) First() (*model.WebsqlFavorite, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavorite), nil
	}
}

func (w websqlFavoriteDo) Take() (*model.WebsqlFavorite, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavorite), nil
	}
}

func (w websqlFavoriteDo) Last() (*model.WebsqlFavorite, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavorite), nil
	}
}

func (w websqlFavoriteDo) Find() ([]*model.WebsqlFavorite, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebsqlFavorite), err
}

func (w websqlFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsqlFavorite, err error) {
	buf := make([]*model.WebsqlFavorite, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websqlFavoriteDo) FindInBatches(result *[]*model.WebsqlFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websqlFavoriteDo) Attrs(attrs ...field.AssignExpr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websqlFavoriteDo) Assign(attrs ...field.AssignExpr) IWebsqlFavoriteDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websqlFavoriteDo) Joins(fields ...field.RelationField) IWebsqlFavoriteDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websqlFavoriteDo) Preload(fields ...field.RelationField) IWebsqlFavoriteDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websqlFavoriteDo) FirstOrInit() (*model.WebsqlFavorite, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavorite), nil
	}
}

func (w websqlFavoriteDo) FirstOrCreate() (*model.WebsqlFavorite, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavorite), nil
	}
}

func (w websqlFavoriteDo) FindByPage(offset int, limit int) (result []*model.WebsqlFavorite, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websqlFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websqlFavoriteDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websqlFavoriteDo) Delete(models ...*model.WebsqlFavorite) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websqlFavoriteDo) withDO(do gen.Dao) *websqlFavoriteDo {
	w.DO = *do.(*gen.DO)
	return w
}
