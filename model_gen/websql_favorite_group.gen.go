// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebsqlFavoriteGroup(db *gorm.DB, opts ...gen.DOOption) websqlFavoriteGroup {
	_websqlFavoriteGroup := websqlFavoriteGroup{}

	_websqlFavoriteGroup.websqlFavoriteGroupDo.UseDB(db, opts...)
	_websqlFavoriteGroup.websqlFavoriteGroupDo.UseModel(&model.WebsqlFavoriteGroup{})

	tableName := _websqlFavoriteGroup.websqlFavoriteGroupDo.TableName()
	_websqlFavoriteGroup.ALL = field.NewAsterisk(tableName)
	_websqlFavoriteGroup.FavoriteGroupID = field.NewString(tableName, "favorite_group_id")
	_websqlFavoriteGroup.Userid = field.NewString(tableName, "userid")
	_websqlFavoriteGroup.FavoriteGroupName = field.NewString(tableName, "favorite_group_name")
	_websqlFavoriteGroup.FavoriteGroupType = field.NewString(tableName, "favorite_group_type")
	_websqlFavoriteGroup.FavoriteGroupParentID = field.NewString(tableName, "favorite_group_parent_id")
	_websqlFavoriteGroup.FavoriteGroupOrder = field.NewInt32(tableName, "favorite_group_order")
	_websqlFavoriteGroup.CreateTime = field.NewTime(tableName, "create_time")
	_websqlFavoriteGroup.ModifyTime = field.NewTime(tableName, "modify_time")

	_websqlFavoriteGroup.fillFieldMap()

	return _websqlFavoriteGroup
}

type websqlFavoriteGroup struct {
	websqlFavoriteGroupDo

	ALL                   field.Asterisk
	FavoriteGroupID       field.String
	Userid                field.String
	FavoriteGroupName     field.String
	FavoriteGroupType     field.String
	FavoriteGroupParentID field.String
	FavoriteGroupOrder    field.Int32
	CreateTime            field.Time
	ModifyTime            field.Time

	fieldMap map[string]field.Expr
}

func (w websqlFavoriteGroup) Table(newTableName string) *websqlFavoriteGroup {
	w.websqlFavoriteGroupDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w websqlFavoriteGroup) As(alias string) *websqlFavoriteGroup {
	w.websqlFavoriteGroupDo.DO = *(w.websqlFavoriteGroupDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *websqlFavoriteGroup) updateTableName(table string) *websqlFavoriteGroup {
	w.ALL = field.NewAsterisk(table)
	w.FavoriteGroupID = field.NewString(table, "favorite_group_id")
	w.Userid = field.NewString(table, "userid")
	w.FavoriteGroupName = field.NewString(table, "favorite_group_name")
	w.FavoriteGroupType = field.NewString(table, "favorite_group_type")
	w.FavoriteGroupParentID = field.NewString(table, "favorite_group_parent_id")
	w.FavoriteGroupOrder = field.NewInt32(table, "favorite_group_order")
	w.CreateTime = field.NewTime(table, "create_time")
	w.ModifyTime = field.NewTime(table, "modify_time")

	w.fillFieldMap()

	return w
}

func (w *websqlFavoriteGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *websqlFavoriteGroup) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["favorite_group_id"] = w.FavoriteGroupID
	w.fieldMap["userid"] = w.Userid
	w.fieldMap["favorite_group_name"] = w.FavoriteGroupName
	w.fieldMap["favorite_group_type"] = w.FavoriteGroupType
	w.fieldMap["favorite_group_parent_id"] = w.FavoriteGroupParentID
	w.fieldMap["favorite_group_order"] = w.FavoriteGroupOrder
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["modify_time"] = w.ModifyTime
}

func (w websqlFavoriteGroup) clone(db *gorm.DB) websqlFavoriteGroup {
	w.websqlFavoriteGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w websqlFavoriteGroup) replaceDB(db *gorm.DB) websqlFavoriteGroup {
	w.websqlFavoriteGroupDo.ReplaceDB(db)
	return w
}

type websqlFavoriteGroupDo struct{ gen.DO }

type IWebsqlFavoriteGroupDo interface {
	gen.SubQuery
	Debug() IWebsqlFavoriteGroupDo
	WithContext(ctx context.Context) IWebsqlFavoriteGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebsqlFavoriteGroupDo
	WriteDB() IWebsqlFavoriteGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebsqlFavoriteGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebsqlFavoriteGroupDo
	Not(conds ...gen.Condition) IWebsqlFavoriteGroupDo
	Or(conds ...gen.Condition) IWebsqlFavoriteGroupDo
	Select(conds ...field.Expr) IWebsqlFavoriteGroupDo
	Where(conds ...gen.Condition) IWebsqlFavoriteGroupDo
	Order(conds ...field.Expr) IWebsqlFavoriteGroupDo
	Distinct(cols ...field.Expr) IWebsqlFavoriteGroupDo
	Omit(cols ...field.Expr) IWebsqlFavoriteGroupDo
	Join(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteGroupDo
	Group(cols ...field.Expr) IWebsqlFavoriteGroupDo
	Having(conds ...gen.Condition) IWebsqlFavoriteGroupDo
	Limit(limit int) IWebsqlFavoriteGroupDo
	Offset(offset int) IWebsqlFavoriteGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsqlFavoriteGroupDo
	Unscoped() IWebsqlFavoriteGroupDo
	Create(values ...*model.WebsqlFavoriteGroup) error
	CreateInBatches(values []*model.WebsqlFavoriteGroup, batchSize int) error
	Save(values ...*model.WebsqlFavoriteGroup) error
	First() (*model.WebsqlFavoriteGroup, error)
	Take() (*model.WebsqlFavoriteGroup, error)
	Last() (*model.WebsqlFavoriteGroup, error)
	Find() ([]*model.WebsqlFavoriteGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsqlFavoriteGroup, err error)
	FindInBatches(result *[]*model.WebsqlFavoriteGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebsqlFavoriteGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebsqlFavoriteGroupDo
	Assign(attrs ...field.AssignExpr) IWebsqlFavoriteGroupDo
	Joins(fields ...field.RelationField) IWebsqlFavoriteGroupDo
	Preload(fields ...field.RelationField) IWebsqlFavoriteGroupDo
	FirstOrInit() (*model.WebsqlFavoriteGroup, error)
	FirstOrCreate() (*model.WebsqlFavoriteGroup, error)
	FindByPage(offset int, limit int) (result []*model.WebsqlFavoriteGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebsqlFavoriteGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w websqlFavoriteGroupDo) Debug() IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Debug())
}

func (w websqlFavoriteGroupDo) WithContext(ctx context.Context) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websqlFavoriteGroupDo) ReadDB() IWebsqlFavoriteGroupDo {
	return w.Clauses(dbresolver.Read)
}

func (w websqlFavoriteGroupDo) WriteDB() IWebsqlFavoriteGroupDo {
	return w.Clauses(dbresolver.Write)
}

func (w websqlFavoriteGroupDo) Session(config *gorm.Session) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Session(config))
}

func (w websqlFavoriteGroupDo) Clauses(conds ...clause.Expression) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websqlFavoriteGroupDo) Returning(value interface{}, columns ...string) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websqlFavoriteGroupDo) Not(conds ...gen.Condition) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websqlFavoriteGroupDo) Or(conds ...gen.Condition) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websqlFavoriteGroupDo) Select(conds ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websqlFavoriteGroupDo) Where(conds ...gen.Condition) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websqlFavoriteGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebsqlFavoriteGroupDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w websqlFavoriteGroupDo) Order(conds ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websqlFavoriteGroupDo) Distinct(cols ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websqlFavoriteGroupDo) Omit(cols ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websqlFavoriteGroupDo) Join(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websqlFavoriteGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websqlFavoriteGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websqlFavoriteGroupDo) Group(cols ...field.Expr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websqlFavoriteGroupDo) Having(conds ...gen.Condition) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websqlFavoriteGroupDo) Limit(limit int) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websqlFavoriteGroupDo) Offset(offset int) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websqlFavoriteGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websqlFavoriteGroupDo) Unscoped() IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websqlFavoriteGroupDo) Create(values ...*model.WebsqlFavoriteGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websqlFavoriteGroupDo) CreateInBatches(values []*model.WebsqlFavoriteGroup, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websqlFavoriteGroupDo) Save(values ...*model.WebsqlFavoriteGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websqlFavoriteGroupDo) First() (*model.WebsqlFavoriteGroup, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavoriteGroup), nil
	}
}

func (w websqlFavoriteGroupDo) Take() (*model.WebsqlFavoriteGroup, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavoriteGroup), nil
	}
}

func (w websqlFavoriteGroupDo) Last() (*model.WebsqlFavoriteGroup, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavoriteGroup), nil
	}
}

func (w websqlFavoriteGroupDo) Find() ([]*model.WebsqlFavoriteGroup, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebsqlFavoriteGroup), err
}

func (w websqlFavoriteGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsqlFavoriteGroup, err error) {
	buf := make([]*model.WebsqlFavoriteGroup, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websqlFavoriteGroupDo) FindInBatches(result *[]*model.WebsqlFavoriteGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websqlFavoriteGroupDo) Attrs(attrs ...field.AssignExpr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websqlFavoriteGroupDo) Assign(attrs ...field.AssignExpr) IWebsqlFavoriteGroupDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websqlFavoriteGroupDo) Joins(fields ...field.RelationField) IWebsqlFavoriteGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websqlFavoriteGroupDo) Preload(fields ...field.RelationField) IWebsqlFavoriteGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websqlFavoriteGroupDo) FirstOrInit() (*model.WebsqlFavoriteGroup, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavoriteGroup), nil
	}
}

func (w websqlFavoriteGroupDo) FirstOrCreate() (*model.WebsqlFavoriteGroup, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlFavoriteGroup), nil
	}
}

func (w websqlFavoriteGroupDo) FindByPage(offset int, limit int) (result []*model.WebsqlFavoriteGroup, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websqlFavoriteGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websqlFavoriteGroupDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websqlFavoriteGroupDo) Delete(models ...*model.WebsqlFavoriteGroup) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websqlFavoriteGroupDo) withDO(do gen.Dao) *websqlFavoriteGroupDo {
	w.DO = *do.(*gen.DO)
	return w
}
