// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebsqlWatch(db *gorm.DB, opts ...gen.DOOption) websqlWatch {
	_websqlWatch := websqlWatch{}

	_websqlWatch.websqlWatchDo.UseDB(db, opts...)
	_websqlWatch.websqlWatchDo.UseModel(&model.WebsqlWatch{})

	tableName := _websqlWatch.websqlWatchDo.TableName()
	_websqlWatch.ALL = field.NewAsterisk(tableName)
	_websqlWatch.WatchID = field.NewString(tableName, "watch_id")
	_websqlWatch.Userid = field.NewString(tableName, "userid")
	_websqlWatch.InstallSoftID = field.NewString(tableName, "install_soft_id")

	_websqlWatch.fillFieldMap()

	return _websqlWatch
}

type websqlWatch struct {
	websqlWatchDo

	ALL           field.Asterisk
	WatchID       field.String
	Userid        field.String
	InstallSoftID field.String

	fieldMap map[string]field.Expr
}

func (w websqlWatch) Table(newTableName string) *websqlWatch {
	w.websqlWatchDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w websqlWatch) As(alias string) *websqlWatch {
	w.websqlWatchDo.DO = *(w.websqlWatchDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *websqlWatch) updateTableName(table string) *websqlWatch {
	w.ALL = field.NewAsterisk(table)
	w.WatchID = field.NewString(table, "watch_id")
	w.Userid = field.NewString(table, "userid")
	w.InstallSoftID = field.NewString(table, "install_soft_id")

	w.fillFieldMap()

	return w
}

func (w *websqlWatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *websqlWatch) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["watch_id"] = w.WatchID
	w.fieldMap["userid"] = w.Userid
	w.fieldMap["install_soft_id"] = w.InstallSoftID
}

func (w websqlWatch) clone(db *gorm.DB) websqlWatch {
	w.websqlWatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w websqlWatch) replaceDB(db *gorm.DB) websqlWatch {
	w.websqlWatchDo.ReplaceDB(db)
	return w
}

type websqlWatchDo struct{ gen.DO }

type IWebsqlWatchDo interface {
	gen.SubQuery
	Debug() IWebsqlWatchDo
	WithContext(ctx context.Context) IWebsqlWatchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebsqlWatchDo
	WriteDB() IWebsqlWatchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebsqlWatchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebsqlWatchDo
	Not(conds ...gen.Condition) IWebsqlWatchDo
	Or(conds ...gen.Condition) IWebsqlWatchDo
	Select(conds ...field.Expr) IWebsqlWatchDo
	Where(conds ...gen.Condition) IWebsqlWatchDo
	Order(conds ...field.Expr) IWebsqlWatchDo
	Distinct(cols ...field.Expr) IWebsqlWatchDo
	Omit(cols ...field.Expr) IWebsqlWatchDo
	Join(table schema.Tabler, on ...field.Expr) IWebsqlWatchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebsqlWatchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebsqlWatchDo
	Group(cols ...field.Expr) IWebsqlWatchDo
	Having(conds ...gen.Condition) IWebsqlWatchDo
	Limit(limit int) IWebsqlWatchDo
	Offset(offset int) IWebsqlWatchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsqlWatchDo
	Unscoped() IWebsqlWatchDo
	Create(values ...*model.WebsqlWatch) error
	CreateInBatches(values []*model.WebsqlWatch, batchSize int) error
	Save(values ...*model.WebsqlWatch) error
	First() (*model.WebsqlWatch, error)
	Take() (*model.WebsqlWatch, error)
	Last() (*model.WebsqlWatch, error)
	Find() ([]*model.WebsqlWatch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsqlWatch, err error)
	FindInBatches(result *[]*model.WebsqlWatch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebsqlWatch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebsqlWatchDo
	Assign(attrs ...field.AssignExpr) IWebsqlWatchDo
	Joins(fields ...field.RelationField) IWebsqlWatchDo
	Preload(fields ...field.RelationField) IWebsqlWatchDo
	FirstOrInit() (*model.WebsqlWatch, error)
	FirstOrCreate() (*model.WebsqlWatch, error)
	FindByPage(offset int, limit int) (result []*model.WebsqlWatch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebsqlWatchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w websqlWatchDo) Debug() IWebsqlWatchDo {
	return w.withDO(w.DO.Debug())
}

func (w websqlWatchDo) WithContext(ctx context.Context) IWebsqlWatchDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w websqlWatchDo) ReadDB() IWebsqlWatchDo {
	return w.Clauses(dbresolver.Read)
}

func (w websqlWatchDo) WriteDB() IWebsqlWatchDo {
	return w.Clauses(dbresolver.Write)
}

func (w websqlWatchDo) Session(config *gorm.Session) IWebsqlWatchDo {
	return w.withDO(w.DO.Session(config))
}

func (w websqlWatchDo) Clauses(conds ...clause.Expression) IWebsqlWatchDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w websqlWatchDo) Returning(value interface{}, columns ...string) IWebsqlWatchDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w websqlWatchDo) Not(conds ...gen.Condition) IWebsqlWatchDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w websqlWatchDo) Or(conds ...gen.Condition) IWebsqlWatchDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w websqlWatchDo) Select(conds ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w websqlWatchDo) Where(conds ...gen.Condition) IWebsqlWatchDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w websqlWatchDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebsqlWatchDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w websqlWatchDo) Order(conds ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w websqlWatchDo) Distinct(cols ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w websqlWatchDo) Omit(cols ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w websqlWatchDo) Join(table schema.Tabler, on ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w websqlWatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w websqlWatchDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w websqlWatchDo) Group(cols ...field.Expr) IWebsqlWatchDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w websqlWatchDo) Having(conds ...gen.Condition) IWebsqlWatchDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w websqlWatchDo) Limit(limit int) IWebsqlWatchDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w websqlWatchDo) Offset(offset int) IWebsqlWatchDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w websqlWatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebsqlWatchDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w websqlWatchDo) Unscoped() IWebsqlWatchDo {
	return w.withDO(w.DO.Unscoped())
}

func (w websqlWatchDo) Create(values ...*model.WebsqlWatch) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w websqlWatchDo) CreateInBatches(values []*model.WebsqlWatch, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w websqlWatchDo) Save(values ...*model.WebsqlWatch) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w websqlWatchDo) First() (*model.WebsqlWatch, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlWatch), nil
	}
}

func (w websqlWatchDo) Take() (*model.WebsqlWatch, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlWatch), nil
	}
}

func (w websqlWatchDo) Last() (*model.WebsqlWatch, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlWatch), nil
	}
}

func (w websqlWatchDo) Find() ([]*model.WebsqlWatch, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebsqlWatch), err
}

func (w websqlWatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebsqlWatch, err error) {
	buf := make([]*model.WebsqlWatch, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w websqlWatchDo) FindInBatches(result *[]*model.WebsqlWatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w websqlWatchDo) Attrs(attrs ...field.AssignExpr) IWebsqlWatchDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w websqlWatchDo) Assign(attrs ...field.AssignExpr) IWebsqlWatchDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w websqlWatchDo) Joins(fields ...field.RelationField) IWebsqlWatchDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w websqlWatchDo) Preload(fields ...field.RelationField) IWebsqlWatchDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w websqlWatchDo) FirstOrInit() (*model.WebsqlWatch, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlWatch), nil
	}
}

func (w websqlWatchDo) FirstOrCreate() (*model.WebsqlWatch, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebsqlWatch), nil
	}
}

func (w websqlWatchDo) FindByPage(offset int, limit int) (result []*model.WebsqlWatch, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w websqlWatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w websqlWatchDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w websqlWatchDo) Delete(models ...*model.WebsqlWatch) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *websqlWatchDo) withDO(do gen.Dao) *websqlWatchDo {
	w.DO = *do.(*gen.DO)
	return w
}
