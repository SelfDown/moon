// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWebterminalEvent(db *gorm.DB, opts ...gen.DOOption) webterminalEvent {
	_webterminalEvent := webterminalEvent{}

	_webterminalEvent.webterminalEventDo.UseDB(db, opts...)
	_webterminalEvent.webterminalEventDo.UseModel(&model.WebterminalEvent{})

	tableName := _webterminalEvent.webterminalEventDo.TableName()
	_webterminalEvent.ALL = field.NewAsterisk(tableName)
	_webterminalEvent.WebterminalEventID = field.NewString(tableName, "webterminal_event_id")
	_webterminalEvent.WebterminalEventCode = field.NewString(tableName, "webterminal_event_code")
	_webterminalEvent.WebterminalEventDetail2 = field.NewString(tableName, "webterminal_event_detail2")
	_webterminalEvent.WebterminalEventDetail = field.NewString(tableName, "webterminal_event_detail")
	_webterminalEvent.CreateTime = field.NewTime(tableName, "create_time")
	_webterminalEvent.ModifyTime = field.NewTime(tableName, "modify_time")
	_webterminalEvent.Comments = field.NewString(tableName, "comments")
	_webterminalEvent.OpUser = field.NewString(tableName, "op_user")
	_webterminalEvent.OrderWeight = field.NewInt64(tableName, "order_weight")

	_webterminalEvent.fillFieldMap()

	return _webterminalEvent
}

type webterminalEvent struct {
	webterminalEventDo

	ALL                field.Asterisk
	WebterminalEventID field.String // UUID,主键
	/*
		事件类型，见码表 sys_code_type='webterminal_event'

	*/
	WebterminalEventCode    field.String
	WebterminalEventDetail2 field.String // 事件操作细节
	WebterminalEventDetail  field.String // 事件操作细节
	CreateTime              field.Time   // 记录创建时间（数据库自动写入）
	ModifyTime              field.Time   // 记录修改时间（数据库自动写入）
	Comments                field.String // 备注说明
	OpUser                  field.String // 操作人，登录系统人，可能是代为审批人，所以记录下来
	OrderWeight             field.Int64  // 用来排序

	fieldMap map[string]field.Expr
}

func (w webterminalEvent) Table(newTableName string) *webterminalEvent {
	w.webterminalEventDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w webterminalEvent) As(alias string) *webterminalEvent {
	w.webterminalEventDo.DO = *(w.webterminalEventDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *webterminalEvent) updateTableName(table string) *webterminalEvent {
	w.ALL = field.NewAsterisk(table)
	w.WebterminalEventID = field.NewString(table, "webterminal_event_id")
	w.WebterminalEventCode = field.NewString(table, "webterminal_event_code")
	w.WebterminalEventDetail2 = field.NewString(table, "webterminal_event_detail2")
	w.WebterminalEventDetail = field.NewString(table, "webterminal_event_detail")
	w.CreateTime = field.NewTime(table, "create_time")
	w.ModifyTime = field.NewTime(table, "modify_time")
	w.Comments = field.NewString(table, "comments")
	w.OpUser = field.NewString(table, "op_user")
	w.OrderWeight = field.NewInt64(table, "order_weight")

	w.fillFieldMap()

	return w
}

func (w *webterminalEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *webterminalEvent) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["webterminal_event_id"] = w.WebterminalEventID
	w.fieldMap["webterminal_event_code"] = w.WebterminalEventCode
	w.fieldMap["webterminal_event_detail2"] = w.WebterminalEventDetail2
	w.fieldMap["webterminal_event_detail"] = w.WebterminalEventDetail
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["modify_time"] = w.ModifyTime
	w.fieldMap["comments"] = w.Comments
	w.fieldMap["op_user"] = w.OpUser
	w.fieldMap["order_weight"] = w.OrderWeight
}

func (w webterminalEvent) clone(db *gorm.DB) webterminalEvent {
	w.webterminalEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w webterminalEvent) replaceDB(db *gorm.DB) webterminalEvent {
	w.webterminalEventDo.ReplaceDB(db)
	return w
}

type webterminalEventDo struct{ gen.DO }

type IWebterminalEventDo interface {
	gen.SubQuery
	Debug() IWebterminalEventDo
	WithContext(ctx context.Context) IWebterminalEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWebterminalEventDo
	WriteDB() IWebterminalEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWebterminalEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWebterminalEventDo
	Not(conds ...gen.Condition) IWebterminalEventDo
	Or(conds ...gen.Condition) IWebterminalEventDo
	Select(conds ...field.Expr) IWebterminalEventDo
	Where(conds ...gen.Condition) IWebterminalEventDo
	Order(conds ...field.Expr) IWebterminalEventDo
	Distinct(cols ...field.Expr) IWebterminalEventDo
	Omit(cols ...field.Expr) IWebterminalEventDo
	Join(table schema.Tabler, on ...field.Expr) IWebterminalEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWebterminalEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWebterminalEventDo
	Group(cols ...field.Expr) IWebterminalEventDo
	Having(conds ...gen.Condition) IWebterminalEventDo
	Limit(limit int) IWebterminalEventDo
	Offset(offset int) IWebterminalEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWebterminalEventDo
	Unscoped() IWebterminalEventDo
	Create(values ...*model.WebterminalEvent) error
	CreateInBatches(values []*model.WebterminalEvent, batchSize int) error
	Save(values ...*model.WebterminalEvent) error
	First() (*model.WebterminalEvent, error)
	Take() (*model.WebterminalEvent, error)
	Last() (*model.WebterminalEvent, error)
	Find() ([]*model.WebterminalEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebterminalEvent, err error)
	FindInBatches(result *[]*model.WebterminalEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WebterminalEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWebterminalEventDo
	Assign(attrs ...field.AssignExpr) IWebterminalEventDo
	Joins(fields ...field.RelationField) IWebterminalEventDo
	Preload(fields ...field.RelationField) IWebterminalEventDo
	FirstOrInit() (*model.WebterminalEvent, error)
	FirstOrCreate() (*model.WebterminalEvent, error)
	FindByPage(offset int, limit int) (result []*model.WebterminalEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWebterminalEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w webterminalEventDo) Debug() IWebterminalEventDo {
	return w.withDO(w.DO.Debug())
}

func (w webterminalEventDo) WithContext(ctx context.Context) IWebterminalEventDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w webterminalEventDo) ReadDB() IWebterminalEventDo {
	return w.Clauses(dbresolver.Read)
}

func (w webterminalEventDo) WriteDB() IWebterminalEventDo {
	return w.Clauses(dbresolver.Write)
}

func (w webterminalEventDo) Session(config *gorm.Session) IWebterminalEventDo {
	return w.withDO(w.DO.Session(config))
}

func (w webterminalEventDo) Clauses(conds ...clause.Expression) IWebterminalEventDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w webterminalEventDo) Returning(value interface{}, columns ...string) IWebterminalEventDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w webterminalEventDo) Not(conds ...gen.Condition) IWebterminalEventDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w webterminalEventDo) Or(conds ...gen.Condition) IWebterminalEventDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w webterminalEventDo) Select(conds ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w webterminalEventDo) Where(conds ...gen.Condition) IWebterminalEventDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w webterminalEventDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWebterminalEventDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w webterminalEventDo) Order(conds ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w webterminalEventDo) Distinct(cols ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w webterminalEventDo) Omit(cols ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w webterminalEventDo) Join(table schema.Tabler, on ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w webterminalEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w webterminalEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w webterminalEventDo) Group(cols ...field.Expr) IWebterminalEventDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w webterminalEventDo) Having(conds ...gen.Condition) IWebterminalEventDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w webterminalEventDo) Limit(limit int) IWebterminalEventDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w webterminalEventDo) Offset(offset int) IWebterminalEventDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w webterminalEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWebterminalEventDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w webterminalEventDo) Unscoped() IWebterminalEventDo {
	return w.withDO(w.DO.Unscoped())
}

func (w webterminalEventDo) Create(values ...*model.WebterminalEvent) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w webterminalEventDo) CreateInBatches(values []*model.WebterminalEvent, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w webterminalEventDo) Save(values ...*model.WebterminalEvent) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w webterminalEventDo) First() (*model.WebterminalEvent, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebterminalEvent), nil
	}
}

func (w webterminalEventDo) Take() (*model.WebterminalEvent, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebterminalEvent), nil
	}
}

func (w webterminalEventDo) Last() (*model.WebterminalEvent, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebterminalEvent), nil
	}
}

func (w webterminalEventDo) Find() ([]*model.WebterminalEvent, error) {
	result, err := w.DO.Find()
	return result.([]*model.WebterminalEvent), err
}

func (w webterminalEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WebterminalEvent, err error) {
	buf := make([]*model.WebterminalEvent, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w webterminalEventDo) FindInBatches(result *[]*model.WebterminalEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w webterminalEventDo) Attrs(attrs ...field.AssignExpr) IWebterminalEventDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w webterminalEventDo) Assign(attrs ...field.AssignExpr) IWebterminalEventDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w webterminalEventDo) Joins(fields ...field.RelationField) IWebterminalEventDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w webterminalEventDo) Preload(fields ...field.RelationField) IWebterminalEventDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w webterminalEventDo) FirstOrInit() (*model.WebterminalEvent, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebterminalEvent), nil
	}
}

func (w webterminalEventDo) FirstOrCreate() (*model.WebterminalEvent, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WebterminalEvent), nil
	}
}

func (w webterminalEventDo) FindByPage(offset int, limit int) (result []*model.WebterminalEvent, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w webterminalEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w webterminalEventDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w webterminalEventDo) Delete(models ...*model.WebterminalEvent) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *webterminalEventDo) withDO(do gen.Dao) *webterminalEventDo {
	w.DO = *do.(*gen.DO)
	return w
}
