// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWechatConfig(db *gorm.DB, opts ...gen.DOOption) wechatConfig {
	_wechatConfig := wechatConfig{}

	_wechatConfig.wechatConfigDo.UseDB(db, opts...)
	_wechatConfig.wechatConfigDo.UseModel(&model.WechatConfig{})

	tableName := _wechatConfig.wechatConfigDo.TableName()
	_wechatConfig.ALL = field.NewAsterisk(tableName)
	_wechatConfig.WechatID = field.NewInt32(tableName, "wechat_id")
	_wechatConfig.Corpid = field.NewString(tableName, "corpid")
	_wechatConfig.Corpsecret = field.NewString(tableName, "corpsecret")
	_wechatConfig.Agentid = field.NewString(tableName, "agentid")
	_wechatConfig.Toparty = field.NewString(tableName, "toparty")
	_wechatConfig.Touser = field.NewString(tableName, "touser")
	_wechatConfig.Comment = field.NewString(tableName, "comment")

	_wechatConfig.fillFieldMap()

	return _wechatConfig
}

type wechatConfig struct {
	wechatConfigDo

	ALL        field.Asterisk
	WechatID   field.Int32
	Corpid     field.String // 企业id
	Corpsecret field.String // 企业秘钥
	Agentid    field.String // 订阅号id
	Toparty    field.String // 部门id列表 | 分隔
	Touser     field.String // 用户id列表 | 分隔
	Comment    field.String

	fieldMap map[string]field.Expr
}

func (w wechatConfig) Table(newTableName string) *wechatConfig {
	w.wechatConfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wechatConfig) As(alias string) *wechatConfig {
	w.wechatConfigDo.DO = *(w.wechatConfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wechatConfig) updateTableName(table string) *wechatConfig {
	w.ALL = field.NewAsterisk(table)
	w.WechatID = field.NewInt32(table, "wechat_id")
	w.Corpid = field.NewString(table, "corpid")
	w.Corpsecret = field.NewString(table, "corpsecret")
	w.Agentid = field.NewString(table, "agentid")
	w.Toparty = field.NewString(table, "toparty")
	w.Touser = field.NewString(table, "touser")
	w.Comment = field.NewString(table, "comment")

	w.fillFieldMap()

	return w
}

func (w *wechatConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wechatConfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["wechat_id"] = w.WechatID
	w.fieldMap["corpid"] = w.Corpid
	w.fieldMap["corpsecret"] = w.Corpsecret
	w.fieldMap["agentid"] = w.Agentid
	w.fieldMap["toparty"] = w.Toparty
	w.fieldMap["touser"] = w.Touser
	w.fieldMap["comment"] = w.Comment
}

func (w wechatConfig) clone(db *gorm.DB) wechatConfig {
	w.wechatConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wechatConfig) replaceDB(db *gorm.DB) wechatConfig {
	w.wechatConfigDo.ReplaceDB(db)
	return w
}

type wechatConfigDo struct{ gen.DO }

type IWechatConfigDo interface {
	gen.SubQuery
	Debug() IWechatConfigDo
	WithContext(ctx context.Context) IWechatConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWechatConfigDo
	WriteDB() IWechatConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWechatConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWechatConfigDo
	Not(conds ...gen.Condition) IWechatConfigDo
	Or(conds ...gen.Condition) IWechatConfigDo
	Select(conds ...field.Expr) IWechatConfigDo
	Where(conds ...gen.Condition) IWechatConfigDo
	Order(conds ...field.Expr) IWechatConfigDo
	Distinct(cols ...field.Expr) IWechatConfigDo
	Omit(cols ...field.Expr) IWechatConfigDo
	Join(table schema.Tabler, on ...field.Expr) IWechatConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWechatConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWechatConfigDo
	Group(cols ...field.Expr) IWechatConfigDo
	Having(conds ...gen.Condition) IWechatConfigDo
	Limit(limit int) IWechatConfigDo
	Offset(offset int) IWechatConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatConfigDo
	Unscoped() IWechatConfigDo
	Create(values ...*model.WechatConfig) error
	CreateInBatches(values []*model.WechatConfig, batchSize int) error
	Save(values ...*model.WechatConfig) error
	First() (*model.WechatConfig, error)
	Take() (*model.WechatConfig, error)
	Last() (*model.WechatConfig, error)
	Find() ([]*model.WechatConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatConfig, err error)
	FindInBatches(result *[]*model.WechatConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WechatConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWechatConfigDo
	Assign(attrs ...field.AssignExpr) IWechatConfigDo
	Joins(fields ...field.RelationField) IWechatConfigDo
	Preload(fields ...field.RelationField) IWechatConfigDo
	FirstOrInit() (*model.WechatConfig, error)
	FirstOrCreate() (*model.WechatConfig, error)
	FindByPage(offset int, limit int) (result []*model.WechatConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWechatConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wechatConfigDo) Debug() IWechatConfigDo {
	return w.withDO(w.DO.Debug())
}

func (w wechatConfigDo) WithContext(ctx context.Context) IWechatConfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wechatConfigDo) ReadDB() IWechatConfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w wechatConfigDo) WriteDB() IWechatConfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w wechatConfigDo) Session(config *gorm.Session) IWechatConfigDo {
	return w.withDO(w.DO.Session(config))
}

func (w wechatConfigDo) Clauses(conds ...clause.Expression) IWechatConfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wechatConfigDo) Returning(value interface{}, columns ...string) IWechatConfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wechatConfigDo) Not(conds ...gen.Condition) IWechatConfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wechatConfigDo) Or(conds ...gen.Condition) IWechatConfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wechatConfigDo) Select(conds ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wechatConfigDo) Where(conds ...gen.Condition) IWechatConfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wechatConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWechatConfigDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wechatConfigDo) Order(conds ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wechatConfigDo) Distinct(cols ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wechatConfigDo) Omit(cols ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wechatConfigDo) Join(table schema.Tabler, on ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wechatConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wechatConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wechatConfigDo) Group(cols ...field.Expr) IWechatConfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wechatConfigDo) Having(conds ...gen.Condition) IWechatConfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wechatConfigDo) Limit(limit int) IWechatConfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wechatConfigDo) Offset(offset int) IWechatConfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wechatConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatConfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wechatConfigDo) Unscoped() IWechatConfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wechatConfigDo) Create(values ...*model.WechatConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wechatConfigDo) CreateInBatches(values []*model.WechatConfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wechatConfigDo) Save(values ...*model.WechatConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wechatConfigDo) First() (*model.WechatConfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatConfig), nil
	}
}

func (w wechatConfigDo) Take() (*model.WechatConfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatConfig), nil
	}
}

func (w wechatConfigDo) Last() (*model.WechatConfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatConfig), nil
	}
}

func (w wechatConfigDo) Find() ([]*model.WechatConfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WechatConfig), err
}

func (w wechatConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatConfig, err error) {
	buf := make([]*model.WechatConfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wechatConfigDo) FindInBatches(result *[]*model.WechatConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wechatConfigDo) Attrs(attrs ...field.AssignExpr) IWechatConfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wechatConfigDo) Assign(attrs ...field.AssignExpr) IWechatConfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wechatConfigDo) Joins(fields ...field.RelationField) IWechatConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wechatConfigDo) Preload(fields ...field.RelationField) IWechatConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wechatConfigDo) FirstOrInit() (*model.WechatConfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatConfig), nil
	}
}

func (w wechatConfigDo) FirstOrCreate() (*model.WechatConfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatConfig), nil
	}
}

func (w wechatConfigDo) FindByPage(offset int, limit int) (result []*model.WechatConfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wechatConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wechatConfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wechatConfigDo) Delete(models ...*model.WechatConfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wechatConfigDo) withDO(do gen.Dao) *wechatConfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
