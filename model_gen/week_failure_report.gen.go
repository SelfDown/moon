// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWeekFailureReport(db *gorm.DB, opts ...gen.DOOption) weekFailureReport {
	_weekFailureReport := weekFailureReport{}

	_weekFailureReport.weekFailureReportDo.UseDB(db, opts...)
	_weekFailureReport.weekFailureReportDo.UseModel(&model.WeekFailureReport{})

	tableName := _weekFailureReport.weekFailureReportDo.TableName()
	_weekFailureReport.ALL = field.NewAsterisk(tableName)
	_weekFailureReport.WeekFailureReportID = field.NewString(tableName, "week_failure_report_id")
	_weekFailureReport.BeanReportID = field.NewString(tableName, "bean_report_id")
	_weekFailureReport.FailureReportID = field.NewString(tableName, "failure_report_id")

	_weekFailureReport.fillFieldMap()

	return _weekFailureReport
}

type weekFailureReport struct {
	weekFailureReportDo

	ALL                 field.Asterisk
	WeekFailureReportID field.String
	BeanReportID        field.String
	FailureReportID     field.String

	fieldMap map[string]field.Expr
}

func (w weekFailureReport) Table(newTableName string) *weekFailureReport {
	w.weekFailureReportDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weekFailureReport) As(alias string) *weekFailureReport {
	w.weekFailureReportDo.DO = *(w.weekFailureReportDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weekFailureReport) updateTableName(table string) *weekFailureReport {
	w.ALL = field.NewAsterisk(table)
	w.WeekFailureReportID = field.NewString(table, "week_failure_report_id")
	w.BeanReportID = field.NewString(table, "bean_report_id")
	w.FailureReportID = field.NewString(table, "failure_report_id")

	w.fillFieldMap()

	return w
}

func (w *weekFailureReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weekFailureReport) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["week_failure_report_id"] = w.WeekFailureReportID
	w.fieldMap["bean_report_id"] = w.BeanReportID
	w.fieldMap["failure_report_id"] = w.FailureReportID
}

func (w weekFailureReport) clone(db *gorm.DB) weekFailureReport {
	w.weekFailureReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weekFailureReport) replaceDB(db *gorm.DB) weekFailureReport {
	w.weekFailureReportDo.ReplaceDB(db)
	return w
}

type weekFailureReportDo struct{ gen.DO }

type IWeekFailureReportDo interface {
	gen.SubQuery
	Debug() IWeekFailureReportDo
	WithContext(ctx context.Context) IWeekFailureReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWeekFailureReportDo
	WriteDB() IWeekFailureReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWeekFailureReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWeekFailureReportDo
	Not(conds ...gen.Condition) IWeekFailureReportDo
	Or(conds ...gen.Condition) IWeekFailureReportDo
	Select(conds ...field.Expr) IWeekFailureReportDo
	Where(conds ...gen.Condition) IWeekFailureReportDo
	Order(conds ...field.Expr) IWeekFailureReportDo
	Distinct(cols ...field.Expr) IWeekFailureReportDo
	Omit(cols ...field.Expr) IWeekFailureReportDo
	Join(table schema.Tabler, on ...field.Expr) IWeekFailureReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWeekFailureReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWeekFailureReportDo
	Group(cols ...field.Expr) IWeekFailureReportDo
	Having(conds ...gen.Condition) IWeekFailureReportDo
	Limit(limit int) IWeekFailureReportDo
	Offset(offset int) IWeekFailureReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWeekFailureReportDo
	Unscoped() IWeekFailureReportDo
	Create(values ...*model.WeekFailureReport) error
	CreateInBatches(values []*model.WeekFailureReport, batchSize int) error
	Save(values ...*model.WeekFailureReport) error
	First() (*model.WeekFailureReport, error)
	Take() (*model.WeekFailureReport, error)
	Last() (*model.WeekFailureReport, error)
	Find() ([]*model.WeekFailureReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeekFailureReport, err error)
	FindInBatches(result *[]*model.WeekFailureReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WeekFailureReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWeekFailureReportDo
	Assign(attrs ...field.AssignExpr) IWeekFailureReportDo
	Joins(fields ...field.RelationField) IWeekFailureReportDo
	Preload(fields ...field.RelationField) IWeekFailureReportDo
	FirstOrInit() (*model.WeekFailureReport, error)
	FirstOrCreate() (*model.WeekFailureReport, error)
	FindByPage(offset int, limit int) (result []*model.WeekFailureReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWeekFailureReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w weekFailureReportDo) Debug() IWeekFailureReportDo {
	return w.withDO(w.DO.Debug())
}

func (w weekFailureReportDo) WithContext(ctx context.Context) IWeekFailureReportDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weekFailureReportDo) ReadDB() IWeekFailureReportDo {
	return w.Clauses(dbresolver.Read)
}

func (w weekFailureReportDo) WriteDB() IWeekFailureReportDo {
	return w.Clauses(dbresolver.Write)
}

func (w weekFailureReportDo) Session(config *gorm.Session) IWeekFailureReportDo {
	return w.withDO(w.DO.Session(config))
}

func (w weekFailureReportDo) Clauses(conds ...clause.Expression) IWeekFailureReportDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weekFailureReportDo) Returning(value interface{}, columns ...string) IWeekFailureReportDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weekFailureReportDo) Not(conds ...gen.Condition) IWeekFailureReportDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weekFailureReportDo) Or(conds ...gen.Condition) IWeekFailureReportDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weekFailureReportDo) Select(conds ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weekFailureReportDo) Where(conds ...gen.Condition) IWeekFailureReportDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weekFailureReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWeekFailureReportDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w weekFailureReportDo) Order(conds ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weekFailureReportDo) Distinct(cols ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weekFailureReportDo) Omit(cols ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weekFailureReportDo) Join(table schema.Tabler, on ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weekFailureReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weekFailureReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weekFailureReportDo) Group(cols ...field.Expr) IWeekFailureReportDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weekFailureReportDo) Having(conds ...gen.Condition) IWeekFailureReportDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weekFailureReportDo) Limit(limit int) IWeekFailureReportDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weekFailureReportDo) Offset(offset int) IWeekFailureReportDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weekFailureReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWeekFailureReportDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weekFailureReportDo) Unscoped() IWeekFailureReportDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weekFailureReportDo) Create(values ...*model.WeekFailureReport) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weekFailureReportDo) CreateInBatches(values []*model.WeekFailureReport, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weekFailureReportDo) Save(values ...*model.WeekFailureReport) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weekFailureReportDo) First() (*model.WeekFailureReport, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekFailureReport), nil
	}
}

func (w weekFailureReportDo) Take() (*model.WeekFailureReport, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekFailureReport), nil
	}
}

func (w weekFailureReportDo) Last() (*model.WeekFailureReport, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekFailureReport), nil
	}
}

func (w weekFailureReportDo) Find() ([]*model.WeekFailureReport, error) {
	result, err := w.DO.Find()
	return result.([]*model.WeekFailureReport), err
}

func (w weekFailureReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeekFailureReport, err error) {
	buf := make([]*model.WeekFailureReport, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weekFailureReportDo) FindInBatches(result *[]*model.WeekFailureReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weekFailureReportDo) Attrs(attrs ...field.AssignExpr) IWeekFailureReportDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weekFailureReportDo) Assign(attrs ...field.AssignExpr) IWeekFailureReportDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weekFailureReportDo) Joins(fields ...field.RelationField) IWeekFailureReportDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weekFailureReportDo) Preload(fields ...field.RelationField) IWeekFailureReportDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weekFailureReportDo) FirstOrInit() (*model.WeekFailureReport, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekFailureReport), nil
	}
}

func (w weekFailureReportDo) FirstOrCreate() (*model.WeekFailureReport, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekFailureReport), nil
	}
}

func (w weekFailureReportDo) FindByPage(offset int, limit int) (result []*model.WeekFailureReport, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weekFailureReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weekFailureReportDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weekFailureReportDo) Delete(models ...*model.WeekFailureReport) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weekFailureReportDo) withDO(do gen.Dao) *weekFailureReportDo {
	w.DO = *do.(*gen.DO)
	return w
}
