// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWeekIssueRecord(db *gorm.DB, opts ...gen.DOOption) weekIssueRecord {
	_weekIssueRecord := weekIssueRecord{}

	_weekIssueRecord.weekIssueRecordDo.UseDB(db, opts...)
	_weekIssueRecord.weekIssueRecordDo.UseModel(&model.WeekIssueRecord{})

	tableName := _weekIssueRecord.weekIssueRecordDo.TableName()
	_weekIssueRecord.ALL = field.NewAsterisk(tableName)
	_weekIssueRecord.WeekIssueRecordID = field.NewString(tableName, "week_issue_record_id")
	_weekIssueRecord.BeanReportID = field.NewString(tableName, "bean_report_id")
	_weekIssueRecord.ReqIssueRecordID = field.NewString(tableName, "req_issue_record_id")

	_weekIssueRecord.fillFieldMap()

	return _weekIssueRecord
}

type weekIssueRecord struct {
	weekIssueRecordDo

	ALL               field.Asterisk
	WeekIssueRecordID field.String
	BeanReportID      field.String
	ReqIssueRecordID  field.String

	fieldMap map[string]field.Expr
}

func (w weekIssueRecord) Table(newTableName string) *weekIssueRecord {
	w.weekIssueRecordDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weekIssueRecord) As(alias string) *weekIssueRecord {
	w.weekIssueRecordDo.DO = *(w.weekIssueRecordDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weekIssueRecord) updateTableName(table string) *weekIssueRecord {
	w.ALL = field.NewAsterisk(table)
	w.WeekIssueRecordID = field.NewString(table, "week_issue_record_id")
	w.BeanReportID = field.NewString(table, "bean_report_id")
	w.ReqIssueRecordID = field.NewString(table, "req_issue_record_id")

	w.fillFieldMap()

	return w
}

func (w *weekIssueRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weekIssueRecord) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["week_issue_record_id"] = w.WeekIssueRecordID
	w.fieldMap["bean_report_id"] = w.BeanReportID
	w.fieldMap["req_issue_record_id"] = w.ReqIssueRecordID
}

func (w weekIssueRecord) clone(db *gorm.DB) weekIssueRecord {
	w.weekIssueRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weekIssueRecord) replaceDB(db *gorm.DB) weekIssueRecord {
	w.weekIssueRecordDo.ReplaceDB(db)
	return w
}

type weekIssueRecordDo struct{ gen.DO }

type IWeekIssueRecordDo interface {
	gen.SubQuery
	Debug() IWeekIssueRecordDo
	WithContext(ctx context.Context) IWeekIssueRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWeekIssueRecordDo
	WriteDB() IWeekIssueRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWeekIssueRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWeekIssueRecordDo
	Not(conds ...gen.Condition) IWeekIssueRecordDo
	Or(conds ...gen.Condition) IWeekIssueRecordDo
	Select(conds ...field.Expr) IWeekIssueRecordDo
	Where(conds ...gen.Condition) IWeekIssueRecordDo
	Order(conds ...field.Expr) IWeekIssueRecordDo
	Distinct(cols ...field.Expr) IWeekIssueRecordDo
	Omit(cols ...field.Expr) IWeekIssueRecordDo
	Join(table schema.Tabler, on ...field.Expr) IWeekIssueRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWeekIssueRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWeekIssueRecordDo
	Group(cols ...field.Expr) IWeekIssueRecordDo
	Having(conds ...gen.Condition) IWeekIssueRecordDo
	Limit(limit int) IWeekIssueRecordDo
	Offset(offset int) IWeekIssueRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWeekIssueRecordDo
	Unscoped() IWeekIssueRecordDo
	Create(values ...*model.WeekIssueRecord) error
	CreateInBatches(values []*model.WeekIssueRecord, batchSize int) error
	Save(values ...*model.WeekIssueRecord) error
	First() (*model.WeekIssueRecord, error)
	Take() (*model.WeekIssueRecord, error)
	Last() (*model.WeekIssueRecord, error)
	Find() ([]*model.WeekIssueRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeekIssueRecord, err error)
	FindInBatches(result *[]*model.WeekIssueRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WeekIssueRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWeekIssueRecordDo
	Assign(attrs ...field.AssignExpr) IWeekIssueRecordDo
	Joins(fields ...field.RelationField) IWeekIssueRecordDo
	Preload(fields ...field.RelationField) IWeekIssueRecordDo
	FirstOrInit() (*model.WeekIssueRecord, error)
	FirstOrCreate() (*model.WeekIssueRecord, error)
	FindByPage(offset int, limit int) (result []*model.WeekIssueRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWeekIssueRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w weekIssueRecordDo) Debug() IWeekIssueRecordDo {
	return w.withDO(w.DO.Debug())
}

func (w weekIssueRecordDo) WithContext(ctx context.Context) IWeekIssueRecordDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weekIssueRecordDo) ReadDB() IWeekIssueRecordDo {
	return w.Clauses(dbresolver.Read)
}

func (w weekIssueRecordDo) WriteDB() IWeekIssueRecordDo {
	return w.Clauses(dbresolver.Write)
}

func (w weekIssueRecordDo) Session(config *gorm.Session) IWeekIssueRecordDo {
	return w.withDO(w.DO.Session(config))
}

func (w weekIssueRecordDo) Clauses(conds ...clause.Expression) IWeekIssueRecordDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weekIssueRecordDo) Returning(value interface{}, columns ...string) IWeekIssueRecordDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weekIssueRecordDo) Not(conds ...gen.Condition) IWeekIssueRecordDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weekIssueRecordDo) Or(conds ...gen.Condition) IWeekIssueRecordDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weekIssueRecordDo) Select(conds ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weekIssueRecordDo) Where(conds ...gen.Condition) IWeekIssueRecordDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weekIssueRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWeekIssueRecordDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w weekIssueRecordDo) Order(conds ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weekIssueRecordDo) Distinct(cols ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weekIssueRecordDo) Omit(cols ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weekIssueRecordDo) Join(table schema.Tabler, on ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weekIssueRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weekIssueRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weekIssueRecordDo) Group(cols ...field.Expr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weekIssueRecordDo) Having(conds ...gen.Condition) IWeekIssueRecordDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weekIssueRecordDo) Limit(limit int) IWeekIssueRecordDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weekIssueRecordDo) Offset(offset int) IWeekIssueRecordDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weekIssueRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWeekIssueRecordDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weekIssueRecordDo) Unscoped() IWeekIssueRecordDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weekIssueRecordDo) Create(values ...*model.WeekIssueRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weekIssueRecordDo) CreateInBatches(values []*model.WeekIssueRecord, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weekIssueRecordDo) Save(values ...*model.WeekIssueRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weekIssueRecordDo) First() (*model.WeekIssueRecord, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekIssueRecord), nil
	}
}

func (w weekIssueRecordDo) Take() (*model.WeekIssueRecord, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekIssueRecord), nil
	}
}

func (w weekIssueRecordDo) Last() (*model.WeekIssueRecord, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekIssueRecord), nil
	}
}

func (w weekIssueRecordDo) Find() ([]*model.WeekIssueRecord, error) {
	result, err := w.DO.Find()
	return result.([]*model.WeekIssueRecord), err
}

func (w weekIssueRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeekIssueRecord, err error) {
	buf := make([]*model.WeekIssueRecord, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weekIssueRecordDo) FindInBatches(result *[]*model.WeekIssueRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weekIssueRecordDo) Attrs(attrs ...field.AssignExpr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weekIssueRecordDo) Assign(attrs ...field.AssignExpr) IWeekIssueRecordDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weekIssueRecordDo) Joins(fields ...field.RelationField) IWeekIssueRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weekIssueRecordDo) Preload(fields ...field.RelationField) IWeekIssueRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weekIssueRecordDo) FirstOrInit() (*model.WeekIssueRecord, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekIssueRecord), nil
	}
}

func (w weekIssueRecordDo) FirstOrCreate() (*model.WeekIssueRecord, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekIssueRecord), nil
	}
}

func (w weekIssueRecordDo) FindByPage(offset int, limit int) (result []*model.WeekIssueRecord, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weekIssueRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weekIssueRecordDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weekIssueRecordDo) Delete(models ...*model.WeekIssueRecord) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weekIssueRecordDo) withDO(do gen.Dao) *weekIssueRecordDo {
	w.DO = *do.(*gen.DO)
	return w
}
