// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWeekPublishReq(db *gorm.DB, opts ...gen.DOOption) weekPublishReq {
	_weekPublishReq := weekPublishReq{}

	_weekPublishReq.weekPublishReqDo.UseDB(db, opts...)
	_weekPublishReq.weekPublishReqDo.UseModel(&model.WeekPublishReq{})

	tableName := _weekPublishReq.weekPublishReqDo.TableName()
	_weekPublishReq.ALL = field.NewAsterisk(tableName)
	_weekPublishReq.WeekPublishReqID = field.NewString(tableName, "week_publish_req_id")
	_weekPublishReq.BeanReportID = field.NewString(tableName, "bean_report_id")
	_weekPublishReq.ReqID = field.NewString(tableName, "req_id")

	_weekPublishReq.fillFieldMap()

	return _weekPublishReq
}

type weekPublishReq struct {
	weekPublishReqDo

	ALL              field.Asterisk
	WeekPublishReqID field.String
	BeanReportID     field.String
	ReqID            field.String

	fieldMap map[string]field.Expr
}

func (w weekPublishReq) Table(newTableName string) *weekPublishReq {
	w.weekPublishReqDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weekPublishReq) As(alias string) *weekPublishReq {
	w.weekPublishReqDo.DO = *(w.weekPublishReqDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weekPublishReq) updateTableName(table string) *weekPublishReq {
	w.ALL = field.NewAsterisk(table)
	w.WeekPublishReqID = field.NewString(table, "week_publish_req_id")
	w.BeanReportID = field.NewString(table, "bean_report_id")
	w.ReqID = field.NewString(table, "req_id")

	w.fillFieldMap()

	return w
}

func (w *weekPublishReq) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weekPublishReq) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["week_publish_req_id"] = w.WeekPublishReqID
	w.fieldMap["bean_report_id"] = w.BeanReportID
	w.fieldMap["req_id"] = w.ReqID
}

func (w weekPublishReq) clone(db *gorm.DB) weekPublishReq {
	w.weekPublishReqDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weekPublishReq) replaceDB(db *gorm.DB) weekPublishReq {
	w.weekPublishReqDo.ReplaceDB(db)
	return w
}

type weekPublishReqDo struct{ gen.DO }

type IWeekPublishReqDo interface {
	gen.SubQuery
	Debug() IWeekPublishReqDo
	WithContext(ctx context.Context) IWeekPublishReqDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWeekPublishReqDo
	WriteDB() IWeekPublishReqDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWeekPublishReqDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWeekPublishReqDo
	Not(conds ...gen.Condition) IWeekPublishReqDo
	Or(conds ...gen.Condition) IWeekPublishReqDo
	Select(conds ...field.Expr) IWeekPublishReqDo
	Where(conds ...gen.Condition) IWeekPublishReqDo
	Order(conds ...field.Expr) IWeekPublishReqDo
	Distinct(cols ...field.Expr) IWeekPublishReqDo
	Omit(cols ...field.Expr) IWeekPublishReqDo
	Join(table schema.Tabler, on ...field.Expr) IWeekPublishReqDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWeekPublishReqDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWeekPublishReqDo
	Group(cols ...field.Expr) IWeekPublishReqDo
	Having(conds ...gen.Condition) IWeekPublishReqDo
	Limit(limit int) IWeekPublishReqDo
	Offset(offset int) IWeekPublishReqDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWeekPublishReqDo
	Unscoped() IWeekPublishReqDo
	Create(values ...*model.WeekPublishReq) error
	CreateInBatches(values []*model.WeekPublishReq, batchSize int) error
	Save(values ...*model.WeekPublishReq) error
	First() (*model.WeekPublishReq, error)
	Take() (*model.WeekPublishReq, error)
	Last() (*model.WeekPublishReq, error)
	Find() ([]*model.WeekPublishReq, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeekPublishReq, err error)
	FindInBatches(result *[]*model.WeekPublishReq, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WeekPublishReq) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWeekPublishReqDo
	Assign(attrs ...field.AssignExpr) IWeekPublishReqDo
	Joins(fields ...field.RelationField) IWeekPublishReqDo
	Preload(fields ...field.RelationField) IWeekPublishReqDo
	FirstOrInit() (*model.WeekPublishReq, error)
	FirstOrCreate() (*model.WeekPublishReq, error)
	FindByPage(offset int, limit int) (result []*model.WeekPublishReq, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWeekPublishReqDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w weekPublishReqDo) Debug() IWeekPublishReqDo {
	return w.withDO(w.DO.Debug())
}

func (w weekPublishReqDo) WithContext(ctx context.Context) IWeekPublishReqDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weekPublishReqDo) ReadDB() IWeekPublishReqDo {
	return w.Clauses(dbresolver.Read)
}

func (w weekPublishReqDo) WriteDB() IWeekPublishReqDo {
	return w.Clauses(dbresolver.Write)
}

func (w weekPublishReqDo) Session(config *gorm.Session) IWeekPublishReqDo {
	return w.withDO(w.DO.Session(config))
}

func (w weekPublishReqDo) Clauses(conds ...clause.Expression) IWeekPublishReqDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weekPublishReqDo) Returning(value interface{}, columns ...string) IWeekPublishReqDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weekPublishReqDo) Not(conds ...gen.Condition) IWeekPublishReqDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weekPublishReqDo) Or(conds ...gen.Condition) IWeekPublishReqDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weekPublishReqDo) Select(conds ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weekPublishReqDo) Where(conds ...gen.Condition) IWeekPublishReqDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weekPublishReqDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWeekPublishReqDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w weekPublishReqDo) Order(conds ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weekPublishReqDo) Distinct(cols ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weekPublishReqDo) Omit(cols ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weekPublishReqDo) Join(table schema.Tabler, on ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weekPublishReqDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weekPublishReqDo) RightJoin(table schema.Tabler, on ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weekPublishReqDo) Group(cols ...field.Expr) IWeekPublishReqDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weekPublishReqDo) Having(conds ...gen.Condition) IWeekPublishReqDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weekPublishReqDo) Limit(limit int) IWeekPublishReqDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weekPublishReqDo) Offset(offset int) IWeekPublishReqDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weekPublishReqDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWeekPublishReqDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weekPublishReqDo) Unscoped() IWeekPublishReqDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weekPublishReqDo) Create(values ...*model.WeekPublishReq) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weekPublishReqDo) CreateInBatches(values []*model.WeekPublishReq, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weekPublishReqDo) Save(values ...*model.WeekPublishReq) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weekPublishReqDo) First() (*model.WeekPublishReq, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekPublishReq), nil
	}
}

func (w weekPublishReqDo) Take() (*model.WeekPublishReq, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekPublishReq), nil
	}
}

func (w weekPublishReqDo) Last() (*model.WeekPublishReq, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekPublishReq), nil
	}
}

func (w weekPublishReqDo) Find() ([]*model.WeekPublishReq, error) {
	result, err := w.DO.Find()
	return result.([]*model.WeekPublishReq), err
}

func (w weekPublishReqDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeekPublishReq, err error) {
	buf := make([]*model.WeekPublishReq, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weekPublishReqDo) FindInBatches(result *[]*model.WeekPublishReq, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weekPublishReqDo) Attrs(attrs ...field.AssignExpr) IWeekPublishReqDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weekPublishReqDo) Assign(attrs ...field.AssignExpr) IWeekPublishReqDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weekPublishReqDo) Joins(fields ...field.RelationField) IWeekPublishReqDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weekPublishReqDo) Preload(fields ...field.RelationField) IWeekPublishReqDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weekPublishReqDo) FirstOrInit() (*model.WeekPublishReq, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekPublishReq), nil
	}
}

func (w weekPublishReqDo) FirstOrCreate() (*model.WeekPublishReq, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeekPublishReq), nil
	}
}

func (w weekPublishReqDo) FindByPage(offset int, limit int) (result []*model.WeekPublishReq, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weekPublishReqDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weekPublishReqDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weekPublishReqDo) Delete(models ...*model.WeekPublishReq) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weekPublishReqDo) withDO(do gen.Dao) *weekPublishReqDo {
	w.DO = *do.(*gen.DO)
	return w
}
