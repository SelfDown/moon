// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newWorkStationDuty(db *gorm.DB, opts ...gen.DOOption) workStationDuty {
	_workStationDuty := workStationDuty{}

	_workStationDuty.workStationDutyDo.UseDB(db, opts...)
	_workStationDuty.workStationDutyDo.UseModel(&model.WorkStationDuty{})

	tableName := _workStationDuty.workStationDutyDo.TableName()
	_workStationDuty.ALL = field.NewAsterisk(tableName)
	_workStationDuty.WorkStationDutyID = field.NewString(tableName, "work_station_duty_id")
	_workStationDuty.WorkStation = field.NewString(tableName, "work_station")
	_workStationDuty.DutyTeam = field.NewString(tableName, "duty_team")
	_workStationDuty.DutyUser = field.NewString(tableName, "duty_user")
	_workStationDuty.CreateTime = field.NewString(tableName, "create_time")

	_workStationDuty.fillFieldMap()

	return _workStationDuty
}

type workStationDuty struct {
	workStationDutyDo

	ALL               field.Asterisk
	WorkStationDutyID field.String
	WorkStation       field.String
	DutyTeam          field.String // 标题
	DutyUser          field.String
	CreateTime        field.String

	fieldMap map[string]field.Expr
}

func (w workStationDuty) Table(newTableName string) *workStationDuty {
	w.workStationDutyDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workStationDuty) As(alias string) *workStationDuty {
	w.workStationDutyDo.DO = *(w.workStationDutyDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workStationDuty) updateTableName(table string) *workStationDuty {
	w.ALL = field.NewAsterisk(table)
	w.WorkStationDutyID = field.NewString(table, "work_station_duty_id")
	w.WorkStation = field.NewString(table, "work_station")
	w.DutyTeam = field.NewString(table, "duty_team")
	w.DutyUser = field.NewString(table, "duty_user")
	w.CreateTime = field.NewString(table, "create_time")

	w.fillFieldMap()

	return w
}

func (w *workStationDuty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workStationDuty) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["work_station_duty_id"] = w.WorkStationDutyID
	w.fieldMap["work_station"] = w.WorkStation
	w.fieldMap["duty_team"] = w.DutyTeam
	w.fieldMap["duty_user"] = w.DutyUser
	w.fieldMap["create_time"] = w.CreateTime
}

func (w workStationDuty) clone(db *gorm.DB) workStationDuty {
	w.workStationDutyDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w workStationDuty) replaceDB(db *gorm.DB) workStationDuty {
	w.workStationDutyDo.ReplaceDB(db)
	return w
}

type workStationDutyDo struct{ gen.DO }

type IWorkStationDutyDo interface {
	gen.SubQuery
	Debug() IWorkStationDutyDo
	WithContext(ctx context.Context) IWorkStationDutyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkStationDutyDo
	WriteDB() IWorkStationDutyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkStationDutyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkStationDutyDo
	Not(conds ...gen.Condition) IWorkStationDutyDo
	Or(conds ...gen.Condition) IWorkStationDutyDo
	Select(conds ...field.Expr) IWorkStationDutyDo
	Where(conds ...gen.Condition) IWorkStationDutyDo
	Order(conds ...field.Expr) IWorkStationDutyDo
	Distinct(cols ...field.Expr) IWorkStationDutyDo
	Omit(cols ...field.Expr) IWorkStationDutyDo
	Join(table schema.Tabler, on ...field.Expr) IWorkStationDutyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkStationDutyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkStationDutyDo
	Group(cols ...field.Expr) IWorkStationDutyDo
	Having(conds ...gen.Condition) IWorkStationDutyDo
	Limit(limit int) IWorkStationDutyDo
	Offset(offset int) IWorkStationDutyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkStationDutyDo
	Unscoped() IWorkStationDutyDo
	Create(values ...*model.WorkStationDuty) error
	CreateInBatches(values []*model.WorkStationDuty, batchSize int) error
	Save(values ...*model.WorkStationDuty) error
	First() (*model.WorkStationDuty, error)
	Take() (*model.WorkStationDuty, error)
	Last() (*model.WorkStationDuty, error)
	Find() ([]*model.WorkStationDuty, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkStationDuty, err error)
	FindInBatches(result *[]*model.WorkStationDuty, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WorkStationDuty) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkStationDutyDo
	Assign(attrs ...field.AssignExpr) IWorkStationDutyDo
	Joins(fields ...field.RelationField) IWorkStationDutyDo
	Preload(fields ...field.RelationField) IWorkStationDutyDo
	FirstOrInit() (*model.WorkStationDuty, error)
	FirstOrCreate() (*model.WorkStationDuty, error)
	FindByPage(offset int, limit int) (result []*model.WorkStationDuty, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkStationDutyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workStationDutyDo) Debug() IWorkStationDutyDo {
	return w.withDO(w.DO.Debug())
}

func (w workStationDutyDo) WithContext(ctx context.Context) IWorkStationDutyDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workStationDutyDo) ReadDB() IWorkStationDutyDo {
	return w.Clauses(dbresolver.Read)
}

func (w workStationDutyDo) WriteDB() IWorkStationDutyDo {
	return w.Clauses(dbresolver.Write)
}

func (w workStationDutyDo) Session(config *gorm.Session) IWorkStationDutyDo {
	return w.withDO(w.DO.Session(config))
}

func (w workStationDutyDo) Clauses(conds ...clause.Expression) IWorkStationDutyDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workStationDutyDo) Returning(value interface{}, columns ...string) IWorkStationDutyDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workStationDutyDo) Not(conds ...gen.Condition) IWorkStationDutyDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workStationDutyDo) Or(conds ...gen.Condition) IWorkStationDutyDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workStationDutyDo) Select(conds ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workStationDutyDo) Where(conds ...gen.Condition) IWorkStationDutyDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workStationDutyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IWorkStationDutyDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w workStationDutyDo) Order(conds ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workStationDutyDo) Distinct(cols ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workStationDutyDo) Omit(cols ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workStationDutyDo) Join(table schema.Tabler, on ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workStationDutyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workStationDutyDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workStationDutyDo) Group(cols ...field.Expr) IWorkStationDutyDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workStationDutyDo) Having(conds ...gen.Condition) IWorkStationDutyDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workStationDutyDo) Limit(limit int) IWorkStationDutyDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workStationDutyDo) Offset(offset int) IWorkStationDutyDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workStationDutyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkStationDutyDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workStationDutyDo) Unscoped() IWorkStationDutyDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workStationDutyDo) Create(values ...*model.WorkStationDuty) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workStationDutyDo) CreateInBatches(values []*model.WorkStationDuty, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workStationDutyDo) Save(values ...*model.WorkStationDuty) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workStationDutyDo) First() (*model.WorkStationDuty, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkStationDuty), nil
	}
}

func (w workStationDutyDo) Take() (*model.WorkStationDuty, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkStationDuty), nil
	}
}

func (w workStationDutyDo) Last() (*model.WorkStationDuty, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkStationDuty), nil
	}
}

func (w workStationDutyDo) Find() ([]*model.WorkStationDuty, error) {
	result, err := w.DO.Find()
	return result.([]*model.WorkStationDuty), err
}

func (w workStationDutyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WorkStationDuty, err error) {
	buf := make([]*model.WorkStationDuty, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workStationDutyDo) FindInBatches(result *[]*model.WorkStationDuty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workStationDutyDo) Attrs(attrs ...field.AssignExpr) IWorkStationDutyDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workStationDutyDo) Assign(attrs ...field.AssignExpr) IWorkStationDutyDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workStationDutyDo) Joins(fields ...field.RelationField) IWorkStationDutyDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workStationDutyDo) Preload(fields ...field.RelationField) IWorkStationDutyDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workStationDutyDo) FirstOrInit() (*model.WorkStationDuty, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkStationDuty), nil
	}
}

func (w workStationDutyDo) FirstOrCreate() (*model.WorkStationDuty, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WorkStationDuty), nil
	}
}

func (w workStationDutyDo) FindByPage(offset int, limit int) (result []*model.WorkStationDuty, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workStationDutyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workStationDutyDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workStationDutyDo) Delete(models ...*model.WorkStationDuty) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workStationDutyDo) withDO(do gen.Dao) *workStationDutyDo {
	w.DO = *do.(*gen.DO)
	return w
}
