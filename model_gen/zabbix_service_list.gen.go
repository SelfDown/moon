// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model_gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"moon/model"
)

func newZabbixServiceList(db *gorm.DB, opts ...gen.DOOption) zabbixServiceList {
	_zabbixServiceList := zabbixServiceList{}

	_zabbixServiceList.zabbixServiceListDo.UseDB(db, opts...)
	_zabbixServiceList.zabbixServiceListDo.UseModel(&model.ZabbixServiceList{})

	tableName := _zabbixServiceList.zabbixServiceListDo.TableName()
	_zabbixServiceList.ALL = field.NewAsterisk(tableName)
	_zabbixServiceList.ZabbixServiceID = field.NewInt32(tableName, "zabbix_service_id")
	_zabbixServiceList.ZabbixServiceAPI = field.NewString(tableName, "zabbix_service_api")
	_zabbixServiceList.ZabbixAdminUser = field.NewString(tableName, "zabbix_admin_user")
	_zabbixServiceList.ZabbixAdminPwd = field.NewString(tableName, "zabbix_admin_pwd")
	_zabbixServiceList.CreateTime = field.NewTime(tableName, "create_time")
	_zabbixServiceList.ModifyTime = field.NewTime(tableName, "modify_time")
	_zabbixServiceList.Comments = field.NewString(tableName, "comments")

	_zabbixServiceList.fillFieldMap()

	return _zabbixServiceList
}

type zabbixServiceList struct {
	zabbixServiceListDo

	ALL              field.Asterisk
	ZabbixServiceID  field.Int32  // zabbix-server id
	ZabbixServiceAPI field.String // zabbix api
	ZabbixAdminUser  field.String // zabbix 管理员用户
	ZabbixAdminPwd   field.String // zabbix管理员密码
	CreateTime       field.Time   // 记录创建时间（数据库自动写入
	ModifyTime       field.Time   // 记录修改时间（数据库自动写入）
	Comments         field.String // 备注说明

	fieldMap map[string]field.Expr
}

func (z zabbixServiceList) Table(newTableName string) *zabbixServiceList {
	z.zabbixServiceListDo.UseTable(newTableName)
	return z.updateTableName(newTableName)
}

func (z zabbixServiceList) As(alias string) *zabbixServiceList {
	z.zabbixServiceListDo.DO = *(z.zabbixServiceListDo.As(alias).(*gen.DO))
	return z.updateTableName(alias)
}

func (z *zabbixServiceList) updateTableName(table string) *zabbixServiceList {
	z.ALL = field.NewAsterisk(table)
	z.ZabbixServiceID = field.NewInt32(table, "zabbix_service_id")
	z.ZabbixServiceAPI = field.NewString(table, "zabbix_service_api")
	z.ZabbixAdminUser = field.NewString(table, "zabbix_admin_user")
	z.ZabbixAdminPwd = field.NewString(table, "zabbix_admin_pwd")
	z.CreateTime = field.NewTime(table, "create_time")
	z.ModifyTime = field.NewTime(table, "modify_time")
	z.Comments = field.NewString(table, "comments")

	z.fillFieldMap()

	return z
}

func (z *zabbixServiceList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := z.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (z *zabbixServiceList) fillFieldMap() {
	z.fieldMap = make(map[string]field.Expr, 7)
	z.fieldMap["zabbix_service_id"] = z.ZabbixServiceID
	z.fieldMap["zabbix_service_api"] = z.ZabbixServiceAPI
	z.fieldMap["zabbix_admin_user"] = z.ZabbixAdminUser
	z.fieldMap["zabbix_admin_pwd"] = z.ZabbixAdminPwd
	z.fieldMap["create_time"] = z.CreateTime
	z.fieldMap["modify_time"] = z.ModifyTime
	z.fieldMap["comments"] = z.Comments
}

func (z zabbixServiceList) clone(db *gorm.DB) zabbixServiceList {
	z.zabbixServiceListDo.ReplaceConnPool(db.Statement.ConnPool)
	return z
}

func (z zabbixServiceList) replaceDB(db *gorm.DB) zabbixServiceList {
	z.zabbixServiceListDo.ReplaceDB(db)
	return z
}

type zabbixServiceListDo struct{ gen.DO }

type IZabbixServiceListDo interface {
	gen.SubQuery
	Debug() IZabbixServiceListDo
	WithContext(ctx context.Context) IZabbixServiceListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IZabbixServiceListDo
	WriteDB() IZabbixServiceListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IZabbixServiceListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IZabbixServiceListDo
	Not(conds ...gen.Condition) IZabbixServiceListDo
	Or(conds ...gen.Condition) IZabbixServiceListDo
	Select(conds ...field.Expr) IZabbixServiceListDo
	Where(conds ...gen.Condition) IZabbixServiceListDo
	Order(conds ...field.Expr) IZabbixServiceListDo
	Distinct(cols ...field.Expr) IZabbixServiceListDo
	Omit(cols ...field.Expr) IZabbixServiceListDo
	Join(table schema.Tabler, on ...field.Expr) IZabbixServiceListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IZabbixServiceListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IZabbixServiceListDo
	Group(cols ...field.Expr) IZabbixServiceListDo
	Having(conds ...gen.Condition) IZabbixServiceListDo
	Limit(limit int) IZabbixServiceListDo
	Offset(offset int) IZabbixServiceListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IZabbixServiceListDo
	Unscoped() IZabbixServiceListDo
	Create(values ...*model.ZabbixServiceList) error
	CreateInBatches(values []*model.ZabbixServiceList, batchSize int) error
	Save(values ...*model.ZabbixServiceList) error
	First() (*model.ZabbixServiceList, error)
	Take() (*model.ZabbixServiceList, error)
	Last() (*model.ZabbixServiceList, error)
	Find() ([]*model.ZabbixServiceList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ZabbixServiceList, err error)
	FindInBatches(result *[]*model.ZabbixServiceList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ZabbixServiceList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IZabbixServiceListDo
	Assign(attrs ...field.AssignExpr) IZabbixServiceListDo
	Joins(fields ...field.RelationField) IZabbixServiceListDo
	Preload(fields ...field.RelationField) IZabbixServiceListDo
	FirstOrInit() (*model.ZabbixServiceList, error)
	FirstOrCreate() (*model.ZabbixServiceList, error)
	FindByPage(offset int, limit int) (result []*model.ZabbixServiceList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IZabbixServiceListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (z zabbixServiceListDo) Debug() IZabbixServiceListDo {
	return z.withDO(z.DO.Debug())
}

func (z zabbixServiceListDo) WithContext(ctx context.Context) IZabbixServiceListDo {
	return z.withDO(z.DO.WithContext(ctx))
}

func (z zabbixServiceListDo) ReadDB() IZabbixServiceListDo {
	return z.Clauses(dbresolver.Read)
}

func (z zabbixServiceListDo) WriteDB() IZabbixServiceListDo {
	return z.Clauses(dbresolver.Write)
}

func (z zabbixServiceListDo) Session(config *gorm.Session) IZabbixServiceListDo {
	return z.withDO(z.DO.Session(config))
}

func (z zabbixServiceListDo) Clauses(conds ...clause.Expression) IZabbixServiceListDo {
	return z.withDO(z.DO.Clauses(conds...))
}

func (z zabbixServiceListDo) Returning(value interface{}, columns ...string) IZabbixServiceListDo {
	return z.withDO(z.DO.Returning(value, columns...))
}

func (z zabbixServiceListDo) Not(conds ...gen.Condition) IZabbixServiceListDo {
	return z.withDO(z.DO.Not(conds...))
}

func (z zabbixServiceListDo) Or(conds ...gen.Condition) IZabbixServiceListDo {
	return z.withDO(z.DO.Or(conds...))
}

func (z zabbixServiceListDo) Select(conds ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.Select(conds...))
}

func (z zabbixServiceListDo) Where(conds ...gen.Condition) IZabbixServiceListDo {
	return z.withDO(z.DO.Where(conds...))
}

func (z zabbixServiceListDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IZabbixServiceListDo {
	return z.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (z zabbixServiceListDo) Order(conds ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.Order(conds...))
}

func (z zabbixServiceListDo) Distinct(cols ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.Distinct(cols...))
}

func (z zabbixServiceListDo) Omit(cols ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.Omit(cols...))
}

func (z zabbixServiceListDo) Join(table schema.Tabler, on ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.Join(table, on...))
}

func (z zabbixServiceListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.LeftJoin(table, on...))
}

func (z zabbixServiceListDo) RightJoin(table schema.Tabler, on ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.RightJoin(table, on...))
}

func (z zabbixServiceListDo) Group(cols ...field.Expr) IZabbixServiceListDo {
	return z.withDO(z.DO.Group(cols...))
}

func (z zabbixServiceListDo) Having(conds ...gen.Condition) IZabbixServiceListDo {
	return z.withDO(z.DO.Having(conds...))
}

func (z zabbixServiceListDo) Limit(limit int) IZabbixServiceListDo {
	return z.withDO(z.DO.Limit(limit))
}

func (z zabbixServiceListDo) Offset(offset int) IZabbixServiceListDo {
	return z.withDO(z.DO.Offset(offset))
}

func (z zabbixServiceListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IZabbixServiceListDo {
	return z.withDO(z.DO.Scopes(funcs...))
}

func (z zabbixServiceListDo) Unscoped() IZabbixServiceListDo {
	return z.withDO(z.DO.Unscoped())
}

func (z zabbixServiceListDo) Create(values ...*model.ZabbixServiceList) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Create(values)
}

func (z zabbixServiceListDo) CreateInBatches(values []*model.ZabbixServiceList, batchSize int) error {
	return z.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (z zabbixServiceListDo) Save(values ...*model.ZabbixServiceList) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Save(values)
}

func (z zabbixServiceListDo) First() (*model.ZabbixServiceList, error) {
	if result, err := z.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZabbixServiceList), nil
	}
}

func (z zabbixServiceListDo) Take() (*model.ZabbixServiceList, error) {
	if result, err := z.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZabbixServiceList), nil
	}
}

func (z zabbixServiceListDo) Last() (*model.ZabbixServiceList, error) {
	if result, err := z.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZabbixServiceList), nil
	}
}

func (z zabbixServiceListDo) Find() ([]*model.ZabbixServiceList, error) {
	result, err := z.DO.Find()
	return result.([]*model.ZabbixServiceList), err
}

func (z zabbixServiceListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ZabbixServiceList, err error) {
	buf := make([]*model.ZabbixServiceList, 0, batchSize)
	err = z.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (z zabbixServiceListDo) FindInBatches(result *[]*model.ZabbixServiceList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return z.DO.FindInBatches(result, batchSize, fc)
}

func (z zabbixServiceListDo) Attrs(attrs ...field.AssignExpr) IZabbixServiceListDo {
	return z.withDO(z.DO.Attrs(attrs...))
}

func (z zabbixServiceListDo) Assign(attrs ...field.AssignExpr) IZabbixServiceListDo {
	return z.withDO(z.DO.Assign(attrs...))
}

func (z zabbixServiceListDo) Joins(fields ...field.RelationField) IZabbixServiceListDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Joins(_f))
	}
	return &z
}

func (z zabbixServiceListDo) Preload(fields ...field.RelationField) IZabbixServiceListDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Preload(_f))
	}
	return &z
}

func (z zabbixServiceListDo) FirstOrInit() (*model.ZabbixServiceList, error) {
	if result, err := z.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZabbixServiceList), nil
	}
}

func (z zabbixServiceListDo) FirstOrCreate() (*model.ZabbixServiceList, error) {
	if result, err := z.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZabbixServiceList), nil
	}
}

func (z zabbixServiceListDo) FindByPage(offset int, limit int) (result []*model.ZabbixServiceList, count int64, err error) {
	result, err = z.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = z.Offset(-1).Limit(-1).Count()
	return
}

func (z zabbixServiceListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = z.Count()
	if err != nil {
		return
	}

	err = z.Offset(offset).Limit(limit).Scan(result)
	return
}

func (z zabbixServiceListDo) Scan(result interface{}) (err error) {
	return z.DO.Scan(result)
}

func (z zabbixServiceListDo) Delete(models ...*model.ZabbixServiceList) (result gen.ResultInfo, err error) {
	return z.DO.Delete(models)
}

func (z *zabbixServiceListDo) withDO(do gen.Dao) *zabbixServiceListDo {
	z.DO = *do.(*gen.DO)
	return z
}
